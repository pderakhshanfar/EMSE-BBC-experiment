/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:42:34 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(2140);
      Integer integer1 = new Integer((-1037));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, integer1, integer1);
      MultiKey<String> multiKey1 = new MultiKey<String>("<)f", "<)f", "<)f", "<)f");
      Object object0 = new Object();
      Integer integer2 = new Integer(2140);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, multiKey1, object0, multiKey1, integer2);
      Object object1 = multiKey2.getKey(3);
      boolean boolean0 = multiKey1.equals(object1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("tW;enNg/|", "tW;enNg/|", "tW;enNg/|", "tW;enNg/|");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, true);
      int int0 = multiKey2.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 3);
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, (Integer) null);
      multiKeyArray0[0] = multiKey0;
      Integer integer1 = new Integer((-1336));
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(424);
      multiKey0.toString();
      Integer integer4 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, integer1, integer2, integer3, integer4);
      multiKeyArray0[1] = multiKey1;
      Integer integer5 = new Integer((-783));
      Integer integer6 = new Integer((-1336));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer5, integer6);
      multiKeyArray0[2] = multiKey2;
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      MultiKey<Integer> multiKey4 = multiKey3.getKey(0);
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[0, 0, null]", string0);
      
      multiKey2.toString();
      MultiKey<String> multiKey5 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null");
      multiKey5.hashCode();
      multiKey0.toString();
      MultiKey<Object> multiKey6 = new MultiKey<Object>(multiKeyArray0);
      multiKey6.toString();
      MultiKey<String> multiKey7 = new MultiKey<String>("5m", "6nMYqaMAV", "MultiKey[0, 0, null]", "");
      boolean boolean0 = multiKey6.equals(multiKey7);
      boolean boolean1 = multiKey6.equals(multiKey3);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("tW;enNg/|", "tW;enNg/|", "tW;enNg/|");
      MultiKey<String> multiKey1 = new MultiKey<String>("Bc6?o,%hs<", (String) null, "5m", "Bc6?o,%hs<");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "tW;enNg/|";
      objectArray0[1] = (Object) null;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      multiKey2.equals(multiKey3);
      multiKey0.toString();
      Object[] objectArray1 = multiKey2.getKeys();
      assertEquals(2, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.toString();
      multiKey0.getKeys();
      // Undeclared exception!
      try { 
        multiKey0.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(1);
      Integer integer3 = new Integer((-2016));
      Integer integer4 = new Integer((-2016));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer3, integer4);
      Integer integer5 = new Integer(1);
      Integer integer6 = new Integer((-1745));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer5, (Integer) null, integer6);
      multiKey1.getKey(1);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-3447));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3447
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(233);
      MultiKey<Object> multiKey0 = new MultiKey<Object>("MultiKey", "MultiKey", integer0, "MultiKey");
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.getKey(0);
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, true);
      multiKey2.equals(integer0);
      MultiKey<String> multiKey3 = null;
      try {
        multiKey3 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 5);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[0] = multiKey0;
      Integer integer1 = new Integer((-1));
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer1, object0, integer0, object0);
      multiKeyArray0[1] = multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>("mN_8<zi208eJ", multiKey0, multiKey1, "mN_8<zi208eJ", multiKey1);
      multiKeyArray0[2] = multiKey2;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = object0;
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null, null, null, null]", string0);
      
      objectArray0[1] = (Object) integer1;
      multiKey1.toString();
      objectArray0[2] = (Object) multiKey1;
      objectArray0[3] = (Object) integer1;
      objectArray0[4] = (Object) integer1;
      objectArray0[5] = (Object) multiKey1;
      objectArray0[6] = (Object) multiKey2;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      multiKeyArray0[3] = multiKey3;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[4] = multiKey4;
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      MultiKey multiKey6 = (MultiKey)multiKey5.getKey(0);
      MultiKey<Object> multiKey7 = new MultiKey<Object>("mN_8<zi208eJ", "mN_8<zi208eJ", "mN_8<zi208eJ", integer0, multiKey6);
      assertEquals(5, multiKey6.size());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "MultiKey[-1, java.lang.Object@16148a24, -1, java.lang.Object@16148a24]";
      stringArray0[1] = "Bp^AIFSA?u";
      stringArray0[2] = "mN_8<zi208eJ";
      stringArray0[3] = "mN_8<zi208eJ";
      stringArray0[4] = "Tf,P~]o}JCqKh$*x";
      MultiKey<String> multiKey8 = new MultiKey<String>(stringArray0, false);
      boolean boolean0 = multiKey8.equals(multiKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "", "MultiKey[]", "");
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, multiKey1);
      multiKey2.toString();
      int int0 = multiKey2.size();
      multiKey0.size();
      multiKey2.getKeys();
      multiKey0.size();
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(2);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      multiKey2.toString();
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      int int1 = multiKey3.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      multiKey0.toString();
      multiKey0.getKey(2);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", multiKey0);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-3674));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3674
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer((-576));
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1);
      boolean boolean0 = multiKey2.equals("MultiKey[java.lang.Object@6798030d, java.lang.Object@6798030d]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, ]", string0);
      
      int int0 = multiKey0.size();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "MultiKey[, ]";
      objectArray0[1] = (Object) "MultiKey[, ]";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = (Object) "";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      int int1 = multiKey1.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 5);
      multiKeyArray0[0] = multiKey0;
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-1));
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, multiKey0);
      multiKeyArray0[1] = multiKey2;
      multiKeyArray0[2] = multiKey0;
      Object object0 = new Object();
      MultiKey<String> multiKey3 = new MultiKey<String>((String) null, (String) null, "MultiKey[]", "MultiKey[]");
      MultiKey<Object> multiKey4 = new MultiKey<Object>(object0, object0, multiKey3, (Object) null);
      multiKeyArray0[3] = multiKey4;
      multiKeyArray0[4] = multiKey0;
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey5.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "The array of keys must not be null";
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "The array of keys must not be null";
      objectArray0[1] = (Object) "The array of keys must not be null";
      objectArray0[2] = (Object) "The array of keys must not be null";
      objectArray0[3] = (Object) "The array of keys must not be null";
      objectArray0[4] = (Object) "The array of keys must not be null";
      objectArray0[5] = (Object) "The array of keys must not be null";
      objectArray0[6] = (Object) "The array of keys must not be null";
      objectArray0[7] = (Object) "The array of keys must not be null";
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      Object object0 = null;
      MultiKey<String> multiKey1 = new MultiKey<String>("", "<)rMgZ9MK", (String) null);
      // Undeclared exception!
      try { 
        multiKey1.getKey(3313);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3313
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer(2386);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, integer0, integer1);
      Integer integer2 = multiKey0.getKey(0);
      objectArray0[0] = (Object) integer2;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, integer1, integer1);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
