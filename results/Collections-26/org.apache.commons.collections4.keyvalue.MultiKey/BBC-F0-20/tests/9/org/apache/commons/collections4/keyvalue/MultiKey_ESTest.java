/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:44:23 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("Lfra", "Lfra", "Lfra");
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[6];
      Object object2 = new Object();
      objectArray0[0] = object2;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) "Lfra";
      objectArray0[3] = object1;
      Object object3 = new Object();
      objectArray0[4] = object3;
      objectArray0[5] = object1;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      Object object4 = multiKey1.getKey(1);
      boolean boolean0 = multiKey0.equals(object4);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(1);
      Integer integer3 = new Integer(3);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      Integer integer4 = new Integer(107);
      multiKey0.equals(integer4);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, false);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integerArray0);
      multiKey2.toString();
      multiKey2.size();
      multiKey0.toString();
      multiKey1.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[]", "MultiKey[]", ">v4ED~i8?", ">v4ED~i8?", "");
      multiKey3.equals("");
      multiKey1.hashCode();
      Object[] objectArray0 = multiKey2.getKeys();
      assertNotSame(integerArray0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = true;
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer1, integer0);
      Integer integer2 = new Integer(0);
      multiKey0.toString();
      multiKey0.equals(integer2);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer3 = multiKey0.getKey(0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) integer3;
      objectArray0[1] = (Object) "MultiKey[0, 0, 0, 0, 0]";
      objectArray0[2] = (Object) integer1;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[0, MultiKey[0, 0, 0, 0, 0], 0]", string0);
      
      multiKey1.equals(integer2);
      multiKey1.getKey(0);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0);
      multiKey2.getKey(0);
      MultiKey<String> multiKey3 = new MultiKey<String>("#Pjx-AU#.s", (String) null, "MultiKey[0, 0, 0, 0, 0]");
      boolean boolean0 = multiKey3.equals(integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, "", "");
      multiKey0.toString();
      multiKey0.hashCode();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "MultiKey[null, null, , ]";
      stringArray0[1] = "";
      stringArray0[2] = "MultiKey[null, null, , ]";
      stringArray0[3] = "";
      stringArray0[4] = "MultiKey[null, null, , ]";
      stringArray0[5] = "";
      stringArray0[6] = "MultiKey[null, null, , ]";
      stringArray0[7] = "MultiKey[null, null, , ]";
      stringArray0[8] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      String[] stringArray1 = multiKey1.getKeys();
      assertEquals(9, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 3);
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "$h829xU'U^.Ip");
      multiKey0.toString();
      multiKeyArray0[1] = multiKey1;
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("!G-`", "", "");
      multiKey1.toString();
      multiKeyArray0[2] = multiKey2;
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      multiKey3.hashCode();
      Integer integer0 = new Integer(2497);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer1);
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[2497, 0]", string0);
      
      multiKey4.hashCode();
      MultiKey<Object> multiKey5 = new MultiKey<Object>("}t^dF=`eAPC5jr.m", multiKey2);
      boolean boolean0 = multiKey4.equals(multiKey5);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(959);
      Integer integer1 = new Integer(1901);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1);
      int int0 = multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "");
      multiKey1.toString();
      multiKey1.hashCode();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) integer1;
      objectArray0[1] = (Object) "MultiKey[, , , ]";
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) integer0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      Object object2 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>("MultiKey[, , , ]", object2, object2);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey3);
      int int1 = multiKey4.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "i%lI<]p;z;y}tjG";
      stringArray0[2] = "N>RJk6m!v*YDZ";
      stringArray0[3] = "Nard4_,B[QDX";
      stringArray0[4] = "MultiKey";
      stringArray0[5] = ".";
      stringArray0[6] = "JhgM3zEgno^F.nMlT";
      stringArray0[7] = "m`";
      stringArray0[8] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      MultiKey<String> multiKey2 = new MultiKey<String>("m`", "", "rb)m1)jaRDl*6", "", "");
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey2);
      multiKey3.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "Lfra", "", "");
      // Undeclared exception!
      try { 
        multiKey0.getKey(816);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 816
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      multiKey0.getKey(2);
      objectArray0[1] = (Object) "";
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", multiKey0, object0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey2.getKey(2);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, "", (Object) null);
      Object object1 = multiKey3.getKey(2);
      assertNull(object1);
      
      objectArray0[2] = null;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0, false);
      multiKey4.size();
      Integer[] integerArray0 = new Integer[6];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1837));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-2802));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(837);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integerArray0, false);
      String string0 = multiKey5.toString();
      assertEquals("MultiKey[0, 0, -1837, -1837, -2802, 837]", string0);
  }
}
