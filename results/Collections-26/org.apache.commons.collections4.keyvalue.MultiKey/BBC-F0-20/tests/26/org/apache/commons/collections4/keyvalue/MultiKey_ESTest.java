/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:53:14 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.getKey(2);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey0, multiKey0, "");
      Object object0 = multiKey2.getKey(2);
      boolean boolean0 = multiKey0.equals(object0);
      assertFalse(multiKey0.equals((Object)multiKey1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("vc9pzi~dvDVoD", (String) null, "vc9pzi~dvDVoD", "org.apache.commons.collections4.keyvalue.MultiKey");
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", object1, multiKey1);
      multiKey1.size();
      Object[] objectArray1 = multiKey1.getKeys();
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 2);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "s^u =h";
      stringArray0[1] = "The array of keys must not be null";
      stringArray0[2] = "Uz2i)&Mdf'MVl2f";
      stringArray0[3] = "K0dG!s7hHc";
      stringArray0[5] = "p]";
      stringArray0[7] = "-cq9Fy_+U#/:6";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKeyArray0[1] = multiKey1;
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      Object object0 = multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, multiKey0);
      Object object1 = new Object();
      MultiKey<String> multiKey4 = new MultiKey<String>("Uz2i)&Mdf'MVl2f", "", ">@ ", (String) null);
      MultiKey<Object> multiKey5 = new MultiKey<Object>((Object[]) stringArray0, false);
      multiKey1.equals(multiKey5);
      assertFalse(multiKey1.equals((Object)multiKey4));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", ".]-F", ".]-F", (String) null);
      MultiKey<String> multiKey1 = new MultiKey<String>("_Mt-f9", "", (String) null, "");
      MultiKey<MultiKey<String>> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null, "}O-z@}!", multiKey0, int0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      int int1 = multiKey1.hashCode();
      //  // Unstable assertion: assertTrue(int1 == int0);
      
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[null, null, }O-z@}!, MultiKey[0], 0]", "MultiKey[null, null, }O-z@}!, MultiKey[0], 0]", "", "");
      multiKey2.toString();
      String string0 = multiKey2.toString();
      //  // Unstable assertion: assertEquals("MultiKey[MultiKey[null, null, }O-z@}!, MultiKey[0], 0], MultiKey[null, null, }O-z@}!, MultiKey[0], 0], , ]", string0);
      
      int int2 = multiKey2.hashCode();
      //  // Unstable assertion: assertFalse(int2 == int0);
      
      Object object0 = new Object();
      multiKey0.equals(object0);
      multiKey2.equals("MultiKey[null, null, }O-z@}!, MultiKey[0], 0]");
      Object[] objectArray0 = multiKey1.getKeys();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      multiKey3.getKey(0);
      boolean boolean0 = multiKey0.equals((Object) null);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, multiKey1);
      multiKey2.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey0);
      multiKey3.toString();
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0, false);
      multiKey4.toString();
      multiKey4.toString();
      multiKey4.toString();
      multiKey4.hashCode();
      multiKey4.hashCode();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray0);
      multiKey5.getKeys();
      String string0 = multiKey5.toString();
      assertEquals("MultiKey[]", string0);
      
      boolean boolean0 = multiKey1.equals("MultiKey[0, 0]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "O&u=";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[5] = "*{({rA!5s";
      stringArray0[6] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      String[] stringArray1 = multiKey0.getKeys();
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1);
      multiKey0.toString();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "MultiKey[0, 0, 0]";
      multiKey0.toString();
      stringArray0[1] = "";
      stringArray0[2] = "The array of keys must not be null";
      stringArray0[3] = "MultiKey[0, 0, 0]";
      stringArray0[4] = "MultiKey[0, 0, 0]";
      stringArray0[5] = "MultiKey[0, 0, 0]";
      stringArray0[6] = "MultiKey[0, 0, 0]";
      stringArray0[7] = "MultiKey[0, 0, 0]";
      stringArray0[8] = "MultiKey[0, 0, 0]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1);
      multiKey2.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(1809);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1809);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      String string0 = "";
      MultiKey<String> multiKey1 = new MultiKey<String>("h8NkLoZh-", "", "", "", "h8NkLoZh-");
      multiKey1.toString();
      multiKey1.size();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integerArray0);
      // Undeclared exception!
      try { 
        multiKey2.getKey((int) integerArray0[1]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1809
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("vc9pzi~dvDVoD", (String) null, "vc9pzi~dvDVoD", "org.apache.commons.collections4.keyvalue.MultiKey");
      boolean boolean0 = multiKey0.equals("org.apache.commons.collections4.keyvalue.MultiKey");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-2159));
      int int0 = 0;
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer2, integer1);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) integer2;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) integer2;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Object object1 = multiKey1.getKey(2);
      Object object2 = new Object();
      multiKey0.toString();
      multiKey1.toString();
      Object object3 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, object1, object1, object2, object3);
      multiKey2.toString();
      multiKey1.toString();
      multiKey0.equals(multiKey2);
      multiKey1.toString();
      int int1 = (-234);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-234));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -234
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 2);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "s^u =h";
      stringArray0[1] = "The array of keys must not be null";
      stringArray0[2] = "Uz2i)&Mdf'MVl2f";
      stringArray0[3] = "K0dG!s7hHc";
      stringArray0[4] = "";
      stringArray0[5] = "p]";
      stringArray0[6] = "E3RG5ee %I7-=bOY";
      stringArray0[7] = "-cq9Fy_+U#/:6";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKeyArray0[1] = multiKey1;
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      Object object0 = multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, multiKey0);
      Object object1 = new Object();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>((Integer) null, integer0, integer1);
      Object object2 = new Object();
      MultiKey<Object> multiKey5 = new MultiKey<Object>((Object[]) stringArray0, true);
      MultiKey<Object> multiKey6 = new MultiKey<Object>("p]", multiKey4, "The array of keys must not be null", object2, multiKey5);
      multiKey6.getKey(0);
      MultiKey<Object> multiKey7 = new MultiKey<Object>("s^u =h", object1, "p]");
      MultiKey<MultiKey<Object>> multiKey8 = new MultiKey<MultiKey<Object>>(multiKey3, multiKey3, multiKey3, multiKey7);
      assertEquals(4, multiKey8.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "G5!{4qN><4a8X9{A";
      MultiKey<String> multiKey0 = new MultiKey<String>("G5!{4qN><4a8X9{A", "", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      int int0 = 1;
      multiKey0.getKey(1);
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 9);
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("\"o:0U", "", "\"o:0U", "");
      multiKeyArray0[1] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("\"o:0U", "", "", "");
      multiKeyArray0[2] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("", "", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKeyArray0[3] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("", "", "", "");
      multiKeyArray0[4] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "{)JLP", "The array of keys must not be null", "");
      multiKeyArray0[5] = multiKey5;
      MultiKey<String> multiKey6 = new MultiKey<String>(")A\"Yt% a", "", "X*4n+vIj'/-`2dwt3?", "{)JLP");
      multiKeyArray0[6] = multiKey6;
      MultiKey<String> multiKey7 = new MultiKey<String>("", "(H&r1", "", "");
      multiKeyArray0[7] = multiKey7;
      MultiKey<String> multiKey8 = new MultiKey<String>("$O#", "", (String) null, "");
      multiKeyArray0[8] = multiKey8;
      MultiKey<MultiKey<String>> multiKey9 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      int int0 = 0;
      MultiKey<String> multiKey10 = multiKey9.getKey(0);
      objectArray0[0] = (Object) multiKey10;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "0#=S%_7";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "{)JLP";
      stringArray0[6] = "0#=S%_7";
      MultiKey<String> multiKey11 = new MultiKey<String>(stringArray0, false);
      multiKey11.getKey(0);
      MultiKey<Object> multiKey12 = new MultiKey<Object>("0#=S%_7", multiKey10, "0#=S%_7", "");
      multiKey12.getKey(0);
      objectArray0[1] = (Object) "0#=S%_7";
      Object object0 = new Object();
      objectArray0[2] = object0;
      MultiKey<Integer>[] multiKeyArray1 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 9);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-2496));
      MultiKey<Integer> multiKey13 = new MultiKey<Integer>(integer0, integer1, integer0, integer2);
      multiKeyArray1[0] = multiKey13;
      Integer integer3 = new Integer(5);
      Integer integer4 = new Integer((-1));
      Integer integer5 = new Integer(5);
      MultiKey<Integer> multiKey14 = new MultiKey<Integer>(integer3, integer0, integer4, integer5);
      multiKeyArray1[1] = multiKey14;
      Integer integer6 = new Integer(5);
      Integer integer7 = new Integer(1844);
      MultiKey<Integer> multiKey15 = new MultiKey<Integer>(integer2, integer6, integer7, (Integer) null);
      multiKeyArray1[2] = multiKey15;
      Integer integer8 = new Integer(0);
      Integer integer9 = new Integer((-265));
      MultiKey<Integer> multiKey16 = new MultiKey<Integer>(integer8, integer3, integer9, integer1);
      multiKeyArray1[3] = multiKey16;
      Integer integer10 = new Integer(1);
      int int1 = 0;
      Integer integer11 = new Integer(0);
      MultiKey<Integer> multiKey17 = new MultiKey<Integer>((Integer) null, integer10, integer10, integer11);
      multiKeyArray1[4] = multiKey17;
      MultiKey<Integer> multiKey18 = new MultiKey<Integer>(integer4, (Integer) null, integer7, integer6);
      multiKeyArray1[5] = multiKey18;
      Integer integer12 = new Integer((-265));
      Integer integer13 = new Integer(1844);
      Integer integer14 = new Integer((-2764));
      Integer integer15 = new Integer((-265));
      MultiKey<Integer> multiKey19 = new MultiKey<Integer>(integer12, integer13, integer14, integer15);
      multiKeyArray1[6] = multiKey19;
      Integer integer16 = new Integer(0);
      MultiKey<Integer> multiKey20 = new MultiKey<Integer>(integer7, integer8, integer8, integer16);
      multiKeyArray1[7] = multiKey20;
      int int2 = 0;
      Integer integer17 = new Integer(0);
      MultiKey<Integer> multiKey21 = new MultiKey<Integer>(integer17, integer15, integer8, (Integer) null);
      multiKeyArray1[8] = multiKey21;
      MultiKey<MultiKey<Integer>> multiKey22 = new MultiKey<MultiKey<Integer>>(multiKeyArray1, false);
      // Undeclared exception!
      try { 
        multiKey22.getKey((-2764));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2764
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
