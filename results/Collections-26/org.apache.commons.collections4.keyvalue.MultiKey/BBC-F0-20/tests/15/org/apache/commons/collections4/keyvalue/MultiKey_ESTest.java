/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:51:45 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null);
      Integer[] integerArray0 = new Integer[0];
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      multiKey1.size();
      String string0 = multiKey0.getKey(0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", (String) null, "", "");
      MultiKey<String> multiKey1 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 8);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey1;
      multiKeyArray0[3] = multiKey1;
      multiKeyArray0[4] = multiKey0;
      multiKeyArray0[5] = multiKey0;
      multiKeyArray0[6] = multiKey1;
      multiKeyArray0[7] = multiKey1;
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      MultiKey<String> multiKey3 = new MultiKey<String>("", "", "", "org.apache.commons.collections4.keyvalue.MultiKey", "6]mE/9eer7nw");
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey0, multiKey1, multiKey0, multiKey1);
      boolean boolean0 = multiKey4.equals((Object) null);
      assertFalse(boolean0);
      
      boolean boolean1 = multiKey2.equals(multiKey1);
      boolean boolean2 = multiKey1.equals(multiKey1);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", (String) null);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      Object[] objectArray1 = multiKey1.getKeys();
      assertEquals(0, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "T8'#c`?M,u`/MOVlULi", "U!I!sN380", "org.apache.commons.collections4.keyvalue.MultiKey", "U!I!sN380");
      multiKey0.size();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "T8'#c`?M,u`/MOVlULi";
      objectArray0[1] = (Object) "org.apache.commons.collections4.keyvalue.MultiKey";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "U!I!sN380";
      objectArray0[4] = (Object) "U!I!sN380";
      objectArray0[5] = (Object) "";
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, "T8'#c`?M,u`/MOVlULi", (Object) null, "", objectArray0[0]);
      multiKey1.toString();
      Object object0 = multiKey1.getKey(0);
      assertNull(object0);
      
      objectArray0[6] = null;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      multiKey2.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[T8'#c`?M,u`/MOVlULi, org.apache.commons.collections4.keyvalue.MultiKey, , U!I!sN380, U!I!sN380, , null]", string0);
      
      multiKey1.hashCode();
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>((Integer) null, integer0, integer0, integer0, integer0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey0, "U!I!sN380", (Object) null, objectArray0[2], multiKey3);
      Object object1 = multiKey4.getKey(0);
      boolean boolean0 = multiKey2.equals(object1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("SFTGb-^l}.8Sk43f7", "SFTGb-^l}.8Sk43f7");
      multiKey0.equals("SFTGb-^l}.8Sk43f7");
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-411));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -411
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "MQV1lmt");
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1);
      multiKey1.toString();
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.getKeys();
      MultiKey<String> multiKey3 = new MultiKey<String>("!lk9XJ_C", (String) null, "!lk9XJ_C", (String) null);
      MultiKey<String> multiKey4 = null;
      try {
        multiKey4 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("_(", "_(", "_(", "_(");
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[_(, _(, _(, _(]", string0);
      
      multiKey0.hashCode();
      multiKey0.size();
      multiKey0.hashCode();
      multiKey0.size();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 8);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKeyArray0[0] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("", "6LKq^mea ", "_(", "", "");
      multiKeyArray0[1] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("", "MultiKey[_(, _(, _(, _(]", "", "MultiKey[_(, _(, _(, _(]", "");
      multiKeyArray0[2] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("", "<;H!kP", "");
      multiKeyArray0[3] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>("", "MultiKey[_(, _(, _(, _(]");
      multiKeyArray0[4] = multiKey5;
      MultiKey<String> multiKey6 = new MultiKey<String>("s<K/7<9\"dP|z", "");
      multiKeyArray0[5] = multiKey6;
      MultiKey<String> multiKey7 = new MultiKey<String>("~o", "6LKq^mea ");
      multiKeyArray0[6] = multiKey7;
      MultiKey<String> multiKey8 = new MultiKey<String>("", "~o", "6LKq^mea ");
      multiKeyArray0[7] = multiKey8;
      MultiKey<MultiKey<String>> multiKey9 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      MultiKey<String> multiKey10 = multiKey9.getKey(4);
      assertSame(multiKey10, multiKey5);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-1319));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1319));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[2]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-1319));
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(439);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(439);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      Object object2 = multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object1, object2, integer0);
      Object object3 = multiKey1.getKey(2);
      objectArray0[1] = object3;
      Object object4 = multiKey1.getKey(2);
      objectArray0[2] = object4;
      // Undeclared exception!
      try { 
        multiKey1.getKey((-142));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -142
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(274);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      String[] stringArray0 = null;
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
