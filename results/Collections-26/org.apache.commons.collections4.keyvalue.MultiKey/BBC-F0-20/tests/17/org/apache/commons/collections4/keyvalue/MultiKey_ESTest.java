/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:52:52 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("T\"|O", (String) null, (String) null);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-2015));
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer((-1027));
      Integer integer4 = new Integer(0);
      Integer integer5 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer3, integer4, integer5);
      multiKey0.toString();
      Integer integer6 = new Integer((-1707));
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[-1027, 0, 0]", "", "MultiKey[-1027, 0, 0]");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, multiKey2, integer2);
      MultiKey<String> multiKey4 = new MultiKey<String>("", "", (String) null, (String) null, "");
      multiKey1.toString();
      MultiKey<String> multiKey5 = new MultiKey<String>("", "", "", "");
      multiKey5.toString();
      MultiKey<MultiKey<String>> multiKey6 = new MultiKey<MultiKey<String>>(multiKey5, multiKey4);
      multiKey6.size();
      multiKey0.toString();
      multiKey3.getKey(2);
      Object[] objectArray1 = multiKey2.getKeys();
      assertNotSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) multiKey0;
      multiKey0.toString();
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Object object0 = multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0[0], objectArray0[0], "");
      multiKey2.toString();
      Object object1 = multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object) null, (Object) null, objectArray0[2], object1);
      multiKey3.getKey(0);
      multiKey0.toString();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey0, object0, (Object) null, (Object) null, "");
      multiKey4.toString();
      multiKey0.hashCode();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-1));
      MultiKey<String> multiKey5 = new MultiKey<String>("MultiKey[MultiKey[, ], MultiKey[, ], ]", (String) null, "MultiKey[, ]", "0r0BQ]%w*vC");
      assertFalse(multiKey5.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals(multiKey0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null, "", (Object) null, "");
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.hashCode();
      int int0 = 1078;
      // Undeclared exception!
      try { 
        multiKey0.getKey(1078);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1078
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) multiKey0;
      multiKey0.toString();
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Object object0 = multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0[0], objectArray0[0], "");
      multiKey2.toString();
      Object object1 = multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey0, "", objectArray0[2], object1);
      Object object2 = multiKey3.getKey(0);
      multiKey0.toString();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey0, object0, object2, (Object) null, "");
      multiKey0.hashCode();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-1));
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer0, integer1, integer0, integer0);
      multiKey5.equals(multiKey1);
      Integer[] integerArray0 = new Integer[4];
      Integer integer2 = new Integer((-1));
      integerArray0[0] = integer2;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integerArray0, false);
      // Undeclared exception!
      try { 
        multiKey6.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(3499);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = (Object) integer0;
      objectArray0[5] = (Object) integer0;
      objectArray0[6] = (Object) integer0;
      objectArray0[7] = (Object) integer0;
      Object object0 = new Object();
      objectArray0[8] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, multiKey0);
      MultiKey<String> multiKey2 = new MultiKey<String>("", "");
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey2, multiKey2, multiKey2);
      multiKey3.toString();
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[, ], MultiKey[, ], MultiKey[, ]]", string0);
      
      multiKey1.getKeys();
      MultiKey<String> multiKey4 = new MultiKey<String>("MultiKey[MultiKey[, ], MultiKey[, ], MultiKey[, ]]", "MultiKey[3499, 3499, 3499, 3499, 3499, 3499, 3499, 3499, java.lang.Object@4ef2f277]", "", "M_DEa`Ngo'1iV*8)@", "jebta");
      multiKey4.getKey(1);
      boolean boolean0 = multiKey2.equals("MultiKey[3499, 3499, 3499, 3499, 3499, 3499, 3499, 3499, java.lang.Object@4ef2f277]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "c6db";
      stringArray0[3] = "w+cn1H9N'$/xV=j";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      int int0 = multiKey0.size();
      multiKey0.toString();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 6);
      Integer integer0 = new Integer(4);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      multiKeyArray0[0] = multiKey1;
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKeyArray0[1] = multiKey2;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0[1], integerArray0[0]);
      multiKeyArray0[2] = multiKey3;
      Integer integer1 = new Integer((int) integerArray0[0]);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0[2], integerArray0[2], (Integer) null, integer1);
      multiKeyArray0[3] = multiKey4;
      Integer integer2 = new Integer(1);
      Integer integer3 = new Integer((int) integerArray0[2]);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integerArray0[0], (Integer) null, integer2, integer3, integer1);
      multiKeyArray0[4] = multiKey5;
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integer1, integer3, integerArray0[1], (Integer) null);
      multiKeyArray0[5] = multiKey6;
      MultiKey<MultiKey<Integer>> multiKey7 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, false);
      int int1 = multiKey7.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "gwt$g*tM~#&M{5g";
      stringArray0[1] = "";
      stringArray0[2] = "x.=Kth";
      stringArray0[3] = "";
      stringArray0[4] = "MultiKey";
      stringArray0[5] = "dXH/";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.getKey(1);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.equals("");
      int int0 = multiKey0.size();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1);
      Integer integer2 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, multiKey0, multiKey0, integer2, object0);
      assertEquals(5, multiKey1.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-1029));
      MultiKey<Object> multiKey0 = new MultiKey<Object>("[]jMG", integer0, integer1, integer0, integer0);
      int int0 = multiKey0.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-2496));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      int int0 = 0;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(619);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      Integer integer5 = multiKey0.getKey(int0);
      assertTrue(integer5.equals((Object)integer1));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(3633);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.size();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey1.equals("MultiKey[0, 3633]");
      multiKey0.size();
      int int0 = (-1);
      Integer integer2 = new Integer((-1));
      Integer[] integerArray0 = new Integer[7];
      Integer integer3 = new Integer(1);
      integerArray0[0] = integer3;
      integerArray0[1] = integer2;
      integerArray0[2] = integer0;
      integerArray0[3] = integer2;
      integerArray0[4] = integer2;
      integerArray0[5] = integer1;
      integerArray0[6] = integer1;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      // Undeclared exception!
      try { 
        multiKey2.getKey(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
