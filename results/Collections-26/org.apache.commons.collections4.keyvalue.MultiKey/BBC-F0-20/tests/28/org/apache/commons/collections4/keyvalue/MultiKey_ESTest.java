/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:53:48 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("7{O", "7{O", "7{O");
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, (MultiKey<Object>) null, (MultiKey<Object>) null, multiKey0);
      Object object0 = multiKey1.getKey(0);
      boolean boolean0 = multiKey0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      boolean boolean0 = multiKey0.equals(multiKey2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = null;
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("v{U,v]", "v{U,v]", "", "1y)");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "1y)";
      objectArray0[2] = (Object) "1y)";
      multiKey0.toString();
      objectArray0[3] = (Object) "MultiKey[v{U,v], v{U,v], , 1y)]";
      objectArray0[4] = (Object) "v{U,v]";
      multiKey0.toString();
      objectArray0[5] = (Object) "MultiKey[v{U,v], v{U,v], , 1y)]";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.getKeys();
      Integer integer0 = new Integer(4);
      Integer integer1 = new Integer(4);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.size();
      multiKey1.hashCode();
      MultiKey<String> multiKey3 = new MultiKey<String>((String) null, "MultiKey", "v{U,v]", "", "v{U,v]");
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[null, MultiKey, v{U,v], , v{U,v]]", string0);
      
      Object object1 = multiKey3.getKey(4);
      assertEquals("v{U,v]", object1);
      
      boolean boolean0 = multiKey1.equals("v{U,v]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 3);
      MultiKey<Object> multiKey0 = new MultiKey<Object>("MultiKey", "", "");
      multiKeyArray0[0] = multiKey0;
      Object object0 = new Object();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      Object object1 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, multiKey1, "MultiKey", object1);
      multiKey1.toString();
      multiKeyArray0[1] = multiKey2;
      multiKey2.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      multiKeyArray0[2] = multiKey3;
      multiKey2.toString();
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey4.size();
      multiKey1.size();
      String[] stringArray1 = multiKey1.getKeys();
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null]", string0);
      
      MultiKey<String> multiKey1 = new MultiKey<String>(" ~wT,0", " ~wT,0", "");
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2785));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-2785));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 7);
      Integer integer5 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray0[2], (Object) null, "pd<", integer5, "pd<");
      multiKeyArray0[0] = multiKey1;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      Integer integer6 = new Integer(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, integer6, integer6, object0, integer5);
      multiKeyArray0[1] = multiKey3;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey1, integer4, integerArray0[3]);
      multiKeyArray0[2] = multiKey4;
      MultiKey<Object> multiKey5 = new MultiKey<Object>(int0, multiKey4);
      multiKeyArray0[3] = multiKey5;
      MultiKey<String> multiKey6 = new MultiKey<String>("pd<", "", "ZrUcC", "", "");
      MultiKey<Object> multiKey7 = new MultiKey<Object>(multiKey6, "ZrUcC");
      multiKeyArray0[4] = multiKey7;
      MultiKey<Object> multiKey8 = new MultiKey<Object>(multiKeyArray0);
      Object object1 = multiKey8.getKey(5);
      assertNull(object1);
      
      Object object2 = new Object();
      MultiKey<Object> multiKey9 = new MultiKey<Object>("ZrUcC", (Object) null, object2);
      multiKeyArray0[5] = multiKey9;
      MultiKey<Object> multiKey10 = new MultiKey<Object>(integer3, multiKey0, object2, integer5);
      multiKeyArray0[6] = multiKey10;
      MultiKey<MultiKey<Object>> multiKey11 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      Integer integer7 = new Integer(1421);
      boolean boolean0 = multiKey11.equals(integer7);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-1139));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2602));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(808);
      integerArray0[4] = integer4;
      int int0 = 116;
      Integer integer5 = new Integer(116);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      multiKey0.equals(integer5);
      multiKey0.size();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(int0, integerArray0[4]);
      multiKey1.toString();
      multiKey1.getKeys();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "MultiKey[116, 808]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      String[] stringArray1 = multiKey2.getKeys();
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "u";
      stringArray0[1] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[2] = "9kMlSUypGPm";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "u", "org.apache.commons.collections4.keyvalue.MultiKey", (Object) null);
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      int int0 = (-466);
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-466));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -466
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "kNL6NQ!bnA=r#N\u0002";
      stringArray0[2] = "";
      stringArray0[3] = "q4QVOsBm!x[";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "H'zn:T";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.size();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-1572));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer0, integer1);
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1572));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1572
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(743);
      Integer integer1 = new Integer(3);
      Integer integer2 = new Integer(1932);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer0, integer1);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer1;
      objectArray0[2] = (Object) integer0;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "d<S[CLlcrv m@";
      stringArray0[1] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      // Undeclared exception!
      try { 
        multiKey1.getKey(743);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 743
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
