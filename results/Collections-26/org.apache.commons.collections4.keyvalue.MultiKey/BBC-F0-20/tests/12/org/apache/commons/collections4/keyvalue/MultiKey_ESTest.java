/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:49:39 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, (Object) null, (Object) null);
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-1617));
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, integer0);
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      Integer integer1 = new Integer((-1617));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer0);
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      Integer integer0 = new Integer((-1));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer0);
      Integer integer1 = new Integer(2071);
      Integer integer2 = new Integer(2071);
      Integer integer3 = new Integer((-194));
      Integer integer4 = new Integer((-1));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer3, integer0, integer4);
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      multiKey3.getKeys();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0, true);
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[, ]", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0);
      multiKey0.toString();
      multiKey0.equals(object0);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, multiKey0);
      multiKey1.toString();
      Object object0 = multiKey1.getKey(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("5", "5");
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(4);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3817));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-3817));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1));
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.getKeys();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, integer3);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey2);
      MultiKey<String> multiKey4 = new MultiKey<String>("5", "", "5", "5", "");
      boolean boolean0 = multiKey3.equals(multiKey4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer[] integerArray0 = null;
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer((-38));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer3, integer2);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer2, integer0, integer1);
      multiKey1.equals(integer3);
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("rO\"y_}49`89x#}", "rO\"y_}49`89x#}", "rO\"y_}49`89x#}", "rO\"y_}49`89x#}", "rO\"y_}49`89x#}");
      multiKey0.hashCode();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("rO\"y_}49`89x#}", "rO\"y_}49`89x#}");
      multiKey1.size();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = (-2946);
      Integer integer0 = new Integer((-2946));
      Integer integer1 = new Integer((-2946));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      // Undeclared exception!
      try { 
        multiKey0.getKey(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "JM(x=liyj", "Kx)cVDKv");
      multiKey0.toString();
      Integer integer0 = new Integer(2698);
      multiKey0.toString();
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer0);
      Object object0 = multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, object0);
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey2, multiKey2);
      Object object1 = multiKey3.getKey(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey2, "The array of keys must not be null", multiKey1, "JM(x=liyj", object1);
      multiKey3.toString();
      multiKey4.toString();
      multiKey4.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey4.toString();
      multiKey3.toString();
      multiKey4.getKeys();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.getKeys();
      Integer integer2 = new Integer((-3666));
      multiKey1.equals(integer2);
      multiKey4.getKeys();
      MultiKey<String> multiKey5 = new MultiKey<String>("mk^", "MultiKey[2698, 0, 2698]", "MultiKey[MultiKey[MultiKey[The array of keys must not be null, JM(x=liyj, Kx)cVDKv], 2698], MultiKey[MultiKey[The array of keys must not be null, JM(x=liyj, Kx)cVDKv], 2698], MultiKey[MultiKey[The array of keys must not be null, JM(x=liyj, Kx)cVDKv], 2698], MultiKey[MultiKey[The array of keys must not be null, JM(x=liyj, Kx)cVDKv], 2698]]", (String) null, "");
      // Undeclared exception!
      try { 
        multiKey5.getKey((-1500));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1500
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(":lva", "org.apache.commons.collections4.keyvalue.MultiKey");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) ":lva";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) "org.apache.commons.collections4.keyvalue.MultiKey";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "";
      objectArray0[8] = (Object) "";
      boolean boolean0 = false;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.getKey(5);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("", multiKey0, "", objectArray0[0], multiKey2);
      MultiKey<Object> multiKey4 = new MultiKey<Object>("", "", "", multiKey3);
      multiKey4.toString();
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKey4, multiKey4, multiKey4);
      int int0 = (-4893);
      // Undeclared exception!
      try { 
        multiKey5.getKey((-4893));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4893
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = null;
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      multiKey0.equals("");
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(1);
      Integer integer3 = new Integer(415);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1, integer2, integer3);
      MultiKey<String> multiKey2 = new MultiKey<String>("", "UBnC=^HF_=*", "");
      Object object0 = multiKey2.getKey(0);
      assertEquals("", object0);
      
      boolean boolean0 = multiKey1.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "", "%oZZ_(6}Xx?bzx", (String) null, "");
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-379));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -379
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
