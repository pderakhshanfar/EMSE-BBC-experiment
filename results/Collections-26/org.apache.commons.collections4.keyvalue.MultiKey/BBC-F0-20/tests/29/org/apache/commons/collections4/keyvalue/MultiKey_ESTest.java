/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:54:45 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, "");
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null, ]", string0);
      
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      Integer integer0 = new Integer(1);
      MultiKey<String> multiKey2 = new MultiKey<String>("", "BxJ4>A[vz'4$|", "v-GuSoMni C@", "");
      boolean boolean0 = multiKey2.equals(multiKey0);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 7);
      multiKeyArray0[0] = multiKey2;
      multiKeyArray0[1] = multiKey2;
      Object object0 = new Object();
      boolean boolean1 = multiKey2.equals(multiKey2);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("_", "-lw3U", "-lw3U", "_");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.size();
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, "_");
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, multiKey2);
      multiKey2.toString();
      multiKey3.getKeys();
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.size();
      multiKey2.getKeys();
      multiKey2.getKeys();
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey3, multiKey3, multiKey2, multiKey3, multiKey2);
      // Undeclared exception!
      try { 
        multiKey4.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer((-3831));
      Integer integer1 = new Integer((-4191));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      Object[] objectArray0 = new Object[2];
      multiKey0.toString();
      multiKey0.toString();
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) multiKey0;
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.toString();
      multiKey1.getKey(0);
      multiKey1.toString();
      multiKey1.toString();
      int int0 = multiKey1.size();
      multiKey1.hashCode();
      String[] stringArray0 = new String[0];
      multiKey0.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      multiKey2.toString();
      multiKey2.getKeys();
      int int1 = multiKey1.hashCode();
      assertFalse(int1 == int0);
      
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      multiKey3.toString();
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[MultiKey[-3831, -4191], MultiKey[-3831, -4191]], MultiKey[MultiKey[-3831, -4191], MultiKey[-3831, -4191]]]", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer0);
      Integer integer2 = multiKey0.getKey(0);
      objectArray0[0] = (Object) integer2;
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, integer2);
      multiKey1.getKey(0);
      objectArray0[1] = null;
      Object object0 = new Object();
      objectArray0[2] = object0;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "mT}A8Q#,Z";
      stringArray0[1] = "9zHcLI$uL=Bl8v/P,?";
      stringArray0[2] = "2#s|x)G>tE?_8";
      stringArray0[3] = "";
      stringArray0[4] = "";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      multiKey2.getKey(4);
      objectArray0[3] = (Object) "";
      Object object1 = new Object();
      objectArray0[4] = object1;
      Object object2 = new Object();
      objectArray0[5] = object2;
      Integer integer3 = multiKey0.getKey(0);
      objectArray0[6] = (Object) integer3;
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1608));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1608
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[1] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.getKeys();
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "j4+W*A'>vgB?L,d");
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, , j4+W*A'>vgB?L,d]", string0);
      
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.getKeys();
      Object object0 = new Object();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "l}U(mi~8RlRA9v";
      stringArray0[1] = "MultiKey[, , j4+W*A'>vgB?L,d]";
      stringArray0[2] = "";
      stringArray0[3] = "j4+W*A'>vgB?L,d";
      stringArray0[4] = "MultiKey[, , j4+W*A'>vgB?L,d]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      Object object1 = multiKey2.getKey(0);
      assertEquals("l}U(mi~8RlRA9v", object1);
      
      MultiKey<Object> multiKey3 = new MultiKey<Object>("l}U(mi~8RlRA9v", object0, "l}U(mi~8RlRA9v", "");
      boolean boolean0 = multiKey3.equals(multiKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0);
      multiKey1.getKeys();
      int int0 = multiKey0.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Integer integer0 = new Integer((-2650));
      MultiKey<Object> multiKey0 = new MultiKey<Object>("%AuaF~/", (Object) null, "", integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "%AuaF~/";
      multiKey0.toString();
      stringArray0[1] = "MultiKey[%AuaF~/, null, , -2650]";
      stringArray0[2] = "";
      stringArray0[3] = "kddq'2t?(Y;H";
      stringArray0[4] = "%AuaF~/";
      stringArray0[5] = "%AuaF~/";
      stringArray0[6] = "MultiKey[%AuaF~/, null, , -2650]";
      stringArray0[7] = "%AuaF~/";
      stringArray0[8] = "MultiKey[%AuaF~/, null, , -2650]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      Integer integer1 = new Integer((-2650));
      multiKey0.toString();
      Integer integer2 = new Integer((-2650));
      Integer integer3 = new Integer((-2650));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer0, integer2, integer3, integer0);
      multiKey2.equals("%AuaF~/");
      multiKey0.size();
      // Undeclared exception!
      try { 
        multiKey0.getKey(9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "50Q@j7yBwf%EQEE_";
      stringArray0[1] = "";
      stringArray0[2] = "r8=fX>J";
      stringArray0[3] = "";
      stringArray0[4] = "kuqqT {.";
      stringArray0[5] = "7AOX([";
      stringArray0[6] = "";
      stringArray0[7] = "_H(";
      stringArray0[8] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      Object object0 = new Object();
      Object object1 = new Object();
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, object0, object1, multiKey1);
      assertEquals(4, multiKey2.size());
  }
}
