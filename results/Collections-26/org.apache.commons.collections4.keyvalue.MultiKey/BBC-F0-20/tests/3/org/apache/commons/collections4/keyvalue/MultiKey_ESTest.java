/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:42:36 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "");
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", (Object) null, "");
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(9);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(2);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer2, integer3);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[0, 9, 0, 2]", string0);
      
      multiKey1.equals("MultiKey[0, 9, 0, 2]");
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey2, multiKey2, multiKey2, multiKey2);
      MultiKey<Integer> multiKey4 = multiKey3.getKey(0);
      Object object0 = multiKey1.getKey(0);
      assertNotNull(object0);
      
      boolean boolean0 = multiKey0.equals(integer2);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 3);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray0);
      multiKeyArray0[0] = multiKey5;
      Integer integer4 = new Integer((-1391));
      Integer integer5 = new Integer((-1535));
      Integer integer6 = new Integer(13);
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integer6, integer2);
      Object object1 = new Object();
      boolean boolean1 = multiKey2.equals(multiKey4);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(13);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integer0);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "8B";
      String string1 = "^";
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "^";
      Integer integer0 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null);
      multiKey0.getKey(1);
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "^";
      objectArray0[3] = (Object) "8B";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = null;
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, object1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      multiKey1.getKeys();
      multiKey1.toString();
      multiKey0.equals((Object) null);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.toString();
      multiKey2.toString();
      Object object2 = new Object();
      multiKey2.equals(object2);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.equals(multiKey1);
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      // Undeclared exception!
      try { 
        multiKey3.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      int int0 = multiKey0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(2573);
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2573);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      Integer integer4 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer4, "21w");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey0.getKeys();
      multiKey1.getKeys();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[0, 21w]", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, "");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 9);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "");
      multiKeyArray0[0] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("7+;'j5>j}/Uby", "M", "");
      multiKeyArray0[1] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("", "7+;'j5>j}/Uby", "");
      multiKeyArray0[2] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("7+;'j5>j}/Uby", "M", "7+;'j5>j}/Uby");
      multiKeyArray0[3] = multiKey4;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "(E4MMFQd=YXpPu";
      stringArray0[4] = "";
      stringArray0[5] = "M";
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray0);
      multiKeyArray0[4] = multiKey5;
      MultiKey<String> multiKey6 = new MultiKey<String>("M", "", "", "(E4MMFQd=YXpPu", "");
      multiKeyArray0[5] = multiKey6;
      MultiKey<String> multiKey7 = new MultiKey<String>(stringArray0);
      multiKeyArray0[6] = multiKey7;
      MultiKey<String> multiKey8 = new MultiKey<String>("", "org.apache.commons.collections4.keyvalue.MultiKey", "(E4MMFQd=YXpPu", "");
      multiKeyArray0[7] = multiKey8;
      MultiKey<String> multiKey9 = new MultiKey<String>("", "MultiKey", "jC!+s*&]Fx4EXP \"", "");
      multiKeyArray0[8] = multiKey9;
      MultiKey<MultiKey<String>> multiKey10 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      String string0 = multiKey10.toString();
      assertEquals("MultiKey[MultiKey[, , , ], MultiKey[7+;'j5>j}/Uby, M, ], MultiKey[, 7+;'j5>j}/Uby, ], MultiKey[7+;'j5>j}/Uby, M, 7+;'j5>j}/Uby], MultiKey[, , , (E4MMFQd=YXpPu, , M], MultiKey[M, , , (E4MMFQd=YXpPu, ], MultiKey[, , , (E4MMFQd=YXpPu, , M], MultiKey[, org.apache.commons.collections4.keyvalue.MultiKey, (E4MMFQd=YXpPu, ], MultiKey[, MultiKey, jC!+s*&]Fx4EXP \", ]]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "@Ex')kM-Y";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String string0 = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "aid[i%%MlG}X>gX";
      stringArray0[6] = "u-kgu|U7+~O@H ";
      stringArray0[7] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, multiKey0, "", "u-kgu|U7+~O@H ", object1);
      multiKey0.toString();
      multiKey1.size();
      multiKey1.hashCode();
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[@Ex')kM-Y, , , , , aid[i%%MlG}X>gX, u-kgu|U7+~O@H , ]", "", "MultiKey[@Ex')kM-Y, , , , , aid[i%%MlG}X>gX, u-kgu|U7+~O@H , ]", "", "u-kgu|U7+~O@H ");
      // Undeclared exception!
      try { 
        multiKey2.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object2, object0, multiKey0);
      Object object3 = multiKey1.getKey(0);
      String string0 = "d]`9]%gneM5u[Q";
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "d]`9]%gneM5u[Q");
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object3, object3, multiKey2, object0);
      int int0 = 5;
      // Undeclared exception!
      try { 
        multiKey3.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("O,Tl%tf%%PM;PCO", "O,Tl%tf%%PM;PCO", (String) null);
      multiKey0.toString();
      multiKey0.size();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "O,Tl%tf%%PM;PCO";
      objectArray0[1] = (Object) "O,Tl%tf%%PM;PCO";
      objectArray0[2] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      // Undeclared exception!
      try { 
        multiKey1.getKey(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = false;
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, integer2, integer3);
      int int0 = multiKey0.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 3);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[0] = multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, multiKey2, (Object) null, multiKey0);
      multiKeyArray0[1] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("", "", "", "", "");
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey3, multiKey4, "");
      multiKeyArray0[2] = multiKey5;
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      boolean boolean0 = multiKey6.equals(multiKey2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1));
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer(0);
      Integer integer5 = new Integer((-1024));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer2, integer3, integer4, integer5);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey1, multiKey0, multiKey1);
      assertEquals(4, multiKey2.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
