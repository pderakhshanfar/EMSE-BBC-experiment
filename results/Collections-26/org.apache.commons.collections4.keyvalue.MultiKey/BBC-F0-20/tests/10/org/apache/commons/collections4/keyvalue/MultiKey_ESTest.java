/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:46:27 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer0, integer2);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, multiKey0, integer1, integer0);
      multiKey1.toString();
      multiKey1.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[0, MultiKey[0, -1, 0, 0, 0], -1, 0]", string0);
      
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("m{d$um/MMd", "m{d$um/MMd", (String) null, "m{d$um/MMd", "m{d$um/MMd");
      multiKey0.toString();
      multiKey0.size();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Object[] objectArray1 = multiKey1.getKeys();
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer0, integer2);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, multiKey0, integer1, integer0);
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.toString();
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer2, integer2);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "MultiKey[MultiKey[0, MultiKey[0, -1, 0, 0, 0], -1, 0], MultiKey[0, MultiKey[0, -1, 0, 0, 0], -1, 0], MultiKey[0, MultiKey[0, -1, 0, 0, 0], -1, 0]]";
      stringArray0[1] = "MultiKey[MultiKey[0, MultiKey[0, -1, 0, 0, 0], -1, 0], MultiKey[0, MultiKey[0, -1, 0, 0, 0], -1, 0], MultiKey[0, MultiKey[0, -1, 0, 0, 0], -1, 0]]";
      stringArray0[2] = "MultiKey[MultiKey[0, MultiKey[0, -1, 0, 0, 0], -1, 0], MultiKey[0, MultiKey[0, -1, 0, 0, 0], -1, 0], MultiKey[0, MultiKey[0, -1, 0, 0, 0], -1, 0]]";
      stringArray0[3] = "MultiKey[MultiKey[0, MultiKey[0, -1, 0, 0, 0], -1, 0], MultiKey[0, MultiKey[0, -1, 0, 0, 0], -1, 0], MultiKey[0, MultiKey[0, -1, 0, 0, 0], -1, 0]]";
      stringArray0[4] = "MultiKey[MultiKey[0, MultiKey[0, -1, 0, 0, 0], -1, 0], MultiKey[0, MultiKey[0, -1, 0, 0, 0], -1, 0], MultiKey[0, MultiKey[0, -1, 0, 0, 0], -1, 0]]";
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0);
      multiKey4.toString();
      MultiKey<Object> multiKey5 = new MultiKey<Object>(stringArray0);
      multiKey4.equals(multiKey5);
      int int0 = multiKey4.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      int int0 = multiKey0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "9!_AuH_{mJc@we_5";
      stringArray0[1] = "|;Y06GD=d1";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.equals("|;Y06GD=d1");
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, "|;Y06GD=d1", "9!_AuH_{mJc@we_5", "|;Y06GD=d1");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.equals(multiKey0);
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.hashCode();
      Integer integer0 = new Integer((-2491));
      Integer integer1 = new Integer((-505));
      Integer integer2 = new Integer((-1));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer1, integer2, (Integer) null);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null");
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 5);
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer0);
      multiKeyArray0[0] = multiKey1;
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey2.getKey(4);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object) null, multiKey0);
      multiKeyArray0[1] = multiKey3;
      Object object0 = new Object();
      MultiKey<Object> multiKey4 = new MultiKey<Object>("The array of keys must not be null", "The array of keys must not be null", object0);
      multiKeyArray0[2] = multiKey4;
      Integer integer1 = new Integer(4);
      Integer integer2 = new Integer(4);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer1, integer2, integer0, integer2, integer2);
      Object object1 = multiKey5.getKey(0);
      Integer integer3 = new Integer(0);
      MultiKey<Object> multiKey6 = new MultiKey<Object>(object1, integer3, (Object) null, object0);
      MultiKey<Object> multiKey7 = new MultiKey<Object>(multiKey6, multiKey5);
      multiKeyArray0[3] = multiKey7;
      Integer integer4 = new Integer(1442);
      Integer integer5 = new Integer(1442);
      Integer integer6 = new Integer(4);
      MultiKey<Integer> multiKey8 = new MultiKey<Integer>(integer4, integer4, integer5, integer6);
      MultiKey<Object> multiKey9 = new MultiKey<Object>(multiKey7, object1, (Object) null, multiKey1, multiKey8);
      multiKeyArray0[4] = multiKey9;
      MultiKey<MultiKey<Object>> multiKey10 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      // Undeclared exception!
      try { 
        multiKey10.getKey(2393);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2393
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "MultiKey";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "P$Z05";
      stringArray0[5] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.getKey(0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-2342));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1, integer0);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) stringArray0, false);
      multiKey2.getKey(0);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-2342));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2342
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("a", "a");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer((-207));
      Integer integer1 = new Integer((-207));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1);
      Object object0 = multiKey1.getKey(0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "MultiKey[a, a]";
      objectArray0[1] = (Object) "MultiKey[a, a]";
      objectArray0[2] = (Object) multiKey1;
      objectArray0[3] = (Object) multiKey1;
      objectArray0[4] = (Object) integer0;
      objectArray0[5] = (Object) "MultiKey[a, a]";
      objectArray0[6] = (Object) "";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("", object0, "MultiKey[a, a]", multiKey2, (Object) null);
      multiKey3.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("jV`C_E{9H$P5D@JfaXl", "zGpDdTF", "zGpDdTF", "");
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer0);
      multiKey1.toString();
      multiKey1.size();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) multiKey1;
      objectArray0[1] = (Object) "jV`C_E{9H$P5D@JfaXl";
      multiKey0.toString();
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) integer0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[0, 0, 0], jV`C_E{9H$P5D@JfaXl, MultiKey[jV`C_E{9H$P5D@JfaXl, zGpDdTF, zGpDdTF, ], 0]", string0);
      
      multiKey2.size();
      boolean boolean0 = multiKey0.equals("MultiKey[MultiKey[0, 0, 0], jV`C_E{9H$P5D@JfaXl, MultiKey[jV`C_E{9H$P5D@JfaXl, zGpDdTF, zGpDdTF, ], 0]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer((-2393));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) integer0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      Object[] objectArray1 = multiKey1.getKeys();
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("B-L", "", "c(CNawr)#ue:{0Lb", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(3202);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3202
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
