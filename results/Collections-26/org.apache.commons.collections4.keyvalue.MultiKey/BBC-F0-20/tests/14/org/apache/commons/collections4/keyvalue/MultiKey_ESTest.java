/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:51:08 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("0/@8", "0/@8", "0/@8", "0/@8", "0/@8");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "0/@8";
      objectArray0[1] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Object object0 = new Object();
      boolean boolean0 = multiKey1.equals(object0);
      boolean boolean1 = multiKey0.equals(objectArray0[1]);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(3565);
      Integer integer1 = new Integer(3565);
      Integer integer2 = new Integer(585);
      Integer integer3 = new Integer(10);
      Integer integer4 = new Integer(10);
      Integer integer5 = new Integer(10);
      Integer integer6 = new Integer(585);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer1, integer4, integer5, integer6, integer0);
      MultiKey<String> multiKey1 = new MultiKey<String>(",/3s", "", "qY>X");
      multiKey0.toString();
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1);
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, "", integer1, object1);
      boolean boolean0 = multiKey2.equals(integer0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[3565, 10, 10, 585, 3565]", string0);
      
      multiKey0.size();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 8);
      multiKeyArray0[0] = multiKey3;
      multiKeyArray0[1] = multiKey3;
      multiKeyArray0[2] = multiKey3;
      multiKeyArray0[3] = multiKey3;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[4] = multiKey4;
      multiKeyArray0[5] = multiKey3;
      multiKeyArray0[6] = multiKey3;
      multiKeyArray0[7] = multiKey3;
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey5.toString();
      MultiKey<Object> multiKey6 = new MultiKey<Object>(multiKeyArray0);
      boolean boolean1 = multiKey5.equals(multiKey6);
      assertFalse(multiKey6.equals((Object)multiKey3));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(554);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer1);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[0, 554, 0, 554]", string0);
      
      multiKey0.size();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 6);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      multiKeyArray0[0] = multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      multiKeyArray0[1] = multiKey2;
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>("~", integer1, integer1, object0);
      multiKeyArray0[2] = multiKey3;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[3] = multiKey4;
      Integer integer2 = new Integer(554);
      Integer integer3 = new Integer(1222);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer3, integer2);
      Object object1 = new Object();
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integer1, (Integer) null);
      MultiKey<Object> multiKey7 = new MultiKey<Object>(integer2, multiKey5, object1, multiKey6);
      multiKeyArray0[4] = multiKey7;
      MultiKey<Object> multiKey8 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[5] = multiKey8;
      MultiKey<MultiKey<Object>> multiKey9 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey9.toString();
      boolean boolean0 = multiKey9.equals(multiKey2);
      assertFalse(multiKey2.equals((Object)multiKey1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[0] = "";
      stringArray0[2] = "<d5'$\"7fksk|jo;=6";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null);
      MultiKey<Object> multiKey3 = multiKey2.getKey(0);
      assertNull(multiKey3);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>("", "CR");
      Object object1 = new Object();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) multiKey1;
      Object object2 = new Object();
      objectArray0[5] = object1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      multiKey2.toString();
      boolean boolean0 = multiKey2.equals(objectArray0[0]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.hashCode();
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer((-4172));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1);
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey0.toString();
      multiKey0.getKeys();
      int int0 = multiKey0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.getKeys();
      Integer integer0 = new Integer((-528));
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer1);
      multiKey1.toString();
      multiKey1.getKey(0);
      Integer integer2 = new Integer(106);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer2, integer1, integer2, integer2);
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey2, multiKey1, multiKey2);
      multiKey3.getKeys();
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = 4;
      Integer integer0 = new Integer(4);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.getKeys();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) int0;
      objectArray0[2] = (Object) integer0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) integer0;
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[4]", string0);
      
      objectArray0[5] = (Object) integer0;
      objectArray0[6] = (Object) integer0;
      objectArray0[7] = (Object) multiKey0;
      objectArray0[8] = (Object) int0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.toString();
      multiKey1.size();
      MultiKey<String> multiKey2 = new MultiKey<String>((String) null, (String) null, "", (String) null);
      multiKey2.hashCode();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey2, multiKey2);
      boolean boolean0 = multiKey3.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<String> multiKey0 = new MultiKey<String>("CR", "CR");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0, "org.apache.commons.collections4.keyvalue.MultiKey", object0, multiKey0);
      int int0 = 1;
      Object object1 = multiKey1.getKey(1);
      objectArray0[1] = object1;
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      int int1 = (-1526);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1526));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1526
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      MultiKey<String> multiKey0 = new MultiKey<String>("Xujn&+}l)x,Z_", (String) null);
      int int0 = 3;
      // Undeclared exception!
      try { 
        multiKey0.getKey(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 3;
      Integer integer0 = new Integer(3);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer0, integer0);
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(1291);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1291
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(616);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1551);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.hashCode();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "#53T2;x";
      stringArray0[1] = "Cj";
      stringArray0[2] = "";
      stringArray0[3] = "@;IzU0)euJrs}G";
      stringArray0[4] = "Q,bVTR,C}pr?K#j&";
      stringArray0[5] = "g1O\"D";
      stringArray0[6] = "DKMoDorG>_'TgahJF=";
      stringArray0[7] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      int int0 = multiKey1.size();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKey0.toString();
      multiKey0.equals((Object) null);
      int int0 = 4024;
      Integer integer0 = new Integer(4024);
      Integer integer1 = new Integer(4024);
      Integer integer2 = new Integer((-1));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2, integer0);
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(4024);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4024
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
