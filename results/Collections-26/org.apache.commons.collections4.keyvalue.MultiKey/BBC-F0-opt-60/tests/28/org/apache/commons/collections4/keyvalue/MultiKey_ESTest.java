/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:51:53 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey1.toString();
      MultiKey<Object>[] multiKeyArray1 = multiKey1.getKeys();
      assertNotSame(multiKeyArray0, multiKeyArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("y-H~=E*", "yXu);)WcD3", "lc#4bq");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "y-H~=E*";
      objectArray0[1] = (Object) "yXu);)WcD3";
      objectArray0[2] = (Object) "yXu);)WcD3";
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) "})gDMt*o(t*aWG!2z00";
      objectArray0[5] = (Object) multiKey0;
      objectArray0[6] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.getKey(2);
      Integer integer0 = new Integer(1026);
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0[4], "y-H~=E*", "})gDMt*o(t*aWG!2z00", integer0, object0);
      multiKey0.equals(objectArray0[3]);
      int int0 = multiKey2.size();
      multiKey1.getKey(4);
      multiKey1.getKeys();
      multiKey1.getKeys();
      int int1 = multiKey0.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "~";
      stringArray0[1] = "~";
      stringArray0[2] = "~";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, false);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-4855));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2223);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[1]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1146));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(1);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(1);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((int) integerArray0[2]);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      Integer integer8 = new Integer((-1));
      Integer integer9 = new Integer((-1858));
      Integer integer10 = new Integer(3863);
      Integer integer11 = new Integer((-245));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer8, integer9, integer10, integer11, integerArray0[7]);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.size();
      Object object0 = new Object();
      multiKey0.toString();
      String string0 = "";
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[]", "", "");
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[]", object0, multiKey1);
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey((-712));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -712
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      boolean boolean0 = true;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      int int0 = 0;
      multiKey0.getKey(0);
      objectArray0[0] = null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      // Undeclared exception!
      try { 
        multiKey1.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null, (Integer) null);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("=_Wj_x_TNnrZ6p<9", "=_Wj_x_TNnrZ6p<9", "<Tn39A", "<Tn39A", "=_Wj_x_TNnrZ6p<9");
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.size();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, "<Tn39A");
      multiKey2.toString();
      multiKey2.toString();
      Integer integer0 = new Integer((-2107));
      multiKey2.equals(integer0);
      multiKey2.toString();
      Integer integer1 = new Integer((-2107));
      multiKey2.equals(integer1);
      Object object0 = new Object();
      multiKey0.toString();
      multiKey2.equals(object0);
      Object object1 = new Object();
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[null, null, null, null]", "", (String) null);
      // Undeclared exception!
      try { 
        multiKey3.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1);
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1494));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1494
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(614);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.toString();
      Object object0 = new Object();
      multiKey0.equals(object0);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      multiKey1.equals("");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "MultiKey[614, 614]";
      objectArray0[1] = (Object) "MultiKey[614, 614]";
      objectArray0[2] = (Object) "";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      Object[] objectArray1 = multiKey2.getKeys();
      assertEquals(3, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals((Object) null);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[, ]", "MultiKey[, ]");
      multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("MultiKey[, ]", multiKey2, integer0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey3.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey0.toString();
      multiKey3.size();
      multiKey2.size();
      multiKey2.hashCode();
      MultiKey<Object> multiKey4 = null;
      try {
        multiKey4 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "", object0, object0, "");
      multiKey1.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, , ]", string0);
      
      boolean boolean0 = multiKey1.equals((Object) null);
      assertFalse(boolean0);
      
      multiKey1.size();
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1646));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(70);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-2098));
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, true);
      Integer integer6 = multiKey2.getKey(0);
      assertEquals(5, (int)integer6);
  }
}
