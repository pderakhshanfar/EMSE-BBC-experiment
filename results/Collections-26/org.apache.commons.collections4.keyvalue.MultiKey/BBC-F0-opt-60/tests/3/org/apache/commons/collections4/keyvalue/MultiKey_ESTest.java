/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:03:32 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, , , ]", string0);
      
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey1.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, true);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.getKeys();
      multiKey1.size();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[]", string0);
      
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, (Integer) null, (Integer) null, (Integer) null, integer1);
      Object object0 = multiKey2.getKey(0);
      assertNotNull(object0);
      
      boolean boolean0 = multiKey0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", (String) null, "", "", "");
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "", object0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "MultiKey";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) multiKey1;
      objectArray0[4] = (Object) "MultiKey";
      objectArray0[5] = (Object) multiKey0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, true);
      boolean boolean0 = multiKey2.equals(multiKey3);
      assertTrue(boolean0);
      assertFalse(multiKey3.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      String string0 = null;
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer((-174));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      Integer integer1 = new Integer(5321);
      Integer integer2 = new Integer((-26));
      Integer integer3 = new Integer(1200);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, integer2, integer3, integer2, integer1);
      Integer integer4 = new Integer(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer4, "MultiKey[java.lang.Object@2d387687, java.lang.Object@2d387687, -174]", "MultiKey[java.lang.Object@2d387687, java.lang.Object@2d387687, -174]");
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer3, integer0, multiKey2);
      boolean boolean0 = multiKey1.equals(multiKey3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.getKey(0);
      objectArray0[0] = null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(4);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1);
      Integer integer2 = multiKey1.getKey(0);
      objectArray0[2] = (Object) integer2;
      // Undeclared exception!
      try { 
        multiKey0.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", (String) null, "", "", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0);
      Integer integer0 = new Integer((-457));
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, multiKey1, (Object) null, integer0);
      Object object0 = new Object();
      boolean boolean0 = multiKey2.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("VG", "VG", "VG");
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey0.toString();
      Object[] objectArray0 = null;
      MultiKey<Object> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer((-1073));
      Integer integer2 = new Integer((-1073));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null, integer1, integer2);
      multiKey0.toString();
      multiKey0.hashCode();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) integer0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      int int0 = multiKey1.size();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "MultiKey[2]";
      stringArray0[1] = "MultiKey[2]";
      stringArray0[2] = "MultiKey[2, null, -1073, -1073]";
      stringArray0[3] = "MultiKey[2, null, -1073, -1073]";
      stringArray0[4] = "MultiKey[2]";
      stringArray0[5] = "MultiKey[2]";
      stringArray0[6] = "MultiKey[2]";
      stringArray0[7] = "MultiKey[2]";
      stringArray0[8] = "MultiKey[2]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      int int1 = multiKey2.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "q<V@Xzn]O|";
      stringArray0[2] = "|Q<h4D<dgC$kxV+C7";
      boolean boolean0 = true;
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.hashCode();
      multiKey1.toString();
      multiKey0.hashCode();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-3251));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3251
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 5);
      Object object0 = null;
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", (Object) null, "", "$j$^$MhU");
      multiKeyArray0[0] = multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[1] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "");
      multiKey2.getKey(1);
      Integer integer0 = new Integer(3);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("", integer0, "$j$^$MhU", "");
      multiKeyArray0[2] = multiKey3;
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object) null, multiKey1, integer0);
      multiKeyArray0[3] = multiKey4;
      Integer integer1 = new Integer((-1));
      MultiKey<Object> multiKey5 = new MultiKey<Object>("", integer1, multiKey3);
      multiKeyArray0[4] = multiKey5;
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      multiKey6.getKey(3);
      MultiKey<String> multiKey7 = new MultiKey<String>("", "", "", "");
      // Undeclared exception!
      try { 
        multiKey7.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      int int0 = 513;
      // Undeclared exception!
      try { 
        multiKey0.getKey(513);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 513
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, (Object) null, object1, (Object) null);
      assertEquals(5, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((-321));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-321));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-2945));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-321));
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[3]);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      assertEquals(7, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", (Object) null, (Object) null, (Object) null);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      MultiKey<Object> multiKey2 = multiKey1.getKey(0);
      multiKey2.toString();
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = "";
      stringArray0[2] = "MultiKey[, null, null, null]";
      stringArray0[3] = "MultiKey[, null, null, null]";
      stringArray0[4] = null;
      stringArray0[5] = "";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      multiKey3.toString();
      String[] stringArray1 = multiKey3.getKeys();
      assertFalse(stringArray1.equals((Object)stringArray0));
  }
}
