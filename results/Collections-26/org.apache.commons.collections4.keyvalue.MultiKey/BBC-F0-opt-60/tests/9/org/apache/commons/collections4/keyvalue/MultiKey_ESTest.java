/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:04:38 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, object0, object0, object0);
      String[] stringArray0 = new String[5];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      Integer integer0 = new Integer(490);
      Integer integer1 = new Integer(490);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, integer0, integer1, multiKey1);
      Object object1 = multiKey2.getKey(3);
      boolean boolean0 = multiKey1.equals(object1);
      assertTrue(boolean0);
      assertFalse(multiKey2.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("x3,*OFr94", "x3,*OFr94");
      multiKey0.equals("lv~1,,V");
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-1));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer1);
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey2.getKeys();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "x3,*OFr94";
      stringArray0[1] = "x3,*OFr94";
      stringArray0[2] = "lv~1,,V";
      stringArray0[3] = "lv~1,,V";
      stringArray0[4] = "x3,*OFr94";
      stringArray0[5] = "lv~1,,V";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      multiKey3.hashCode();
      multiKey2.size();
      multiKey1.getKey(0);
      boolean boolean1 = multiKey1.equals((Object) null);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "UiT7'Bx<9UQHE]mP{";
      stringArray0[3] = ",N.G(";
      stringArray0[4] = "";
      stringArray0[5] = "4I>(j>xqt+$) C";
      stringArray0[6] = "V";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) integerArray0, true);
      multiKey2.getKeys();
      multiKey0.hashCode();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[]", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("8:w}vlh3qp2d>\"", "8:w}vlh3qp2d>\"", ".", (String) null);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "8:w}vlh3qp2d>\"";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "8:w}vlh3qp2d>\"";
      objectArray0[5] = (Object) multiKey0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Object object0 = multiKey1.getKey(3);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("x3,*OFr94", "x3,*OFr94");
      multiKey0.equals("lv~1,,V");
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-1));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer1);
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertFalse(boolean0);
      
      boolean boolean1 = multiKey0.equals(integer0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.equals(object1);
      multiKey0.getKeys();
      multiKey1.hashCode();
      multiKey1.toString();
      multiKey1.toString();
      int int0 = 560;
      // Undeclared exception!
      try { 
        multiKey1.getKey(560);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 560
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, object0, object0, object0);
      multiKey0.toString();
      int int0 = multiKey0.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 423;
      Integer integer0 = new Integer(423);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer0, "MultiKey", integer0);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey1.equals("MultiKey");
      // Undeclared exception!
      try { 
        multiKey0.getKey(423);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 423
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object1);
      // Undeclared exception!
      try { 
        multiKey0.getKey(2398);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2398
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer((-727));
      Integer integer1 = new Integer(1647);
      Integer integer2 = new Integer(5);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, (Integer) null, integer2);
      multiKey0.toString();
      multiKey0.getKey(1);
      MultiKey<String> multiKey1 = new MultiKey<String>("##^1g.6)", "##^1g.6)", "org.apache.commons.collections4.keyvalue.MultiKey", "x[k$gF/Fymlhb%)G5u");
      // Undeclared exception!
      try { 
        multiKey1.getKey(1615);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1615
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-2784));
      integerArray0[0] = integer0;
      int int0 = (-1);
      Integer integer1 = new Integer((-1));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2784));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1260);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      boolean boolean0 = multiKey0.equals(integer5);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", (String) null, (String) null, "", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      String string0 = multiKey0.getKey(0);
      assertNotNull(string0);
      
      String string1 = multiKey0.toString();
      assertEquals("MultiKey[, null, null, , ]", string1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "org.apache.commons.collections4.keyvalue.MultiKey";
      MultiKey<String> multiKey0 = new MultiKey<String>(";N(/", "org.apache.commons.collections4.keyvalue.MultiKey", "");
      int int0 = (-709);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-709));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -709
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      multiKey0.equals("");
      Integer[] integerArray0 = new Integer[2];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(5);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      // Undeclared exception!
      try { 
        multiKey1.getKey(768);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 768
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
