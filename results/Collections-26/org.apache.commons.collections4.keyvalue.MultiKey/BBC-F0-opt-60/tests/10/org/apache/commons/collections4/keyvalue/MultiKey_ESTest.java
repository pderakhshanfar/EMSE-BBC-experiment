/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:50:03 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Object object0 = multiKey1.getKey(0);
      boolean boolean0 = multiKey0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(9);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey0.equals(integer0);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.getKeys();
      String[] stringArray1 = multiKey1.getKeys();
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-459));
      MultiKey<String> multiKey0 = new MultiKey<String>("e{mwT", "", "", "MultiKey");
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "");
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      multiKey2.toString();
      multiKey0.toString();
      multiKey1.equals("e{mwT");
      MultiKey<Object> multiKey3 = new MultiKey<Object>(stringArray0);
      int int0 = multiKey3.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 9);
      MultiKey<String> multiKey0 = new MultiKey<String>("Z\"X&", "Z\"X&");
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>(" x*Obh(4GevwM%zuN", "|w=G8vQG");
      multiKeyArray0[1] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("", " x*Obh(4GevwM%zuN", "w*rQ('NE@-'");
      multiKeyArray0[2] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("|w=G8vQG", " x*Obh(4GevwM%zuN", " x*Obh(4GevwM%zuN", "w*rQ('NE@-'");
      multiKeyArray0[3] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("", "|w=G8vQG", "");
      multiKeyArray0[4] = multiKey4;
      multiKey1.toString();
      multiKey2.toString();
      MultiKey<String> multiKey5 = new MultiKey<String>("", " x*Obh(4GevwM%zuN", "-UZajOM", " x*Obh(4GevwM%zuN", " x*Obh(4GevwM%zuN");
      multiKeyArray0[5] = multiKey5;
      MultiKey<String> multiKey6 = new MultiKey<String>("w*rQ('NE@-'", "YEcL}t@wO6>");
      multiKeyArray0[6] = multiKey6;
      MultiKey<String> multiKey7 = new MultiKey<String>("", " x*Obh(4GevwM%zuN", "T\"l@^Gf{)xW", "Z\"X&");
      multiKeyArray0[7] = multiKey7;
      MultiKey<String> multiKey8 = new MultiKey<String>("", "-UZajOM", "B(7:85nv[", "", " x*Obh(4GevwM%zuN");
      multiKeyArray0[8] = multiKey8;
      MultiKey<MultiKey<String>> multiKey9 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      MultiKey<Integer> multiKey10 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null, (Integer) null);
      Integer integer0 = multiKey10.getKey(1);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(2046);
      Integer integer1 = new Integer(2046);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(2046);
      Integer integer4 = new Integer(1585);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer3, integer4, integer0);
      MultiKey<String> multiKey1 = new MultiKey<String>("D56q", " Nxc B", " Nxc B");
      multiKey0.equals(multiKey1);
      int int0 = multiKey0.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = null;
      MultiKey<String>[] multiKeyArray0 = null;
      MultiKey<MultiKey<String>> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, integer0, object1);
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.toString();
      multiKey1.getKeys();
      String[] stringArray0 = new String[6];
      stringArray0[0] = ">ApAl8";
      stringArray0[1] = "";
      stringArray0[2] = "`S0nk;$U~R+!";
      stringArray0[3] = ">2vZ_$n-U~dP-";
      stringArray0[4] = "";
      stringArray0[5] = "n81W9ijC'*KowaK%";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.toString();
      multiKey2.equals("");
      int int0 = multiKey0.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer[] integerArray0 = null;
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "The array of keys must not be null";
      String string1 = "@\\c3I";
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "", "@c3I", "", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "@c3I";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) "The array of keys must not be null";
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(262);
      Integer integer2 = new Integer(262);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2);
      // Undeclared exception!
      try { 
        multiKey1.getKey(262);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 262
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-1046));
      Integer integer1 = new Integer((-1046));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, integer0, integer1);
      multiKey0.toString();
      multiKey0.size();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "MultiKey[null, null, -1046, -1046]";
      stringArray0[1] = "MultiKey[null, null, -1046, -1046]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      String[] stringArray1 = multiKey1.getKeys();
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "SY?yN1X";
      Object object0 = new Object();
      String string1 = "";
      MultiKey<Object> multiKey0 = new MultiKey<Object>("SY?yN1X", object0, "", "SY?yN1X");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "N$2_V'$<l}vP<7Tc";
      stringArray0[3] = "";
      stringArray0[4] = "bI:";
      stringArray0[5] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "");
      multiKey1.hashCode();
      multiKey1.getKey(0);
      Object[] objectArray0 = multiKey1.getKeys();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, false);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey2, multiKey3);
      multiKey4.toString();
      multiKey4.getKeys();
      multiKey1.size();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, , N$2_V'$<l}vP<7Tc, , bI:, ]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      int int0 = (-2670);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-2670));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2670
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("+S-C\u0002O'Wd }{", "+S-C\u0002O'Wd }{", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "MultiKey[+S-C\u0002O'Wd }{, +S-C\u0002O'Wd }{, ]";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.hashCode();
  }
}
