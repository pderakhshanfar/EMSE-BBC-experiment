/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:49:24 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.toString();
      multiKey1.getKeys();
      multiKey1.size();
      // Undeclared exception!
      try { 
        multiKey1.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0);
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(4);
      Integer integer1 = new Integer(4);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 6);
      Integer integer2 = new Integer(4);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, integer0, integer2);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      Integer integer3 = new Integer(4);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer0, integer3);
      multiKeyArray0[4] = multiKey2;
      multiKeyArray0[5] = multiKey0;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "H@0q__:f.Rn";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      multiKey3.toString();
      Integer integer4 = new Integer(4);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>((Integer) null, integer4, integer4);
      multiKey4.getKey(0);
      MultiKey<Object> multiKey5 = new MultiKey<Object>((Object) null, (Object) null);
      // Undeclared exception!
      try { 
        multiKey5.getKey(2004);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2004
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(1041);
      Integer integer1 = new Integer(1041);
      Integer integer2 = new Integer(252);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, integer0, integer2);
      multiKey0.toString();
      multiKey0.toString();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.toString();
      Object[] objectArray1 = multiKey1.getKeys();
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0, object0, multiKey0, object0);
      Integer integer0 = new Integer(1);
      multiKey0.toString();
      Integer integer1 = new Integer((-1400));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer1, integer1, integer0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.equals(multiKey0);
      multiKey2.toString();
      multiKey2.toString();
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey2, multiKey2, multiKey2);
      multiKey3.hashCode();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "j2Lk@Ze>at";
      stringArray0[1] = "@;09>gQcv2rO]Y~";
      stringArray0[2] = "Y7pLWE-~I%22Yb[M@x2";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "v6Ih&0(ZI`DlIM @>e'";
      stringArray0[7] = "x(~n\"CO4Gi{Uz{gBgs]";
      stringArray0[8] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(9);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2711);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2711);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1182);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1182);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(2711);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[2]);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((int) integerArray0[0]);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      MultiKey<Integer> multiKey3 = multiKey2.getKey(1);
      assertSame(multiKey1, multiKey3);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "VON%*~h";
      stringArray0[1] = "CmpXTDD/";
      stringArray0[2] = "";
      stringArray0[3] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(1698);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[VON%*~h, CmpXTDD/, , ]", integer0, "CmpXTDD/", "");
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey2.toString();
      multiKey2.hashCode();
      // Undeclared exception!
      try { 
        multiKey0.getKey(1698);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1698
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = "+[{>Jk";
      MultiKey<String> multiKey0 = new MultiKey<String>("+[{>Jk", "+[{>Jk", "+[{>Jk");
      int int0 = (-2008);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-2008));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2008
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0, object0, object2);
      Object object9 = multiKey1.getKey(0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, integer1);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object9, object5, "", multiKey2, object6);
      String string0 = multiKey3.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      Object object5 = multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object5, (Object) null, multiKey0, object1, "");
      assertEquals(5, multiKey1.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      int int0 = (-1295);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1295));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1295
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "/ie-mX|NMJw>Xz)Y";
      stringArray0[2] = "1C(";
      stringArray0[3] = "d0";
      stringArray0[4] = "w_ivq&G{'>B";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      String string0 = multiKey1.getKey(0);
      assertEquals("", string0);
      
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0);
      String string1 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[], MultiKey[], MultiKey[], MultiKey[]]", string1);
  }
}
