/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:27:28 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      Integer[] integerArray1 = multiKey1.getKeys();
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "?jgm", "", "MultiKey", "h>))S!O{K6S:r");
      multiKey0.toString();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.toString();
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      multiKey0.equals(multiKey0);
      Integer integer0 = new Integer((-975));
      Integer integer1 = new Integer((-975));
      Integer integer2 = new Integer(4);
      Integer integer3 = new Integer(4);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer2, integer3, integer3, integer0);
      Object object1 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object1;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) multiKey1;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) multiKey0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey2.toString();
      Object[] objectArray1 = multiKey2.getKeys();
      assertEquals(5, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer2, (Integer) null, integer0, (Integer) null);
      multiKey0.toString();
      Integer integer3 = multiKey0.getKey(1);
      assertNull(integer3);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "7e#badNdb,!X7G";
      stringArray0[1] = "MultiKey";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      String[] stringArray1 = multiKey0.getKeys();
      Integer integer0 = new Integer((-901));
      boolean boolean0 = multiKey0.equals(integer0);
      assertFalse(boolean0);
      
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray1);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.getKeys();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[7e#badNdb,!X7G, MultiKey]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      Object object2 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object1, multiKey0, integer0, object2);
      Object object3 = multiKey1.getKey(0);
      objectArray0[2] = object3;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      assertFalse(multiKey2.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "MultiKey[, ]";
      stringArray0[1] = "MultiKey[, ]";
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, ]", string0);
      
      multiKey0.equals((Object) null);
      multiKey0.hashCode();
      multiKey0.hashCode();
      boolean boolean0 = multiKey1.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(1483);
      Integer integer1 = new Integer((-717));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[2] = "T$1)M(C";
      stringArray0[3] = "|4$$xn%G#po&kZkU#wI";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey1, object0, "", "T$1)M(C");
      assertEquals(5, multiKey2.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(810);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.hashCode();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[]", "org.apache.commons.collections4.keyvalue.MultiKey");
      MultiKey<String> multiKey3 = new MultiKey<String>("", "MultiKey[]", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey2.toString();
      MultiKey<String> multiKey4 = new MultiKey<String>("MultiKey[]", (String) null, "", (String) null);
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKey2, multiKey3, multiKey3, multiKey4, multiKey3);
      int int0 = multiKey5.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      Integer[] integerArray0 = new Integer[5];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2714));
      multiKey0.toString();
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(575);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[1]);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.equals(multiKey1);
      multiKey0.hashCode();
      Object object0 = null;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integerArray0);
      Integer integer5 = new Integer((int) integerArray0[4]);
      Integer integer6 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>((Integer) int0, integer5, integer6);
      // Undeclared exception!
      try { 
        multiKey3.getKey((-1371));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1371
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
