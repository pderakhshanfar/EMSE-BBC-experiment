/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:24:00 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("z#8,l.U]D", "z#8,l.U]D", "z#8,l.U]D");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey0.toString();
      multiKey1.equals(multiKey0);
      multiKey0.size();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      Object object0 = new Object();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", (Object) null, object0, object0);
      Integer integer0 = new Integer(2661);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("z#8,l.U]D", multiKey1);
      multiKey3.toString();
      boolean boolean0 = multiKey2.equals(multiKey2);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[z#8,l.U]D, z#8,l.U]D, z#8,l.U]D]", string0);
      
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer0, integer0, (Integer) null, integer0);
      MultiKey<String> multiKey5 = new MultiKey<String>("z#8,l.U]D", "BMCQf6>s:T", "MultiKey[z#8,l.U]D, z#8,l.U]D, z#8,l.U]D]", "MultiKey[z#8,l.U]D, z#8,l.U]D, z#8,l.U]D]");
      boolean boolean1 = multiKey4.equals(multiKey5);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-1641));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      Integer integer1 = new Integer((-1641));
      Integer integer2 = new Integer((-1641));
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey0.equals(multiKey1);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      Object object0 = null;
      String string0 = "$i6L{w)qKs{uJfP";
      Object object1 = new Object();
      MultiKey<String> multiKey3 = new MultiKey<String>("$i6L{w)qKs{uJfP", "", "");
      // Undeclared exception!
      try { 
        multiKey3.getKey((int) integerArray0[1]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1641
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("z#8,l.U]D", "z#8,l.U]D", "z#8,l.U]D");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey0.toString();
      multiKey1.equals(multiKey0);
      multiKey0.size();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      Object object0 = null;
      Object object1 = new Object();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("CzV\"Uy4!ncC/w ", (Object) null, object1, object1);
      Integer integer0 = new Integer(2661);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("z#8,l.U]D", multiKey1);
      MultiKey<Object> multiKey4 = new MultiKey<Object>("CzV\"Uy4!ncC/w ", integer0, integer0, "", multiKey3);
      multiKey4.toString();
      multiKey2.equals(multiKey4);
      multiKey0.toString();
      Integer integer1 = new Integer(2661);
      Integer integer2 = new Integer(3);
      String string0 = null;
      MultiKey<String> multiKey5 = new MultiKey<String>("TZA|rE}", (String) null, "Hp3o)", "iN\"81");
      multiKey5.getKey(1);
      MultiKey<String> multiKey6 = new MultiKey<String>("", "TZA|rE}");
      // Undeclared exception!
      try { 
        multiKey6.getKey((-14));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -14
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(111);
      Integer integer1 = new Integer(111);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer1);
      String[] stringArray0 = new String[6];
      multiKey0.toString();
      stringArray0[0] = "The array of keys must not be null";
      stringArray0[1] = "mh:ekI3R&-Z";
      stringArray0[2] = "";
      multiKey0.toString();
      stringArray0[3] = "V:o4/HwD";
      stringArray0[4] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[5] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.toString();
      multiKey0.equals(multiKey1);
      multiKey1.hashCode();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, "");
      multiKey2.hashCode();
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey(111);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 111
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      multiKey0.hashCode();
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.getKey(0);
      multiKey0.size();
      Object object1 = new Object();
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.equals(object1);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      int int0 = multiKey2.size();
      multiKey2.getKeys();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[]", string0);
      
      multiKey1.equals("org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey0.getKeys();
      multiKey0.toString();
      multiKey2.hashCode();
      multiKey1.getKey(1);
      int int1 = multiKey2.hashCode();
      assertTrue(int1 == int0);
      
      boolean boolean0 = multiKey0.equals("MultiKey[]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer((-250));
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer2, integer0);
      Object object1 = multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0, object0, object1);
      assertEquals(4, multiKey1.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Integer integer0 = new Integer((-2774));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, integer0, (Object) null);
      String string0 = "";
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      // Undeclared exception!
      try { 
        multiKey1.getKey((int) integerArray0[0]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2774
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      boolean boolean0 = false;
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null", "The array of keys must not be null", "");
      multiKey0.toString();
      multiKey0.size();
      // Undeclared exception!
      try { 
        multiKey0.getKey(1385);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1385
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object[] objectArray1 = new Object[5];
      objectArray1[0] = object0;
      objectArray1[1] = object0;
      objectArray1[2] = object1;
      objectArray1[3] = object0;
      objectArray1[4] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray1, false);
      Object object2 = multiKey0.getKey(0);
      objectArray0[2] = object2;
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      MultiKey<String> multiKey3 = multiKey2.getKey(0);
      objectArray0[3] = (Object) multiKey3;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0);
      multiKey3.toString();
      int int0 = multiKey4.size();
      boolean boolean0 = multiKey4.equals(object1);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(4);
      Integer integer1 = new Integer(4);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer0, integer1);
      multiKey3.toString();
      multiKey5.toString();
      String string0 = multiKey5.toString();
      assertEquals("MultiKey[4, 4]", string0);
      
      int int1 = multiKey3.hashCode();
      assertFalse(int1 == int0);
      
      multiKey4.size();
      assertFalse(multiKey4.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Integer integer0 = new Integer(315);
      Integer integer1 = new Integer(1689);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer0);
      multiKey0.toString();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(4754);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4754
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
