/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:03:33 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(1699);
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "M)fC]k");
      multiKey0.toString();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.toString();
      Object object0 = new Object();
      multiKey1.size();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 3);
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey2 = new MultiKey<String>("M)fC]k", "", "M)fC]k", "M)fC]k", "MultiKey[]");
      multiKeyArray0[1] = multiKey2;
      multiKeyArray0[2] = multiKey0;
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      Object object1 = multiKey3.getKey(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>("M)fC]k", object1, multiKey1);
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[M)fC]k, MultiKey[, , M)fC]k], MultiKey[]]", string0);
      
      multiKey0.toString();
      boolean boolean0 = multiKey2.equals((Object) null);
      multiKey2.toString();
      MultiKey<String> multiKey5 = new MultiKey<String>("k[;9", "", "k[;9", "U/I!e4c9e");
      multiKey5.toString();
      multiKey4.getKeys();
      boolean boolean1 = multiKey0.equals(multiKey0);
      assertFalse(boolean1 == boolean0);
      
      multiKey0.size();
      assertFalse(multiKey0.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(4);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey0.getKeys();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      boolean boolean0 = false;
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("n", "");
      multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>("n", "", "");
      multiKey1.toString();
      Object object0 = multiKey1.getKey(0);
      assertEquals("n", object0);
      
      multiKey0.equals("n");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[n, ]", string0);
      
      multiKey0.size();
      Object object1 = new Object();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "MultiKey[n, ]");
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey0, "MultiKey[n, ]", object1, multiKey2);
      Integer integer0 = new Integer(2);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>((Integer) null, integer0, integer0);
      multiKey4.getKey(0);
      boolean boolean0 = multiKey3.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "[]|{_\"{", "[]|{_\"{");
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, "*1%lN(Hg", (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.equals(multiKey1);
      multiKey1.toString();
      multiKey1.toString();
      Integer integer0 = new Integer(1132);
      Integer integer1 = new Integer(3516);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      multiKey1.toString();
      multiKey2.equals(multiKey1);
      multiKey1.hashCode();
      multiKey0.toString();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(1132);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1132
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "6", "6");
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(" ", "", " ", "", "");
      multiKey0.getKey(0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) " ";
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) " ";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(" ", " ", "", multiKey1);
      assertFalse(multiKey2.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(760);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(760);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[0]);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      Integer integer6 = new Integer((-1321));
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer5, multiKey0, integer6, integer0);
      multiKey1.size();
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[760, 760, 0, 0, 0, 760]", "MultiKey[760, 760, 0, 0, 0, 760]", "", "@-9?\"(@l", "Ge|)#/ F&JTxgm/ZHS");
      multiKey2.getKey(0);
      multiKey0.getKeys();
      multiKey1.size();
      multiKey1.equals(integer1);
      multiKey1.hashCode();
      multiKey1.getKeys();
      // Undeclared exception!
      try { 
        multiKey2.getKey((-453));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -453
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "org.apache.commons.collections4.keyvalue.MultiKey");
      assertEquals(2, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "B^";
      stringArray0[1] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.size();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "MultiKey[B^, ]");
      // Undeclared exception!
      try { 
        multiKey1.getKey(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
