/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:45:51 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(4632);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, object0, integer0, integer0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, multiKey0);
      multiKey1.toString();
      Object[] objectArray0 = multiKey1.getKeys();
      boolean boolean0 = multiKey1.equals(integer0);
      multiKey0.hashCode();
      MultiKey<String> multiKey2 = new MultiKey<String>("[.xTZ5%?Ijk", "", "", "");
      multiKey2.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>("", "MultiKey[java.lang.Object@168be001, MultiKey[4632, java.lang.Object@168be001, 4632, 4632]]", "", "");
      multiKey2.toString();
      MultiKey<String> multiKey4 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "");
      multiKey4.toString();
      Object object1 = new Object();
      MultiKey<Object> multiKey5 = new MultiKey<Object>(object1, multiKey3);
      Integer integer1 = new Integer(878);
      MultiKey<Object> multiKey6 = new MultiKey<Object>(integer1, (Object) null, multiKey5);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[[.xTZ5%?Ijk, , , ]", string0);
      
      MultiKey<Object> multiKey7 = new MultiKey<Object>(objectArray0);
      boolean boolean1 = multiKey1.equals(multiKey7);
      assertFalse(multiKey1.equals((Object)multiKey5));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[16];
      stringArray0[0] = "XtO";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", (String) null);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = null;
      objectArray0[1] = null;
      objectArray0[2] = null;
      objectArray0[3] = (Object) "/2me,9Rf]26<";
      objectArray0[4] = null;
      objectArray0[5] = (Object) "*`'";
      objectArray0[6] = null;
      objectArray0[7] = null;
      Object object0 = new Object();
      objectArray0[8] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.getKey(1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null);
      assertEquals(2, multiKey1.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer((-1785));
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, (Object) null, (Object) null);
      multiKey1.toString();
      multiKey1.equals("MultiKey[]");
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1785));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1785
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(567);
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer1, integer0, integer1);
      Integer integer2 = new Integer(567);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, integer0, integer2, integer0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.equals(multiKey0);
      Object object0 = new Object();
      multiKey0.equals(object0);
      MultiKey<String> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, (Integer) null, integer1);
      multiKey0.toString();
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, multiKey0);
      multiKey1.getKeys();
      multiKey0.toString();
      multiKey1.getKey(0);
      multiKey1.toString();
      multiKey1.size();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<String> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Integer integer0 = new Integer((-2620));
      Integer integer1 = new Integer((-593));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer0, integer1);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0);
      int int0 = (-4095);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-4095));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4095
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Object object7 = multiKey0.getKey(0);
      Object object8 = new Object();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1);
      Object object9 = multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object7, object8, object1, object9);
      assertFalse(multiKey3.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(275);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, object0, integer0, integer0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, multiKey0);
      multiKey1.toString();
      multiKey1.getKeys();
      boolean boolean0 = multiKey1.equals(integer0);
      assertFalse(boolean0);
      
      multiKey0.hashCode();
      MultiKey<String> multiKey2 = new MultiKey<String>("[.xTZ5%?Ijk", "", "", "");
      multiKey2.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[[.xTZ5%?Ijk, , , ]", string0);
      
      multiKey2.size();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer0, multiKey1);
      Integer integer1 = new Integer(275);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(object0, multiKey3, "[.xTZ5%?Ijk", integer1);
      Integer integer2 = new Integer(523);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(integer2, (Object) null, multiKey1);
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey4, multiKey0, multiKey1, multiKey5);
      multiKey6.size();
      assertFalse(multiKey5.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("z8ejtsD>1Do#CQ/)8[", "z8ejtsD>1Do#CQ/)8[");
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(400);
      Integer integer2 = new Integer(400);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[0, 400, 400]", string0);
      
      int int0 = multiKey0.size();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 4);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      int int1 = multiKey2.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(3481);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0);
      int int0 = multiKey1.size();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "4+@S}%#$bjgyvc&|ZlT", "*g", "", "");
      int int1 = multiKey2.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", multiKey0);
      multiKey0.toString();
      Object[] objectArray0 = multiKey0.getKeys();
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-2269));
      integerArray0[0] = integer0;
      int int0 = (-1);
      Integer integer1 = new Integer((-1));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(3);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1224));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1026));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-593));
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(3);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      assertEquals(8, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object1, object2);
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, (String) null, (String) null);
      multiKey1.size();
      Integer integer0 = new Integer(3);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, (Integer) null, (Integer) null);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[3, 3, null, null]", string0);
  }
}
