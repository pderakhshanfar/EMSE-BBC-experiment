/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:04:01 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(1912);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, integer0);
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey0.size();
      multiKey1.hashCode();
      multiKey0.getKeys();
      multiKey0.toString();
      multiKey0.getKeys();
      MultiKey<String> multiKey2 = new MultiKey<String>("_TH", "MultiKey[null, 1912]", "MultiKey[]");
      multiKey2.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, 1912]", string0);
      
      Integer integer1 = new Integer(1912);
      boolean boolean0 = multiKey2.equals(integer1);
      assertFalse(boolean0);
      
      multiKey1.size();
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(3);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 4);
      Integer integer1 = new Integer(0);
      int int0 = 1;
      Integer integer2 = new Integer(1);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, (Integer) null, integer1, (Integer) null, integer2);
      multiKey1.getKey(1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, "MultiKey[null, 3]");
      multiKeyArray0[0] = multiKey2;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer2, "MultiKey[null, 3]");
      multiKeyArray0[1] = multiKey3;
      Integer integer3 = new Integer(1);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer0, integer3, (Integer) null);
      // Undeclared exception!
      try { 
        multiKey4.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-590));
      Integer integer1 = new Integer((-590));
      Integer integer2 = new Integer(1494);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer2);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) integer1;
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) integer2;
      objectArray0[4] = (Object) integer2;
      objectArray0[5] = (Object) integer2;
      objectArray0[6] = (Object) integer2;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      Object object0 = multiKey1.getKey(0);
      multiKey0.toString();
      multiKey0.equals(object0);
      multiKey0.size();
      multiKey0.size();
      multiKey1.hashCode();
      multiKey1.toString();
      Object object1 = new Object();
      multiKey1.equals(object1);
      // Undeclared exception!
      try { 
        multiKey0.getKey(1494);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1494
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "?kbF^Ln";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      String[] stringArray1 = multiKey0.getKeys();
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      multiKey1.toString();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) multiKey1;
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = (Object) "";
      multiKey1.toString();
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) multiKey0;
      objectArray0[8] = (Object) "";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      boolean boolean0 = multiKey2.equals(objectArray0[3]);
      assertFalse(boolean0);
      
      multiKey1.toString();
      boolean boolean1 = multiKey2.equals("[/g#=CY*0");
      assertFalse(boolean1);
      
      multiKey2.toString();
      multiKey2.getKey(0);
      multiKey2.toString();
      multiKey2.getKey(0);
      multiKey0.size();
      multiKey0.size();
      multiKey2.size();
      multiKey0.toString();
      multiKey0.hashCode();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[, MultiKey[, , , , ], MultiKey[MultiKey[, , , , ], MultiKey[, , , , ]], MultiKey[, , , , ], MultiKey[, , , , ], , , MultiKey[, , , , ], ]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("OnePS>?", "OnePS>?");
      // Undeclared exception!
      try { 
        multiKey0.getKey(2262);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2262
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "}Q";
      stringArray0[1] = "j-y";
      stringArray0[2] = "_q)Y'OO~lAFnk.W";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      assertEquals(3, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", (String) null);
      multiKey0.toString();
      multiKey0.toString();
      Object object0 = new Object();
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2);
      String string0 = "";
      Integer integer3 = new Integer(0);
      MultiKey<MultiKey<String>> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(":}zF;B 1yD5", "Db[61FcFotuygznD2@i", ":}zF;B 1yD5", "Db[61FcFotuygznD2@i");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-448));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1856));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-2716));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-448));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((int) integerArray0[4]);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      // Undeclared exception!
      try { 
        multiKey1.getKey(382);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 382
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      String string0 = "itE}y bM";
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, "itE}y bM", object0, "itE}y bM");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(5139);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5139
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
