/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:31:14 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("4%~Q4B", "4%~Q4B", "4%~Q4B");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) "4%~Q4B";
      objectArray0[3] = (Object) "4%~Q4B";
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey1.equals(objectArray0[0]);
      multiKey0.size();
      boolean boolean1 = multiKey0.equals(objectArray0[5]);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-3818));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3818));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-3818));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1713);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("r<Vv]X8]", "f", "-s`K%fU_G ", "r<Vv]X8]", "");
      Integer integer0 = new Integer((-784));
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[r<Vv]X8], f, -s`K%fU_G , r<Vv]X8], ]", string0);
      
      Integer integer1 = new Integer((-784));
      Integer integer2 = new Integer((-784));
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2, integer3);
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("}=[Yoz'Q<JD3F,NR", "}=[Yoz'Q<JD3F,NR");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      multiKey1.toString();
      multiKey1.equals("}=[Yoz'Q<JD3F,NR");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integerArray0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      int int0 = multiKey2.size();
      multiKey0.getKey(0);
      multiKey1.hashCode();
      int int1 = multiKey1.size();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(689);
      Integer integer1 = new Integer(4);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0);
      Object[] objectArray0 = new Object[2];
      multiKey0.toString();
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) integer1;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.getKeys();
      MultiKey<String> multiKey2 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.getKeys();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      int int0 = multiKey1.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      String[] stringArray0 = new String[1];
      multiKey0.toString();
      multiKey0.toString();
      stringArray0[0] = "p!r{/nK<";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey0.hashCode();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 8);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey1;
      multiKeyArray0[3] = multiKey1;
      multiKeyArray0[4] = multiKey1;
      multiKeyArray0[5] = multiKey1;
      multiKeyArray0[6] = multiKey1;
      multiKeyArray0[7] = multiKey1;
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      multiKey2.getKey(1);
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[p!r{/nK<]", "KY4]KmkD>{&Mx", "MultiKey[p!r{/nK<]");
      multiKey3.getKey(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>("MultiKey[]", "MultiKey[]", "MultiKey[p!r{/nK<]", "MultiKey[]", "MultiKey[]");
      int int0 = multiKey4.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("nchPXt", "nchPXt", "4%~Q4B");
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1344);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, integer0, integer1);
      boolean boolean0 = multiKey1.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("E.?,rseEj&|Sa8", "E.?,rseEj&|Sa8", "E.?,rseEj&|Sa8", "E.?,rseEj&|Sa8", "E.?,rseEj&|Sa8");
      int int0 = multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>("E.?,rseEj&|Sa8", "E.?,rseEj&|Sa8", "", "E.?,rseEj&|Sa8");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1);
      multiKey2.toString();
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(5);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1058);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[1]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[1]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[4]);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-2123));
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-2311));
      integerArray0[7] = integer7;
      Integer integer8 = new Integer((-3178));
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKey3, multiKey3, multiKey3, multiKey3, multiKey3);
      int int1 = multiKey4.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, object0, object1);
      int int0 = 0;
      multiKey0.getKey(0);
      objectArray0[2] = null;
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(0);
      multiKey0.toString();
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-760));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      Integer integer3 = multiKey1.getKey(int0);
      objectArray0[3] = (Object) integer3;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      assertEquals(4, multiKey2.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "");
      Integer integer0 = new Integer(0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer0);
      multiKey1.hashCode();
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, integer1, integer2, integer3);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-989));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -989
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "org.apache.commons.collections4.keyvalue.MultiKey";
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("org.apache.commons.collections4.keyvalue.MultiKey", multiKey0);
      int int0 = 412;
      // Undeclared exception!
      try { 
        multiKey1.getKey(412);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 412
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
