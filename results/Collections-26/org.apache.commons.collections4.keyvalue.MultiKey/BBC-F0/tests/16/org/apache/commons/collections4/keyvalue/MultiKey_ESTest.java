/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:17:10 GMT 2020
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(5796);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, multiKey0, object0, "", object1);
      Integer[] integerArray1 = multiKey0.getKeys();
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(2);
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object1);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0);
      MultiKey multiKey2 = new MultiKey<Object>(object0, object1, integer0, multiKey1, object0);
      multiKey0.toString();
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer0, multiKey2, multiKey2, integer1, integer0);
      MultiKey<String> multiKey4 = new MultiKey<String>("4o@", "4o@", "4o@");
      multiKey0.toString();
      multiKey1.toString();
      Object object2 = new Object();
      multiKey3.equals(object2);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integerArray0);
      Integer integer2 = new Integer(9);
      multiKey5.equals(integer2);
      multiKey1.getKeys();
      multiKey4.toString();
      int int0 = multiKey5.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(2);
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object1);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.getKey(2);
      Integer integer1 = new Integer(0);
      MultiKey<String> multiKey2 = new MultiKey<String>("4o@", "4o@", "4o@");
      multiKey2.getKey(2);
      Object object2 = new Object();
      boolean boolean0 = multiKey0.equals(object2);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(5);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer2, integer3);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[2, 0, 5]", string0);
      
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      boolean boolean1 = multiKey0.equals(multiKey0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-4603));
      Integer integer1 = new Integer((-1540));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.equals("MultiKey[-4603, -1540]");
      MultiKey<String> multiKey1 = new MultiKey<String>("%;GaC20V@E_fx>", "MultiKey[-4603, -1540]");
      // Undeclared exception!
      try { 
        multiKey1.getKey((-4603));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4603
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey1, multiKey0, multiKey1);
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.getKeys();
      multiKey0.equals(multiKey2);
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      // Undeclared exception!
      try { 
        multiKey3.getKey((-2208));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2208
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, "MultiKey[0, 0, 0]", "MultiKey[0, 0, 0]");
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.getKey(0);
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, (Object) null);
      multiKey1.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.getKeys();
      multiKey1.hashCode();
      multiKey1.hashCode();
      multiKey2.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>("QAW9", "MultiKey[null, MultiKey[0, 0, 0], MultiKey[0, 0, 0]]", "", "");
      // Undeclared exception!
      try { 
        multiKey3.getKey(2391);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2391
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.getKey(1);
      objectArray0[1] = null;
      Object object1 = new Object();
      objectArray0[2] = object1;
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 8);
      MultiKey<String> multiKey1 = new MultiKey<String>("Q]{L(e", "Q]{L(e", "Q]{L(e");
      multiKeyArray0[0] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("!QK_$J[UiMK+n:=UypK", "!QK_$J[UiMK+n:=UypK");
      multiKeyArray0[1] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("Q]{L(e", "", "!QK_$J[UiMK+n:=UypK");
      multiKeyArray0[2] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("", "", "", "", "Q]{L(e");
      multiKeyArray0[3] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>("", "Q]{L(e", "", "Q]{L(e", "!QK_$J[UiMK+n:=UypK");
      multiKeyArray0[4] = multiKey5;
      MultiKey<String> multiKey6 = new MultiKey<String>("PYO=~Q}", "", "PYO=~Q}", "", "");
      multiKeyArray0[5] = multiKey6;
      MultiKey<String> multiKey7 = new MultiKey<String>((String) null, (String) null, "!QK_$J[UiMK+n:=UypK");
      multiKeyArray0[6] = multiKey7;
      MultiKey<String> multiKey8 = new MultiKey<String>("PYO=~Q}", "");
      multiKeyArray0[7] = multiKey8;
      MultiKey<MultiKey<String>> multiKey9 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      MultiKey<String> multiKey10 = multiKey9.getKey(1);
      objectArray0[3] = (Object) multiKey10;
      MultiKey<MultiKey<Object>> multiKey11 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      // Undeclared exception!
      try { 
        multiKey11.getKey((-829));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -829
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(1390);
      Integer integer1 = new Integer(1390);
      Integer integer2 = new Integer(2662);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer0, integer2);
      multiKey0.size();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) integer1;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.size();
      MultiKey<String> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(2078);
      Integer integer1 = new Integer(153);
      int int0 = 288;
      Integer integer2 = new Integer(288);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer1, integer2);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "y7qwHe`";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "3D[ThwS";
      stringArray0[4] = "%O^JL&8/(<;eeoxZQ?";
      stringArray0[5] = "";
      stringArray0[6] = "TqX$oT-";
      stringArray0[7] = "";
      stringArray0[8] = "N9TX^$YW6:O";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey1, (Object) null, "N9TX^$YW6:O");
      MultiKey<MultiKey<Integer>> multiKey3 = null;
      try {
        multiKey3 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(1054);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0, integer1, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer1, integer0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[null, 3, 1054, 1054]", "i5j&pJ<fir_%y^dRF", multiKey1);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, true);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey3, multiKey2);
      int int0 = multiKey4.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      String string0 = multiKey0.toString();
      assertNotNull(string0);
  }
}
