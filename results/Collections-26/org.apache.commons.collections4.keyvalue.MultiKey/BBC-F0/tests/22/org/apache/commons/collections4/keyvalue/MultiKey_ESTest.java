/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:19:05 GMT 2020
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer1, integer1, integer0, integer1);
      Integer integer2 = new Integer(1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer2);
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey1, multiKey0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("MultiKey[1, 1, 1, 1]", multiKey2, "MultiKey[MultiKey[1, 1, 1, 1], 1]");
      Object object0 = multiKey3.getKey(1);
      multiKey2.equals(object0);
      MultiKey<String> multiKey4 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "(p", "");
      // Undeclared exception!
      try { 
        multiKey0.getKey(2602);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2602
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0, integer0);
      Integer integer1 = new Integer(1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      Integer integer2 = new Integer(5496);
      Integer integer3 = new Integer(2);
      Integer integer4 = new Integer(5496);
      Integer integer5 = new Integer(5496);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer3, integer4, integer4, integer5, integer2);
      multiKey2.toString();
      multiKey2.hashCode();
      Object[] objectArray0 = multiKey1.getKeys();
      multiKey0.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, false);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0);
      multiKey3.equals(multiKey4);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[2, 5496, 5496, 5496, 5496]", string0);
      
      MultiKey<String> multiKey5 = new MultiKey<String>("\"|KWP[$E|C%k~C", "'UH#V/2XI0", "", "");
      multiKey5.size();
      Integer integer6 = new Integer(1);
      boolean boolean0 = multiKey3.equals(multiKey4);
      assertFalse(multiKey1.equals((Object)multiKey0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(1206);
      Integer integer1 = new Integer(6);
      Integer integer2 = new Integer(2);
      Integer integer3 = new Integer(469);
      Integer integer4 = new Integer(901);
      Integer integer5 = new Integer(469);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.size();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "JFcN_4t~f ?uj";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "%zz_";
      stringArray0[4] = "";
      stringArray0[5] = "J5)T${sC";
      stringArray0[6] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      Integer integer6 = new Integer(2);
      boolean boolean0 = multiKey1.equals(integer6);
      assertFalse(boolean0);
      
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[]", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "", "");
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertFalse(boolean0);
      
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(1322);
      Integer integer3 = new Integer(3);
      Integer integer4 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer2, integer2, (Integer) null, integer4);
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey0.getKeys();
      multiKey1.equals("MultiKey[]");
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[0, 1322, 1322, null, 0]", string0);
      
      MultiKey<String> multiKey3 = new MultiKey<String>("", "MultiKey[]", "'UH#V/2XI0", "\"|KWP[$E|C%k~C");
      multiKey3.size();
      Integer integer5 = new Integer(0);
      boolean boolean1 = multiKey1.equals((Object) null);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      int int0 = 0;
      multiKey0.getKey(0);
      objectArray0[0] = null;
      int int1 = 1189;
      // Undeclared exception!
      try { 
        multiKey0.getKey(1189);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1189
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0, integer0);
      Integer integer1 = new Integer(1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey1, multiKey0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.equals(multiKey1);
      multiKey0.equals(integer0);
      multiKey1.hashCode();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "M|8G7$sL^Va\"";
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "M|8G7$sL^Va\"", "MultiKey", "qY!_|xciZ/E>QdWdP7D");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      multiKey0.hashCode();
      Object[] objectArray0 = new Object[8];
      MultiKey<Object> multiKey1 = new MultiKey<Object>("qY!_|xciZ/E>QdWdP7D", "MultiKey[MultiKey, M|8G7$sL^Va\", MultiKey, qY!_|xciZ/E>QdWdP7D]", "qY!_|xciZ/E>QdWdP7D", "MultiKey[MultiKey, M|8G7$sL^Va\", MultiKey, qY!_|xciZ/E>QdWdP7D]");
      int int0 = 1929;
      // Undeclared exception!
      try { 
        multiKey1.getKey(1929);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1929
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Integer integer0 = new Integer(1712);
      MultiKey<String> multiKey0 = new MultiKey<String>("", "h5`36v,IM%EO8KD", "", "Ko7");
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, multiKey0, "");
      Object object2 = multiKey2.getKey(0);
      objectArray0[2] = object2;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey3, multiKey2, multiKey3, multiKey3, multiKey3);
      int int0 = multiKey4.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, multiKey0);
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<String> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer3);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "MultiKey[0, 0, 0, 0]";
      stringArray0[1] = "MultiKey[0, 0, 0, 0]";
      stringArray0[2] = "MultiKey[0, 0, 0, 0]";
      stringArray0[3] = "MultiKey[0, 0, 0, 0]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[0, 0, 0, 0], MultiKey[0, 0, 0, 0], MultiKey[0, 0, 0, 0], MultiKey[0, 0, 0, 0]]", string0);
      
      MultiKey<String> multiKey2 = new MultiKey<String>("4kx", "MultiKey[0, 0, 0, 0]", "MultiKey[MultiKey[0, 0, 0, 0], MultiKey[0, 0, 0, 0], MultiKey[0, 0, 0, 0], MultiKey[0, 0, 0, 0]]", "MultiKey[0, 0, 0, 0]");
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      multiKey3.getKey(0);
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0, true);
      multiKey4.getKey(0);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey0, multiKey2, "MultiKey[0, 0, 0, 0]", "MultiKey[0, 0, 0, 0]", integer2);
      MultiKey<Object> multiKey6 = new MultiKey<Object>(multiKey1, multiKey5, "!5cL3g*{%@", multiKey3);
      assertTrue(multiKey1.equals((Object)multiKey4));
      
      boolean boolean0 = multiKey6.equals("MultiKey[0, 0, 0, 0]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.getKeys();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 2);
      Integer integer0 = new Integer(1623);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      multiKeyArray0[0] = multiKey1;
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer2, integer0, integer2);
      multiKeyArray0[1] = multiKey2;
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      multiKey3.getKeys();
      multiKey0.hashCode();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "XNS!CVU";
      stringArray0[2] = "";
      stringArray0[3] = "R|vbH-]~e_QF3QO/ ";
      stringArray0[4] = "W0_zXih5";
      stringArray0[5] = "";
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0);
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[, XNS!CVU, , R|vbH-]~e_QF3QO/ , W0_zXih5, ]", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, "9r>Z", "9r>Z");
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null, 9r>Z, 9r>Z]", string0);
  }
}
