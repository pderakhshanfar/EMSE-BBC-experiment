/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:16:31 GMT 2020
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null);
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 5);
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "ze UQs>~.U-ECTnm}");
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", (String) null, (String) null);
      multiKeyArray0[1] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("k", "", "&pR(x^pDAU8c/");
      multiKeyArray0[2] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("u46f-", (String) null, (String) null, "&pR(x^pDAU8c/");
      multiKeyArray0[3] = multiKey3;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = "ze UQs>~.U-ECTnm}";
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = "";
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0, true);
      assertFalse(multiKey4.equals((Object)multiKey0));
      
      multiKeyArray0[4] = multiKey4;
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      MultiKey<Object> multiKey6 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      boolean boolean0 = multiKey5.equals(multiKey6);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(783);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(783);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(1);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer((int) integerArray0[3]);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray0);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.size();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "dZ8JpSSrzKSx<fAi424";
      objectArray0[1] = (Object) "";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      // Undeclared exception!
      try { 
        multiKey1.getKey(7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer((-2581));
      Object object1 = new Object();
      Object object2 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, object1, object2, object0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, multiKey0);
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      Object[] objectArray0 = multiKey1.getKeys();
      multiKey1.getKeys();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.getKeys();
      multiKey0.hashCode();
      multiKey1.toString();
      Object[] objectArray1 = multiKey0.getKeys();
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "", "");
      multiKey0.getKey(0);
      objectArray0[0] = (Object) "org.apache.commons.collections4.keyvalue.MultiKey";
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      MultiKey<String> multiKey1 = new MultiKey<String>("*Zl<S", "The array of keys must not be null", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, object1, "*Zl<S", multiKey0, (Object) null);
      multiKey2.getKey(4);
      objectArray0[2] = null;
      multiKey2.getKey(4);
      objectArray0[3] = null;
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey0, multiKey1, multiKey1);
      MultiKey<String> multiKey4 = multiKey3.getKey(4);
      objectArray0[4] = (Object) multiKey4;
      int int0 = 476;
      // Undeclared exception!
      try { 
        multiKey0.getKey(476);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 476
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      multiKey0.toString();
      multiKey0.size();
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      int int1 = multiKey0.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "yXZT9w?$dd~KE/F'");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.equals(multiKey1);
      multiKey1.toString();
      multiKey1.size();
      // Undeclared exception!
      try { 
        multiKey0.getKey(943);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 943
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 2);
      Integer integer0 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, (Integer) null, integer0, integer0);
      multiKeyArray0[0] = multiKey0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      multiKeyArray0[1] = multiKey1;
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "The array of keys must not be null";
      stringArray0[1] = "0kLd9#+2(Z%x0K";
      stringArray0[2] = "";
      stringArray0[3] = "i?q#Xg";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "F?+FcquY*il%P]$";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      boolean boolean0 = multiKey2.equals(multiKey3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object1, object2);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object1, object1, multiKey0, object1);
      Object object3 = multiKey1.getKey(1);
      objectArray0[2] = object3;
      Object object4 = multiKey0.getKey(1);
      objectArray0[3] = object4;
      Object object5 = new Object();
      objectArray0[4] = object5;
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      Integer integer2 = multiKey2.getKey(0);
      objectArray0[5] = (Object) integer2;
      MultiKey<String> multiKey3 = new MultiKey<String>("", "5P`ktJ!1HHu", "", "IiOF$U}\"lDnN2");
      // Undeclared exception!
      try { 
        multiKey3.getKey(217);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 217
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 6);
      Object object0 = new Object();
      Integer integer0 = new Integer((-61));
      MultiKey<String> multiKey0 = new MultiKey<String>("+BT+uVU", "+BT+uVU", (String) null);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, integer0, object0, multiKey0);
      multiKeyArray0[0] = multiKey1;
      boolean boolean0 = true;
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      multiKeyArray0[1] = multiKey2;
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      multiKeyArray0[2] = multiKey3;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) multiKey3;
      objectArray0[1] = (Object) null;
      // Undeclared exception!
      try { 
        multiKey1.getKey((-61));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -61
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "G\"OkRt\"lrq";
      stringArray0[4] = "NpDII9O( R{e'";
      stringArray0[5] = "";
      stringArray0[6] = "|";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      String[] stringArray1 = multiKey0.getKeys();
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[]", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "$", "$", "", "?u:} n");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("MultiKey[, $, $, , ?u:} n]");
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, object0, multiKey0, "?u:} n");
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1073));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1073
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(3);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-4751));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[3, 0, -4751, 0]", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(2164);
      Integer integer1 = new Integer(2164);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("YX&5", integer1);
      Object object0 = new Object();
      boolean boolean0 = multiKey1.equals(object0);
      assertFalse(boolean0);
  }
}
