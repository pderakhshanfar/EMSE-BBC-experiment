/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:13:30 GMT 2020
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null, null]", string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.getKey(0);
      Object object1 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, (Object) null, object1);
      Object object2 = multiKey2.getKey(0);
      assertNotNull(object2);
      
      objectArray0[1] = object2;
      objectArray0[2] = (Object) "MultiKey[null, null, null]";
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      assertFalse(multiKey3.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      multiKey0.size();
      multiKey0.getKeys();
      MultiKey<String> multiKey1 = new MultiKey<String>("[O~t<USQ6{>K{LA1;", "[O~t<USQ6{>K{LA1;", (String) null, "");
      multiKey1.getKey(0);
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2527));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(9);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(4);
      integerArray0[4] = integer4;
      int int0 = 1;
      Integer integer5 = new Integer(1);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, true);
      multiKey2.toString();
      Integer[] integerArray1 = multiKey2.getKeys();
      assertEquals(7, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      Integer integer0 = new Integer((-1));
      multiKey1.toString();
      multiKey1.equals(multiKey1);
      multiKey1.hashCode();
      multiKey1.hashCode();
      multiKey1.toString();
      multiKey0.size();
      // Undeclared exception!
      try { 
        multiKey1.getKey(2823);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2823
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      int int0 = multiKey0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(4);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, (Object) null, (Object) null);
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.getKeys();
      MultiKey<MultiKey<String>> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", (Object) null, "{7*t#bWk#CbR~p", "org.apache.commons.collections4.keyvalue.MultiKey");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", multiKey0, (Object) null, (Object) null, (Object) null);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(1);
      multiKey1.equals(integer0);
      MultiKey<String> multiKey2 = new MultiKey<String>("{7*t#bWk#CbR~p", "", "", "", "");
      multiKey2.toString();
      multiKey2.hashCode();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer2);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[0, 0, 0, 0, 0]", string0);
      
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0, multiKey0);
      MultiKey<String> multiKey2 = new MultiKey<String>("TH=OOb4pTL+-D*,iK", (String) null, (String) null, "eZ.@3zl|qW}-Zj{O", "MultiKey[0, 0, 0, 0, 0]");
      multiKey2.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>((String) null, "TH=OOb4pTL+-D*,iK", "", "", "");
      boolean boolean0 = multiKey2.equals(multiKey3);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) "TH=OOb4pTL+-D*,iK";
      objectArray0[2] = (Object) multiKey2;
      objectArray0[3] = (Object) multiKey2;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) multiKey2;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0);
      Object object0 = multiKey4.getKey(0);
      assertEquals(0, object0);
      
      MultiKey<Object> multiKey5 = new MultiKey<Object>(integer1, "TH=OOb4pTL+-D*,iK", object0, integer2);
      MultiKey<Object> multiKey6 = new MultiKey<Object>(integer0, multiKey0, multiKey5, multiKey4, "MultiKey[0, 0, 0, 0, 0]");
      MultiKey<Object> multiKey7 = new MultiKey<Object>("", integer1, "", "", multiKey6);
      multiKey7.hashCode();
      assertFalse(multiKey4.equals((Object)multiKey6));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-1914));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-838));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -838
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer((-1244));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer0, integer1);
      Object object0 = multiKey0.getKey(3);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, integer1, integer0);
      multiKey1.getKeys();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "The array of keys must not be null", "", "", "");
      int int0 = multiKey2.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      String string0 = multiKey1.getKey(0);
      Integer integer1 = multiKey0.getKey(0);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 7);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer2, integer3, integer4);
      Object object0 = multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("", "", "", integer1, object0);
      multiKeyArray0[0] = multiKey3;
      Object object1 = new Object();
      Integer integer5 = new Integer(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(object1, integer0, integer3, integer5, "");
      multiKeyArray0[1] = multiKey4;
      Integer integer6 = new Integer(0);
      Integer integer7 = new Integer(0);
      Integer integer8 = new Integer(0);
      Integer integer9 = new Integer(0);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer6, integer7, integer8, integer9);
      Object object2 = new Object();
      MultiKey<Object> multiKey6 = new MultiKey<Object>(multiKey3, multiKey4, multiKey5, object2);
      multiKeyArray0[2] = multiKey6;
      Integer integer10 = new Integer(0);
      MultiKey<Object> multiKey7 = new MultiKey<Object>(integer3, multiKey5, object1, integer10, integer0);
      multiKeyArray0[3] = multiKey7;
      MultiKey<String> multiKey8 = new MultiKey<String>("", "", "`'Ze`tt~hw.", "");
      multiKey8.getKey(0);
      MultiKey<Object> multiKey9 = new MultiKey<Object>("", (Object) null);
      multiKeyArray0[4] = multiKey9;
      MultiKey<String> multiKey10 = new MultiKey<String>("", "Fp6?d", "");
      MultiKey<Object> multiKey11 = new MultiKey<Object>("", "", "", multiKey10);
      multiKeyArray0[5] = multiKey11;
      MultiKey<Object> multiKey12 = new MultiKey<Object>((Object) null, "", multiKey3, (Object) null, multiKey6);
      multiKeyArray0[6] = multiKey12;
      MultiKey<MultiKey<Object>> multiKey13 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      String string1 = multiKey13.toString();
      assertFalse(string1.equals((Object)string0));
  }
}
