/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:21:18 GMT 2020
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      multiKey1.toString();
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0);
      Object object0 = multiKey1.getKey(1);
      boolean boolean0 = multiKey0.equals(object0);
      Object object1 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, "", object1);
      MultiKey<String> multiKey3 = new MultiKey<String>("P'znlYB'J", "P'znlYB'J", "Nr/axS,<shZ}#z+s^(e", "");
      boolean boolean1 = multiKey3.equals("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(1);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0, "i3y%7_Dxm%1{[");
      multiKey0.toString();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "i3y%7_Dxm%1{[";
      stringArray0[1] = "i3y%7_Dxm%1{[";
      stringArray0[2] = "i3y%7_Dxm%1{[";
      stringArray0[3] = "i3y%7_Dxm%1{[";
      stringArray0[4] = "i3y%7_Dxm%1{[";
      stringArray0[5] = "i3y%7_Dxm%1{[";
      stringArray0[6] = "i3y%7_Dxm%1{[";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) stringArray0, true);
      multiKey2.getKey(1);
      multiKey1.equals("i3y%7_Dxm%1{[");
      multiKey2.hashCode();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey0, multiKey0);
      multiKey3.equals(multiKey0);
      multiKey3.getKeys();
      // Undeclared exception!
      try { 
        multiKey0.getKey(706);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 706
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-2075));
      Integer integer1 = new Integer((-2075));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0);
      multiKey0.toString();
      multiKey0.toString();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.toString();
      multiKey1.toString();
      String[] stringArray1 = multiKey1.getKeys();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(stringArray1);
      multiKey2.hashCode();
      // Undeclared exception!
      try { 
        multiKey1.getKey(3131);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3131
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) integer0;
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1, (Integer) null);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey1);
      MultiKey<Integer> multiKey3 = multiKey2.getKey(0);
      objectArray0[1] = (Object) multiKey3;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0, true);
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[0, MultiKey[0, 0]]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "MultiKey", "", "MultiKey", "O{+A5<oDp+#");
      multiKey0.toString();
      multiKey0.hashCode();
      int int0 = multiKey0.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-1535));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2277));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-269));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      integerArray0[3] = integer3;
      int int0 = 0;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.getKeys();
      multiKey0.hashCode();
      Integer integer6 = new Integer((-281));
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer6, integer6, integerArray0[3], int0);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-269));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -269
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null, null]", string0);
      
      multiKey0.getKey(0);
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      boolean boolean0 = multiKey1.equals(integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("*J<8P~JcK!?9GkhICe", "*J<8P~JcK!?9GkhICe", "*J<8P~JcK!?9GkhICe", "*J<8P~JcK!?9GkhICe");
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, multiKey0, (Object) null, "*J<8P~JcK!?9GkhICe", (Object) null);
      multiKey1.toString();
      int int0 = 2577;
      multiKey1.toString();
      Integer integer0 = new Integer(2577);
      multiKey1.equals(integer0);
      MultiKey<String> multiKey2 = new MultiKey<String>("*J<8P~JcK!?9GkhICe", "*J<8P~JcK!?9GkhICe", "z=CMVT?:lHu-mFu7d", "*J<8P~JcK!?9GkhICe");
      multiKey2.toString();
      Integer[] integerArray0 = new Integer[4];
      Integer integer1 = new Integer((-1));
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0, true);
      multiKey3.toString();
      // Undeclared exception!
      try { 
        multiKey3.getKey((-2149));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2149
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "a7dL";
      stringArray0[2] = "pt!ao{]Ac(p";
      stringArray0[3] = "U]";
      stringArray0[4] = "";
      stringArray0[5] = "The array of keys must not be null";
      stringArray0[6] = "LD\"z|wRKhg";
      stringArray0[7] = "MultiKey";
      stringArray0[8] = "io-Sbe{dHRNA\"";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      int int0 = (-3969);
      Integer integer0 = new Integer((-3969));
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, object0);
      multiKey1.toString();
      multiKey1.hashCode();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-3969));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3969
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "iQ`|zdRh");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      int int0 = (-2516);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-2516));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2516
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
