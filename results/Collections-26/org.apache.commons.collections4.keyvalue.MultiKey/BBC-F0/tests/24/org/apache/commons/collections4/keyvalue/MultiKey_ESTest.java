/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:20:30 GMT 2020
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(3);
      Integer integer2 = new Integer((-777));
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer0, integer3);
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 8);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[7] = multiKey0;
      multiKeyArray0[5] = multiKey0;
      multiKeyArray0[6] = multiKey0;
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, true);
      multiKey1.toString();
      multiKey1.getKey(0);
      Object object0 = new Object();
      MultiKey<String> multiKey2 = new MultiKey<String>("c-)z3`,sf~5m)+", "", "org.apache.commons.collections4.keyvalue.MultiKey", "c-)z3`,sf~5m)+", "");
      MultiKey<Object>[] multiKeyArray1 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray1, true);
      multiKey3.size();
      int int0 = multiKey2.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-1107));
      Integer integer1 = new Integer((-1107));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer1, "kVB7c99n", "kVB7c99n");
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, multiKey0, integer1);
      multiKey1.size();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "kVB7c99n";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.toString();
      multiKey1.toString();
      boolean boolean0 = multiKey2.equals(multiKey2);
      assertTrue(boolean0);
      
      Integer integer2 = new Integer((-1107));
      MultiKey<Object> multiKey3 = new MultiKey<Object>("MultiKey[kVB7c99n]", multiKey0, multiKey1, multiKey0, (Object) null);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[kVB7c99n], MultiKey[-1107, kVB7c99n, kVB7c99n], MultiKey[null, MultiKey[-1107, kVB7c99n, kVB7c99n], -1107], MultiKey[-1107, kVB7c99n, kVB7c99n], null]", string0);
      
      MultiKey<String> multiKey4 = new MultiKey<String>("Fhh%lcy`kH", "kVB7c99n", "");
      assertFalse(multiKey4.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      Integer integer2 = new Integer(1);
      Integer integer3 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer2, integer2, integer3);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, integer0, multiKey0);
      multiKey2.toString();
      multiKey2.size();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "MultiKey[1, 1]";
      Integer integer4 = new Integer(1);
      Integer integer5 = new Integer(752);
      Integer integer6 = new Integer(1);
      Integer integer7 = new Integer(1);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer6, integer2, integer7);
      multiKey0.toString();
      multiKey3.toString();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, false);
      MultiKey<Integer>[] multiKeyArray1 = multiKey4.getKeys();
      assertNotSame(multiKeyArray0, multiKeyArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", (String) null, "", (String) null);
      String string0 = multiKey0.getKey(1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(2968);
      Integer integer1 = new Integer(2968);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer0, integer2);
      multiKey0.toString();
      multiKey0.size();
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey[null, null]", "MultiKey[null, null]", "MultiKey[null, null]", "MultiKey[null, null]");
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey1.equals(multiKey0);
      multiKey1.getKeys();
      MultiKey<String> multiKey2 = new MultiKey<String>((String) null, "", "MultiKey[null, null]", (String) null, "");
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.size();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1031));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1031
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer((-5887));
      MultiKey<String> multiKey0 = new MultiKey<String>("LC82lT", "A)S-#g,`eX(", "LC82lT");
      multiKey0.getKey(1);
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("A)S-#g,`eX(", "A)S-#g,`eX(", "A)S-#g,`eX(", object1);
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, integer0, object0, integer0, "A)S-#g,`eX(");
      int int0 = multiKey2.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0, integer0, integer0);
      boolean boolean0 = multiKey0.equals("MultiKey");
      assertFalse(boolean0);
      
      MultiKey<String> multiKey1 = new MultiKey<String>("geK#syj", "The array of keys must not be null", "The array of keys must not be null", "");
      multiKey1.hashCode();
      multiKey1.toString();
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[0, 0, 0, 0]", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      int int0 = 1058;
      Integer integer0 = new Integer(1058);
      Integer integer1 = new Integer(1058);
      int int1 = 1;
      Integer integer2 = new Integer(1);
      int int2 = 0;
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer0, integer3);
      // Undeclared exception!
      try { 
        multiKey0.getKey(1058);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1058
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 7;
      Integer integer0 = new Integer(7);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0);
      // Undeclared exception!
      try { 
        multiKey0.getKey(7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, "");
      boolean boolean0 = multiKey0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 2);
      MultiKey<String> multiKey0 = new MultiKey<String>("7D4", "7D4", "7D4");
      multiKeyArray0[0] = multiKey0;
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      multiKeyArray0[1] = multiKey1;
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKeyArray0);
      int int0 = multiKey3.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
