/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:16:12 GMT 2020
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      Object object1 = multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, object0, object1, object0, (Object) null);
      multiKey0.toString();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "MultiKey[, ]";
      stringArray0[3] = "";
      stringArray0[4] = "MultiKey[, ]";
      stringArray0[5] = "MultiKey[, ]";
      MultiKey<String> multiKey3 = new MultiKey<String>("", "MultiKey[, ]", "", "The array of keys must not be null", "");
      MultiKey<Object> multiKey4 = new MultiKey<Object>("", "", "", "", multiKey0);
      multiKey4.toString();
      MultiKey<String> multiKey5 = new MultiKey<String>("/-<5'/hu0]yF;", "P5|FBV-SQ");
      String string0 = multiKey5.toString();
      assertEquals("MultiKey[/-<5'/hu0]yF;, P5|FBV-SQ]", string0);
      
      Integer integer0 = new Integer(0);
      Object object2 = new Object();
      MultiKey<Object> multiKey6 = new MultiKey<Object>(";O|]rMH+.mg^c;<ao", integer0, object2, "MultiKey[, , , , MultiKey[, ]]", "");
      boolean boolean0 = multiKey4.equals(multiKey6);
      Object object3 = new Object();
      boolean boolean1 = multiKey0.equals(multiKey0);
      assertFalse(boolean1 == boolean0);
      
      MultiKey<Object> multiKey7 = new MultiKey<Object>(stringArray0);
      String[] stringArray1 = new String[9];
      stringArray1[0] = ";O|]rMH+.mg^c;<ao";
      stringArray1[1] = "P5|FBV-SQ";
      stringArray1[2] = "/-<5'/hu0]yF;";
      stringArray1[3] = "P5|FBV-SQ";
      stringArray1[4] = "The array of keys must not be null";
      MultiKey<String> multiKey8 = new MultiKey<String>(stringArray1);
      MultiKey<Object> multiKey9 = new MultiKey<Object>(multiKey8, "MultiKey[, ]", "");
      Object object4 = new Object();
      Integer integer1 = new Integer(4);
      MultiKey<Object> multiKey10 = new MultiKey<Object>(multiKey9, object4, integer1, "MultiKey[, ]", "");
      MultiKey<MultiKey<Object>> multiKey11 = new MultiKey<MultiKey<Object>>(multiKey7, multiKey4, multiKey6, multiKey10);
      multiKey11.size();
      assertFalse(multiKey9.equals((Object)multiKey6));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(" 5jKU'_rw+,u@", " 5jKU'_rw+,u@");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.equals(" 5jKU'_rw+,u@");
      Object[] objectArray1 = multiKey1.getKeys();
      assertEquals(0, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, "('\"[4vKbsrzu", object0, (Object) null);
      String[] stringArray0 = new String[10];
      stringArray0[0] = "M,Y,GNSjx?rZ*@N ";
      stringArray0[1] = "";
      stringArray0[2] = "Y\b3u";
      stringArray0[3] = "M,Y,GNSjx?rZ*@N ";
      stringArray0[4] = "";
      stringArray0[5] = "('\"[4vKbsrzu";
      stringArray0[6] = "('\"[4vKbsrzu";
      stringArray0[7] = "";
      stringArray0[8] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) stringArray0, true);
      Integer integer0 = new Integer(2587);
      multiKey3.equals(multiKey1);
      Integer integer1 = new Integer((-2049));
      Integer integer2 = new Integer(3);
      MultiKey<String> multiKey4 = new MultiKey<String>("M,Y,GNSjx?rZ*@N ", "('\"[4vKbsrzu", "Y\b3u", "a@ces@J");
      MultiKey<String> multiKey5 = new MultiKey<String>(",FAY:y1!j_f", "", "");
      String string0 = multiKey5.toString();
      assertEquals("MultiKey[,FAY:y1!j_f, , ]", string0);
      assertFalse(multiKey5.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("Zvb", "Zvb", "Zvb");
      Integer integer0 = new Integer((-225));
      MultiKey<Object> multiKey1 = new MultiKey<Object>("Zvb", integer0, integer0);
      multiKey1.toString();
      multiKey1.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, true);
      int int0 = multiKey2.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      Object object1 = new Object();
      Object object2 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", multiKey0, object1, "", object2);
      int int0 = 0;
      multiKey2.toString();
      multiKey2.getKey(0);
      multiKey0.toString();
      multiKey2.toString();
      String string0 = multiKey0.toString();
      //  // Unstable assertion: assertEquals("MultiKey[, ]", string0);
      
      boolean boolean0 = multiKey1.equals("");
      //  // Unstable assertion: assertFalse(boolean0);
      
      boolean boolean1 = multiKey0.equals(multiKey2);
      //  // Unstable assertion: assertFalse(boolean1);
      
      multiKey1.getKey(0);
      multiKey0.getKey(0);
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0, true);
      int int1 = multiKey3.hashCode();
      //  // Unstable assertion: assertTrue(int1 == int0);
      
      multiKey1.getKey(int0);
      //  // Unstable assertion: assertFalse(multiKey1.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(535);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(114);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, (MultiKey<Integer>) null);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integerArray0);
      multiKey2.toString();
      multiKey2.hashCode();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null);
      MultiKey<Object> multiKey4 = multiKey3.getKey(0);
      assertNull(multiKey4);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<MultiKey<Integer>> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      Integer integer2 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", integer2);
      int int0 = multiKey1.size();
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "", "");
      multiKey2.toString();
      multiKey2.getKey(0);
      multiKey2.size();
      multiKey1.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[, , , ]", string0);
      
      multiKey1.getKeys();
      multiKey2.getKey(0);
      multiKey0.hashCode();
      int int1 = multiKey0.hashCode();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "x,[Jo1HrA";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "MultiKey";
      stringArray0[7] = "M,Y,GNSjx?rZ*@N ";
      stringArray0[8] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, true);
      multiKey1.equals("x,[Jo1HrA");
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer0);
      boolean boolean0 = multiKey2.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.hashCode();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[3] = "";
      stringArray0[4] = "FLO{ZZi+--.:fvj*d2";
      stringArray0[5] = "m0>jE0)";
      stringArray0[6] = "[)Q%!mdV7Nmd";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.hashCode();
      MultiKey<MultiKey<Object>> multiKey3 = null;
      try {
        multiKey3 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Fu|";
      boolean boolean0 = false;
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, multiKey0, object0, object0);
      int int0 = 750;
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(750);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 750
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      Object object1 = multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, object0, object1, object0, (Object) null);
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey0.toString();
      String string0 = multiKey0.toString();
      String string1 = multiKey0.getKey(0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(2);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[2, 2, 2, 2, 2]", "MultiKey[2, 2, 2, 2, 2]", "MultiKey[2, 2, 2, 2, 2]", "", "");
      // Undeclared exception!
      try { 
        multiKey1.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
