/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:21:07 GMT 2020
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("The array of keys must not be null", "The array of keys must not be null", "The array of keys must not be null");
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("O|,E0,Ud!pYZ^Lp_", "O|,E0,Ud!pYZ^Lp_");
      boolean boolean0 = multiKey1.equals("MultiKey[The array of keys must not be null, The array of keys must not be null, The array of keys must not be null]");
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[O|,E0,Ud!pYZ^Lp_, O|,E0,Ud!pYZ^Lp_]", string0);
      
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, multiKey0, "MultiKey[The array of keys must not be null, The array of keys must not be null, The array of keys must not be null]", "The array of keys must not be null", object0);
      Object object1 = multiKey2.getKey(1);
      boolean boolean1 = multiKey0.equals(object1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null);
      multiKey0.getKey(0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = null;
      objectArray0[7] = (Object) multiKey0;
      objectArray0[8] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object) null, (Object) null, multiKey1, multiKey2, objectArray0[6]);
      int int0 = multiKey3.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", "");
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, , ]", string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "MultiKey[, , ]";
      stringArray0[3] = "MultiKey[, , ]";
      stringArray0[4] = "MultiKey[, , ]";
      stringArray0[5] = "MultiKey[, , ]";
      stringArray0[6] = "MultiKey[, , ]";
      stringArray0[7] = "MultiKey[, , ]";
      stringArray0[8] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) stringArray0, true);
      multiKey1.equals(multiKey2);
      assertFalse(multiKey2.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 3);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKeyArray0[1] = multiKey1;
      multiKey0.toString();
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("331!iLpOG:Kd-", "The array of keys must not be null", "The array of keys must not be null", "~nj@uV)9n0{>ity");
      multiKeyArray0[2] = multiKey2;
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-1));
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer0, integer1, integer2);
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[0, 0, 0, -1]", string0);
      
      Object object0 = new Object();
      MultiKey<Object> multiKey5 = new MultiKey<Object>("B0s/QQ_M^&", object0);
      MultiKey<Object> multiKey6 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      MultiKey<MultiKey<Object>> multiKey7 = new MultiKey<MultiKey<Object>>(multiKey5, multiKey5, multiKey6, multiKey6);
      Integer integer3 = new Integer((-1));
      boolean boolean0 = multiKey7.equals(integer3);
      assertFalse(boolean0);
      
      multiKey5.toString();
      multiKey5.getKeys();
      int int0 = multiKey0.size();
      MultiKey<MultiKey<Integer>> multiKey8 = new MultiKey<MultiKey<Integer>>(multiKey4, multiKey4, multiKey4, multiKey4);
      int int1 = multiKey8.hashCode();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "MultiKey[java.lang.Object@712f313c, ]", "MultiKey[java.lang.Object@712f313c, ]", "");
      multiKey1.equals(multiKey0);
      multiKey0.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("/``OD\"k(m{Gq;>", "/``OD\"k(m{Gq;>", "MultiKey[java.lang.Object@712f313c, ]", "MultiKey", "MultiKey[java.lang.Object@712f313c, ]");
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey2);
      int int0 = (-1205);
      // Undeclared exception!
      try { 
        multiKey3.getKey((-1205));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1205
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "oh+^a|n.}heV";
      stringArray0[1] = "y2$n$Jc)4_gj";
      stringArray0[2] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("oh+^a|n.}heV", object0);
      multiKey1.getKey(0);
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((-15));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-291));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1396);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(3125);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(906);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      MultiKey<MultiKey<Integer>> multiKey3 = null;
      try {
        multiKey3 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      Integer integer1 = multiKey0.getKey(0);
      objectArray0[2] = (Object) integer1;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Object object2 = multiKey1.getKey(0);
      objectArray0[3] = object2;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = ". jl.MV,";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "d]S2\"\u0005&-n(3hW('0";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      int int0 = 5;
      // Undeclared exception!
      try { 
        multiKey2.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      boolean boolean0 = multiKey0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      MultiKey<String> multiKey0 = new MultiKey<String>("&= w> ra_O$$]I*j", "&= w> ra_O$$]I*j", "&= w> ra_O$$]I*j");
      int int0 = (-1685);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1685));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1685
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(2066);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(2807);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[4]);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(0);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(1170);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      Integer integer9 = multiKey0.getKey(0);
      assertEquals(2066, (int)integer9);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(655);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(655);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.getKeys();
      String string0 = "`Sk~Ih[";
      String string1 = "";
      MultiKey<String> multiKey1 = new MultiKey<String>("`Sk~Ih[", "", "`Sk~Ih[", "MultiKey[655, 655, 1, 0]");
      multiKey1.size();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null);
      // Undeclared exception!
      try { 
        multiKey2.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.getKeys();
      multiKey0.getKeys();
      Object object0 = null;
      Object object1 = new Object();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      int int0 = 451;
      // Undeclared exception!
      try { 
        multiKey1.getKey(451);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 451
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object1);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, object1, multiKey0, multiKey1);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "1H";
      stringArray0[1] = "";
      stringArray0[2] = "AE*";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      int int0 = multiKey3.size();
      assertEquals(7, int0);
  }
}
