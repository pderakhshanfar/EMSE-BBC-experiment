/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:19:56 GMT 2020
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      int int0 = multiKey0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[4];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      String[] stringArray1 = multiKey0.getKeys();
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("GT-6+C_v7(Lj](&G#R", "", "", "GT-6+C_v7(Lj](&G#R", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", multiKey0, "GT-6+C_v7(Lj](&G#R");
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      // Undeclared exception!
      try { 
        multiKey2.getKey(1465);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1465
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<MultiKey<Object>> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("R<&>", multiKey0, "R<&>");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      Object object0 = multiKey2.getKey(0);
      boolean boolean0 = multiKey1.equals(object0);
      assertTrue(boolean0);
      assertFalse(multiKey2.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      boolean boolean0 = multiKey0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      int int0 = multiKey0.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, (Object) null, object0);
      Object object1 = multiKey0.getKey(1);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, (Object) null, object0);
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer((-2647));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, (Integer) null, integer0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[-2647, -2647, null, -2647]", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      String[] stringArray1 = multiKey0.getKeys();
      assertNotSame(stringArray0, stringArray1);
  }
}
