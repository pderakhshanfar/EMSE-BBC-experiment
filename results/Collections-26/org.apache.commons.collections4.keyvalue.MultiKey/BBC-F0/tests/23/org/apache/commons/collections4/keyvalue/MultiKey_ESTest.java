/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:19:57 GMT 2020
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "BY$p^";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "The array of keys must not be null";
      stringArray0[5] = "rb_-V/p-#F|K/j&";
      stringArray0[6] = ":CIDN,";
      stringArray0[7] = "8{8xZ,9s$a.Amn";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.getKey(1);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", object0, "");
      multiKey1.getKeys();
      multiKey1.getKeys();
      multiKey0.toString();
      multiKey1.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, true);
      int int0 = multiKey2.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "]");
      multiKey0.hashCode();
      multiKey0.equals(multiKey0);
      Object object0 = new Object();
      Integer integer0 = new Integer(2314);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      multiKey1.hashCode();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0);
      // Undeclared exception!
      try { 
        multiKey2.getKey(2314);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2314
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.getKey(1);
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, "", "5");
      multiKey0.toString();
      boolean boolean0 = true;
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "a'yk!";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", multiKey0, "");
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 3);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey1;
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      multiKey2.getKey(0);
      int int0 = 2743;
      // Undeclared exception!
      try { 
        multiKey1.getKey(2743);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2743
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "");
      multiKey1.hashCode();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[1]", string0);
      
      multiKey1.size();
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) integerArray0, false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "MultiKey[1]";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      Object object0 = new Object();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey3, multiKey1, "", multiKey2, object0);
      MultiKey multiKey5 = (MultiKey)multiKey4.getKey(0);
      MultiKey<Object> multiKey6 = new MultiKey<Object>(integer1, multiKey2, multiKey5, "MultiKey[1]");
      boolean boolean0 = multiKey6.equals(integer1);
      assertEquals(1, multiKey5.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "R,:W.8'}hw";
      stringArray0[1] = "Ky<g@N";
      stringArray0[2] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.hashCode();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("Ky<g@N", "", "MultiKey[R,:W.8'}hw, Ky<g@N, ]", "R,:W.8'}hw", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(4166);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4166
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, false);
      multiKey1.toString();
      Object[] objectArray0 = multiKey1.getKeys();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      Object[] objectArray0 = new Object[5];
      multiKey0.toString();
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) multiKey0;
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      String string0 = multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.equals(objectArray0[4]);
      multiKey0.toString();
      multiKey1.hashCode();
      multiKey0.hashCode();
      multiKey0.toString();
      multiKey1.equals("");
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-390));
      Integer integer2 = new Integer((-390));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, (Integer) null, integer1, integer2);
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.hashCode();
      String string1 = multiKey0.getKey(0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      String string0 = "";
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", "", "");
      // Undeclared exception!
      try { 
        multiKey0.getKey(1535);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1535
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
