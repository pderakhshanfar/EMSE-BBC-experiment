/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:14:19 GMT 2020
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("ZN8w9CTI0Rt960yMi", "ZN8w9CTI0Rt960yMi", "ZN8w9CTI0Rt960yMi");
      boolean boolean0 = multiKey0.equals("ZN8w9CTI0Rt960yMi");
      Integer integer0 = new Integer((-2819));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, (Integer) null);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, "ZN8w9CTI0Rt960yMi");
      Object object0 = multiKey2.getKey(0);
      boolean boolean1 = multiKey1.equals(object0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "xe0e;aOj[dW", (String) null, "", (String) null);
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, xe0e;aOj[dW, null, , null]", string0);
      
      Integer integer0 = new Integer(9);
      Integer integer1 = new Integer(9);
      Integer integer2 = new Integer(9);
      Integer integer3 = new Integer(1425);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, integer1, integer2, integer3);
      boolean boolean0 = multiKey1.equals("");
      MultiKey<String> multiKey2 = new MultiKey<String>("*", "!V(p%%W*7*", "xe0e;aOj[dW", (String) null);
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer1, (Object) null, "xe0e;aOj[dW");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) multiKey2;
      objectArray0[1] = (Object) "xe0e;aOj[dW";
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0);
      multiKey4.getKey(1);
      MultiKey<String> multiKey5 = new MultiKey<String>("", "");
      MultiKey<Object> multiKey6 = new MultiKey<Object>(objectArray0, false);
      boolean boolean1 = multiKey4.equals(multiKey6);
      assertFalse(multiKey4.equals((Object)multiKey3));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "o@3";
      stringArray0[1] = "418$kf";
      stringArray0[2] = "X+j?itM/>l>&D%z2";
      stringArray0[3] = ")rpk`te_Y";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.equals((Object) null);
      multiKey0.toString();
      multiKey1.getKey(int0);
      Integer integer1 = new Integer(int0);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      int int1 = multiKey3.size();
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      int int2 = multiKey4.size();
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("$?>F@6", object0, (Object) null, object0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey0, multiKey1, "$?>F@6", "$?>F@6");
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey1, multiKey0);
      multiKey0.getKeys();
      boolean boolean0 = multiKey2.equals("2\"?'<)~");
      assertFalse(boolean0);
      
      multiKey1.getKeys();
      assertFalse(multiKey1.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "xe0e;aOj[dW", (String) null, "", (String) null);
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, xe0e;aOj[dW, null, , null]", string0);
      
      Integer integer0 = new Integer(1);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      boolean boolean0 = multiKey1.equals((Object) null);
      assertFalse(boolean0);
      
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 6);
      MultiKey<String> multiKey2 = new MultiKey<String>("!V(p%%W*7*", (String) null, "xe0e;aOj[dW", (String) null);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      multiKey3.getKey(4);
      MultiKey<String> multiKey4 = new MultiKey<String>("MultiKey[, xe0e;aOj[dW, null, , null]", "");
      boolean boolean1 = multiKey3.equals(multiKey4);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 2);
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", object0);
      multiKeyArray0[0] = multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "");
      multiKey1.toString();
      multiKeyArray0[1] = multiKey1;
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>("", "", (String) null);
      multiKey1.toString();
      multiKey3.equals(multiKey1);
      multiKey0.toString();
      multiKey3.equals("fG!dU+|aU");
      multiKey0.getKeys();
      // Undeclared exception!
      try { 
        multiKey3.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      MultiKey<String> multiKey2 = new MultiKey<String>("ls=-^m !", "#+/MBzR<=-x]&s");
      multiKey2.toString();
      Object object0 = multiKey2.getKey(int0);
      assertEquals("ls=-^m !", object0);
      
      multiKey1.equals("ls=-^m !");
      multiKey1.toString();
      Integer integer2 = new Integer(int0);
      Object object1 = new Object();
      Object object2 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer2, int0, object1, object2, "");
      multiKey3.toString();
      int int1 = multiKey3.size();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[0, 0]", string0);
      
      int int2 = multiKey2.hashCode();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      boolean boolean0 = multiKey3.equals("");
      assertFalse(boolean0);
      
      MultiKey<String> multiKey4 = new MultiKey<String>("(_8Nj", "");
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKey4, multiKey2, multiKey2, multiKey4, multiKey1);
      MultiKey<String> multiKey6 = multiKey5.getKey(0);
      assertSame(multiKey4, multiKey6);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "", (String) null);
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey1, multiKey0, multiKey1);
      int int0 = 1080;
      // Undeclared exception!
      try { 
        multiKey2.getKey(1080);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1080
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
