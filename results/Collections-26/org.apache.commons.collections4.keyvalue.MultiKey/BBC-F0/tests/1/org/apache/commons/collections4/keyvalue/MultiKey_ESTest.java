/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:13:09 GMT 2020
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "hzCE~&OO");
      boolean boolean0 = multiKey0.equals((Object) null);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, , , , hzCE~&OO]", string0);
      
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, (MultiKey<String>) null, multiKey0, (MultiKey<String>) null, multiKey0);
      multiKey1.getKeys();
      boolean boolean1 = multiKey0.equals(multiKey0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0);
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null);
      multiKey2.toString();
      multiKey2.toString();
      Integer[] integerArray1 = multiKey0.getKeys();
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(4);
      Integer integer1 = new Integer(4);
      Integer integer2 = new Integer(4);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer2);
      Integer integer3 = new Integer((-3662));
      Integer integer4 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer3, integer3, integer4, integer3);
      Object object0 = multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer1, object0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer2, integer3);
      multiKey2.equals(multiKey3);
      boolean boolean0 = multiKey2.equals(multiKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "", multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[, , MultiKey[]]", string0);
      
      Integer integer0 = new Integer(0);
      boolean boolean0 = multiKey1.equals(integer0);
      assertFalse(boolean0);
      
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer1, integer0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(stringArray0);
      multiKey3.size();
      assertFalse(multiKey3.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      int int1 = 3;
      multiKey0.getKey(3);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, integer0, (Object) null, multiKey0, integer0);
      int int2 = 0;
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.getKey(3);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "}Vmw!RXJ`";
      stringArray0[1] = "S9H ;%!.}gr0yuE|";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("S9H ;%!.}gr0yuE|", "S9H ;%!.}gr0yuE|", "S9H ;%!.}gr0yuE|", object0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, "S9H ;%!.}gr0yuE|");
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, object0, object0, "S9H ;%!.}gr0yuE|", multiKey0);
      multiKey3.toString();
      multiKey2.equals(multiKey3);
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey4.size();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integerArray0);
      Integer integer0 = new Integer(3);
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      MultiKey<MultiKey<Integer>> multiKey7 = new MultiKey<MultiKey<Integer>>(multiKey5, multiKey6, multiKey6, multiKey5, multiKey5);
      boolean boolean0 = multiKey7.equals(object0);
      assertFalse(boolean0);
      
      multiKey6.hashCode();
      boolean boolean1 = multiKey1.equals(multiKey0);
      assertFalse(boolean1);
      
      String string0 = multiKey5.toString();
      assertEquals("MultiKey[]", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", (Object) null, (Object) null, (Object) null, "");
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      MultiKey<Object> multiKey2 = multiKey1.getKey(0);
      objectArray0[0] = (Object) multiKey2;
      multiKey2.getKey(4);
      objectArray0[1] = (Object) "";
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      Object object2 = new Object();
      objectArray0[4] = object2;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, false);
      int int0 = multiKey3.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = (-765);
      Integer integer0 = new Integer((-765));
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.toString();
      multiKey0.equals(integerArray0[0]);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integerArray0[0], integerArray0[0]);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, true);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer0, multiKey1, multiKey2);
      MultiKey<String> multiKey4 = new MultiKey<String>("ko&`z7", "ko&`z7");
      MultiKey<Object> multiKey5 = new MultiKey<Object>(integerArray0);
      // Undeclared exception!
      try { 
        multiKey5.getKey((int) integerArray0[0]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -765
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{";
      stringArray0[1] = "";
      stringArray0[2] = " 1]Bao)68'H{y00&7yM";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, multiKey0);
      Integer[] integerArray0 = new Integer[6];
      Integer integer1 = new Integer(0);
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      Integer integer2 = new Integer(2741);
      integerArray0[3] = integer2;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKey2.getKeys();
      multiKey0.getKey(0);
      multiKey2.toString();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey3.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      int int1 = multiKey0.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("ERm!UGYfZ.8 Bo2", "");
      multiKey0.toString();
      multiKey0.toString();
      int int0 = (-186);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-186));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -186
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = (-5319);
      Integer integer0 = new Integer((-5319));
      Integer integer1 = new Integer(4);
      int int1 = 1032;
      Integer integer2 = new Integer(1032);
      Integer integer3 = new Integer(1032);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer3);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>(";=+(ZXi5!ABq]:ra", "", "", (String) null, "");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer2, integer2, integer2, multiKey1);
      multiKey2.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
