/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:15:24 GMT 2020
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-4298));
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", integer0, "The array of keys must not be null");
      multiKey0.toString();
      multiKey0.equals("The array of keys must not be null");
      MultiKey<String> multiKey1 = new MultiKey<String>("The array of keys must not be null", "");
      Integer integer1 = new Integer((-4298));
      Integer integer2 = new Integer(1);
      Integer integer3 = new Integer(1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer2, integer2);
      multiKey0.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[The array of keys must not be null, ]", string0);
      
      MultiKey<String> multiKey3 = new MultiKey<String>("The array of keys must not be null", (String) null, "pLMPLIh", "]L_0P+5!X{2I0(p");
      boolean boolean0 = multiKey1.equals(multiKey1);
      MultiKey<String> multiKey4 = new MultiKey<String>("fejn)cH", "AtfJj`", "vPh/:o$N8$", "", "{;d(");
      MultiKey<Object> multiKey5 = new MultiKey<Object>((Object) null, multiKey1, multiKey4, "hFFB5fiwa|");
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey5);
      multiKey6.hashCode();
      MultiKey<String> multiKey7 = new MultiKey<String>("pLMPLIh", "#pTKdq4d", "The array of keys must not be null");
      Integer integer4 = new Integer(1);
      Integer integer5 = new Integer((-4298));
      Integer integer6 = new Integer((-4298));
      MultiKey<Integer> multiKey8 = new MultiKey<Integer>(integer4, integer5, integer3, integer2, integer6);
      boolean boolean1 = multiKey8.equals("MultiKey[, , -4298, The array of keys must not be null]");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "MultiKey", "MultiKey");
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      multiKey1.equals(multiKey0);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKey2.toString();
      multiKey2.size();
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) integerArray0, true);
      multiKey3.getKeys();
      multiKey3.equals(multiKey2);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-2316));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2316
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(">", "qu+g~o Hu\"<G", ">", ">", "qu+g~o Hu\"<G");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      Integer[] integerArray1 = multiKey1.getKeys();
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Integer>> multiKey0 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      int int0 = multiKey0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[2] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 2);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      Object object0 = new Object();
      boolean boolean0 = multiKey1.equals(object0);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(4);
      Integer integer1 = new Integer(4);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, "=HR{2} ", "org.apache.commons.collections4.keyvalue.MultiKey", integer1, stringArray0[0]);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(stringArray0[0], (Object) null);
      multiKey3.getKey(0);
      Integer integer2 = new Integer(4);
      MultiKey<Object> multiKey4 = new MultiKey<Object>("MultiKey[null, org.apache.commons.collections4.keyvalue.MultiKey, , null]", (Object) null, (Object) null, integer2);
      Object object1 = new Object();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, org.apache.commons.collections4.keyvalue.MultiKey, , null]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(1686);
      Integer integer1 = new Integer(5);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1);
      Integer integer2 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer2, "");
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "_}OtO+)~H`;", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey0.hashCode();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) "_}OtO+)~H`;";
      objectArray0[2] = (Object) "org.apache.commons.collections4.keyvalue.MultiKey";
      objectArray0[3] = (Object) "_}OtO+)~H`;";
      objectArray0[4] = (Object) "";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      Object[] objectArray1 = multiKey1.getKeys();
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(576);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, multiKey0);
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "MultiKey[576, MultiKey[576, 576, 576]]");
      multiKey2.size();
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = null;
      boolean boolean0 = true;
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, "", "MultiKey");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null, , MultiKey]", string0);
      
      boolean boolean0 = multiKey0.equals("MultiKey[null, null, , MultiKey]");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "MultiKey[null, null, , MultiKey]";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, (Object) null, multiKey0);
      Object object0 = multiKey2.getKey(0);
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "MultiKey[null, null, , MultiKey]";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "MultiKey[null, null, , MultiKey]";
      objectArray0[6] = (Object) null;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      multiKey3.hashCode();
      assertFalse(multiKey3.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(":P:", "org.apache.commons.collections4.keyvalue.MultiKey", ":P:", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", multiKey0, "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey1.equals("org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey0.toString();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(878);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[5]);
      integerArray0[6] = integer6;
      int int1 = (-1);
      Integer integer7 = new Integer((-1));
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(int1);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      assertEquals(9, multiKey0.size());
  }
}
