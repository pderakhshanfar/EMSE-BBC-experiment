/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:18:47 GMT 2020
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object1, object1);
      multiKey0.toString();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null);
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(4623);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("", ">+");
      multiKey1.toString();
      multiKey2.getKey(0);
      boolean boolean0 = multiKey1.equals("");
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integerArray0);
      MultiKey<String> multiKey4 = new MultiKey<String>("0Kw^!d(m=3", "MultiKey[null, null]");
      MultiKey<String> multiKey5 = new MultiKey<String>("s,[IuK", (String) null, "s,[IuK", "");
      multiKey2.toString();
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integerArray0);
      MultiKey<MultiKey<Integer>> multiKey7 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey6, multiKey1);
      multiKey7.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey8 = new MultiKey<Object>("MultiKey[4623, 0]", "0Kw^!d(m=3", "");
      String string0 = multiKey8.toString();
      assertEquals("MultiKey[MultiKey[4623, 0], 0Kw^!d(m=3, ]", string0);
      
      MultiKey<MultiKey<String>> multiKey9 = new MultiKey<MultiKey<String>>(multiKey4, multiKey2, multiKey2);
      Object object1 = multiKey9.getKey(0);
      boolean boolean1 = multiKey4.equals(object1);
      assertFalse(boolean1 == boolean0);
      
      multiKey4.size();
      assertFalse(multiKey4.equals((Object)multiKey5));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, (Object) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "e@|9gc>M77";
      stringArray0[1] = "l";
      stringArray0[2] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[3] = "];YXCK\"4n6+MY?]qX\"";
      stringArray0[4] = "PYGcu^b7.%\"MY|U";
      stringArray0[5] = "";
      stringArray0[6] = "The array of keys must not be null";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) stringArray0, false);
      multiKey1.equals(multiKey2);
      assertFalse(multiKey2.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", ".bjC%t#kiP", ".bjC%t#kiP", ".g.9{\"pm", "8 wy/XsU]HbN34}");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey1.equals(".bjC%t#kiP");
      multiKey0.toString();
      Integer integer0 = new Integer((-2204));
      Integer integer1 = new Integer(3045);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0);
      multiKey2.size();
      multiKey1.getKeys();
      multiKey1.getKeys();
      MultiKey<Object> multiKey3 = null;
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, (MultiKey<Object>) null);
      multiKey4.toString();
      multiKey4.size();
      multiKey1.equals("MultiKey[]");
      // Undeclared exception!
      try { 
        multiKey1.getKey(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object1, object0, (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[java.lang.Object@29333226, java.lang.Object@2fcb870, java.lang.Object@29333226, null]", "", "WyNz1@Z<kxK:-", "MultiKey[java.lang.Object@29333226, java.lang.Object@2fcb870, java.lang.Object@29333226, null]");
      multiKey1.toString();
      multiKey1.toString();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1273);
      multiKey1.toString();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      Integer integer2 = new Integer(9);
      Integer integer3 = new Integer((-101));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>((Integer) null, integer0, integer3, (Integer) null, integer2);
      Object object2 = multiKey3.getKey(0);
      assertNull(object2);
      
      boolean boolean0 = multiKey1.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "";
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", "", "");
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.toString();
      int int0 = (-1875);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1875));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1875
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer((-1533));
      Integer integer1 = new Integer((-1533));
      Integer integer2 = new Integer((-1533));
      Integer integer3 = new Integer((-1533));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer1, integer2, integer3);
      multiKey1.equals(integer1);
      MultiKey<String> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null);
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(4623);
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("", ">+");
      multiKey2.toString();
      Object object0 = multiKey2.getKey(0);
      assertEquals("", object0);
      
      multiKey1.equals("");
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integerArray0);
      boolean boolean0 = multiKey2.equals(multiKey3);
      assertFalse(boolean0);
      
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(int0);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer2, (Integer) int0, (Integer) int0, integer0, integer3);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integerArray0);
      MultiKey<MultiKey<Integer>> multiKey6 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey4, multiKey4, multiKey5);
      String string0 = multiKey6.toString();
      assertEquals("MultiKey[MultiKey[4623, 0], MultiKey[0, 0, 0, 4623, 0], MultiKey[0, 0, 0, 4623, 0], MultiKey[4623, 0]]", string0);
      
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 9);
      multiKeyArray0[0] = multiKey2;
      multiKeyArray0[1] = multiKey2;
      multiKeyArray0[2] = multiKey2;
      multiKeyArray0[3] = multiKey2;
      multiKeyArray0[4] = multiKey2;
      multiKeyArray0[5] = multiKey2;
      multiKeyArray0[6] = multiKey2;
      multiKeyArray0[7] = multiKey2;
      multiKeyArray0[8] = multiKey2;
      MultiKey<MultiKey<String>> multiKey7 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      Object object1 = new Object();
      boolean boolean1 = multiKey7.equals(object1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 1649;
      Integer integer0 = new Integer(1649);
      Integer integer1 = new Integer(1649);
      Integer integer2 = new Integer((-420));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1154));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1154
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "P0!k,wVwQEW+o";
      stringArray0[1] = "UsXG?>Ti SfS#gXN";
      stringArray0[2] = "";
      stringArray0[3] = "[OHl}P|RrB)";
      stringArray0[4] = "J_5ppsQuZ";
      stringArray0[5] = "s";
      stringArray0[6] = "V#Q#+q@Q";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, (Object) null, (Object) null, "UsXG?>Ti SfS#gXN", "s");
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.hashCode();
      multiKey1.hashCode();
      int int0 = multiKey0.size();
      assertEquals(7, int0);
  }
}
