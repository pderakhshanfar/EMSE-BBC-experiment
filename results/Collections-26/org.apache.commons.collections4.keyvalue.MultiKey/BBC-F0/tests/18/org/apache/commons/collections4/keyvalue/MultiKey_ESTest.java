/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:18:10 GMT 2020
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("s%Y!", "org.apache.commons.collections4.keyvalue.MultiKey", "6oY-6xP!&C", "ny%|");
      multiKey0.equals("org.apache.commons.collections4.keyvalue.MultiKey");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "ny%|";
      objectArray0[1] = (Object) "6oY-6xP!&C";
      multiKey0.toString();
      objectArray0[2] = (Object) "ny%|";
      objectArray0[3] = (Object) "s%Y!";
      objectArray0[4] = (Object) "ny%|";
      Object object0 = new Object();
      Integer integer0 = new Integer(1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("org.apache.commons.collections4.keyvalue.MultiKey", (Object) null);
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("The array of keys must not be null", "", "MultiKey", "s%Y!");
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey2, multiKey0, multiKey2, multiKey0, multiKey0);
      multiKey3.toString();
      multiKey2.toString();
      Object object1 = multiKey3.getKey(1);
      multiKey0.equals(object1);
      Object object2 = multiKey1.getKey(1);
      assertNull(object2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.getKeys();
      multiKey0.size();
      Integer integer0 = new Integer(1354);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, true);
      multiKey1.toString();
      Integer integer1 = new Integer(1354);
      Integer integer2 = new Integer(375);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer2);
      MultiKey<String> multiKey3 = new MultiKey<String>("The array f keys must not be ull", "|2]", "The array f keys must not be ull");
      multiKey3.toString();
      Integer integer3 = new Integer(0);
      multiKey2.equals(integer3);
      multiKey0.getKeys();
      MultiKey<String> multiKey4 = new MultiKey<String>("", "", "o>~'#");
      Integer integer4 = new Integer(2);
      multiKey1.equals(integer4);
      // Undeclared exception!
      try { 
        multiKey4.getKey(11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(5);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, (Object) null);
      Object[] objectArray0 = multiKey0.getKeys();
      Integer integer1 = new Integer(5);
      Integer integer2 = new Integer(1);
      Integer integer3 = new Integer(3);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer2, integer3);
      MultiKey<String> multiKey2 = new MultiKey<String>(" 356tQ#==!f1bp+", (String) null, "`*c", "p/F:");
      multiKey2.getKey(3);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, true);
      multiKey3.toString();
      multiKey3.getKey(1);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey0, "p/F:", "`*c", "p/F:", (Object) null);
      multiKey4.toString();
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKey4, multiKey3, multiKey3);
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>(multiKey4, multiKey3, multiKey0);
      String string0 = multiKey6.toString();
      assertEquals("MultiKey[MultiKey[MultiKey[5, null], p/F:, `*c, p/F:, null], MultiKey[5, null], MultiKey[5, null]]", string0);
      
      multiKey0.getKeys();
      boolean boolean0 = multiKey0.equals(integer3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-2049));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer2, integer0);
      Integer integer3 = new Integer(2369);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integerArray0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integerArray0);
      multiKey2.equals(multiKey3);
      assertFalse(multiKey3.equals((Object)multiKey1));
      assertFalse(multiKey2.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("s%Y!", "org.apache.commons.collections4.keyvalue.MultiKey", "6oY-6xP!&C", "ny%|");
      multiKey0.equals("org.apache.commons.collections4.keyvalue.MultiKey");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "ny%|";
      multiKey0.toString();
      objectArray0[1] = (Object) "6oY-6xP!&C";
      multiKey0.toString();
      objectArray0[2] = (Object) "ny%|";
      objectArray0[3] = (Object) "s%Y!";
      objectArray0[4] = (Object) "ny%|";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.equals(objectArray0[3]);
      multiKey1.getKeys();
      multiKey1.getKeys();
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, object0);
      multiKey0.equals(multiKey2);
      // Undeclared exception!
      try { 
        multiKey2.getKey(4052);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4052
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "RWT>G/4Zle zmsa";
      stringArray0[2] = "The array of keys must not be null";
      stringArray0[3] = "VahN&b&?,2qpi";
      stringArray0[4] = ">qFZ";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, RWT>G/4Zle zmsa, The array of keys must not be null, VahN&b&?,2qpi, >qFZ]", string0);
      
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, false);
      multiKey1.getKeys();
      String string1 = multiKey0.getKey(0);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-754));
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      String string0 = multiKey0.toString();
      //  // Unstable assertion: assertEquals("MultiKey[1, 1, 1, 1, -754]", string0);
      
      int int1 = multiKey0.hashCode();
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "MultiKey[1, 1, 1, 1, -754]";
      stringArray0[1] = "MultiKey[1, 1, 1, 1, -754]";
      stringArray0[2] = "MultiKey[1, 1, 1, 1, -754]";
      stringArray0[3] = "MultiKey[1, 1, 1, 1, -754]";
      stringArray0[4] = "MultiKey[1, 1, 1, 1, -754]";
      stringArray0[5] = "MultiKey[1, 1, 1, 1, -754]";
      stringArray0[6] = "MultiKey[1, 1, 1, 1, -754]";
      stringArray0[7] = "MultiKey[1, 1, 1, 1, -754]";
      stringArray0[8] = "org.apache.commons.collections4.keyvalue.MultiKey";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1);
      int int2 = multiKey2.hashCode();
      //  // Unstable assertion: assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "", int0, object0);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      boolean boolean0 = multiKey2.equals(int0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer((-4804));
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-4804));
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer2, integer0, integer3, integer3, integer1);
      Object object0 = multiKey0.getKey(0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integer1, object0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey1.toString();
      Integer integer4 = new Integer((-1));
      multiKey1.equals(integer4);
      multiKey1.toString();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "MultiKey[-4804, 0, -4804, MultiKey[-4804, -4804, 0, 0, 0]]";
      stringArray0[1] = "MultiKey[-4804, 0, -4804, MultiKey[-4804, -4804, 0, 0, 0]]";
      stringArray0[2] = "Q";
      stringArray0[3] = "MultiKey[-4804, -4804, 0, 0, 0]";
      stringArray0[4] = "MultiKey[-4804, -4804, 0, 0, 0]";
      stringArray0[5] = "MultiKey[-4804, -4804, 0, 0, 0]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.getKeys();
      multiKey1.getKeys();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "G]B$$3'/OM~\",", "");
      multiKey0.toString();
      Integer integer0 = new Integer((-154));
      Integer integer1 = new Integer((-154));
      multiKey0.toString();
      Integer integer2 = new Integer((-154));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer0, integer2);
      multiKey1.size();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, (Object) null, (Object) null, (Object) null, object0);
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0, multiKey0, object1);
      assertEquals(4, multiKey1.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "";
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
