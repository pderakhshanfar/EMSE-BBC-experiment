/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:14:32 GMT 2020
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-2863));
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Object object0 = new Object();
      boolean boolean0 = multiKey0.equals(object0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer1, int0, integer2);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(int0, multiKey1);
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[-2863, 0, 0]", "", (String) null, "MultiKey[0, 0, 0]");
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[0, MultiKey[0, 0, 0]]", string0);
      
      MultiKey<String> multiKey4 = new MultiKey<String>("MultiKey[-2863, 0, 0]", "MultiKey[-2863, 0, 0]", "", (String) null, "MultiKey[-2863, 0, 0]");
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integerArray0);
      multiKey5.getKey(int0);
      MultiKey<MultiKey<String>> multiKey6 = new MultiKey<MultiKey<String>>(multiKey3, multiKey3, multiKey4, multiKey4);
      Object object1 = multiKey6.getKey(int0);
      boolean boolean1 = multiKey3.equals(object1);
      assertFalse(boolean1 == boolean0);
      
      multiKey2.size();
      assertFalse(multiKey1.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-2863));
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Object object0 = new Object();
      multiKey0.equals(object0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray0);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(int0, multiKey1);
      Object object1 = new Object();
      MultiKey<String> multiKey3 = new MultiKey<String>((String) null, "MultiKey[-2863, 0, 0]", "MultiKey[-2863, 0, 0]", (String) null);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[-2863, 0, 0]", string0);
      
      MultiKey<String> multiKey4 = new MultiKey<String>("MultiKey[-2863, 0, 0]", "", "", "MultiKey[-2863, 0, 0]", "");
      multiKey4.getKey(int0);
      boolean boolean0 = multiKey3.equals("MultiKey[-2863, 0, 0]");
      assertFalse(boolean0);
      
      multiKey0.equals(multiKey1);
      assertFalse(multiKey1.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("e]W)*>h~:mcK", "e]W)*>h~:mcK");
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      int int0 = multiKey0.size();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.getKeys();
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(2);
      Integer integer2 = new Integer(2);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer1, integer2);
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.size();
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKey3, multiKey3);
      multiKey0.toString();
      multiKey4.toString();
      multiKey4.size();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[]", string0);
      
      int int1 = multiKey4.hashCode();
      assertFalse(int1 == int0);
      
      int int2 = multiKey2.size();
      multiKey0.hashCode();
      multiKey2.hashCode();
      multiKey0.getKey(0);
      boolean boolean0 = multiKey2.equals("MultiKey[MultiKey[2, 2, 2], MultiKey[2, 2, 2]]");
      assertFalse(boolean0);
      
      int int3 = multiKey0.hashCode();
      assertTrue(int3 == int2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      multiKey0.getKey(1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null);
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>((String) null, (String) null, "");
      boolean boolean0 = multiKey2.equals(multiKey0);
      assertFalse(boolean0);
      
      multiKey1.getKey(1);
      multiKey1.toString();
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2436));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1407);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[1, 1, -2436, 0, 1407, 0]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(3);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, "", integer0, "", "");
      multiKey0.hashCode();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "");
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[, org.apache.commons.collections4.keyvalue.MultiKey, org.apache.commons.collections4.keyvalue.MultiKey, ]", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-2863));
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Object object0 = new Object();
      boolean boolean0 = multiKey0.equals(object0);
      assertFalse(boolean0);
      
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray0);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[-2863, 0, 0]", string0);
      
      MultiKey<Object> multiKey2 = new MultiKey<Object>(int0, multiKey1);
      multiKey2.size();
      multiKey2.size();
      assertFalse(multiKey1.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals((Object) null);
      String string0 = "The array of keys must not be null";
      String string1 = "M}08;pZ";
      MultiKey<String> multiKey1 = new MultiKey<String>("The array of keys must not be null", "M}08;pZ");
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(2787);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2787
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKeyArray0);
      multiKey1.toString();
      multiKey1.toString();
      Integer[] integerArray0 = new Integer[9];
      int int0 = 5;
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(5);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(5);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(0);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(1);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      Integer[] integerArray1 = multiKey2.getKeys();
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Z/@bWx";
      stringArray0[1] = "[8U@SuJu";
      stringArray0[2] = "";
      stringArray0[3] = "L\"}";
      stringArray0[4] = "YO_";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      Object object0 = new Object();
      boolean boolean0 = multiKey0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(706);
      Integer integer1 = new Integer(706);
      Integer integer2 = new Integer(706);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, (Integer) null, integer2);
      multiKey0.toString();
      int int0 = 2;
      multiKey0.getKey(2);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "b)#BRzp?u1`";
      stringArray0[1] = "X6,1,x/?xJv4\"# +";
      stringArray0[2] = "q>c";
      stringArray0[3] = "Dkx.W #/`zcVRq{b/b";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-822));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -822
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "y`%n8RXhYoj_yhq";
      MultiKey<String> multiKey0 = new MultiKey<String>(",|'cd;i", ",|'cd;i", "y`%n8RXhYoj_yhq", "y`%n8RXhYoj_yhq");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
