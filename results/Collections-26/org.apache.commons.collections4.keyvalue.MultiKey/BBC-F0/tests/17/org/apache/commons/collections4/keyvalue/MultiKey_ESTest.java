/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:17:41 GMT 2020
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-175));
      Integer integer1 = new Integer((-175));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer1, integer1, integer1, integer1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey1, integer0);
      multiKey0.toString();
      multiKey2.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[-175, -175], MultiKey[-175, -175, -175, -175], -175]", string0);
      
      boolean boolean0 = multiKey2.equals(multiKey2);
      assertTrue(boolean0);
      
      Integer integer2 = new Integer(11);
      Integer integer3 = new Integer(20);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer2, integer1, integer2, integer3, integer1);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey0, multiKey0, (Object) null, multiKey2, multiKey3);
      assertFalse(multiKey4.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>("f", (String) null, "", "MultiKey", "f");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "f";
      objectArray0[1] = null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey1.equals(multiKey2);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "MultiKey";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      boolean boolean0 = multiKey0.equals(multiKey3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "a8D%i]<E7/tlIMS'46", "?@bcNEY@(zi{W");
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("a8D%i]<E7/tlIMS'46", multiKey0, multiKey1, multiKey1, integer0);
      multiKey2.getKey(0);
      Object object0 = new Object();
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      multiKey1.toString();
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0, false);
      multiKey3.toString();
      multiKey3.toString();
      multiKey0.toString();
      multiKey2.toString();
      multiKey2.toString();
      Object object1 = multiKey3.getKey(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>("a8D%i]<E7/tlIMS'46", object0, multiKey0, object1, multiKey0);
      multiKey4.toString();
      Integer integer1 = new Integer(0);
      boolean boolean0 = multiKey0.equals(integer1);
      assertFalse(boolean0);
      
      multiKey3.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[, a8D%i]<E7/tlIMS'46, ?@bcNEY@(zi{W]", string0);
      
      multiKey4.getKeys();
      multiKey0.size();
      assertFalse(multiKey0.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      multiKey1.equals(multiKey0);
      multiKey0.getKeys();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2362);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1300));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      int int0 = multiKey2.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0, "", multiKey0, multiKey0);
      MultiKey<String> multiKey2 = new MultiKey<String>("?", "?");
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey2);
      multiKey0.toString();
      multiKey3.toString();
      multiKey3.size();
      multiKey2.equals(multiKey1);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1541));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1541
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      int int0 = 4;
      multiKey0.getKey(4);
      objectArray0[0] = null;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "MultiKey";
      stringArray0[2] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      // Undeclared exception!
      try { 
        multiKey1.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "A|1XK&N/$X/", "d)=");
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 3);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      multiKeyArray0[0] = multiKey1;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(32);
      Integer integer2 = new Integer(0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      // Undeclared exception!
      try { 
        multiKey2.getKey(32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(2094);
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", integer0);
      boolean boolean0 = multiKey0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("Q9$@h43#^#:CT%qr-#", "Q9$@h43#^#:CT%qr-#", "Q9$@h43#^#:CT%qr-#", "Q9$@h43#^#:CT%qr-#", "Q9$@h43#^#:CT%qr-#");
      multiKey0.toString();
      multiKey0.toString();
      boolean boolean0 = false;
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey0.hashCode();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "");
      int int0 = (-785);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-785));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -785
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "7>\"Jwr`B&.?_-_");
      multiKey0.hashCode();
  }
}
