/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:18:49 GMT 2020
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.getKeys();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) "";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      int int0 = multiKey2.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      int int0 = multiKey2.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("WH6HkT`tZ&&(*H3mxt", "WH6HkT`tZ&&(*H3mxt", "WH6HkT`tZ&&(*H3mxt", "WH6HkT`tZ&&(*H3mxt");
      multiKey0.getKey(0);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 2);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKeyArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[1] = multiKey2;
      Integer integer0 = new Integer(7);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "WH6HkT`tZ&&(*H3mxt";
      stringArray0[1] = "WH6HkT`tZ&&(*H3mxt";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey3, integer0);
      boolean boolean0 = multiKey2.equals(multiKey2);
      assertFalse(multiKey2.equals((Object)multiKey4));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("WH6HkT`tZ&&(*H3mxt", "WH6HkT`tZ&&(*H3mxt", "WH6HkT`tZ&&(*H3mxt", "WH6HkT`tZ&&(*H3mxt");
      multiKey0.getKey(0);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 2);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[0] = multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[1] = multiKey2;
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      boolean boolean0 = multiKey3.equals(multiKey2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", object0, "");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) multiKey0;
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, multiKey0, multiKey1, (Object) null);
      multiKey2.hashCode();
      MultiKey<String> multiKey3 = null;
      try {
        multiKey3 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(508);
      Integer integer2 = new Integer(508);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer0);
      multiKey0.size();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "02(Cr?'}xNONh~";
      stringArray0[1] = "m#]?]3HM&t";
      stringArray0[2] = "R!CfZ)'@*Bml?^ZZ`";
      stringArray0[3] = "XaaD&c<Iu;1";
      stringArray0[4] = "";
      stringArray0[5] = "u";
      stringArray0[6] = "";
      String string0 = "OnI^4";
      stringArray0[7] = "OnI^4";
      String string1 = "";
      stringArray0[8] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.getKeys();
      multiKey1.hashCode();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      // Undeclared exception!
      try { 
        multiKey2.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", "");
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, , ]", string0);
      
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null, integer0, integer0);
      multiKey1.getKey(0);
      multiKey0.getKeys();
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "OBjHgXlE= B[cv!@a");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-3622));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3622
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "@f-G(r=QPsA81$~a[~G");
      multiKey0.toString();
      Integer integer0 = new Integer((-1));
      multiKey0.toString();
      boolean boolean0 = multiKey0.equals(integer0);
      assertFalse(boolean0);
      
      multiKey0.getKey(0);
      multiKey0.toString();
      multiKey0.size();
      multiKey0.getKey(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, (Integer) null, (Integer) null);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[-1, null, null], MultiKey[-1, null, null], MultiKey[-1, null, null], MultiKey[-1, null, null]]", string0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "MultiKey[MultiKey[-1, null, null], MultiKey[-1, null, null], MultiKey[-1, null, null], MultiKey[-1, null, null]]";
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) "@f-G(r=QPsA81$~a[~G";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "MultiKey[, , @f-G(r=QPsA81$~a[~G]";
      Integer integer1 = new Integer(603);
      Integer integer2 = new Integer(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("MultiKey[MultiKey[-1, null, null], MultiKey[-1, null, null], MultiKey[-1, null, null], MultiKey[-1, null, null]]", "MultiKey[MultiKey[-1, null, null], MultiKey[-1, null, null], MultiKey[-1, null, null], MultiKey[-1, null, null]]", integer1, "", integer2);
      multiKey3.getKey(0);
      objectArray0[5] = (Object) "MultiKey[MultiKey[-1, null, null], MultiKey[-1, null, null], MultiKey[-1, null, null], MultiKey[-1, null, null]]";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) integer0;
      objectArray0[8] = (Object) "MultiKey[, , @f-G(r=QPsA81$~a[~G]";
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0, false);
      boolean boolean1 = multiKey4.equals(objectArray0[1]);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(1591);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1545);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2799);
      integerArray0[2] = integer2;
      int int0 = 0;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1591);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.toString();
      multiKey0.size();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray0[2], int0);
      multiKey1.getKeys();
      multiKey0.equals(integer3);
      multiKey1.toString();
      boolean boolean0 = multiKey0.equals("MultiKey[1591, 1545, 2799, 0, 1591]");
      assertFalse(boolean0);
      
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 4);
      MultiKey<String> multiKey2 = new MultiKey<String>("", "MultiKey[1591, 1545, 2799, 0, 1591]", "", "");
      multiKeyArray0[0] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("*~]cSKI?", "", "");
      multiKeyArray0[1] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "The array of keys must not be null", "MultiKey[2799, 0]");
      multiKeyArray0[2] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>("", "ZX&XA\"Ze~{X", "", "The array of keys must not be null");
      multiKeyArray0[3] = multiKey5;
      MultiKey<MultiKey<String>> multiKey6 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      String string0 = multiKey6.toString();
      assertEquals("MultiKey[MultiKey[, MultiKey[1591, 1545, 2799, 0, 1591], , ], MultiKey[*~]cSKI?, , ], MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, The array of keys must not be null, MultiKey[2799, 0]], MultiKey[, ZX&XA\"Ze~{X, , The array of keys must not be null]]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "MultiKey";
      stringArray0[1] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[2] = "9*E:GR~]ZS+=.8";
      stringArray0[3] = "VKd/xx1bGVb7qEe}sf*";
      stringArray0[4] = "";
      stringArray0[5] = "D]?gl.q$p~2iR";
      stringArray0[6] = "Z4";
      stringArray0[7] = ",v+XOQtN}3b<GCMHoq#";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      MultiKey<String> multiKey2 = multiKey1.getKey(0);
      objectArray0[1] = (Object) multiKey2;
      MultiKey<Object> multiKey3 = new MultiKey<Object>("", ",v+XOQtN}3b<GCMHoq#");
      multiKey3.getKey(0);
      objectArray0[2] = (Object) "";
      Object object1 = new Object();
      objectArray0[3] = object1;
      Integer integer0 = new Integer(4);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer0, integer1, integer2, integer3);
      Integer integer4 = multiKey4.getKey(4);
      objectArray0[4] = (Object) integer4;
      Object object2 = new Object();
      objectArray0[5] = object2;
      multiKey3.getKey(0);
      objectArray0[6] = (Object) "";
      MultiKey<Object> multiKey5 = new MultiKey<Object>(objectArray0, false);
      Integer integer5 = new Integer(357);
      Integer integer6 = new Integer((-645));
      MultiKey<String> multiKey6 = new MultiKey<String>("MultiKey", "", "or>");
      multiKey6.getKey(1);
      MultiKey<Object> multiKey7 = new MultiKey<Object>(multiKey5, multiKey0, integer5, integer6, "");
      assertEquals(5, multiKey7.size());
  }
}
