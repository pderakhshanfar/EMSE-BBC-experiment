/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:17:10 GMT 2020
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("+-", "Fzo]{'V`\"", "L");
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      multiKey1.equals(multiKey0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey0, multiKey1);
      boolean boolean0 = multiKey2.equals(multiKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer0);
      multiKey1.toString();
      multiKey1.toString();
      String[] stringArray0 = new String[9];
      multiKey0.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      Object object1 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(stringArray0);
      multiKey2.equals(multiKey3);
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>("MultiKey[java.lang.Object@1ecbe93c, 0]", integer1, (Object) null);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(stringArray0);
      // Undeclared exception!
      try { 
        multiKey5.getKey((-469));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -469
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("]9n!UXMPl0 x-Pr~", "]9n!UXMPl0 x-Pr~", "]9n!UXMPl0 x-Pr~", "]9n!UXMPl0 x-Pr~");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      multiKey0.toString();
      multiKey0.equals("]9n!UXMPl0 x-Pr~");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      String string0 = multiKey1.toString();
      multiKey1.toString();
      boolean boolean0 = multiKey0.equals("MultiKey[]9n!UXMPl0 x-Pr~, ]9n!UXMPl0 x-Pr~, ]9n!UXMPl0 x-Pr~, ]9n!UXMPl0 x-Pr~]");
      assertFalse(boolean0);
      
      String string1 = multiKey1.toString();
      assertEquals("MultiKey[]", string1);
      
      multiKey1.size();
      multiKey0.getKey(3);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "MultiKey[]";
      stringArray0[1] = "MultiKey[]";
      stringArray0[2] = "MultiKey[]9n!UXMPl0 x-Pr~, ]9n!UXMPl0 x-Pr~, ]9n!UXMPl0 x-Pr~, ]9n!UXMPl0 x-Pr~]";
      stringArray0[3] = "MultiKey[]";
      stringArray0[4] = "]9n!UXMPl0 x-Pr~";
      stringArray0[5] = "MultiKey[]9n!UXMPl0 x-Pr~, ]9n!UXMPl0 x-Pr~, ]9n!UXMPl0 x-Pr~, ]9n!UXMPl0 x-Pr~]";
      stringArray0[6] = "MultiKey[]";
      stringArray0[7] = "MultiKey[]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      String string2 = multiKey2.getKey(0);
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Object[] objectArray1 = multiKey0.getKeys();
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null, integer0);
      Object object0 = new Object();
      multiKey0.equals(object0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) multiKey0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      Object object2 = new Object();
      Object object3 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, object2, objectArray0[3], (Object) null, object3);
      multiKey2.toString();
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[MultiKey[MultiKey[null, null, null, -1], java.lang.Object@7a9aa252, MultiKey[null, null, null, -1], MultiKey[null, null, null, -1]], java.lang.Object@5388c26a, MultiKey[null, null, null, -1], null, java.lang.Object@99313ba]", "MultiKey[MultiKey[MultiKey[null, null, null, -1], java.lang.Object@7a9aa252, MultiKey[null, null, null, -1], MultiKey[null, null, null, -1]], java.lang.Object@5388c26a, MultiKey[null, null, null, -1], null, java.lang.Object@99313ba]", "MultiKey[MultiKey[MultiKey[null, null, null, -1], java.lang.Object@7a9aa252, MultiKey[null, null, null, -1], MultiKey[null, null, null, -1]], java.lang.Object@5388c26a, MultiKey[null, null, null, -1], null, java.lang.Object@99313ba]");
      multiKey3.equals(objectArray0[3]);
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey4.getKeys();
      multiKey0.equals((Object) null);
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey3.size();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-925));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -925
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      multiKey1.toString();
      multiKey1.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[]", string0);
      
      multiKey1.equals(integer0);
      multiKey0.hashCode();
      Integer integer1 = new Integer((-1144));
      boolean boolean0 = multiKey1.equals(integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2387);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      Object object0 = new Object();
      Object object1 = new Object();
      Integer integer2 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, object1, object1, integer2, integer1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, multiKey1);
      multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey0, int0, object0, (Object) null);
      assertFalse(multiKey3.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 179;
      Integer integer0 = new Integer(179);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, (Integer) null, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("");
      String string0 = "";
      String string1 = "";
      String string2 = "org.apache.commons.collections4.keyvalue.MultiKey";
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "org.apache.commons.collections4.keyvalue.MultiKey", "");
      multiKey1.equals((Object) null);
      multiKey1.equals("");
      // Undeclared exception!
      try { 
        multiKey0.getKey(179);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 179
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer[] integerArray0 = null;
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 1);
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", (String) null, "", "G~Tt,");
      multiKeyArray0[0] = multiKey0;
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      int int0 = (-866);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-866));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -866
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MYR", "");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) objectArray0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) "MYR";
      objectArray0[5] = object0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      Object object1 = multiKey1.getKey(0);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object3, object4);
      Object object5 = multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, object1, object2, object5);
      multiKey3.toString();
      multiKey3.size();
      assertNotSame(object4, object5);
      assertSame(object3, object5);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, "", "");
      multiKey0.toString();
      multiKey0.getKey(0);
      Object[] objectArray0 = multiKey0.getKeys();
      assertEquals(3, objectArray0.length);
  }
}
