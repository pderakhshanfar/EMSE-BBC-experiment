/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:14:29 GMT 2020
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("1", "1", "1", "1", object0);
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.getKeys();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "Nx~", "");
      int int0 = multiKey1.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(1);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      Integer integer1 = new Integer(10);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer0, integer0, integer1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey0, multiKey1);
      multiKey1.toString();
      multiKey2.toString();
      Object object0 = new Object();
      Integer integer2 = new Integer(1);
      Object object1 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer2, object0, object1, (Object) null, object1);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 5);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey2;
      multiKeyArray0[3] = multiKey2;
      multiKeyArray0[4] = multiKey1;
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      Integer integer3 = new Integer(1);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey0, "MultiKey[1, 1]", multiKey2, integer3);
      Object object2 = multiKey5.getKey(2);
      multiKey2.equals(object2);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "MultiKey[MultiKey[1, 1], 1, 1, 10]";
      stringArray0[1] = "MultiKey[MultiKey[1, 1], MultiKey[1, 1], MultiKey[MultiKey[1, 1], 1, 1, 10]]";
      stringArray0[2] = "MultiKey[MultiKey[1, 1], MultiKey[1, 1], MultiKey[MultiKey[1, 1], 1, 1, 10]]";
      stringArray0[3] = "MultiKey[1, 1]";
      stringArray0[4] = "MultiKey[1, 1]";
      MultiKey<String> multiKey6 = new MultiKey<String>(stringArray0);
      int int0 = multiKey6.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(2);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      int int0 = 8;
      Integer integer0 = new Integer(8);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(4);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(4);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(3);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, false);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("hY|*hkOM$zf~'", "");
      Object object0 = multiKey0.getKey(0);
      assertEquals("hY|*hkOM$zf~'", object0);
      
      multiKey0.toString();
      Object object1 = new Object();
      Object object2 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("hY|*hkOM$zf~'", object1, object2);
      multiKey1.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1);
      multiKey2.toString();
      multiKey2.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[0, 0]", string0);
      
      boolean boolean0 = multiKey2.equals(multiKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-386));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, object0, object1, object2);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey1.equals(integer0);
      Object[] objectArray0 = multiKey0.getKeys();
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.size();
      Integer integer5 = new Integer(997);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer5, object0, integer5);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, (Object) null, multiKey1);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integerArray0);
      Object object1 = multiKey3.getKey(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(integer3, (Object) null, multiKey2, object1);
      Object[] objectArray0 = multiKey4.getKeys();
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer((-3559));
      Integer integer1 = new Integer(407);
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer1, object0);
      String string0 = "u5^FxJg";
      MultiKey<String> multiKey1 = new MultiKey<String>("u5^FxJg", "u5^FxJg");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 2);
      multiKeyArray0[0] = multiKey1;
      multiKey1.toString();
      multiKeyArray0[1] = multiKey1;
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      // Undeclared exception!
      try { 
        multiKey2.getKey(407);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 407
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("i(U'Lh`", "i(U'Lh`", "", "");
      multiKey0.toString();
      String string0 = multiKey0.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, "MultiKey[i(U'Lh`, i(U'Lh`, , ]");
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, multiKey1);
      multiKey2.getKeys();
      multiKey1.hashCode();
      String string1 = multiKey2.toString();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 7);
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "org.apache.commons.collections4.keyvalue.MultiKey", "qUUr]KA)kppsQgU&e{5", "", "");
      multiKey0.getKey(0);
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKeyArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, integer0, "", multiKey1);
      multiKeyArray0[0] = multiKey2;
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      multiKeyArray0[1] = multiKey3;
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(1);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer1, integer2, integer0, integer0);
      Object object0 = multiKey4.getKey(1);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(object0, integer0, multiKey2);
      multiKeyArray0[2] = multiKey5;
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer(0);
      MultiKey<Object> multiKey6 = new MultiKey<Object>(integer3, multiKey5, multiKey5, "qUUr]KA)kppsQgU&e{5", integer4);
      multiKeyArray0[3] = multiKey6;
      MultiKey<Object> multiKey7 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      multiKeyArray0[4] = multiKey7;
      Integer integer5 = new Integer(0);
      MultiKey<Object> multiKey8 = new MultiKey<Object>(integer2, integer5);
      multiKeyArray0[5] = multiKey8;
      Object object1 = new Object();
      MultiKey<Object> multiKey9 = new MultiKey<Object>(integer0, multiKey3, object1, object1, "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKeyArray0[6] = multiKey9;
      MultiKey<MultiKey<Object>> multiKey10 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey10.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) ">&8";
      objectArray0[1] = (Object) ">&8";
      objectArray0[2] = (Object) ">&8";
      objectArray0[3] = (Object) ">&8";
      objectArray0[4] = (Object) ">&8";
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(">&8", ">&8", multiKey0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-872));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 2);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "MultiKey[0, 0, -872]";
      stringArray0[1] = "MultiKey[>&8, >&8, >&8, >&8, >&8]";
      stringArray0[2] = ">&8";
      stringArray0[3] = ">&8";
      stringArray0[4] = "MultiKey[>&8, >&8, >&8, >&8, >&8]";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, true);
      multiKey2.toString();
      multiKeyArray0[0] = multiKey3;
      multiKey2.toString();
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0, true);
      multiKeyArray0[1] = multiKey4;
      multiKey3.toString();
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey5.toString();
      multiKey5.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[>&8, >&8, MultiKey[>&8, >&8, >&8, >&8, >&8]]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(2);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
  }
}
