* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0
* Going to generate test cases for class: org.apache.commons.collections4.keyvalue.MultiKey
* Starting Client-0
* Connecting to master process on port 15499
* Analyzing classpath: 
  - subjects/buggy-versions/Collections-26/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.collections4.keyvalue.MultiKey
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 152
* Using seed 3552133551
* Starting evolution
* Initial Number of Goals in DynaMOSA = 68 / 152
* Search finished after 303s and 889 generations, 572892 statements, best individual has fitness: 17.0
* Minimizing test suite
[MASTER] 04:15:37.572 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 84%
* Total number of goals: 37
* Number of covered goals: 31
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 96%
* Total number of goals: 23
* Number of covered goals: 22
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 4
* Number of covered goals: 4
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 97%
* Total number of goals: 32
* Number of covered goals: 31
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 69%
* Total number of goals: 13
* Number of covered goals: 9
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 96%
* Total number of goals: 23
* Number of covered goals: 22
* Generated 14 tests with total length 281
* Resulting test suite's coverage: 86% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 78%
* Compiling and checking tests
[MASTER] 04:16:09.633 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 04:16:09.634 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MultiKey<String> multiKey0 = new MultiKey<String>("", "");
Object[] objectArray0 = new Object[1];
Object object0 = new Object();
objectArray0[0] = object0;
multiKey0.toString();
MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
multiKey0.toString();
Object object1 = new Object();
Object object2 = new Object();
MultiKey<Object> multiKey2 = new MultiKey<Object>("", multiKey0, object1, "", object2);
int int0 = 0;
multiKey2.toString();
multiKey2.getKey(0);
multiKey0.toString();
multiKey2.toString();
String string0 = multiKey0.toString();
assertEquals("MultiKey[, ]", string0);

boolean boolean0 = multiKey1.equals("");
assertFalse(boolean0);

boolean boolean1 = multiKey0.equals(multiKey2);
assertFalse(boolean1);

multiKey1.getKey(0);
multiKey0.getKey(0);
Integer[] integerArray0 = new Integer[2];
Integer integer0 = new Integer(0);
integerArray0[0] = integer0;
Integer integer1 = new Integer(0);
integerArray0[1] = integer1;
MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0, true);
int int1 = multiKey3.hashCode();
assertTrue(int1 == int0);

multiKey1.getKey(int0);
assertFalse(multiKey1.equals((Object)multiKey2));


[MASTER] 04:16:11.677 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 04:16:11.681 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MultiKey<String> multiKey0 = new MultiKey<String>(":", ":", ":");
MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 8);
MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, multiKey0);
multiKeyArray0[0] = multiKey1;
MultiKey<String> multiKey2 = new MultiKey<String>(":", "sL-}~R{5aePv3Q", "", ":", "org.apache.commons.collections4.keyvalue.MultiKey");
MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, "sL-}~R{5aePv3Q", multiKey1);
multiKeyArray0[1] = multiKey3;
MultiKey<Object> multiKey4 = new MultiKey<Object>((Object) null, multiKey1, multiKey3, multiKey2, multiKey0);
multiKeyArray0[2] = multiKey4;
MultiKey<Object> multiKey5 = new MultiKey<Object>("^3/0YrVwFv2", ":", multiKey2);
multiKeyArray0[3] = multiKey5;
Integer integer0 = new Integer(32);
Integer integer1 = new Integer((-730));
MultiKey<Object> multiKey6 = new MultiKey<Object>(multiKey5, integer0, integer1, multiKey1);
multiKeyArray0[4] = multiKey6;
Object object0 = new Object();
MultiKey<Object> multiKey7 = new MultiKey<Object>("", (Object) null, object0, integer1, (Object) null);
multiKeyArray0[5] = multiKey7;
MultiKey<Object> multiKey8 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
multiKeyArray0[6] = multiKey8;
Object object1 = new Object();
MultiKey<Object> multiKey9 = new MultiKey<Object>((Object) null, object1);
multiKeyArray0[7] = multiKey9;
MultiKey<MultiKey<Object>> multiKey10 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
multiKey10.toString();

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 6
* Writing tests to file
* Writing JUnit test case 'MultiKey_ESTest' to results/Collections-26/org.apache.commons.collections4.keyvalue.MultiKey/BBC-F0/tests/13
* Done!

* Computation finished
