/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:04:15 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "wwFZ1Ie^\"(Uf_=02Tf");
      multiKey0.hashCode();
      multiKey0.size();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1);
      MultiKey<Object> multiKey3 = multiKey2.getKey(2);
      multiKey3.size();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      multiKey4.size();
      MultiKey<Integer> multiKey5 = null;
      try {
        multiKey5 = new MultiKey<Integer>((Integer[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, "l_VBnnHxNP[zCt}", object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 2);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey1.equals((Object) null);
      Object object1 = new Object();
      multiKey1.equals(object1);
      multiKey0.size();
      // Undeclared exception!
      try { 
        multiKey0.getKey(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("8yUm", "8yUm", "8yUm", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.hashCode();
      multiKey0.equals("");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.size();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, multiKey2, multiKey2, multiKey1);
      multiKey2.toString();
      multiKey1.toString();
      multiKey3.toString();
      Object object0 = multiKey3.getKey(0);
      multiKey1.equals(object0);
      multiKey1.toString();
      Integer integer0 = new Integer(2993);
      Integer integer1 = new Integer(2993);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer1);
      multiKey4.toString();
      multiKey4.toString();
      multiKey4.equals("MultiKey[8yUm, 8yUm, 8yUm, ]");
      // Undeclared exception!
      try { 
        multiKey1.getKey(2993);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2993
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("7/iYq>S|:t", "7/iYq>S|:t", "7/iYq>S|:t", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) integerArray0, true);
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.equals("");
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey2.toString();
      multiKey0.size();
      multiKey1.getKeys();
      // Undeclared exception!
      try { 
        multiKey1.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null, integer0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, integer1);
      Object object0 = multiKey1.getKey(0);
      assertNull(object0);
      
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, (Object) null, "PrM@{^i6gnAi2=%", (Object) null);
      multiKey2.size();
      MultiKey<String> multiKey3 = new MultiKey<String>("I= X", "PrM@{^i6gnAi2=%", "I= X", "", "");
      multiKey3.toString();
      multiKey2.toString();
      multiKey3.hashCode();
      boolean boolean0 = multiKey2.equals((Object) null);
      assertFalse(boolean0);
      
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey1, multiKey0, multiKey1);
      multiKey4.toString();
      multiKey4.toString();
      boolean boolean1 = multiKey1.equals(multiKey4);
      assertFalse(boolean1);
      
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[null, null, PrM@{^i6gnAi2=%, null]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "}Lq_P|8kn%gI$", " %?Wh5#", " %?Wh5#", "K");
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 64
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, integer2);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) integer1;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) integer2;
      multiKey0.toString();
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = (Object) integer1;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      int int0 = multiKey1.size();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.size();
      multiKey0.hashCode();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      int int1 = multiKey3.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "@TN,f%`]";
      stringArray0[1] = "x";
      stringArray0[2] = "";
      stringArray0[3] = "*Npa?";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      boolean boolean0 = multiKey0.equals("@TN,f%`]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = null;
      Object object1 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>("c*qe<5Z", "c*qe<5Z");
      multiKey0.getKey(1);
      String[] stringArray0 = new String[4];
      String string0 = "";
      stringArray0[0] = "";
      stringArray0[1] = "c*qe<5Z";
      stringArray0[2] = "c*qe<5Z";
      stringArray0[3] = "c*qe<5Z";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      int int0 = 5;
      // Undeclared exception!
      try { 
        multiKey1.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0);
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, multiKey1);
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.getKeys();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[0, 0, 0, 0]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
