/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:48:41 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "");
      Integer integer0 = new Integer((-2388));
      Object object1 = new Object();
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("HtL>iv=~#.G+HyU/", "nh';}H");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      Object object0 = new Object();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "HtL>iv=~#.G+HyU/";
      stringArray0[1] = "HtL>iv=~#.G+HyU/";
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[HtL>iv=~#.G+HyU/, nh';}H]", string0);
      
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey0, multiKey2, multiKey0, multiKey0);
      boolean boolean0 = multiKey3.equals("HtL>iv=~#.G+HyU/");
      assertFalse(boolean0);
      
      Object object1 = new Object();
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0, true);
      Object object2 = new Object();
      MultiKey<Object> multiKey5 = new MultiKey<Object>("", multiKey0, multiKey4, multiKey3, object2);
      MultiKey<Object> multiKey6 = new MultiKey<Object>(stringArray0);
      multiKey6.equals(multiKey2);
      assertFalse(multiKey6.equals((Object)multiKey5));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-3204));
      Integer integer1 = new Integer((-3204));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0);
      multiKey0.toString();
      multiKey0.equals(integer0);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.size();
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[-3204, -3204, -3204]", "MultiKey[-3204, -3204, -3204]", "MultiKey", "MultiKey", "MultiKey");
      // Undeclared exception!
      try { 
        multiKey2.getKey((-3204));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3204
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null);
      multiKey0.getKeys();
      multiKey0.getKeys();
      multiKey0.getKeys();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      String[] stringArray1 = multiKey1.getKeys();
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      Integer integer2 = new Integer(0);
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "", "E`R7p4;G`&Cg'", "");
      multiKey0.getKey(0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer2, (Object) null);
      multiKey1.toString();
      multiKey1.getKeys();
      MultiKey<MultiKey<Object>> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("ayEiHkWdD", object0, "ayEiHkWdD");
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.getKeys();
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) stringArray0, false);
      multiKey3.hashCode();
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.toString();
      // Undeclared exception!
      try { 
        multiKey3.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", (String) null);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", (Object) null);
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey1, "", object0);
      multiKey2.toString();
      multiKey2.equals(object0);
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey1.toString();
      MultiKey<Integer> multiKey3 = null;
      try {
        multiKey3 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, (Integer) null);
      multiKey0.hashCode();
      MultiKey<String> multiKey1 = new MultiKey<String>("x", "us A", "us A", "", "]V'n~\"ok[=P4P}");
      multiKey1.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      MultiKey<Object> multiKey0 = new MultiKey<Object>("oTl{", "oTl{", "oTl{", "oTl{");
      int int0 = 3;
      multiKey0.getKey(3);
      objectArray0[0] = (Object) "oTl{";
      MultiKey<String> multiKey1 = new MultiKey<String>("oTl{", "oTl{", "4jG6|N1c@yc\"Dy^.0", "4jG6|N1c@yc\"Dy^.0", "");
      // Undeclared exception!
      try { 
        multiKey1.getKey(1860);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1860
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0, "");
      multiKey1.toString();
      multiKey1.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[, , ], MultiKey[, , ], ]", string0);
      
      boolean boolean0 = multiKey1.equals("");
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer0, integer0, integer2);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "MultiKey[MultiKey[, , ], MultiKey[, , ], ]";
      stringArray0[1] = "MultiKey[MultiKey[, , ], MultiKey[, , ], ]";
      stringArray0[2] = "MultiKey[MultiKey[, , ], MultiKey[, , ], ]";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      boolean boolean1 = multiKey2.equals(multiKey3);
      assertFalse(boolean1);
      
      multiKey1.size();
      String string1 = multiKey3.getKey(3);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "hZjfL7v=v]/*";
      stringArray0[1] = "1dd?]%_";
      stringArray0[2] = "DJ;oXJ|JUz+Gi`~";
      stringArray0[3] = "+&-4";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "$^3&Lp2?9,";
      stringArray0[7] = "LL%MXDq~KtjWRJ";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      String string0 = multiKey0.getKey(1);
      assertEquals("1dd?]%_", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Integer integer0 = new Integer(2510);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      // Undeclared exception!
      try { 
        multiKey0.getKey(2510);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2510
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, "2");
      multiKey0.toString();
      multiKey0.hashCode();
  }
}
