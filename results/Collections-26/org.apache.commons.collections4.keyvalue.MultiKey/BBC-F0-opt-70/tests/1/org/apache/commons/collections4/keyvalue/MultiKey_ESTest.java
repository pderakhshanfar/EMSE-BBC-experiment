/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:46:18 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null", "The array of keys must not be null", "", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "MultiKey[The array of keys must not be null, The array of keys must not be null, The array of keys must not be null, , ]");
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[The array of keys must not be null, The array of keys must not be null, The array of keys must not be null, , ], MultiKey[The array of keys must not be null, The array of keys must not be null, The array of keys must not be null, , ]]", string0);
      
      multiKey1.hashCode();
      boolean boolean0 = multiKey1.equals("The array of keys must not be null");
      MultiKey<String> multiKey2 = new MultiKey<String>("", "The array of keys must not be null", "The array of keys must not be null", "MultiKey[The array of keys must not be null, The array of keys must not be null, The array of keys must not be null, , ]");
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 9);
      Integer integer0 = new Integer((-1321));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKeyArray0[0] = multiKey3;
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      Integer integer2 = new Integer((-2952));
      integerArray0[5] = integer2;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      multiKeyArray0[1] = multiKey4;
      Integer integer3 = new Integer(int0);
      MultiKey<String> multiKey5 = new MultiKey<String>("", "xw/%D", "", "", "");
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1);
      Object object0 = multiKey6.getKey(int0);
      boolean boolean1 = multiKey1.equals(object0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("JhxZ", "JhxZ");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.size();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[JhxZ, JhxZ]", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("{2ORD;", "{2ORD;");
      multiKey0.toString();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      Object[] objectArray1 = multiKey1.getKeys();
      assertEquals(0, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("sM", "sM");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("TEk;yOVA)", "}|14D<d=|0(y");
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) multiKey1;
      objectArray0[1] = (Object) multiKey2;
      objectArray0[2] = (Object) "TEk;yOVA)";
      objectArray0[3] = (Object) "sM";
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, true);
      multiKey2.equals(multiKey3);
      // Undeclared exception!
      try { 
        multiKey1.getKey(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "{6uhkMb_~J";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "", multiKey0, object0, "{6uhkMb_~J");
      multiKey1.hashCode();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", "ZxZ\".G%nKnRua", multiKey1, multiKey1);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey2, multiKey1, multiKey1);
      MultiKey<Object> multiKey4 = multiKey3.getKey(1);
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 1);
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      multiKey0.toString();
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer0, integer0, integer1, integer0);
      multiKey5.toString();
      multiKeyArray0[0] = multiKey5;
      multiKey5.toString();
      multiKey2.toString();
      multiKey5.toString();
      MultiKey<MultiKey<Integer>> multiKey6 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, true);
      multiKey6.toString();
      multiKey1.toString();
      String string0 = multiKey6.toString();
      assertEquals("MultiKey[MultiKey[1, 1, 1, 1]]", string0);
      
      multiKey4.toString();
      multiKey1.toString();
      String string1 = (String)multiKey4.getKey(0);
      assertEquals("", string1);
      
      MultiKey<String> multiKey7 = new MultiKey<String>("", "a", "MultiKey[MultiKey[1, 1, 1, 1]]", "S_Vo", "MultiKey[MultiKey[1, 1, 1, 1]]");
      boolean boolean0 = multiKey1.equals(multiKey7);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(5);
      Integer integer1 = new Integer(5);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[5, 5, 5]", "MultiKey[5, 5, 5]");
      multiKey1.toString();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 7);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey1;
      multiKeyArray0[3] = multiKey1;
      multiKeyArray0[4] = multiKey1;
      multiKeyArray0[5] = multiKey1;
      multiKeyArray0[6] = multiKey1;
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      int int0 = multiKey2.size();
      MultiKey<String> multiKey3 = new MultiKey<String>("4J", "MultiKey[5, 5, 5]", "MultiKey[5, 5, 5]", "'gd|D]_&L,|$>:C", "G");
      MultiKey<Object> multiKey4 = new MultiKey<Object>(integer1, "MultiKey[5, 5, 5]", "MultiKey[5, 5, 5]", multiKey3, multiKey1);
      int int1 = multiKey4.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Object object2 = new Object();
      multiKey0.equals(object2);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 6);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      multiKeyArray0[5] = multiKey0;
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey1.toString();
      multiKey1.hashCode();
      String[] stringArray0 = new String[2];
      String string0 = "";
      stringArray0[0] = "";
      stringArray0[1] = "`%x#R";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      multiKey2.getKeys();
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) stringArray0, true);
      // Undeclared exception!
      try { 
        multiKey3.getKey((-953));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -953
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      int int0 = (-500);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-500));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -500
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("*N+t\"uF3V`:im|%", "*N+t\"uF3V`:im|%", "*N+t\"uF3V`:im|%", "The array of keys must not be null");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, "``ODLL~_xmM^jkOB0", "``ODLL~_xmM^jkOB0", "t_Xk'Irfy_a1&yP'", "t_Xk'Irfy_a1&yP'");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "t_Xk'Irfy_a1&yP'";
      stringArray0[1] = "MultiKey[null, ``ODLL~_xmM^jkOB0, ``ODLL~_xmM^jkOB0, t_Xk'Irfy_a1&yP', t_Xk'Irfy_a1&yP']";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.equals("t_Xk'Irfy_a1&yP'");
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, multiKey0);
      multiKey2.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey2, multiKey0);
      multiKey3.toString();
      // Undeclared exception!
      try { 
        multiKey3.getKey((-877));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -877
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
