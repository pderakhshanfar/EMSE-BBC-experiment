/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:03:51 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey0.equals(multiKey0);
      Integer integer0 = new Integer(5884);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, (Integer) null);
      multiKey1.toString();
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.getKeys();
      MultiKey<String> multiKey3 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "MultiKey[MultiKey[5884, null], MultiKey[5884, null], MultiKey[5884, null], MultiKey[5884, null], MultiKey[5884, null]]", "It_(.3JrE+vY", "org.apache.commons.collections4.keyvalue.MultiKey", "MultiKey[5884, null]");
      multiKey3.equals("MultiKey[MultiKey[5884, null], MultiKey[5884, null], MultiKey[5884, null], MultiKey[5884, null], MultiKey[5884, null]]");
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(object0, "It_(.3JrE+vY", object1);
      // Undeclared exception!
      try { 
        multiKey4.getKey(5884);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5884
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("NsMq+{NCJFN>Q1+C\"V", "", "NsMq+{NCJFN>Q1+C\"V");
      multiKey0.hashCode();
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey2.toString();
      boolean boolean0 = multiKey2.equals("NsMq+{NCJFN>Q1+C\"V");
      assertFalse(boolean0);
      
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[NsMq+{NCJFN>Q1+C\"V, , NsMq+{NCJFN>Q1+C\"V]", string0);
      
      Integer integer0 = new Integer(2423);
      Integer integer1 = new Integer((-1770));
      multiKey2.size();
      MultiKey<String> multiKey3 = new MultiKey<String>("", "|;iTkL|PT%");
      assertFalse(multiKey3.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(10);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      Object object0 = new Object();
      multiKey0.equals(object0);
      Object[] objectArray0 = new Object[3];
      multiKey0.toString();
      objectArray0[0] = object0;
      multiKey0.toString();
      objectArray0[1] = (Object) "MultiKey[10, 10, 10, 10, 10]";
      objectArray0[2] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey1.equals(integer0);
      boolean boolean0 = multiKey0.equals(object0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      boolean boolean1 = multiKey1.equals(multiKey2);
      assertFalse(boolean1 == boolean0);
      
      multiKey2.toString();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "MultiKey[10, 10, 10, 10, 10]";
      stringArray0[1] = "MultiKey[10, 10, 10, 10, 10]";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[10, 10, 10, 10, 10], MultiKey[10, 10, 10, 10, 10]]", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      Object object0 = new Object();
      multiKey0.equals(object0);
      multiKey0.getKeys();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1, integer2, integer0);
      multiKey1.toString();
      multiKey1.equals(integer0);
      multiKey1.equals("MultiKey[]");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "MultiKey[0, 0, 0, 0, 0]";
      stringArray0[1] = "MultiKey[0, 0, 0, 0, 0]";
      stringArray0[2] = "(rmwh/";
      stringArray0[3] = "MultiKey[]";
      stringArray0[4] = "MultiKey[]";
      stringArray0[5] = "MultiKey[0, 0, 0, 0, 0]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      int int0 = multiKey2.size();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Object object1 = multiKey0.getKey(0);
      objectArray0[1] = object1;
      multiKey0.getKey(3);
      objectArray0[2] = null;
      MultiKey<String> multiKey1 = new MultiKey<String>("YS^*! T^E4I9U0", "5oN=d0s", "YS^*! T^E4I9U0");
      multiKey1.getKey(1);
      objectArray0[3] = (Object) "5oN=d0s";
      Integer integer0 = new Integer((-642));
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(3);
      Integer integer3 = new Integer(3);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer2, integer3);
      Integer integer4 = multiKey2.getKey(3);
      objectArray0[4] = (Object) integer4;
      Object object2 = new Object();
      objectArray0[5] = object2;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, true);
      multiKey3.hashCode();
      assertFalse(multiKey3.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = "ThdnX4nC";
      MultiKey<String> multiKey0 = new MultiKey<String>("ThdnX4nC", "ThdnX4nC");
      int int0 = 0;
      multiKey0.getKey(0);
      objectArray0[1] = (Object) "ThdnX4nC";
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null", "a#I@x", (String) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, (Object) null, multiKey0, integer0, "The array of keys must not be null");
      multiKey1.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[The array of keys must not be null, The array of keys must not be null, a#I@x, null], null, MultiKey[The array of keys must not be null, The array of keys must not be null, a#I@x, null], 0, The array of keys must not be null]", string0);
      
      multiKey0.getKey(0);
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      Integer[] integerArray1 = multiKey2.getKeys();
      multiKey2.getKeys();
      multiKey1.getKeys();
      Object object0 = new Object();
      multiKey1.equals(object0);
      multiKey2.size();
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray1);
      Object object1 = multiKey3.getKey(0);
      boolean boolean0 = multiKey0.equals(object1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer1);
      Integer integer2 = new Integer(3034);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer2, integer1, integer2, (Integer) null);
      multiKey1.toString();
      multiKey0.toString();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "MultiKey[3034, 1, 3034, null]";
      stringArray0[1] = "MultiKey[3034, 1, 3034, null]";
      stringArray0[2] = "MultiKey[3034, 1, 3034, null]";
      stringArray0[3] = "MultiKey[3034, 1, 3034, null]";
      stringArray0[4] = "MultiKey[3034, 1, 3034, null]";
      stringArray0[5] = "MultiKey[3034, 1, 3034, null]";
      stringArray0[6] = "MultiKey[3034, 1, 3034, null]";
      multiKey0.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer3, (Integer) null);
      multiKey2.toString();
      int int0 = 592;
      // Undeclared exception!
      try { 
        multiKey3.getKey(592);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 592
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer((-1887));
      Integer integer1 = new Integer((-1887));
      Integer integer2 = new Integer((-1518));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, integer2, integer2);
      multiKey0.toString();
      multiKey0.getKey(0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1887));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1887
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(1845);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, (Integer) null, integer0);
      multiKey0.size();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer1;
      objectArray0[2] = (Object) integer1;
      Object object0 = new Object();
      objectArray0[3] = object0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "E";
      stringArray0[1] = "MultiKey";
      stringArray0[2] = "";
      stringArray0[3] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[4] = "eEa6|";
      stringArray0[5] = "AX2*#YTh";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "Q; BD0N3$?e";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-124));
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      assertEquals(1, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer((-331));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, multiKey0);
      int int0 = 2;
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "?j";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "?j");
      multiKey0.toString();
      multiKey0.hashCode();
      Object object0 = new Object();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, "", multiKey0, (Object) null);
      multiKey1.toString();
      multiKey0.toString();
      int int0 = (-4635);
      multiKey1.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-4635));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4635
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
