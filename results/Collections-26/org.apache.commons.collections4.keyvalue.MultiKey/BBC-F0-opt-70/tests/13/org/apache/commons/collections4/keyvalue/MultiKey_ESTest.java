/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:23:37 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("p=[ag<wqw5C/QEoI", (String) null, "p=[ag<wqw5C/QEoI");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      Integer[] integerArray1 = multiKey1.getKeys();
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[2] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, false);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      Object object1 = multiKey2.getKey(int0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, int0, object1);
      multiKey3.getKey(int0);
      Integer integer2 = new Integer(int0);
      boolean boolean0 = multiKey3.equals(multiKey3);
      assertFalse(multiKey3.equals((Object)multiKey1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, integer2);
      multiKey0.toString();
      Object object0 = new Object();
      Integer integer3 = new Integer(1);
      multiKey0.equals(integer3);
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) multiKey0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) integer0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.size();
      multiKey0.size();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.size();
      MultiKey<String> multiKey2 = new MultiKey<String>(".]q", "D_", "cR\"4{gWc^[", ".]q", "MultiKey[-1, -1]");
      multiKey2.hashCode();
      multiKey1.getKeys();
      multiKey1.size();
      multiKey1.size();
      multiKey1.equals(".]q");
      Object object2 = new Object();
      multiKey2.equals("cR\"4{gWc^[");
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null);
      MultiKey<Object> multiKey4 = multiKey3.getKey(0);
      assertNull(multiKey4);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, false);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      Object object1 = multiKey2.getKey(int0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, int0, object1);
      Object object2 = multiKey3.getKey(int0);
      Integer integer3 = new Integer(int0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(integer2, object2, integer3, multiKey1);
      boolean boolean0 = multiKey4.equals(multiKey3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "U";
      stringArray0[4] = "G70949W";
      stringArray0[5] = "d`f\"8NT2HpKv";
      stringArray0[6] = "The array of keys must not be null";
      stringArray0[7] = "l}>\"BH8)n_\"_cvR|mQ";
      stringArray0[8] = "+";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      String[] stringArray1 = multiKey0.getKeys();
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 1205;
      Integer integer0 = new Integer(1205);
      Object object0 = null;
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-2225));
      Integer integer1 = new Integer((-2225));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null, integer1, integer0, integer0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) integer1;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      // Undeclared exception!
      try { 
        multiKey1.getKey(2256);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2256
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(883);
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, object0);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[883, java.lang.Object@294a00b]", "MultiKey[883, java.lang.Object@294a00b]", "", "MultiKey", "MultiKey[883, java.lang.Object@294a00b]");
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null, (Integer) null, integer0);
      multiKey0.toString();
      multiKey0.toString();
      Object object0 = new Object();
      Integer integer1 = new Integer((-1));
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, integer0, integer1, object1);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.equals((Object) null);
      int int0 = multiKey2.size();
      multiKey0.toString();
      multiKey2.size();
      multiKey1.getKey(0);
      multiKey0.size();
      int int1 = multiKey0.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "LN0ghH/&?ROMZtS^C");
      multiKey0.toString();
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, , LN0ghH/&?ROMZtS^C]", string0);
  }
}
