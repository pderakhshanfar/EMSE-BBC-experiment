/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:38:46 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      Integer integer0 = new Integer(1101);
      multiKey1.equals(integer0);
      multiKey0.equals(objectArray0[1]);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer0, (Integer) null);
      multiKey2.toString();
      int int0 = multiKey0.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null", "The array of keys must not be null", "The array of keys must not be null", "");
      multiKey0.size();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[]", string0);
      
      multiKey1.getKeys();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 3);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      MultiKey<String> multiKey3 = new MultiKey<String>("The array of keys must not be null", "fB");
      boolean boolean0 = multiKey2.equals(multiKey3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "hf>8eO");
      multiKey0.toString();
      multiKey0.equals("hf>8eO");
      Integer integer0 = new Integer(2628);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, "", "", "", multiKey1);
      multiKey2.equals("hf>8eO");
      multiKey2.getKeys();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      multiKey3.toString();
      multiKey3.size();
      // Undeclared exception!
      try { 
        multiKey2.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "'xnsEjP!-kC)F}7";
      stringArray0[1] = "E&5:i,Z?AI&vHn2J";
      stringArray0[2] = "4>- h5H9rl@";
      stringArray0[3] = "";
      stringArray0[4] = "%rQ+a^f?dYQ!wkD";
      stringArray0[5] = ";v+>eF(_16 #e";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, false);
      multiKey1.equals("%rQ+a^f?dYQ!wkD");
      Integer integer0 = new Integer((-845));
      Integer integer1 = new Integer((-845));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer0, (Integer) null, integer1);
      multiKey2.toString();
      multiKey1.getKeys();
      multiKey0.toString();
      multiKey1.toString();
      multiKey2.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[-845, -845, null, -845]", string0);
      
      multiKey1.hashCode();
      Object object0 = new Object();
      multiKey2.equals(object0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) stringArray0, true);
      multiKey1.equals(multiKey3);
      Integer integer2 = new Integer((-845));
      boolean boolean0 = multiKey1.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<String> multiKey0 = new MultiKey<String>("itO9QkdIrRt(&?i=c6", "itO9QkdIrRt(&?i=c6");
      multiKey0.getKey(0);
      objectArray0[1] = (Object) "itO9QkdIrRt(&?i=c6";
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      Object object3 = new Object();
      Object object4 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", object3, object4, "");
      multiKey1.getKey(0);
      objectArray0[4] = (Object) "";
      Object object5 = new Object();
      objectArray0[5] = object5;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      Integer integer0 = new Integer(1935);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer0, "itO9QkdIrRt(&?i=c6");
      MultiKey<Integer> multiKey4 = null;
      try {
        multiKey4 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", (String) null, (String) null);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, multiKey0, (MultiKey<String>) null, (MultiKey<String>) null);
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, "", (Object) null);
      assertEquals(5, multiKey2.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(1843);
      Integer integer1 = new Integer((-184));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1);
      Integer integer2 = new Integer(1843);
      MultiKey<String> multiKey1 = new MultiKey<String>("3Ci2]*30zk7X", "3Ci2]*30zk7X");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, integer2, multiKey1);
      boolean boolean0 = multiKey0.equals(multiKey2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = null;
      boolean boolean0 = true;
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.getKeys();
      MultiKey<String> multiKey1 = new MultiKey<String>("q22zDLz6Gb~yC", "q22zDLz6Gb~yC", "q22zDLz6Gb~yC", "q22zDLz6Gb~yC", "");
      multiKey1.toString();
      multiKey1.toString();
      int int0 = multiKey1.size();
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1);
      multiKey2.getKeys();
      int int1 = multiKey0.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "'xnsEjP!-kC)F}7";
      stringArray0[1] = "E&5:i,Z?AI&vHn2J";
      stringArray0[2] = "4>- h5H9rl@";
      stringArray0[3] = "";
      stringArray0[4] = "%rQ+a^f?dYQ!wkD";
      stringArray0[5] = ";v+>eF(_16 #e";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, false);
      multiKey1.equals("%rQ+a^f?dYQ!wkD");
      Integer integer0 = new Integer((-845));
      Integer integer1 = new Integer(5);
      Integer integer2 = new Integer(768);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, (Integer) null, integer1, integer2);
      multiKey2.hashCode();
      multiKey1.getKeys();
      multiKey0.equals((Object) null);
      // Undeclared exception!
      try { 
        multiKey2.getKey(1935);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1935
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0, (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals(integer0);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.equals("MultiKey[0, 0, 0, null]");
      multiKey0.equals((Object) null);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, ]", string0);
      
      int int0 = multiKey0.size();
      Integer integer0 = new Integer(2);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey1.hashCode();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      Object object0 = multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, (Object) null, multiKey2, integer0);
      multiKey3.hashCode();
      int int1 = multiKey1.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3);
      integerArray0[1] = integer1;
      int int1 = 2;
      Integer integer2 = new Integer(2);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(3);
      integerArray0[3] = integer3;
      int int2 = 0;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(2);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      int int3 = 0;
      Integer integer6 = new Integer(0);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 6);
      String string0 = "";
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      // Undeclared exception!
      try { 
        multiKey1.getKey(2543);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2543
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
