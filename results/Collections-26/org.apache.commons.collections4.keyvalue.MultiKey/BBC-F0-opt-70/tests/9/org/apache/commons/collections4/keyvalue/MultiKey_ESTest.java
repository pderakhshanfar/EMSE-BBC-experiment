/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:49:51 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("lyD7(O;5F4:KM", "lyD7(O;5F4:KM", "lyD7(O;5F4:KM", "lyD7(O;5F4:KM");
      boolean boolean0 = multiKey0.equals(multiKey0);
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(1480);
      integerArray0[0] = integer0;
      multiKey0.toString();
      Object object0 = new Object();
      Integer integer1 = new Integer(689);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer1, integer0, "MultiKey[lyD7(O;5F4:KM, lyD7(O;5F4:KM, lyD7(O;5F4:KM, lyD7(O;5F4:KM]");
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[689, 1480, MultiKey[lyD7(O;5F4:KM, lyD7(O;5F4:KM, lyD7(O;5F4:KM, lyD7(O;5F4:KM]]", multiKey1, multiKey1, multiKey1);
      multiKey2.size();
      multiKey0.equals(integer1);
      boolean boolean1 = multiKey2.equals((Object) null);
      assertFalse(boolean1 == boolean0);
      
      Integer integer2 = new Integer(1480);
      Integer integer3 = new Integer(4);
      multiKey2.toString();
      Integer integer4 = new Integer(1789);
      Integer integer5 = new Integer((-970));
      Integer integer6 = new Integer(1175);
      Integer integer7 = new Integer(4);
      Integer integer8 = new Integer((int) integerArray0[0]);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer6, integer2, integer7, integer3, integer8);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[1175, 1480, 4, 4, 1480]", string0);
      
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer5, integer5);
      multiKey4.hashCode();
      assertFalse(multiKey4.equals((Object)multiKey3));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("x N$", "x N$", "x N$", "x N$", "x N$");
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      MultiKey<Object>[] multiKeyArray1 = multiKey1.getKeys();
      assertFalse(multiKeyArray1.equals((Object)multiKeyArray0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "}cP<TDtj7Ei<O?x;x+";
      stringArray0[3] = "}cP<TDtj7Ei<O?x;x+";
      stringArray0[4] = "}cP<TDtj7Ei<O?x;x+";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[]", string0);
      
      int int0 = multiKey0.size();
      int int1 = multiKey0.hashCode();
      assertTrue(int1 == int0);
      
      Integer[] integerArray0 = new Integer[6];
      int int2 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(628);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      Integer integer6 = multiKey1.getKey(int2);
      assertEquals(0, (int)integer6);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "^g;`7)_[E}xOD]";
      stringArray0[1] = "^g;`7)_[E}xOD]";
      stringArray0[2] = "^g;`7)_[E}xOD]";
      multiKey0.toString();
      stringArray0[3] = "^g;`7)_[E}xOD]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1);
      multiKey0.toString();
      multiKey2.toString();
      multiKey2.toString();
      int int0 = 0;
      Object object0 = multiKey2.getKey(0);
      multiKey0.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey0, "^g;`7)_[E}xOD]", object0);
      multiKey3.toString();
      multiKey3.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey3.toString();
      multiKey3.equals("^g;`7)_[E}xOD]");
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey3, multiKey3, multiKey0);
      boolean boolean0 = multiKey4.equals("^g;`7)_[E}xOD]");
      assertFalse(boolean0);
      
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[], ^g;`7)_[E}xOD], MultiKey[^g;`7)_[E}xOD], ^g;`7)_[E}xOD], ^g;`7)_[E}xOD], ^g;`7)_[E}xOD]]]", string0);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(4769);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-449));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integerArray0, false);
      boolean boolean1 = multiKey3.equals(multiKey5);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = null;
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<MultiKey<Integer>> multiKey0 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null);
      multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, org.apache.commons.collections4.keyvalue.MultiKey]", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "#F";
      stringArray0[1] = "MultiKey";
      stringArray0[2] = "The array of keys must not be null";
      stringArray0[3] = "";
      stringArray0[4] = "4d>";
      stringArray0[5] = "J9@T40'](4z/";
      stringArray0[6] = "jJ ";
      stringArray0[7] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.getKeys();
      boolean boolean0 = multiKey0.equals("4d>");
      assertFalse(boolean0);
      
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[#F, MultiKey, The array of keys must not be null, , 4d>, J9@T40'](4z/, jJ , ]", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "<Dn0w";
      stringArray0[2] = "^XkyhzB?pwhER@Y";
      stringArray0[3] = "";
      stringArray0[4] = "1c#Rfy@M|";
      stringArray0[5] = "xG0J\"o";
      stringArray0[6] = "";
      stringArray0[7] = "MultiKey";
      stringArray0[8] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "xG0J\"o", object0);
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      int int0 = multiKey1.size();
      multiKey0.equals("");
      multiKey1.equals("MultiKey[, xG0J\"o, java.lang.Object@30030c1b]");
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(3);
      Integer integer2 = new Integer(3);
      Integer integer3 = new Integer(3);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer0, integer2, integer3);
      int int1 = multiKey2.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(1221);
      Integer integer1 = new Integer(1221);
      Integer integer2 = new Integer(1221);
      Integer integer3 = new Integer(1);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2, integer3);
      multiKey1.hashCode();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "MultiKey[, , , , ]";
      objectArray0[1] = (Object) "MultiKey[, , , , ]";
      objectArray0[2] = (Object) "MultiKey[, , , , ]";
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) "MultiKey[, , , , ]";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey2, multiKey2);
      Object object0 = new Object();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(object0, integer0, multiKey3, objectArray0[4], multiKey2);
      // Undeclared exception!
      try { 
        multiKey4.getKey((-2250));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2250
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null);
      multiKey0.hashCode();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) null;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Object object1 = multiKey1.getKey(0);
      assertNull(object1);
  }
}
