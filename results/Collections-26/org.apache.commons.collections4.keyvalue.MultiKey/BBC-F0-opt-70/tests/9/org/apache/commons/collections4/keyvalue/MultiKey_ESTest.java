/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:05:09 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKey(0);
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[MultiKey[java.lang.Object@218d508b, java.lang.Object@218d508b, java.lang.Object@218d508b], MultiKey[java.lang.Object@218d508b, java.lang.Object@218d508b, java.lang.Object@218d508b], MultiKey[java.lang.Object@218d508b, java.lang.Object@218d508b, java.lang.Object@218d508b], MultiKey[java.lang.Object@218d508b, java.lang.Object@218d508b, java.lang.Object@218d508b]]", (String) null, "MultiKey[MultiKey[java.lang.Object@218d508b, java.lang.Object@218d508b, java.lang.Object@218d508b], MultiKey[java.lang.Object@218d508b, java.lang.Object@218d508b, java.lang.Object@218d508b], MultiKey[java.lang.Object@218d508b, java.lang.Object@218d508b, java.lang.Object@218d508b], MultiKey[java.lang.Object@218d508b, java.lang.Object@218d508b, java.lang.Object@218d508b]]", "}cac", (String) null);
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey2, multiKey2);
      multiKey2.toString();
      multiKey3.toString();
      multiKey3.hashCode();
      boolean boolean0 = multiKey0.equals((Object) null);
      boolean boolean1 = multiKey0.equals(multiKey0);
      assertFalse(boolean1 == boolean0);
      
      MultiKey<String> multiKey4 = new MultiKey<String>("MultiKey[MultiKey[java.lang.Object@218d508b, java.lang.Object@218d508b, java.lang.Object@218d508b], MultiKey[java.lang.Object@218d508b, java.lang.Object@218d508b, java.lang.Object@218d508b], MultiKey[java.lang.Object@218d508b, java.lang.Object@218d508b, java.lang.Object@218d508b], MultiKey[java.lang.Object@218d508b, java.lang.Object@218d508b, java.lang.Object@218d508b]]", "", "", "", "v5'CMVEZ4L03<Y;e");
      assertFalse(multiKey4.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
      multiKey0.toString();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "MultiKey[0, 0]";
      stringArray0[2] = "The array of keys must not be null";
      stringArray0[3] = "MultiKey[0, 0]";
      stringArray0[4] = "MultiKey[0, 0]";
      stringArray0[5] = "MultiKey[0, 0]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, multiKey1, multiKey1, (MultiKey<String>) null);
      MultiKey<String> multiKey3 = multiKey2.getKey(3);
      assertNull(multiKey3);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      MultiKey<String> multiKey2 = multiKey1.getKey(1);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) stringArray0, false);
      multiKey3.equals(multiKey1);
      multiKey3.equals(multiKey0);
      // Undeclared exception!
      try { 
        multiKey2.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      MultiKey<String> multiKey2 = multiKey1.getKey(1);
      multiKey2.getKeys();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, false);
      int int0 = multiKey3.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, (Object) null);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      Object object1 = multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, (Object) null, object0, object1);
      multiKey1.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[MultiKey[java.lang.Object@398cfc98, java.lang.Object@398cfc98, null], MultiKey[java.lang.Object@398cfc98, java.lang.Object@398cfc98, null], MultiKey[java.lang.Object@398cfc98, java.lang.Object@398cfc98, null], MultiKey[java.lang.Object@398cfc98, java.lang.Object@398cfc98, null]]", (String) null, "MultiKey[MultiKey[java.lang.Object@398cfc98, java.lang.Object@398cfc98, null], MultiKey[java.lang.Object@398cfc98, java.lang.Object@398cfc98, null], MultiKey[java.lang.Object@398cfc98, java.lang.Object@398cfc98, null], MultiKey[java.lang.Object@398cfc98, java.lang.Object@398cfc98, null]]", "}cac", (String) null);
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey3, multiKey3);
      multiKey3.toString();
      multiKey4.toString();
      multiKey4.hashCode();
      multiKey0.getKeys();
      boolean boolean0 = multiKey0.equals(multiKey4);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(2332);
      Integer integer1 = new Integer((-366));
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer0, integer1, integer0, integer1);
      MultiKey<MultiKey<Integer>> multiKey6 = new MultiKey<MultiKey<Integer>>(multiKey5, (MultiKey<Integer>) null, (MultiKey<Integer>) null, multiKey5, multiKey5);
      String string0 = multiKey6.toString();
      assertEquals("MultiKey[MultiKey[2332, -366, 2332, -366], null, null, MultiKey[2332, -366, 2332, -366], MultiKey[2332, -366, 2332, -366]]", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(523);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-916));
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[523, -916]", string0);
      
      MultiKey<String> multiKey1 = new MultiKey<String>("t", "-|", "k$z");
      multiKey1.size();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) integerArray0, true);
      multiKey2.getKeys();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, (MultiKey<String>) null);
      multiKey3.hashCode();
      multiKey2.size();
      multiKey1.size();
      Integer integer2 = new Integer((-1307));
      Object object0 = new Object();
      Integer integer3 = new Integer(2);
      MultiKey<Object> multiKey4 = new MultiKey<Object>("-|", integer2, object0, integer3);
      Integer integer4 = new Integer(1922);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(integerArray0[0], integerArray0[1], "", (Object) null, integer4);
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>(multiKey4, multiKey5, multiKey5);
      boolean boolean0 = multiKey6.equals("MultiKey[523, -916]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 4);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      multiKeyArray0[0] = multiKey0;
      Object object0 = new Object();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "The array of keys must not be null", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey1.getKey(2);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, multiKey0, "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKeyArray0[1] = multiKey2;
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      multiKeyArray0[2] = multiKey3;
      Object object1 = new Object();
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer((-1));
      MultiKey<Object> multiKey4 = new MultiKey<Object>(object1, multiKey3, integer0, integer0, integer1);
      multiKeyArray0[3] = multiKey4;
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      MultiKey<Object>[] multiKeyArray1 = multiKey5.getKeys();
      assertFalse(multiKeyArray1.equals((Object)multiKeyArray0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "5vk~#[D");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.hashCode();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) multiKey1;
      objectArray0[1] = (Object) "org.apache.commons.collections4.keyvalue.MultiKey";
      objectArray0[2] = (Object) multiKey1;
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) "5vk~#[D";
      objectArray0[5] = (Object) "org.apache.commons.collections4.keyvalue.MultiKey";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1701));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1701
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      int int0 = 1;
      Object object4 = multiKey0.getKey(1);
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      Object object5 = multiKey1.getKey(int0);
      Integer integer6 = new Integer(1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object1, object5, integer6);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object4, object3, object0, multiKey2);
      multiKey3.size();
      assertSame(object1, object4);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      int int0 = multiKey1.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.size();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "MultiKey[]";
      stringArray0[1] = "MultiKey[]";
      stringArray0[2] = "MultiKey[]";
      stringArray0[3] = "MultiKey[]";
      stringArray0[4] = "";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[], MultiKey[], MultiKey[], MultiKey[], ]", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
