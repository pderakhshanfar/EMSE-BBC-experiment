/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:49:33 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-3252));
      Integer integer1 = new Integer((-3252));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[-3252, -3252]", string0);
      
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(":zO`3geDV+0;@Oiiu", "", ":zO`3geDV+0;@Oiiu", "", ":zO`3geDV+0;@Oiiu");
      multiKey0.toString();
      Integer integer0 = new Integer(5);
      Integer integer1 = new Integer(5);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      multiKey1.toString();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      multiKey2.toString();
      multiKey1.toString();
      Integer integer2 = new Integer(5);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("MultiKey[]", multiKey1);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey3, multiKey3);
      multiKey4.toString();
      multiKey4.toString();
      multiKey4.toString();
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKey3, multiKey3);
      multiKey4.size();
      multiKey3.equals("MultiKey[MultiKey[MultiKey[], MultiKey[]], MultiKey[MultiKey[], MultiKey[]]]");
      multiKey3.hashCode();
      multiKey3.size();
      MultiKey<String> multiKey6 = new MultiKey<String>("The array of keys must not be null", (String) null, " ~E", "MultiKey[MultiKey[MultiKey[], MultiKey[]], MultiKey[MultiKey[], MultiKey[]]]");
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey7 = new MultiKey<String>(stringArray0, false);
      multiKey7.equals(multiKey2);
      multiKey3.toString();
      Object[] objectArray0 = multiKey3.getKeys();
      Object[] objectArray1 = multiKey3.getKeys();
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "3yNd", "3yNd", "3yNd", "");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.toString();
      Integer[] integerArray0 = new Integer[6];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3917));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      multiKey2.hashCode();
      Object[] objectArray1 = multiKey1.getKeys();
      assertEquals(0, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      multiKey0.toString();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey1.toString();
      Integer integer0 = new Integer(0);
      multiKey1.equals(integer0);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 7);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKey0.equals("");
      multiKey0.toString();
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      int int0 = 0;
      multiKey0.getKey(0);
      objectArray0[0] = null;
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "0&s:f<DO-\"J@{9HMtjY");
      multiKey1.getKey(0);
      objectArray0[1] = (Object) null;
      int int1 = (-2706);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-2706));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2706
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "9j#kA6`9p8B", "~[rou7c!1B[F", "9j#kA6`9p8B", "");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      Integer integer0 = new Integer(0);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 3);
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey2 = new MultiKey<String>("p+k)o@Eqb;+Ab){jF", "p+k)o@Eqb;+Ab){jF", "The array of keys must not be null", "}>c>`{W#{yi4.461sC2", "%UY^lqYIPJM]W:;QB!");
      multiKeyArray0[1] = multiKey2;
      multiKeyArray0[2] = multiKey0;
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      Object object0 = multiKey3.getKey(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey1, integer0, object0, "The array of keys must not be null");
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKey4, multiKey4);
      multiKey5.hashCode();
      multiKey4.size();
      boolean boolean0 = multiKey4.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = "/FdrT7~uE\"++0";
      MultiKey<String> multiKey0 = new MultiKey<String>("/FdrT7~uE\"++0", "Ouf", "MultiKey", "");
      int int0 = (-958);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-958));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -958
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = null;
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, multiKey0, object0);
      multiKey0.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("The array of keys must not be null", "", (String) null, "MultiKey[java.lang.Object@18ecf932, java.lang.Object@18ecf932]", "MultiKey[java.lang.Object@18ecf932, java.lang.Object@18ecf932]");
      multiKey2.toString();
      int int0 = 3533;
      // Undeclared exception!
      try { 
        multiKey2.getKey(3533);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3533
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, object0, (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, object1);
      multiKey1.toString();
      multiKey1.toString();
      Integer integer0 = new Integer((-1190));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.toString();
      multiKey2.toString();
      multiKey2.size();
      multiKey0.equals(multiKey2);
      multiKey2.toString();
      multiKey2.toString();
      Integer integer1 = new Integer((-2440));
      multiKey0.equals(integer1);
      multiKey0.toString();
      multiKey0.size();
      Object object2 = new Object();
      multiKey2.equals(object2);
      multiKey0.hashCode();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey1, multiKey0);
      multiKey3.hashCode();
      multiKey0.equals(multiKey1);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-4483));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4483
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, object0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals(integer0);
      String[] stringArray0 = new String[1];
      multiKey0.toString();
      multiKey0.toString();
      stringArray0[0] = "8";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      multiKey1.getKeys();
      multiKey0.getKey(0);
      multiKey1.getKeys();
      // Undeclared exception!
      try { 
        multiKey1.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer((-1919));
      multiKey0.toString();
      Integer integer4 = new Integer(0);
      Integer integer5 = new Integer(1774);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, integer2, integer3, integer4, integer5);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      // Undeclared exception!
      try { 
        multiKey0.getKey(1774);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1774
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
