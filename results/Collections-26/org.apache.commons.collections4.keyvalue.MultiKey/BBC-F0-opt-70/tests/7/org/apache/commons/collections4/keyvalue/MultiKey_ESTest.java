/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:04:37 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0, object0, object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("8", "8", "8");
      multiKey0.getKeys();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("8", (Object) null, object0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey1);
      Object object1 = multiKey2.getKey(0);
      boolean boolean0 = multiKey0.equals(object1);
      assertFalse(multiKey1.equals((Object)multiKey0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Integer integer0 = new Integer((-551));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object1, integer0, integer0, "The array of keys must not be null", "");
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKey1.equals(multiKey2);
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1);
      multiKey3.toString();
      multiKey3.hashCode();
      multiKey0.hashCode();
      MultiKey<String> multiKey4 = new MultiKey<String>("", "The array of keys must not be null", "");
      multiKey4.toString();
      multiKey3.getKeys();
      multiKey0.toString();
      MultiKey<String> multiKey5 = new MultiKey<String>("u#DC<mdLy", "", "h", "H#l@ky:Wv;_|ZaL}w");
      // Undeclared exception!
      try { 
        multiKey0.getKey(3275);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3275
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("^_[4P)g{?.ZKujN4U", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey0.toString();
      multiKey0.size();
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(2);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2);
      multiKey1.toString();
      Integer integer3 = new Integer(0);
      multiKey0.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("h-v+-s.r8'MW0w", (String) null);
      multiKey2.getKey(0);
      multiKey2.toString();
      multiKey2.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, (Object) null, integer3, (Object) null, "h-v+-s.r8'MW0w");
      multiKey3.toString();
      multiKey3.toString();
      multiKey1.equals(multiKey2);
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1);
      multiKey4.hashCode();
      multiKey3.hashCode();
      multiKey2.toString();
      multiKey4.getKeys();
      multiKey3.toString();
      MultiKey<String> multiKey5 = new MultiKey<String>("MultiKey[MultiKey[2, 0, 2], null, 0, null, h-v+-s.r8'MW0w]", "MultiKey[^_[4P)g{?.ZKujN4U, org.apache.commons.collections4.keyvalue.MultiKey]", (String) null, "");
      Object object0 = multiKey3.getKey(3);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.hashCode();
      multiKey0.toString();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[3] = "sn7";
      stringArray0[4] = "g rv";
      stringArray0[5] = "";
      stringArray0[6] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      multiKey1.toString();
      multiKey1.getKeys();
      boolean boolean0 = multiKey1.equals("org.apache.commons.collections4.keyvalue.MultiKey");
      assertFalse(boolean0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(3177);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3177);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      multiKey0.toString();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      boolean boolean1 = multiKey1.equals(multiKey2);
      assertFalse(boolean1);
      
      multiKey0.getKeys();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[, , org.apache.commons.collections4.keyvalue.MultiKey, sn7, g rv, , ], MultiKey[, , org.apache.commons.collections4.keyvalue.MultiKey, sn7, g rv, , ], MultiKey[, , org.apache.commons.collections4.keyvalue.MultiKey, sn7, g rv, , ], MultiKey[, , org.apache.commons.collections4.keyvalue.MultiKey, sn7, g rv, , ], MultiKey[, , org.apache.commons.collections4.keyvalue.MultiKey, sn7, g rv, , ]]", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "MultiKey", "MultiKey", "MultiKey");
      String string0 = multiKey0.getKey(0);
      assertEquals("MultiKey", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "D0X";
      stringArray0[2] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.getKeys();
      multiKey0.getKeys();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer1, "D0X", integer1);
      Object object0 = multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, object0);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1247));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1247
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.getKeys();
      Object object0 = new Object();
      Object object1 = new Object();
      multiKey0.toString();
      Object object2 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey[1, 1, 1, 0]", object0, object1, object2);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.equals("MultiKey[1, 1, 1, 0]");
      // Undeclared exception!
      try { 
        multiKey0.getKey((-5401));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5401
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object1, object0);
      Integer integer0 = new Integer(3214);
      multiKey0.toString();
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer0, object0, integer1);
      int int0 = (-1642);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1642));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1642
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 8);
      int int0 = 4;
      Integer integer0 = new Integer(4);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(multiKeyArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, multiKey0, integer0, multiKey0);
      // Undeclared exception!
      try { 
        multiKey1.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "**&pDhT<");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      multiKey1.toString();
      int int0 = multiKey1.size();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) "**&pDhT<";
      objectArray0[2] = (Object) multiKey0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      multiKey2.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[, **&pDhT<], **&pDhT<, MultiKey[, **&pDhT<]]", string0);
      
      multiKey2.getKeys();
      multiKey2.hashCode();
      int int1 = multiKey0.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = null;
      Integer integer1 = new Integer((-1515));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer1);
      multiKey0.toString();
      multiKey0.toString();
      String string0 = "";
      MultiKey<String> multiKey1 = new MultiKey<String>("Gl\"(l", "", "", "", "");
      multiKey0.toString();
      multiKey0.equals(multiKey1);
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(1219);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1219
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Integer integer0 = new Integer((-2642));
      String string0 = null;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, (Object) null);
      int int0 = 1465;
      // Undeclared exception!
      try { 
        multiKey0.getKey(1465);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1465
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
