/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:42:51 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, , , ]", string0);
      
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", " +:dSK([d");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey0);
      Object object0 = new Object();
      MultiKey<String> multiKey3 = new MultiKey<String>(" +:dSK([d", "I5?.DDyDeP~my!Wroz", "MultiKey[, , , ]");
      Object object1 = new Object();
      boolean boolean0 = multiKey2.equals("I5?.DDyDeP~my!Wroz");
      Object object2 = new Object();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 3);
      multiKeyArray0[0] = multiKey3;
      multiKeyArray0[1] = multiKey3;
      boolean boolean1 = multiKey3.equals(multiKey3);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-261));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2735));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      integerArray0[3] = integer3;
      int int0 = 2;
      Integer integer4 = new Integer(2);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("2", "S4d0#UJ3WNXN%$", "S4d0#UJ3WNXN%$", "2");
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[2, S4d0#UJ3WNXN%$, S4d0#UJ3WNXN%$, 2], MultiKey[2, S4d0#UJ3WNXN%$, S4d0#UJ3WNXN%$, 2], MultiKey[2, S4d0#UJ3WNXN%$, S4d0#UJ3WNXN%$, 2]]", string0);
      
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      multiKey2.getKeys();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey2);
      boolean boolean0 = multiKey3.equals(multiKey2);
      assertFalse(boolean0);
      
      boolean boolean1 = multiKey0.equals("MultiKey[MultiKey[2, S4d0#UJ3WNXN%$, S4d0#UJ3WNXN%$, 2], MultiKey[2, S4d0#UJ3WNXN%$, S4d0#UJ3WNXN%$, 2], MultiKey[2, S4d0#UJ3WNXN%$, S4d0#UJ3WNXN%$, 2]]");
      assertFalse(boolean1);
      
      Integer[] integerArray0 = new Integer[8];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(163);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(5);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(1099);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(4215);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      Integer integer8 = new Integer(1);
      Integer integer9 = new Integer(6);
      Integer integer10 = new Integer(4215);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer8, integer9, integer10, integerArray0[5]);
      MultiKey<MultiKey<Integer>> multiKey6 = new MultiKey<MultiKey<Integer>>(multiKey4, multiKey4, multiKey4, multiKey5, multiKey4);
      multiKey6.size();
      assertFalse(multiKey5.equals((Object)multiKey4));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[0]", string0);
      
      Object object0 = multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey", object0);
      multiKey1.size();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "MultiKey[0]";
      stringArray0[1] = "MultiKey[0]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      Integer integer1 = new Integer(1719);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0, (Integer) int0, (Integer) int0, integer1);
      boolean boolean0 = multiKey2.equals(multiKey3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-3010));
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(1114);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, integer2);
      multiKey0.toString();
      multiKey0.toString();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "MultiKey";
      stringArray0[1] = "Tb6xpT7l8";
      stringArray0[2] = "#y'v";
      stringArray0[3] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.hashCode();
      multiKey1.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, (Object) null, object0);
      multiKey2.toString();
      multiKey2.getKey(1);
      multiKey2.toString();
      multiKey2.getKeys();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-3010));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3010
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0, (Object) null);
      int int0 = 0;
      multiKey0.getKey(0);
      MultiKey<Integer> multiKey1 = null;
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>) null, (MultiKey<Integer>) null);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-3232));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3232
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("l&aH+", "l&aH+", "l&aH+", "l&aH+", "l&aH+");
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0, object0);
      multiKey1.hashCode();
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(2271);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-2256));
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(5);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer((int) integerArray0[5]);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[5, 0, -1, 0, 0, 2271, -2256, 5, 2271]", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "r@0*<3)";
      stringArray0[1] = "6QX;=:;%B=mN";
      stringArray0[2] = "Xv0Zus-";
      stringArray0[3] = "";
      stringArray0[4] = "D R([G(#`D2";
      stringArray0[5] = "BV n=V@KCU#*}{";
      stringArray0[6] = "m/N{\"v|nOZUoEu^7+x";
      stringArray0[7] = "";
      stringArray0[8] = "MultiKey";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      assertEquals(9, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null, (String) null);
      multiKey0.equals((Object) null);
      Integer integer0 = new Integer(549);
      Integer integer1 = new Integer(549);
      Integer integer2 = new Integer(549);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer0, integer2, integer1);
      multiKey1.toString();
      int int0 = multiKey1.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, "", object0);
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.getKeys();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer(2575);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[-1, 2575]", "MultiKey[-1, 2575]");
      // Undeclared exception!
      try { 
        multiKey1.getKey(44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 44
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Integer[] integerArray0 = null;
      boolean boolean0 = false;
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "MultiKey";
      stringArray0[1] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object2, "MultiKey", "MultiKey", object2, "&V6@");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, "", "MultiKey", "MultiKey");
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey((-847));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -847
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
