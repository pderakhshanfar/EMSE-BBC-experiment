/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:31:16 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, "!l5H", "!l5H");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("!l5H", (Object) null);
      multiKey0.equals(multiKey1);
      Object object0 = new Object();
      MultiKey<String> multiKey2 = new MultiKey<String>("j7Zj)", "");
      multiKey2.equals((Object) null);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 5);
      multiKeyArray0[0] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("", "j7Zj)", "", "", "j7Zj)");
      multiKeyArray0[1] = multiKey3;
      multiKeyArray0[2] = multiKey2;
      multiKeyArray0[3] = multiKey2;
      multiKeyArray0[4] = multiKey2;
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      MultiKey<MultiKey<String>> multiKey6 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      MultiKey<String>[] multiKeyArray1 = multiKey6.getKeys();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey7 = new MultiKey<Integer>(integerArray0, true);
      MultiKey<String> multiKey8 = new MultiKey<String>("Xl}}Kv", (String) null, "");
      multiKey0.toString();
      MultiKey<Object> multiKey9 = new MultiKey<Object>(multiKey2, multiKey2);
      MultiKey<Object> multiKey10 = new MultiKey<Object>(multiKeyArray1);
      multiKey10.getKey(0);
      multiKey7.equals(multiKey3);
      multiKey10.getKeys();
      int int0 = multiKey7.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0, object0);
      multiKey0.toString();
      multiKey0.equals(object0);
      multiKey0.getKeys();
      multiKey0.getKeys();
      String[] stringArray0 = new String[7];
      multiKey0.toString();
      stringArray0[0] = "}Uxr*NYaj=~";
      stringArray0[1] = "MultiKey[java.lang.Object@23db3137, java.lang.Object@23db3137, java.lang.Object@23db3137, java.lang.Object@23db3137]";
      stringArray0[2] = "MultiKey[java.lang.Object@23db3137, java.lang.Object@23db3137, java.lang.Object@23db3137, java.lang.Object@23db3137]";
      stringArray0[3] = "MultiKey[java.lang.Object@23db3137, java.lang.Object@23db3137, java.lang.Object@23db3137, java.lang.Object@23db3137]";
      stringArray0[4] = "MultiKey[java.lang.Object@23db3137, java.lang.Object@23db3137, java.lang.Object@23db3137, java.lang.Object@23db3137]";
      stringArray0[5] = "MultiKey[java.lang.Object@23db3137, java.lang.Object@23db3137, java.lang.Object@23db3137, java.lang.Object@23db3137]";
      multiKey0.toString();
      stringArray0[6] = "MultiKey[java.lang.Object@23db3137, java.lang.Object@23db3137, java.lang.Object@23db3137, java.lang.Object@23db3137]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      Object object1 = new Object();
      multiKey1.equals(object1);
      multiKey1.getKeys();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 4);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey2.toString();
      multiKey2.size();
      boolean boolean0 = multiKey1.equals("MultiKey[java.lang.Object@23db3137, java.lang.Object@23db3137, java.lang.Object@23db3137, java.lang.Object@23db3137]");
      boolean boolean1 = multiKey0.equals(multiKey0);
      assertFalse(boolean1 == boolean0);
      
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[]", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(429);
      integerArray0[0] = integer0;
      int int0 = 5;
      Integer integer1 = new Integer(5);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(15);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-920));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[3]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      multiKey1.equals(multiKey0);
      Object[] objectArray1 = multiKey0.getKeys();
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.hashCode();
      int int0 = (-532);
      Integer integer1 = new Integer((-532));
      multiKey0.equals(integer1);
      multiKey0.getKeys();
      multiKey0.toString();
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      multiKey0.size();
      multiKey0.equals((Object) null);
      multiKey0.getKeys();
      Integer integer0 = new Integer((-146));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      multiKey1.toString();
      multiKey1.equals(multiKey0);
      MultiKey<String> multiKey2 = new MultiKey<String>("e<9EoQ)Q74AR0>l", "e<9EoQ)Q74AR0>l", "e<9EoQ)Q74AR0>l");
      multiKey2.toString();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey2, multiKey2);
      multiKey3.equals(integer0);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 4);
      multiKeyArray0[0] = multiKey0;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKeyArray0);
      Integer[] integerArray0 = new Integer[4];
      Integer integer1 = new Integer((-811));
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integerArray0, true);
      // Undeclared exception!
      try { 
        multiKey5.getKey((-165));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -165
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, (Integer) null, (Integer) null);
      multiKey0.toString();
      Object object0 = new Object();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey[0, 0, null, null]", multiKey0, "MultiKey[0, 0, null, null]", object0, (Object) null);
      multiKey1.hashCode();
      multiKey0.toString();
      multiKey1.getKey(0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "MultiKey[0, 0, null, null]";
      stringArray0[1] = "MultiKey[0, 0, null, null]";
      multiKey1.toString();
      stringArray0[2] = "MultiKey[0, 0, null, null]";
      stringArray0[3] = "MultiKey[0, 0, null, null]";
      stringArray0[4] = "MultiKey[0, 0, null, null]";
      stringArray0[5] = "MultiKey[0, 0, null, null]";
      stringArray0[6] = "MultiKey[0, 0, null, null]";
      stringArray0[7] = "MultiKey[0, 0, null, null]";
      stringArray0[8] = "MultiKey[0, 0, null, null]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.toString();
      multiKey2.getKey(4);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("4|9y]},1a:[/~sXL'Q<", "4|9y]},1a:[/~sXL'Q<", "The array of keys must not be null");
      Integer integer0 = new Integer((-1750));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      multiKey1.hashCode();
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "~=CZ\"%Q@T=B5.U3e";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      assertEquals(2, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      String string0 = "O:25cj(/DM";
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null, "O:25cj(/DM");
      multiKey0.getKey(0);
      multiKey0.toString();
      objectArray0[0] = (Object) null;
      boolean boolean0 = false;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.getKey(0);
      objectArray0[1] = null;
      multiKey1.toString();
      Object object0 = new Object();
      objectArray0[2] = object0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0, integer1, integer1, integer0);
      multiKey3.hashCode();
      multiKey1.toString();
      Integer integer2 = new Integer(0);
      multiKey1.equals(integer2);
      MultiKey<MultiKey<Integer>> multiKey4 = null;
      try {
        multiKey4 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
