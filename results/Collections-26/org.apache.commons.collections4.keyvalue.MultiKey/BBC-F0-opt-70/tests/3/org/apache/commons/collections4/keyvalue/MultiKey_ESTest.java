/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:03:37 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("3\u00DBDYgdZ/+R+eP", "3\u00DBDYgdZ/+R+eP", "3\u00DBDYgdZ/+R+eP");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.getKeys();
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("Q?C#=Ui`L@n2|7c'g", "K*+dHmyc#6f+}6");
      multiKey0.getKey(0);
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0[0], integerArray0[0], integer0, integerArray0[0], integerArray0[0]);
      MultiKey<String> multiKey2 = new MultiKey<String>("Q?C#=Ui`L@n2|7c'g", "n']m1&(|t", (String) null, "");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Q?C#=Ui`L@n2|7c'g";
      stringArray0[1] = "&";
      stringArray0[2] = "ZQ?T)1kYl^^k2#LE";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, true);
      MultiKey<String> multiKey4 = new MultiKey<String>("Q?C#=Ui`L@n2|7c'g", "MulltiKey", "MulltiKey", "K*+dHmyc#6f+}6");
      Object object0 = multiKey4.getKey(0);
      assertEquals("Q?C#=Ui`L@n2|7c'g", object0);
      assertFalse(multiKey4.equals((Object)multiKey2));
      
      Integer integer1 = new Integer((-2094));
      Integer integer2 = new Integer((-515));
      boolean boolean0 = multiKey1.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("Q?C#=Ui`L@n2|7c'g", "0");
      multiKey0.getKey(0);
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      multiKey1.size();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      multiKey2.toString();
      MultiKey<String>[] multiKeyArray1 = multiKey2.getKeys();
      assertNotSame(multiKeyArray1, multiKeyArray0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[java.lang.Object@648dc3a]", "|tGD%(x$s#jkJLgh7", (String) null, "b:j;Lp~I%<Ey@aA7", "b:j;Lp~I%<Ey@aA7");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.getKeys();
      MultiKey<String> multiKey3 = null;
      try {
        multiKey3 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, integer0, (Integer) null, (Integer) null);
      Integer integer1 = multiKey0.getKey(0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 2);
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "#.U_8a";
      stringArray0[1] = "aa,KdXI([cVYfQtW";
      stringArray0[2] = "_!;{EO7FNsJUL,";
      stringArray0[3] = "WE&W&%$6m_F";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "[a?A%{s'";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.equals("WE&W&%$6m_F");
      multiKey0.size();
      String[] stringArray1 = multiKey0.getKeys();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.hashCode();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) stringArray1, false);
      Object[] objectArray0 = multiKey2.getKeys();
      assertNotSame(stringArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 7);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      multiKeyArray0[0] = multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0);
      multiKeyArray0[1] = multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, multiKey1, multiKey1, multiKey0);
      multiKeyArray0[2] = multiKey2;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, "", multiKey0);
      multiKeyArray0[3] = multiKey3;
      Object object0 = new Object();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(object0, (Object) null);
      Object object1 = multiKey4.getKey(0);
      assertNotNull(object1);
      
      Integer integer0 = new Integer(1);
      MultiKey<Object> multiKey5 = new MultiKey<Object>((Object) null, object1, integer0);
      multiKeyArray0[4] = multiKey5;
      MultiKey<Object> multiKey6 = new MultiKey<Object>(multiKey3, integer0);
      multiKeyArray0[5] = multiKey6;
      MultiKey<Object> multiKey7 = new MultiKey<Object>(multiKey5, "T5&n", object0);
      multiKeyArray0[6] = multiKey7;
      MultiKey<MultiKey<Object>> multiKey8 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      boolean boolean0 = multiKey8.equals(multiKey7);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", (String) null, "", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      int int0 = 0;
      multiKey0.getKey(0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1, integer0);
      multiKey1.hashCode();
      Integer integer2 = new Integer(303);
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, (Object) null, integer2);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-449));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -449
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null", (String) null, "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-4629));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4629
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
