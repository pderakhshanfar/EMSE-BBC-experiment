/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:50:52 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0, integer0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey1.toString();
      Object object1 = multiKey1.getKey(0);
      boolean boolean0 = multiKey0.equals(object1);
      assertTrue(boolean0);
      assertFalse(multiKey1.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("LjE+_K D", "LjE+_K D");
      multiKey0.toString();
      boolean boolean0 = multiKey0.equals("LjE+_K D");
      assertFalse(boolean0);
      
      MultiKey<String> multiKey1 = new MultiKey<String>("LjE+_K D", "LjE+_K D");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[LjE+_K D, LjE+_K D]", string0);
      
      multiKey0.equals(multiKey1);
      MultiKey<String> multiKey2 = new MultiKey<String>("k", "k");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "MultiKey[LjE+_K D, LjE+_K D]";
      objectArray0[1] = (Object) multiKey1;
      objectArray0[2] = (Object) multiKey0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) multiKey2;
      objectArray0[5] = (Object) multiKey1;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      multiKey3.toString();
      MultiKey<String> multiKey4 = new MultiKey<String>(":ds*%G:", "MultiKey[LjE+_K D, LjE+_K D]", "k", "MultiKey[MultiKey[LjE+_K D, LjE+_K D], MultiKey[LjE+_K D, LjE+_K D], MultiKey[LjE+_K D, LjE+_K D], java.lang.Object@4c74ebc9, MultiKey[k, k], MultiKey[LjE+_K D, LjE+_K D]]", "");
      MultiKey<String> multiKey5 = new MultiKey<String>("MultiKey[MultiKey[LjE+_K D, LjE+_K D], MultiKey[LjE+_K D, LjE+_K D], MultiKey[LjE+_K D, LjE+_K D], java.lang.Object@4c74ebc9, MultiKey[k, k], MultiKey[LjE+_K D, LjE+_K D]]", "MultiKey[MultiKey[LjE+_K D, LjE+_K D], MultiKey[LjE+_K D, LjE+_K D], MultiKey[LjE+_K D, LjE+_K D], java.lang.Object@4c74ebc9, MultiKey[k, k], MultiKey[LjE+_K D, LjE+_K D]]", (String) null);
      MultiKey<MultiKey<String>> multiKey6 = new MultiKey<MultiKey<String>>(multiKey2, multiKey4, multiKey1, multiKey4);
      multiKey6.size();
      multiKey0.hashCode();
      assertFalse(multiKey0.equals((Object)multiKey3));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(116);
      Integer integer1 = new Integer(116);
      Integer integer2 = new Integer(116);
      Integer integer3 = new Integer(1775);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer0, integer3);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      String[] stringArray1 = multiKey1.getKeys();
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0);
      Integer integer0 = new Integer(9);
      Integer integer1 = new Integer(9);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, (Integer) null, integer1);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      multiKey2.toString();
      Integer integer2 = new Integer((-3621));
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey2.hashCode();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[]", string0);
      
      int int0 = multiKey2.size();
      multiKey1.getKey(0);
      int int1 = multiKey0.hashCode();
      assertFalse(int1 == int0);
      
      boolean boolean0 = multiKey0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(5);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null);
      multiKey0.toString();
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "MultiKey[3, 3, 5, 3]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      multiKey2.toString();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, multiKey2, (MultiKey<String>) null);
      multiKey3.size();
      multiKey0.size();
      multiKey2.toString();
      multiKey0.equals("MultiKey[3, 3, 5, 3]");
      boolean boolean1 = multiKey2.equals(integer1);
      assertFalse(boolean1);
      
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[3, 3, 5, 3]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("LjE+_K D", "LjE+_K D");
      multiKey0.toString();
      multiKey0.equals("LjE+_K D");
      MultiKey<String> multiKey1 = new MultiKey<String>("LjE+_K D", "LjE+_K D");
      multiKey0.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("LjE+_K D", "LjE+_K D", "r&sjg~", "", ":ds*%G:");
      MultiKey<String> multiKey3 = new MultiKey<String>("", (String) null, (String) null);
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey1, multiKey2, multiKey2, multiKey3);
      multiKey4.size();
      Integer integer0 = new Integer(4);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      multiKey1.toString();
      multiKey5.hashCode();
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey1.hashCode();
      multiKey3.toString();
      multiKey2.size();
      // Undeclared exception!
      try { 
        multiKey5.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "@o)RwPiW");
      multiKey0.toString();
      multiKey0.getKey(0);
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0);
      Object[] objectArray0 = new Object[4];
      multiKey0.toString();
      objectArray0[0] = (Object) multiKey0;
      multiKey0.toString();
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) multiKey0;
      Object object0 = new Object();
      multiKey0.toString();
      multiKey0.toString();
      objectArray0[3] = object0;
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.getKey(0);
      multiKey1.size();
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[MultiKey[null, 0], 0, MultiKey[null, 0], java.lang.Object@54edb120]", "MultiKey[null, 0]");
      multiKey2.toString();
      multiKey2.size();
      Object object1 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0[1], object1, object0);
      // Undeclared exception!
      try { 
        multiKey3.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", (String) null, "The array of keys must not be null", (String) null, "");
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, integer0, integer0, integer0);
      // Undeclared exception!
      try { 
        multiKey1.getKey(634);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 634
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      multiKey0.getKey(0);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 1);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) multiKey0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKeyArray0[0] = multiKey2;
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      // Undeclared exception!
      try { 
        multiKey3.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      Object object0 = multiKey0.getKey(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, "fMP~Q~M9\"*L4;");
      Object object0 = new Object();
      multiKey0.equals(object0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "fMP~Q~M9\"*L4;";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      // Undeclared exception!
      try { 
        multiKey1.getKey(1461);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1461
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
