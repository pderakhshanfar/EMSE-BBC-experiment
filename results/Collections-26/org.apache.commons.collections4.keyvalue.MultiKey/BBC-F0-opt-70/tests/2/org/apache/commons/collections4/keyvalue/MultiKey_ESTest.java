/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:03:42 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integer0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) multiKey1;
      objectArray0[1] = (Object) multiKey1;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) multiKey1;
      objectArray0[5] = (Object) multiKey0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      Object object1 = multiKey2.getKey(0);
      boolean boolean0 = multiKey1.equals(object1);
      assertFalse(multiKey2.equals((Object)multiKey1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0, object0, object0);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      multiKey1.toString();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null);
      multiKey2.getKey(0);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      int int0 = multiKey3.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0, object0, object0);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "", "", "");
      Object object1 = new Object();
      MultiKey<String> multiKey3 = new MultiKey<String>("", "", "", "");
      multiKey3.getKey(3);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(object0, multiKey2, object1, "");
      MultiKey<String> multiKey5 = new MultiKey<String>("", "", "", "", "");
      multiKey5.getKey(3);
      multiKey1.equals("");
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0);
      multiKey6.toString();
      multiKey6.size();
      Integer[] integerArray1 = multiKey1.getKeys();
      multiKey6.toString();
      multiKey3.hashCode();
      multiKey3.toString();
      multiKey6.size();
      MultiKey<Object> multiKey7 = new MultiKey<Object>((Object[]) integerArray1, false);
      multiKey7.getKeys();
      // Undeclared exception!
      try { 
        multiKey7.getKey((-2217));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2217
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-4718));
      Integer integer1 = new Integer(99);
      Integer integer2 = new Integer((-4718));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2);
      Object object0 = new Object();
      multiKey0.equals(object0);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.size();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 7);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      multiKeyArray0[5] = multiKey0;
      multiKeyArray0[6] = multiKey0;
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, false);
      int int0 = multiKey2.size();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "");
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0);
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, integer0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      multiKey1.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.getKey(0);
      multiKey2.equals("");
      multiKey2.equals(multiKey1);
      multiKey0.equals("");
      multiKey2.hashCode();
      multiKey3.toString();
      String[] stringArray1 = multiKey3.getKeys();
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Ox>z~O:dJXV~Y";
      objectArray0[1] = (Object) "Ox>z~O:dJXV~Y";
      objectArray0[2] = (Object) "Ox>z~O:dJXV~Y";
      objectArray0[3] = (Object) "Ox>z~O:dJXV~Y";
      objectArray0[4] = (Object) "Ox>z~O:dJXV~Y";
      objectArray0[5] = (Object) "Ox>z~O:dJXV~Y";
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("Ox>z~O:dJXV~Y", "Ox>z~O:dJXV~Y", objectArray0[1], objectArray0[5]);
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>("2z", "MultiKey[MultiKey[Ox>z~O:dJXV~Y, Ox>z~O:dJXV~Y, Ox>z~O:dJXV~Y, Ox>z~O:dJXV~Y], MultiKey[Ox>z~O:dJXV~Y, Ox>z~O:dJXV~Y, Ox>z~O:dJXV~Y, Ox>z~O:dJXV~Y]]", "dP&Z.mMoeV-m[W", "2z", "MultiKey[Ox>z~O:dJXV~Y, Ox>z~O:dJXV~Y, Ox>z~O:dJXV~Y, Ox>z~O:dJXV~Y]");
      multiKey3.toString();
      multiKey3.toString();
      multiKey0.size();
      // Undeclared exception!
      try { 
        multiKey3.getKey((-250));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -250
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = null;
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, integer0, "L7v{%r[Hyb^'I@N~r", "L7v{%r[Hyb^'I@N~r");
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, integer0, (Integer) null, integer2);
      Integer integer3 = multiKey1.getKey(0);
      assertTrue(integer3.equals((Object)integer2));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-941));
      Integer integer1 = new Integer((-941));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "MultiKey[-941, -941, -941, -941]";
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) integer1;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      // Undeclared exception!
      try { 
        multiKey1.getKey(822);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 822
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(491);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(491);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1997);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray0);
      multiKey1.toString();
      multiKey1.equals(integerArray0[2]);
      multiKey1.getKeys();
      multiKey0.getKeys();
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[491, 491, 1997]", "MultiKey[491, 491, 1997]", "MultiKey[491, 491, 1997]");
      multiKey2.size();
      multiKey2.size();
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey3, multiKey3);
      multiKey4.toString();
      String string0 = "";
      MultiKey<String> multiKey5 = null;
      try {
        multiKey5 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      multiKey0.toString();
      Integer integer0 = new Integer(4);
      Integer integer1 = new Integer(4);
      Integer integer2 = new Integer(4);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, (Integer) null, integer1, integer2);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, "}s'(+r2i|w%yr", "}s'(+r2i|w%yr", "}s'(+r2i|w%yr", object0);
      multiKey0.toString();
      multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>("}s'(+r2i|w%yr", "");
      multiKey1.toString();
      multiKey1.equals((Object) null);
      Integer integer0 = new Integer(5);
      Integer integer1 = new Integer(5);
      Integer integer2 = new Integer(4898);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer2, integer0);
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
