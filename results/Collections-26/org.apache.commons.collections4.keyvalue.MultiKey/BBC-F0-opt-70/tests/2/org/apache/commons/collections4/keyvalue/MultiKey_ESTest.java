/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:46:57 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[0, 0]", string0);
      
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[0, 0]", "", "", "");
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, object0);
      Object object1 = multiKey2.getKey(0);
      boolean boolean0 = multiKey1.equals(object1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-23));
      Integer integer1 = new Integer((-23));
      Integer integer2 = new Integer((-23));
      Integer integer3 = new Integer(1);
      Integer integer4 = new Integer((-1665));
      Integer integer5 = new Integer(2);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer2, integer2, integer3, integer4, integer5);
      MultiKey<String> multiKey1 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null", "The array of keys must not be null");
      multiKey1.size();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, false);
      multiKey2.equals(multiKey3);
      multiKey3.toString();
      multiKey2.size();
      Object[] objectArray1 = multiKey3.getKeys();
      assertEquals(0, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(3257);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, integer0, integer0, "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      int int0 = multiKey0.size();
      multiKey0.getKeys();
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, (Integer) null);
      multiKey1.toString();
      int int1 = multiKey1.hashCode();
      assertTrue(int1 == int0);
      
      multiKey0.getKeys();
      multiKey0.hashCode();
      Object[] objectArray0 = multiKey0.getKeys();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      multiKey2.getKey(0);
      boolean boolean0 = multiKey1.equals((Object) null);
      assertFalse(boolean0);
      
      MultiKey<String> multiKey3 = new MultiKey<String>("Z^<", "", "");
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[Z^<, , ]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "The array of keys must not be null");
      multiKey0.toString();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.toString();
      boolean boolean0 = multiKey1.equals("The array of keys must not be null");
      assertFalse(boolean0);
      
      Integer integer0 = new Integer((-74));
      Integer integer1 = new Integer((-74));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      boolean boolean1 = multiKey2.equals(multiKey0);
      assertFalse(boolean1);
      
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, , , The array of keys must not be null]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<MultiKey<String>> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("7[3I}x6Oja.G8O}", "7[3I}x6Oja.G8O}", "7[3I}x6Oja.G8O}", "", "");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "7[3I}x6Oja.G8O}";
      objectArray0[5] = (Object) multiKey0;
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      Object object0 = multiKey1.getKey(1);
      Integer integer2 = new Integer(1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, objectArray0[0], objectArray0[0], object0, integer2);
      Object object1 = multiKey2.getKey(1);
      assertEquals("", object1);
      
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) multiKey0;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[, MultiKey[7[3I}x6Oja.G8O}, 7[3I}x6Oja.G8O}, 7[3I}x6Oja.G8O}, , ], , , 7[3I}x6Oja.G8O}, MultiKey[7[3I}x6Oja.G8O}, 7[3I}x6Oja.G8O}, 7[3I}x6Oja.G8O}, , ], , MultiKey[7[3I}x6Oja.G8O}, 7[3I}x6Oja.G8O}, 7[3I}x6Oja.G8O}, , ]]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(604);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, integer0, integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("The array of keys must not be null", "uqq}g2`yM/38T1Lq", "The array of keys must not be null");
      multiKey1.toString();
      multiKey1.hashCode();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1);
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.toString();
      multiKey2.size();
      multiKey0.toString();
      multiKey0.equals("nt>;jze>%Q!");
      multiKey0.getKey(3);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      multiKey1.toString();
      multiKey3.toString();
      multiKey1.size();
      Object[] objectArray0 = multiKey0.getKeys();
      multiKey1.toString();
      Object[] objectArray1 = multiKey0.getKeys();
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.toString();
      multiKey0.equals("");
      multiKey0.hashCode();
      multiKey0.hashCode();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[, , java.lang.Object@7ac85213]", "");
      multiKey1.equals("");
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "p(";
      Integer integer0 = new Integer((-280));
      Integer integer1 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, (Integer) null);
      int int0 = 0;
      multiKey0.toString();
      Object object0 = multiKey0.getKey(0);
      int int1 = 1211;
      multiKey0.toString();
      Integer integer2 = new Integer(1211);
      Integer integer3 = new Integer(1211);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0, integer2, integer3);
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-4238));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4238
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-1650));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1650));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[3]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[0]);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[0]);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(0);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, false);
      // Undeclared exception!
      try { 
        multiKey1.getKey((int) integerArray0[5]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1650
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("KCNJ4DKkVMs<Ph", "KCNJ4DKkVMs<Ph", "KCNJ4DKkVMs<Ph");
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(1177);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1177
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "kS~Lk=H]bB~`E0-IM_";
      stringArray0[2] = "q%[N>";
      stringArray0[3] = "z{fg";
      stringArray0[4] = "v3ep3r2e/9-8,-?. j";
      stringArray0[5] = "The array of keys must not be null";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, object0, "");
      // Undeclared exception!
      try { 
        multiKey1.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
