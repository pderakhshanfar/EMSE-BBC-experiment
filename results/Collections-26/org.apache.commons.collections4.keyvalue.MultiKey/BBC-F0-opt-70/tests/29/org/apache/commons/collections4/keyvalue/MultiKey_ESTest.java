/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:53:23 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer((-2694));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer1, integer2, integer0);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 4);
      Integer integer3 = new Integer((-4662));
      Object object1 = new Object();
      Integer integer4 = new Integer(3557);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0, integer4, object1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, object1, multiKey1);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer3, (Object) null, multiKey2, multiKey1, (Object) null);
      multiKeyArray0[0] = multiKey3;
      Object object2 = new Object();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(integer3, integer2, multiKey3, object2);
      multiKeyArray0[1] = multiKey4;
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey4, multiKey2);
      multiKeyArray0[2] = multiKey5;
      MultiKey<Object> multiKey6 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      multiKeyArray0[3] = multiKey6;
      MultiKey<MultiKey<Object>> multiKey7 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey7.size();
      boolean boolean0 = multiKey5.equals(multiKey5);
      assertTrue(boolean0);
      assertFalse(multiKey5.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, ";RW:$_[-UXo", "");
      Integer integer0 = new Integer(1);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      Integer integer1 = new Integer(3);
      multiKey1.toString();
      multiKey1.toString();
      Object object0 = new Object();
      Integer integer2 = new Integer(1990);
      Object object1 = new Object();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "MultiKey[1, 1]";
      stringArray0[1] = "MultiKey[1, 1]";
      stringArray0[2] = "MultiKey[1, 1]";
      stringArray0[3] = null;
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      multiKey2.getKey(3);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object1, (Object) null, integer0);
      // Undeclared exception!
      try { 
        multiKey3.getKey(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      int int0 = multiKey0.size();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 4);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "", "");
      multiKeyArray0[0] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "");
      multiKeyArray0[1] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("", "");
      multiKeyArray0[2] = multiKey3;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      multiKey3.toString();
      stringArray0[2] = "u{']l";
      stringArray0[3] = "";
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0);
      multiKeyArray0[3] = multiKey4;
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      String string0 = multiKey5.toString();
      assertEquals("MultiKey[MultiKey[, , , , ], MultiKey[, , ], MultiKey[, ], MultiKey[, , u{']l, ]]", string0);
      
      boolean boolean0 = multiKey5.equals(multiKey4);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integer0, integer1, integer1);
      int int1 = multiKey6.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.hashCode();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[java.lang.Object@1912d7f5, java.lang.Object@377ccaf1, java.lang.Object@eba19db, java.lang.Object@3dbd954e]", "", "~.nFT_>N\rnS,&Hc", "");
      multiKey2.getKey(0);
      boolean boolean0 = multiKey1.equals("MultiKey[java.lang.Object@1912d7f5, java.lang.Object@377ccaf1, java.lang.Object@eba19db, java.lang.Object@3dbd954e]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer[] integerArray0 = null;
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(2555);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1168));
      integerArray0[1] = integer1;
      int int0 = 0;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(125);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[1]);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("MultiKey[2555, -1168, 0, 2555, 125, -1168, 0]");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer3, (Object) null);
      multiKey1.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(int0, multiKey1, int0, object0);
      multiKey1.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integerArray0);
      boolean boolean0 = multiKey2.equals(multiKey3);
      assertFalse(boolean0);
      
      boolean boolean1 = multiKey3.equals(integer0);
      assertFalse(boolean1);
      
      Object object1 = multiKey3.getKey(1);
      assertEquals((-1168), object1);
      
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[2555, -1168, 0, 2555, 125, -1168, 0]", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(1529);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(4412);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(4412);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[3]);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[2]);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(0);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "", "N-VHw-m");
      MultiKey<String> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[]", string0);
      
      multiKey1.getKeys();
      Object object0 = new Object();
      multiKey0.equals(object0);
      Integer integer0 = new Integer(1574);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, (Integer) null, integer0);
      Object object1 = new Object();
      boolean boolean0 = multiKey2.equals(object1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      Object object0 = new Object();
      Integer integer2 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, object0, integer2, object0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer1, integer1, integer2, integer0);
      multiKey0.toString();
      multiKey0.toString();
      Object object0 = multiKey0.getKey(0);
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, object0, integer2, object1);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "MultiKey[0, 0, 0, 0]";
      stringArray0[1] = "MultiKey[0, 0, 0, 0]";
      stringArray0[2] = "MultiKey[0, 0, 0, 0]";
      stringArray0[3] = "MultiKey[0, 0, 0, 0]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey2, multiKey2, multiKey2, multiKey2, multiKey2);
      multiKey3.hashCode();
      multiKey2.getKeys();
      int int0 = multiKey2.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "org.apache.commons.collections4.keyvalue.MultiKey";
      Integer integer0 = new Integer(1317);
      Integer integer1 = new Integer(730);
      Integer integer2 = new Integer(730);
      Integer integer3 = new Integer(730);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer2, integer3);
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-2622));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2622
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
