/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:51:28 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null, (String) null);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, object0, object0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1);
      Object object1 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, (Object) null, object1, multiKey2);
      Object object2 = multiKey3.getKey(0);
      boolean boolean0 = multiKey2.equals(object2);
      assertTrue(boolean0);
      
      multiKey3.toString();
      assertFalse(multiKey3.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, ]", string0);
      
      Object object0 = new Object();
      boolean boolean0 = multiKey0.equals(object0);
      assertFalse(boolean0);
      
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, false);
      boolean boolean1 = multiKey0.equals(multiKey1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(5);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(5);
      MultiKey<String> multiKey0 = new MultiKey<String>("Vedv", "");
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = true;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.size();
      // Undeclared exception!
      try { 
        multiKey1.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "The array of keys must not be null";
      stringArray0[1] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.getKeys();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey1.getKeys();
      multiKey1.toString();
      int int0 = 4;
      // Undeclared exception!
      try { 
        multiKey1.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null);
      Object object0 = new Object();
      Integer integer0 = new Integer((-257));
      Integer integer1 = new Integer((-1078));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer0);
      Object object1 = multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, object0, object0, object1);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, object0, multiKey0, multiKey2);
      multiKey3.hashCode();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-2587));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      multiKey0.toString();
      Integer integer1 = new Integer(138);
      multiKey0.equals(integer1);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "MultiKey[-2587, -2587, -2587, -2587]";
      stringArray0[1] = "MultiKey[-2587, -2587, -2587, -2587]";
      stringArray0[2] = "MultiKey[-2587, -2587, -2587, -2587]";
      stringArray0[3] = "MultiKey[-2587, -2587, -2587, -2587]";
      stringArray0[4] = "MultiKey[-2587, -2587, -2587, -2587]";
      stringArray0[5] = "MultiKey[-2587, -2587, -2587, -2587]";
      stringArray0[6] = "MultiKey[-2587, -2587, -2587, -2587]";
      stringArray0[7] = "MultiKey[-2587, -2587, -2587, -2587]";
      stringArray0[8] = "MultiKey[-2587, -2587, -2587, -2587]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      int int0 = multiKey1.size();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(1445);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = (Object) multiKey0;
      objectArray0[6] = (Object) multiKey0;
      multiKey0.toString();
      objectArray0[7] = (Object) integer0;
      multiKey0.toString();
      objectArray0[8] = (Object) integer0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey1.equals(objectArray0[6]);
      MultiKey<String> multiKey2 = new MultiKey<String>("", "MultiKey[1445, 1445, 1445, 1445]", "The array of keys must not be null", "O:RpRm&_L#j|");
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.hashCode();
      // Undeclared exception!
      try { 
        multiKey1.getKey(1445);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1445
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = ">k]ZR'>xIf";
      stringArray0[1] = "%9:";
      stringArray0[2] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      Integer integer0 = new Integer(3371);
      Integer integer1 = new Integer(3371);
      Integer integer2 = new Integer(3371);
      Integer integer3 = new Integer(3371);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1, integer2, integer3);
      multiKey1.getKey(1);
      Integer integer4 = new Integer((-354));
      MultiKey<Object> multiKey2 = new MultiKey<Object>(stringArray0);
      Object object0 = multiKey2.getKey(0);
      assertEquals(">k]ZR'>xIf", object0);
      
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[>k]ZR'>xIf, %9:, ]", string0);
      
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer4, ">k]ZR'>xIf", integer1, multiKey0);
      Integer integer5 = new Integer(1424);
      boolean boolean0 = multiKey3.equals(integer5);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(3073);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      Integer[] integerArray1 = multiKey0.getKeys();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.getKeys();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.toString();
      multiKey1.getKeys();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "MultiKey[3073, 3073]";
      stringArray0[1] = "MultiKey[3073, 3073]";
      stringArray0[2] = "MultiKey[3073, 3073]";
      stringArray0[3] = "MultiKey[3073, 3073]";
      stringArray0[4] = "MultiKey[3073, 3073]";
      stringArray0[5] = "MultiKey[3073, 3073]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(779);
      Integer integer2 = new Integer((-1213));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null, (Integer) null, integer1, integer2);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer0, integer0, "(etBZGbG3rl'~S^I7Z9", (Object) null);
      MultiKey<String> multiKey2 = new MultiKey<String>("(etBZGbG3rl'~S^I7Z9", "(etBZGbG3rl'~S^I7Z9", "", "");
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = null;
      integerArray0[1] = integer0;
      integerArray0[2] = null;
      integerArray0[3] = integer0;
      integerArray0[4] = integer2;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      Object object0 = multiKey3.getKey(0);
      assertNull(object0);
      
      boolean boolean0 = multiKey2.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", object0);
      multiKey0.hashCode();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer((-2646));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, (Integer) null);
      multiKey0.toString();
      String string0 = multiKey0.toString();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "MultiKey[-2646, -2646, -2646, -2646, null]";
      stringArray0[1] = "MultiKey[-2646, -2646, -2646, -2646, null]";
      stringArray0[2] = "MultiKey[-2646, -2646, -2646, -2646, null]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      Integer integer1 = new Integer((-2646));
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, integer1, object0, integer1, integer1);
      String string1 = multiKey2.toString();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      int int0 = 5;
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(5);
      integerArray0[1] = integer1;
      int int1 = 0;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(5);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      Object object0 = multiKey0.getKey(1);
      assertEquals(5, object0);
      
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, int1);
      multiKey1.size();
      assertFalse(object0.equals((Object)integer5));
  }
}
