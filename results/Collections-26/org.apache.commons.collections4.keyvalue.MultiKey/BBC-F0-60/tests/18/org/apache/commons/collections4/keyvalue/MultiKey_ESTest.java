/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:53:23 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("DDv`*,tf", "DDv`*,tf");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) multiKey0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) "DDv`*,tf";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0[0], objectArray0[0], objectArray0[3], "kLl!)rQ&*d");
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, multiKey0, objectArray0[1], "DDv`*,tf", multiKey2);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey0, multiKey1, object0, objectArray0[0], multiKey3);
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKey4, multiKey3);
      MultiKey<Object> multiKey6 = multiKey5.getKey(0);
      assertFalse(multiKey6.equals((Object)multiKey2));
      
      boolean boolean0 = multiKey0.equals(objectArray0[0]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("zltiK9", "zltiK9", "zltiK9", "zltiK9");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "zltiK9";
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) "zltiK9";
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) "zltiK9";
      objectArray0[5] = (Object) "zltiK9";
      multiKey0.toString();
      objectArray0[6] = (Object) multiKey0;
      objectArray0[7] = (Object) multiKey0;
      objectArray0[8] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      boolean boolean0 = multiKey1.equals(objectArray0[1]);
      assertFalse(boolean0);
      
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey2.toString();
      boolean boolean1 = multiKey1.equals(multiKey2);
      Integer integer0 = new Integer(0);
      boolean boolean2 = multiKey1.equals(integer0);
      assertFalse(boolean2 == boolean1);
      
      multiKey0.toString();
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer1, integer0);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[0, 0, 0]", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      multiKey1.getKeys();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) integerArray0, false);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[]", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "", "The array of keys must not be null");
      Integer integer0 = new Integer(7);
      Integer integer1 = new Integer(1);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "The array of keys must not be null", "", "org.apache.commons.collections4.keyvalue.MultiKey");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "The array of keys must not be null";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "/!s4L,kX|GeiOcjNhk";
      stringArray0[8] = "";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey1, multiKey0, multiKey0, multiKey2);
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey1, multiKey1, multiKey1);
      multiKey4.toString();
      Integer integer2 = new Integer((-78));
      boolean boolean0 = multiKey4.equals(integer2);
      assertFalse(boolean0);
      assertFalse(multiKey1.equals((Object)multiKey2));
      
      MultiKey<Object> multiKey5 = new MultiKey<Object>(stringArray0);
      multiKey5.toString();
      String string0 = multiKey5.toString();
      assertEquals("MultiKey[, The array of keys must not be null, , , , , , /!s4L,kX|GeiOcjNhk, ]", string0);
      
      MultiKey<Object> multiKey6 = new MultiKey<Object>(stringArray0);
      boolean boolean1 = multiKey5.equals(multiKey6);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("M DlxiKe/", "M DlxiKe/");
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.getKeys();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, true);
      int int0 = multiKey2.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", (Object) null, "", (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(1);
      int int0 = multiKey0.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.getKey(int0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, true);
      multiKey1.size();
      multiKey0.hashCode();
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(111);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer2, integer1);
      multiKey1.equals(multiKey2);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 2);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      int int1 = multiKey3.size();
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = null;
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.hashCode();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "D$PE;M*][W";
      stringArray0[2] = "";
      stringArray0[3] = "MultiKey";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey", "zA&KbZ{i<`IP");
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey1, multiKey2, multiKey1, (MultiKey<String>) null);
      boolean boolean0 = multiKey3.equals("D$PE;M*][W");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[1] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[2] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[3] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[4] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[5] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[6] = "org.apache.commons.collections4.keyvalue.MultiKey";
      boolean boolean0 = true;
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      int int0 = (-1285);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1285));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1285
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(164);
      Integer integer1 = new Integer(2415);
      Integer integer2 = new Integer(164);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer2);
      multiKey0.equals("X5vRlbCIt.vm``bcz");
      multiKey0.hashCode();
      MultiKey<String> multiKey1 = new MultiKey<String>("X5vRlbCIt.vm``bcz", "X5vRlbCIt.vm``bcz", (String) null, (String) null, (String) null);
      multiKey1.hashCode();
      multiKey0.size();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) multiKey1;
      objectArray0[1] = (Object) integer2;
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) integer2;
      objectArray0[4] = (Object) multiKey0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey2.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey2);
      multiKey3.toString();
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[MultiKey[X5vRlbCIt.vm``bcz, X5vRlbCIt.vm``bcz, null, null, null], 164, MultiKey[164, 164, 164, 2415, 164], 164, MultiKey[164, 164, 164, 2415, 164]], MultiKey[MultiKey[X5vRlbCIt.vm``bcz, X5vRlbCIt.vm``bcz, null, null, null], 164, MultiKey[164, 164, 164, 2415, 164], 164, MultiKey[164, 164, 164, 2415, 164]], MultiKey[MultiKey[X5vRlbCIt.vm``bcz, X5vRlbCIt.vm``bcz, null, null, null], 164, MultiKey[164, 164, 164, 2415, 164], 164, MultiKey[164, 164, 164, 2415, 164]]]", string0);
      
      multiKey3.getKeys();
      multiKey2.getKeys();
      boolean boolean0 = multiKey1.equals(integer2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "", "", (String) null, "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals((Object) null);
      multiKey0.toString();
      multiKey0.size();
      multiKey0.toString();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "MultiKey[null, , , null, ]";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "MultiKey[null, , , null, ]";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "MultiKey[null, , , null, ]";
      objectArray0[5] = (Object) "MultiKey[null, , , null, ]";
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) "MultiKey[null, , , null, ]";
      objectArray0[8] = (Object) "MultiKey[null, , , null, ]";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.getKeys();
      multiKey1.getKey(5);
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "wS@L:cd}";
      stringArray0[2] = ":Nh$:k_%I";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "The array of keys must not be null";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      int int0 = 1451;
      // Undeclared exception!
      try { 
        multiKey0.getKey(1451);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1451
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
