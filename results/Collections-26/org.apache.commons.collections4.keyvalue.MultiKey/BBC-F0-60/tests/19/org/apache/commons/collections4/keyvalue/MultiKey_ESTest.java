/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:53:22 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, (Object) null, (Object) null, "%K.$}", multiKey0);
      multiKeyArray0[0] = multiKey2;
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      multiKey3.getKeys();
      String[] stringArray1 = multiKey0.getKeys();
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, "");
      multiKey2.equals(multiKey1);
      multiKey1.toString();
      multiKey2.hashCode();
      String[] stringArray1 = new String[3];
      stringArray1[0] = "";
      stringArray1[1] = "";
      stringArray1[2] = "";
      multiKey0.equals(multiKey0);
      multiKey2.hashCode();
      MultiKey<String> multiKey3 = new MultiKey<String>("", "");
      MultiKey<String> multiKey4 = new MultiKey<String>("", "", "MultiKey[, , ]", "MultiKey[, , ]", "");
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey3, multiKey4, "");
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey2, multiKey5, multiKey2);
      multiKey6.toString();
      multiKey6.getKeys();
      multiKey2.toString();
      int int0 = (-1141);
      Integer integer0 = new Integer((-1141));
      MultiKey<Integer> multiKey7 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      multiKey7.toString();
      // Undeclared exception!
      try { 
        multiKey5.getKey((-1141));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1141
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 4);
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, (String) null);
      multiKeyArray0[0] = multiKey1;
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      multiKeyArray0[1] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("", stringArray0[0], stringArray0[0], "OS&huJ&lN");
      multiKeyArray0[2] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("OS&huJ&lN", "", (String) null, "", "_ f(e\"D8/{Hi");
      multiKeyArray0[3] = multiKey4;
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      Integer integer1 = new Integer(0);
      multiKey5.equals(integer1);
      multiKey5.size();
      MultiKey<Object>[] multiKeyArray1 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>(multiKeyArray1, true);
      int int0 = multiKey6.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", (String) null, "^&YvThdMMF$PuRlBAM");
      MultiKey<String> multiKey1 = new MultiKey<String>("%M{+Q[xX)RA:rsI#{Y", "", "aa\"", (String) null, "The array of keys must not be null");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 9);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey1;
      multiKeyArray0[4] = multiKey0;
      multiKeyArray0[5] = multiKey1;
      multiKeyArray0[6] = multiKey1;
      boolean boolean0 = false;
      MultiKey<String> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = (-673);
      Integer integer0 = new Integer((-673));
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.hashCode();
      multiKey0.getKey(0);
      multiKey1.size();
      MultiKey<String> multiKey2 = new MultiKey<String>((String) null, "MultiKey[java.lang.Object@122261db, java.lang.Object@122261db]", "", "bUy_");
      String string0 = multiKey2.getKey(0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null);
      boolean boolean0 = multiKey0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "'w9a%|31u+9WfcUz";
      stringArray0[2] = "XKCAR.A$hSSY#>Q7";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "y<|";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      multiKey0.size();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "", "XKCAR.A$hSSY#>Q7");
      multiKey1.toString();
      int int0 = multiKey1.size();
      multiKey1.toString();
      multiKey1.size();
      multiKey1.getKey(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("XKCAR.A$hSSY#>Q7", object0, "", "");
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey2, multiKey1);
      int int1 = multiKey3.size();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("WAyt(/K9WmsyYV/Ax", "WAyt(/K9WmsyYV/Ax", "", "org.apache.commons.collections4.keyvalue.MultiKey");
      assertEquals(4, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object1);
      multiKey0.toString();
      multiKey0.toString();
      Object[] objectArray0 = multiKey0.getKeys();
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      int int0 = 3606;
      // Undeclared exception!
      try { 
        multiKey0.getKey(3606);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3606
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "J=?(ZdO3>V1Ga2.";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = ",V&a{}o4N~y";
      stringArray0[4] = "org.apache.commons.collections4.keyvalue.MultiKey";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(",V&a{}o4N~y", multiKey0, "", object0);
      int int0 = 1;
      Integer integer0 = new Integer(1);
      multiKey0.toString();
      Object object1 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, "", multiKey1, integer0, object1);
      multiKey0.size();
      multiKey2.toString();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey3.getKey(968);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 968
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-1954));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1924);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(907);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1924);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, false);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "MultiKey[-1954, 1924, 907, 1924]";
      stringArray0[1] = "MultiKey[-1954, 1924, 907, 1924]";
      stringArray0[2] = "MultiKey[-1954, 1924, 907, 1924]";
      stringArray0[3] = "MultiKey[-1954, 1924, 907, 1924]";
      stringArray0[4] = "MultiKey[-1954, 1924, 907, 1924]";
      stringArray0[5] = "MultiKey[-1954, 1924, 907, 1924]";
      stringArray0[6] = "MultiKey[-1954, 1924, 907, 1924]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      multiKey2.toString();
      multiKey2.hashCode();
      int int0 = multiKey2.size();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>("U9o{??[^Y!", "U9o{??[^Y!", "U9o{??[^Y!", object0, "U9o{??[^Y!");
      multiKey0.getKey(0);
      objectArray0[1] = (Object) "U9o{??[^Y!";
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "");
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, "");
      multiKey2.equals(multiKey1);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[, , ]", string0);
      
      multiKey2.hashCode();
      String[] stringArray1 = new String[3];
      stringArray1[0] = "";
      stringArray1[1] = "";
      stringArray1[2] = "";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray1, false);
      boolean boolean0 = multiKey0.equals(multiKey3);
      assertFalse(boolean0);
      
      multiKey2.hashCode();
      MultiKey<String> multiKey4 = new MultiKey<String>("", "");
      MultiKey<String> multiKey5 = new MultiKey<String>("", "", "MultiKey[, , ]", "MultiKey[, , ]", "");
      MultiKey<Object> multiKey6 = new MultiKey<Object>(multiKey4, multiKey5, "");
      MultiKey<MultiKey<Object>> multiKey7 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey2, multiKey6, multiKey2);
      multiKey7.getKeys();
      assertTrue(multiKey1.equals((Object)multiKey3));
      assertFalse(multiKey4.equals((Object)multiKey5));
  }
}
