/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:43:48 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.getKey(0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null, null, null, null, null]", string0);
      
      objectArray0[0] = null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-2152));
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2, (Integer) null, (Integer) null);
      Integer integer3 = multiKey1.getKey(0);
      assertEquals(0, (int)integer3);
      
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[null, null, null, null, null, null]", "");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 6);
      multiKeyArray0[0] = multiKey2;
      multiKeyArray0[1] = multiKey2;
      multiKeyArray0[2] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[null, null, null, null, null, null]", "", "}j^kfx1", "");
      multiKeyArray0[3] = multiKey3;
      multiKeyArray0[4] = multiKey2;
      multiKeyArray0[5] = multiKey2;
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      Object object1 = multiKey4.getKey(0);
      boolean boolean0 = multiKey2.equals(object1);
      assertFalse(multiKey2.equals((Object)multiKey3));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("1", "1", "1", "1", "1");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.getKeys();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0, multiKey0);
      multiKey1.getKeys();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "!]b\"S.>H3bIu7B~8|*";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      String[] stringArray1 = multiKey2.getKeys();
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.hashCode();
      Integer integer0 = new Integer(4581);
      Integer integer1 = new Integer(3134);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer0);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey1);
      MultiKey<Integer> multiKey3 = null;
      try {
        multiKey3 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      multiKey0.getKey(0);
      multiKey0.toString();
      objectArray0[4] = (Object) "";
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      multiKey2.hashCode();
      multiKey1.size();
      multiKey0.getKey(0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, , ]", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(1571);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.toString();
      Integer integer8 = new Integer(1);
      multiKey0.equals(integer8);
      MultiKey<String> multiKey1 = new MultiKey<String>("", (String) null, "");
      multiKey1.equals((Object) null);
      Object object0 = new Object();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = " X";
      stringArray0[2] = "~I)vmg:27r";
      stringArray0[3] = "";
      stringArray0[4] = "MultiKey[-1, -1, -1, -1, -1, -1, 0, 1571]";
      stringArray0[5] = "";
      stringArray0[6] = "";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, integer4, integer0, multiKey2);
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0, true);
      // Undeclared exception!
      try { 
        multiKey4.getKey(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.getKey(0);
      multiKey0.toString();
      objectArray0[0] = null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-2152));
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2, (Integer) null, (Integer) null);
      Integer integer3 = multiKey1.getKey(0);
      objectArray0[2] = (Object) integer3;
      MultiKey<String> multiKey2 = new MultiKey<String>("E'r\"Jz=:;o5' .&-Y", "E'r\"Jz=:;o5' .&-Y", "E'r\"Jz=:;o5' .&-Y", "E'r\"Jz=:;o5' .&-Y", (String) null);
      multiKey2.getKey(0);
      objectArray0[3] = (Object) "E'r\"Jz=:;o5' .&-Y";
      Object object1 = new Object();
      objectArray0[4] = object1;
      Integer integer4 = multiKey1.getKey(0);
      objectArray0[5] = (Object) integer4;
      multiKey1.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[E'r\"Jz=:;o5' .&-Y, E'r\"Jz=:;o5' .&-Y, E'r\"Jz=:;o5' .&-Y, E'r\"Jz=:;o5' .&-Y, null]", string0);
      
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, false);
      multiKey3.toString();
      assertFalse(multiKey3.equals((Object)multiKey0));
      
      MultiKey<String> multiKey4 = new MultiKey<String>("MultiKey[0, -2152, 0, null, null]", "E'r\"Jz=:;o5' .&-Y");
      MultiKey<String> multiKey5 = new MultiKey<String>("2vwP", "MultiKey[0, -2152, 0, null, null]", "MultiKey[0, -2152, 0, null, null]", "E'r\"Jz=:;o5' .&-Y");
      Object object2 = multiKey5.getKey(0);
      assertEquals("2vwP", object2);
      
      MultiKey<Object> multiKey6 = new MultiKey<Object>(multiKey4, "2vwP", integer1);
      boolean boolean0 = multiKey1.equals(multiKey6);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "n!O9";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("n!O9", "n!O9");
      int int0 = 0;
      multiKey1.getKey(0);
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-373));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[1]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      Integer integer7 = multiKey2.getKey(0);
      assertEquals(0, (int)integer7);
  }
}
