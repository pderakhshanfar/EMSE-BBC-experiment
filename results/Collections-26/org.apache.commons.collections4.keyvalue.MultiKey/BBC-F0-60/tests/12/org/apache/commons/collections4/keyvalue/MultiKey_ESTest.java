/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:49:20 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("n", "n", "n", "n");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "n";
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = (Object) "n";
      objectArray0[6] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      Integer integer0 = new Integer((-1));
      multiKey1.equals("MultiKey[n, MultiKey[n, n, n, n], MultiKey[n, n, n, n], MultiKey[n, n, n, n], MultiKey[n, n, n, n], n, MultiKey[n, n, n, n], null, null]");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      multiKey2.size();
      Integer integer1 = new Integer((-4511));
      boolean boolean0 = multiKey0.equals(objectArray0[3]);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[n, n, n, n]", string0);
      
      Object object0 = new Object();
      boolean boolean1 = multiKey0.equals("MultiKey[n, n, n, n]");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = ",?tj,Y:zM36 !~";
      stringArray0[1] = "bl";
      stringArray0[2] = "p2:i";
      stringArray0[3] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, integer2, integer1, integer0, integer2);
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) stringArray0, true);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[,?tj,Y:zM36 !~, bl, p2:i, ]", string0);
      
      MultiKey<String> multiKey3 = new MultiKey<String>("bl", "", "", ".][");
      multiKey0.equals(multiKey2);
      assertFalse(multiKey0.equals((Object)multiKey3));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      int int0 = 0;
      Integer integer0 = new Integer(0);
      int int1 = 3;
      Integer integer1 = new Integer(3);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0, integer1, (Integer) null, (Integer) null);
      multiKey0.getKey(3);
      objectArray0[2] = (Object) null;
      MultiKey<String> multiKey1 = new MultiKey<String>("GsQ_hX'dJMM4rwky", "GsQ_hX'dJMM4rwky");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, multiKey0, multiKey0, object0, (Object) null);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-4230));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4230
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(549);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      Integer[] integerArray0 = new Integer[2];
      multiKey0.toString();
      multiKey0.toString();
      integerArray0[0] = integer0;
      multiKey0.toString();
      integerArray0[1] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.toString();
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey1, multiKey0, multiKey0);
      String[] stringArray0 = new String[0];
      multiKey2.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      multiKey3.getKeys();
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey4.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("Q`K^y", "Q`K^y", "Q`K^y", "Q`K^y");
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "~0P", "e1dsAanj{(a'E~n", "");
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.toString();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      String string0 = "}R";
      stringArray0[1] = "}R";
      stringArray0[2] = "";
      boolean boolean0 = true;
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.toString();
      multiKey1.toString();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(1022);
      Integer integer1 = new Integer(2284);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer2);
      Object object0 = new Object();
      Object object1 = null;
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "sYXewx%uYp!ew'1o.b";
      stringArray0[1] = "";
      stringArray0[2] = "19Q]~<T";
      stringArray0[3] = "The array of keys must not be null";
      stringArray0[4] = ">\"_";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[sYXewx%uYp!ew'1o.b, , 19Q]~<T, The array of keys must not be null, >\"_]", string0);
      
      multiKey0.size();
      multiKey0.equals("19Q]~<T");
      Integer integer0 = new Integer(5);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      multiKey1.hashCode();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 7);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      MultiKey<String> multiKey2 = new MultiKey<String>("CKEYlBHeS>l@{u+xRjp", "", "The array of keys must not be null");
      multiKeyArray0[2] = multiKey2;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      multiKeyArray0[5] = multiKey0;
      multiKeyArray0[6] = multiKey0;
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      boolean boolean0 = multiKey3.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "zZ!$";
      stringArray0[2] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "nz8Y@Z.xV_v=p@S'+l3";
      stringArray0[6] = "\"^8Wb25TS`f;9";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("B%m9", "", "", "zZ!$");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKey(0);
      multiKey0.equals("B%m9");
      multiKey1.toString();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      int int0 = multiKey2.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object2, multiKey0);
      int int0 = 4220;
      // Undeclared exception!
      try { 
        multiKey1.getKey(4220);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4220
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null);
      multiKey0.toString();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "The array of keys must not be null";
      stringArray0[1] = ".eJ'<^Tr+/eIHPz";
      stringArray0[2] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      multiKey1.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[The array of keys must not be null, .eJ'<^Tr+/eIHPz, ]", string0);
      
      multiKey1.hashCode();
      String string1 = multiKey1.getKey(0);
      assertEquals("The array of keys must not be null", string1);
      
      boolean boolean0 = multiKey1.equals("The array of keys must not be null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer((-421));
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "9Bxzf";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "cn/H?)";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer1, "9Bxzf", "cn/H?)", "9Bxzf");
      Object object0 = multiKey2.getKey(0);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = "";
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(5);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer2, integer0);
      multiKey0.toString();
      Object object1 = multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, "", object1);
      // Undeclared exception!
      try { 
        multiKey1.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
