/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:51:28 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      MultiKey<String> multiKey1 = new MultiKey<String>("M3Bx", "M3Bx", "M3Bx");
      MultiKey<String> multiKey2 = new MultiKey<String>("", (String) null, (String) null);
      MultiKey<String> multiKey3 = new MultiKey<String>("", "t", "", "");
      MultiKey<String> multiKey4 = new MultiKey<String>("M3Bx", "H\"K4TM%</#,=0mfd,5D", "t", "M3Bx");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 7);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey3;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey4;
      multiKeyArray0[4] = multiKey1;
      multiKeyArray0[5] = multiKey0;
      MultiKey<String> multiKey5 = new MultiKey<String>("", (String) null);
      assertFalse(multiKey5.equals((Object)multiKey1));
      
      multiKeyArray0[6] = multiKey5;
      MultiKey<MultiKey<String>> multiKey6 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey6.size();
      Integer integer0 = new Integer(2250);
      Integer integer1 = new Integer(1430);
      Integer integer2 = new Integer(8);
      MultiKey<Object> multiKey7 = new MultiKey<Object>(integer0, "M3Bx", integer1, "", integer2);
      boolean boolean0 = multiKey7.equals(multiKey7);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-787));
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer2, integer2);
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[0, -787, 0, 0, 0]", string0);
      
      boolean boolean0 = multiKey0.equals("%[Ci");
      assertFalse(boolean0);
      
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", integer2, integer1);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey2.getKeys();
      assertFalse(multiKey2.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      Object object0 = new Object();
      multiKey0.equals(object0);
      Object object1 = new Object();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "MultiKey[]", "MultiKey[]");
      Object object2 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object2, object2, "", "MultiKey[]");
      Integer integer0 = new Integer(1);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0, integer0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey1, multiKey0, multiKey2, multiKey3, object2);
      MultiKey multiKey5 = (MultiKey)multiKey4.getKey(1);
      Object object3 = new Object();
      MultiKey<Object> multiKey6 = new MultiKey<Object>(multiKey5, "MultiKey[]", object3, object0);
      multiKey6.toString();
      MultiKey<MultiKey<String>> multiKey7 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1);
      String string0 = multiKey7.toString();
      assertEquals("MultiKey[MultiKey[, MultiKey[], MultiKey[]], MultiKey[, MultiKey[], MultiKey[]], MultiKey[, MultiKey[], MultiKey[]]]", string0);
      
      Object object4 = new Object();
      multiKey0.equals(object4);
      boolean boolean0 = multiKey0.equals("MultiKey[MultiKey[], MultiKey[], java.lang.Object@4a37a28, java.lang.Object@1dfca6e]");
      assertFalse(boolean0);
      
      multiKey1.hashCode();
      multiKey0.size();
      multiKey6.toString();
      assertEquals(0, multiKey5.size());
      assertFalse(multiKey0.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(1347);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(835);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer2, integer2);
      Integer integer3 = new Integer((-196));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer3, integer2, integer1);
      multiKey1.toString();
      multiKey0.size();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[835, 835]", string0);
      
      multiKey1.size();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0);
      Integer integer4 = new Integer((-196));
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, integer4);
      Object object0 = multiKey3.getKey(0);
      boolean boolean0 = multiKey2.equals(object0);
      assertFalse(boolean0);
      
      Object object1 = new Object();
      multiKey0.equals(object1);
      multiKey0.getKeys();
      assertFalse(multiKey0.equals((Object)multiKey3));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer((-1875));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0, integer1, (Integer) null, (Integer) null);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "G.x.(2.\"^RU_", "", "G.x.(2.\"^RU_");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1);
      boolean boolean0 = multiKey2.equals(multiKey1);
      assertFalse(boolean0);
      
      Integer integer2 = new Integer(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("", (Object) null, (Object) null, integer2);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey3, multiKey3, multiKey3, multiKey3, multiKey3);
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[MultiKey[, null, null, 0], MultiKey[, null, null, 0], MultiKey[, null, null, 0], MultiKey[, null, null, 0], MultiKey[, null, null, 0]]", string0);
      
      boolean boolean1 = multiKey1.equals((Object) null);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer(3);
      Integer integer2 = new Integer((-1));
      Integer integer3 = null;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer2, (Integer) null);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKey(0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "MultiKey[-1, 3, -1, -1, null]";
      stringArray0[1] = "MultiKey[null, MultiKey[-1, 3, -1, -1, null]]";
      stringArray0[2] = "MultiKey[null, MultiKey[-1, 3, -1, -1, null]]";
      stringArray0[3] = "MultiKey[-1, 3, -1, -1, null]";
      stringArray0[4] = "MultiKey[-1, 3, -1, -1, null]";
      stringArray0[5] = "MultiKey[-1, 3, -1, -1, null]";
      stringArray0[6] = "MultiKey[-1, 3, -1, -1, null]";
      String string0 = "";
      stringArray0[7] = "";
      stringArray0[8] = "MultiKey[null, MultiKey[-1, 3, -1, -1, null]]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.hashCode();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", "");
      multiKey0.toString();
      multiKey0.getKeys();
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-1));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[-1, 0, -1]", string0);
      
      Integer integer3 = multiKey1.getKey(0);
      assertEquals((-1), (int)integer3);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "org.apache.commons.collections4.keyvalue.MultiKey");
      int int0 = 0;
      multiKey0.getKey(0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = null;
      objectArray0[2] = (Object) "org.apache.commons.collections4.keyvalue.MultiKey";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "org.apache.commons.collections4.keyvalue.MultiKey";
      objectArray0[5] = (Object) multiKey0;
      objectArray0[6] = (Object) "org.apache.commons.collections4.keyvalue.MultiKey";
      objectArray0[7] = (Object) "org.apache.commons.collections4.keyvalue.MultiKey";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.getKey(0);
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-298));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1041);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[3]);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-298));
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int0);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(141);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, true);
      Object object0 = multiKey2.getKey(3);
      assertEquals((-298), object0);
      
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object) null, (Object) null, object0);
      multiKey3.getKey(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object) null, int0, integer6, objectArray0[6]);
      boolean boolean0 = multiKey4.equals(integer8);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", (String) null, (String) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      int int0 = (-1273);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1273));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1273
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "G%-@)v~`m!t z");
      int int0 = multiKey0.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer((-1116));
      Integer integer1 = new Integer((-1116));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      int int0 = multiKey0.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "~7k4Htl|FV^<d!AK&g";
      stringArray0[3] = "qd1Imm`/iHRxpt0xDq";
      stringArray0[4] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(1345);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1345
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", (String) null);
      int int0 = (-1586);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1586));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1586
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(1413);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey0.toString();
      String string0 = "";
      multiKey0.equals("");
      String string1 = "dp`}o3w";
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "k";
      stringArray0[1] = "The array of keys must not be null";
      stringArray0[2] = "~w~($@71wN";
      stringArray0[3] = "";
      stringArray0[4] = "org.apache.commons.collections4.keyvalue.MultiKey";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      int int0 = 2041;
      // Undeclared exception!
      try { 
        multiKey1.getKey(2041);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2041
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
