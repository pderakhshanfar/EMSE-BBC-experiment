/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:53:04 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      multiKey0.toString();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "N9[i";
      stringArray0[1] = "";
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[, , , ], MultiKey[, , , ], MultiKey[, , , ]]", string0);
      
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("$]ia^", "$]ia^", "$]ia^", "k&-Ug<");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("$]ia^", multiKey0);
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("k&-Ug<", "k&-Ug<", "O", "", "");
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.equals(multiKey2);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[$]ia^, MultiKey[$]ia^, $]ia^, $]ia^, k&-Ug<]], MultiKey[$]ia^, MultiKey[$]ia^, $]ia^, $]ia^, k&-Ug<]], MultiKey[$]ia^, MultiKey[$]ia^, $]ia^, $]ia^, k&-Ug<]]]", string0);
      
      multiKey3.hashCode();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      multiKey4.size();
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-849));
      Integer integer1 = new Integer((-849));
      Integer integer2 = new Integer(1487);
      Integer integer3 = new Integer((-1));
      Integer integer4 = new Integer(0);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.getKeys();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "W");
      multiKey1.size();
      boolean boolean0 = multiKey1.equals(integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null);
      multiKey0.toString();
      int int0 = 0;
      multiKey0.getKey(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, multiKey0, object0);
      multiKey0.hashCode();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1);
      integerArray0[3] = integer3;
      int int1 = 2;
      Integer integer4 = new Integer(2);
      integerArray0[4] = integer4;
      int int2 = 0;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      Integer integer6 = multiKey0.getKey(int1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(int0, multiKey0, int2, integer6);
      MultiKey multiKey2 = (MultiKey)multiKey1.getKey(int0);
      assertEquals(6, multiKey2.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-2331));
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(1);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int0);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(int0);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[1, 1, 1, 1, 1, -2331, 1, 1, 1]", string0);
      
      multiKey0.equals(integer6);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, false);
      multiKey1.getKey(int0);
      multiKey1.getKey(1);
      multiKey1.getKeys();
      boolean boolean0 = multiKey1.equals(integer3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 7);
      String string0 = null;
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null);
      multiKeyArray0[0] = multiKey0;
      String[] stringArray0 = null;
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer(208);
      Integer integer3 = new Integer((-1289));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer1, integer3);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null);
      multiKey0.size();
      String[] stringArray0 = null;
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "k&-Ug<";
      MultiKey<String> multiKey0 = new MultiKey<String>("$]ia^", "$]ia^", "$]ia^", "k&-Ug<");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("$]ia^", multiKey0);
      String string1 = "";
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("k&-Ug<", "k&-Ug<", "", "", "");
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.equals(multiKey2);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1);
      multiKey3.toString();
      multiKey3.hashCode();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      // Undeclared exception!
      try { 
        multiKey4.getKey(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-2012));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey(177);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 177
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(2043);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2043);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-4289));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-4289));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(2043);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.toString();
      multiKey0.getKey(0);
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[2043, 2043, 2043, -4289, -4289, 2043]", "MultiKey[2043, 2043, 2043, -4289, -4289, 2043]", "", "X#-+2E#");
      multiKey1.toString();
      multiKey1.hashCode();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integerArray0);
      multiKey2.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[2043, 2043, 2043, -4289, -4289, 2043]", string0);
      
      boolean boolean0 = multiKey0.equals(integerArray0[5]);
      assertFalse(boolean0);
  }
}
