/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:53:47 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(22);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, integer0);
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
      
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[null, 22]", string0);
      assertFalse(multiKey1.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(")VF1>", ")VF1>", ")VF1>", "", (String) null);
      multiKey0.equals((Object) null);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) ")VF1>";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.toString();
      multiKey1.equals("");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey1.equals(multiKey2);
      multiKey2.toString();
      int int0 = (-263);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-263));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -263
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-4285));
      Integer integer1 = new Integer(5);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, integer0, integer1);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.getKeys();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, (Object) null, integer0);
      multiKeyArray0[0] = multiKey2;
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      // Undeclared exception!
      try { 
        multiKey3.getKey((-236));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -236
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      int int0 = multiKey0.size();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      integerArray0[1] = null;
      integerArray0[2] = null;
      Integer integer1 = new Integer(8);
      integerArray0[3] = integer1;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      Integer[] integerArray1 = new Integer[2];
      integerArray1[0] = integer1;
      integerArray1[1] = integer1;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray1);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) integerArray0, false);
      multiKey2.equals(multiKey3);
      boolean boolean0 = multiKey3.equals(multiKey2);
      assertFalse(boolean0);
      
      MultiKey<String> multiKey4 = new MultiKey<String>("", "", "");
      int int1 = multiKey4.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null, (Integer) null, (Integer) null);
      multiKey0.equals((Object) null);
      String string0 = "\\d~v2";
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "d~v2", "", "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.getKey(1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "d~v2";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      multiKey2.toString();
      multiKey2.getKey(1);
      multiKey2.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object) null, "", multiKey2);
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.toString();
      // Undeclared exception!
      try { 
        multiKey3.getKey((-1986));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1986
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "MultiKey[-1, -1]", "", "MultiKey[-1, -1]", "The array of keys must not be null");
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[null, MultiKey[-1, -1], , MultiKey[-1, -1], The array of keys must not be null]", string0);
      
      int int0 = multiKey1.size();
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      multiKey2.equals(multiKey3);
      boolean boolean0 = multiKey0.equals("MultiKey[-1, -1]");
      assertFalse(boolean0);
      
      int int1 = multiKey1.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-3096));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3096));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2790));
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      Integer[] integerArray1 = multiKey0.getKeys();
      assertEquals(3, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "org.apache.commons.collections4.keyvalue.MultiKey";
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey0.toString();
      multiKey0.equals("org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, org.apache.commons.collections4.keyvalue.MultiKey]");
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      boolean boolean0 = false;
      MultiKey<MultiKey<String>> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null);
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      int int0 = 1;
      Integer integer0 = new Integer(1);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, "", integer0);
      Object object1 = multiKey0.getKey(1);
      objectArray0[1] = object1;
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "", "");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, multiKey1);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey2);
      // Undeclared exception!
      try { 
        multiKey3.getKey(1744);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1744
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 9);
      MultiKey<String> multiKey0 = new MultiKey<String>("danl", "UCzG\"LAG", "UCzG\"LAG", "UCzG\"LAG", "MultiKey");
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("i4=(t", "i4=(t", "MultiKey");
      multiKeyArray0[1] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("i4=(t", "UCzG\"LAG", "MultiKey", "u?II3[c}BZ9b[6Vy", "MultiKey");
      multiKeyArray0[2] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>(">(UELUziJocbU", "MultiKey", "u?II3[c}BZ9b[6Vy");
      multiKeyArray0[3] = multiKey3;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "MultiKey";
      stringArray0[1] = "danl";
      stringArray0[2] = ">(UELUziJocbU";
      stringArray0[3] = "u?II3[c}BZ9b[6Vy";
      stringArray0[4] = ">(UELUziJocbU";
      stringArray0[5] = "i4=(t";
      stringArray0[6] = "MultiKey";
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0);
      multiKeyArray0[4] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>("u?II3[c}BZ9b[6Vy", "i4=(t", "UCzG\"LAG", (String) null, "u?II3[c}BZ9b[6Vy");
      multiKeyArray0[5] = multiKey5;
      MultiKey<String> multiKey6 = new MultiKey<String>(stringArray0, false);
      multiKeyArray0[6] = multiKey6;
      MultiKey<String> multiKey7 = new MultiKey<String>(stringArray0, false);
      multiKeyArray0[7] = multiKey7;
      MultiKey<String> multiKey8 = new MultiKey<String>("u?II3[c}BZ9b[6Vy", "The array of keys must not be null", "A0at`i_LQv#&'!Sxk>Z");
      multiKeyArray0[8] = multiKey8;
      MultiKey<MultiKey<String>> multiKey9 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      assertEquals(9, multiKey9.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer((-345));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0);
      boolean boolean0 = multiKey0.equals(integer0);
      assertFalse(boolean0);
      
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", (String) null, "", "XZW\"Uh<w:Y");
      boolean boolean1 = multiKey0.equals(multiKey1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "5hO", "5hO", "5hO", "");
      multiKey0.toString();
      int int0 = 2044;
      // Undeclared exception!
      try { 
        multiKey0.getKey(2044);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2044
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-2287));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      int int0 = 589;
      Integer integer2 = new Integer(589);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-163));
      integerArray0[3] = integer3;
      int int1 = (-2236);
      Integer integer4 = new Integer((-2236));
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      // Undeclared exception!
      try { 
        multiKey0.getKey(681);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 681
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
