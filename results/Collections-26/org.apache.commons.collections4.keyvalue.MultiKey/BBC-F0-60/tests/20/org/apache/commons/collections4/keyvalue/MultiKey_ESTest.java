/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:53:35 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(309);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, integer0, integer0);
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, object1, object1);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.hashCode();
      MultiKey<String> multiKey3 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "#8*:&{*W", "H(:0UD", "H(:0UD");
      String string0 = multiKey3.toString();
      multiKey3.getKey(0);
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      multiKey4.size();
      Integer integer1 = new Integer(2307);
      multiKey1.equals(integer1);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integerArray0);
      multiKey1.equals(multiKey1);
      MultiKey<Object> multiKey6 = new MultiKey<Object>(integerArray0);
      Integer integer2 = new Integer((int) integerArray0[2]);
      multiKey6.equals(integer2);
      String string1 = multiKey3.getKey(3);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKey0.toString();
      Object object0 = new Object();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      multiKey1.equals(multiKey0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, ]", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      String string0 = "g$^*Oh(VZ%(,yv!{Za!";
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.size();
      int int0 = 2307;
      Integer integer0 = new Integer(0);
      Object object1 = new Object();
      Integer integer1 = new Integer(2307);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray0);
      // Undeclared exception!
      try { 
        multiKey1.getKey(2649);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2649
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, object0, multiKey0, object0);
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, object0, (Object) null, (Object) null, (Object) null);
      multiKey2.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, object0, object0, multiKey2, multiKey1);
      multiKey3.toString();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0);
      multiKey4.getKeys();
      boolean boolean0 = multiKey0.equals((Object) null);
      assertFalse(boolean0);
      
      multiKey1.toString();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer0, integer0, integer0, (Integer) null, integer1);
      multiKey5.equals(multiKey2);
      multiKey1.getKeys();
      multiKey1.getKeys();
      boolean boolean1 = multiKey5.equals(multiKey4);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      Integer integer0 = new Integer((-499));
      Integer integer1 = new Integer(2612);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer0);
      multiKey1.hashCode();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, multiKey0, int0, (Object) null, int0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1);
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.equals(int0);
      multiKey0.equals(integer2);
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[MultiKey[0, MultiKey[0, 0, 0, 0], 0, null, 0], MultiKey[0, MultiKey[0, 0, 0, 0], 0, null, 0], MultiKey[0, MultiKey[0, 0, 0, 0], 0, null, 0]]", "MultiKey[MultiKey[0, MultiKey[0, 0, 0, 0], 0, null, 0], MultiKey[0, MultiKey[0, 0, 0, 0], 0, null, 0], MultiKey[0, MultiKey[0, 0, 0, 0], 0, null, 0]]");
      multiKey2.toString();
      multiKey3.toString();
      MultiKey<String> multiKey4 = new MultiKey<String>("", (String) null, "MultiKey");
      multiKey4.toString();
      multiKey4.toString();
      multiKey3.equals(multiKey4);
      Object[] objectArray0 = multiKey1.getKeys();
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(4);
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "1QyU\u0000p L{";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.toString();
      multiKey1.getKey(0);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, integer1, "", "1QyU\u0000p L{", "AX}3yy-GS8xMBs(");
      multiKey2.toString();
      multiKey0.toString();
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey1.toString();
      multiKey0.hashCode();
      String[] stringArray1 = multiKey1.getKeys();
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, object0, "Q74");
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, multiKey0, (Object) null);
      multiKey1.toString();
      multiKey1.equals("!mJ}8vzVAX");
      Integer integer0 = new Integer((-2245));
      Integer integer1 = new Integer((-2245));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1);
      multiKey2.hashCode();
      int int0 = multiKey2.size();
      MultiKey<String> multiKey3 = new MultiKey<String>("XSg1", "C+Ubm!mrQSmE!X'$<.s", "MultiKey[null, null, null, MultiKey[null, null, java.lang.Object@3bb110af, Q74], null]", "XSg1", "Q74");
      multiKey3.getKey(2);
      int int1 = multiKey1.hashCode();
      assertFalse(int1 == int0);
      
      boolean boolean0 = multiKey3.equals("C+Ubm!mrQSmE!X'$<.s");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Y#WkJKWp?[b*naEjK";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "hLbISP~)EOGRC>=";
      stringArray0[4] = "";
      stringArray0[5] = "/";
      stringArray0[6] = "K)]+g";
      stringArray0[7] = "mrXJEHg-_`-";
      stringArray0[8] = "EN+";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.size();
      Integer integer0 = new Integer((-4901));
      MultiKey<String> multiKey1 = new MultiKey<String>("mrXJEHg-_`-", "", "", "mrXJEHg-_`-");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, multiKey1);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[-4901, MultiKey[mrXJEHg-_`-, , , mrXJEHg-_`-]]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 843;
      Integer integer0 = new Integer(843);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer0);
      multiKey1.toString();
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey1, multiKey0);
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[843, 843, 843, 843, 843]", "MultiKey[843, 843, 843, 843, 843]", "MultiKey[843, 843, 843, 843, 843]", "MultiKey[843, 843, 843, 843, 843]", "MultiKey[843, 843, 843, 843, 843]");
      // Undeclared exception!
      try { 
        multiKey3.getKey(843);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 843
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "W5f7", "");
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 9);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "", "", "W5f7", "");
      multiKeyArray0[0] = multiKey1;
      int int0 = 1;
      Integer integer0 = new Integer(1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, integer0);
      multiKeyArray0[1] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("W5f7", "");
      multiKey3.getKey(1);
      Integer integer1 = new Integer(1);
      Object object0 = new Object();
      MultiKey<Object> multiKey4 = new MultiKey<Object>("", integer1, multiKey2, object0, (Object) null);
      Object object1 = multiKey4.getKey(1);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey1, multiKey0, object1, (Object) null);
      multiKeyArray0[2] = multiKey5;
      Integer integer2 = new Integer(1);
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<Object> multiKey7 = new MultiKey<Object>(integer2, multiKey1, multiKey6, int0);
      multiKeyArray0[3] = multiKey7;
      MultiKey<Object> multiKey8 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[4] = multiKey8;
      Object object2 = new Object();
      MultiKey<Object> multiKey9 = new MultiKey<Object>(multiKey7, multiKey0, "", object2);
      multiKeyArray0[5] = multiKey9;
      MultiKey<Object> multiKey10 = new MultiKey<Object>(multiKey1, integer2, multiKey7);
      Object object3 = multiKey10.getKey(1);
      MultiKey<Object> multiKey11 = new MultiKey<Object>(multiKey8, multiKey2, multiKey9, object3);
      multiKeyArray0[6] = multiKey11;
      MultiKey<Object> multiKey12 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[7] = multiKey12;
      Object object4 = new Object();
      MultiKey<Object> multiKey13 = new MultiKey<Object>((Object) null, "W5f7", object4);
      multiKeyArray0[8] = multiKey13;
      MultiKey<MultiKey<Object>> multiKey14 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      int int1 = multiKey14.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<MultiKey<String>> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = null;
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", (String) null);
      int int0 = (-1937);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1937));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1937
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
