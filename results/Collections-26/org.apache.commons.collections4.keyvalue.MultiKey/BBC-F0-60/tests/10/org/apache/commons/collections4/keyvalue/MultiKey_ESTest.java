/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:47:28 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey0.toString();
      multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[0, 0, 0]", "MultiKey[0, 0, 0]", "MultiKey[0, 0, 0]", "W'||n3t{4WA'P!", (String) null);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.size();
      Integer integer1 = new Integer(3);
      Object object0 = new Object();
      multiKey1.toString();
      Object object1 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[0, 0, 0]", integer1, object0, object1);
      boolean boolean0 = multiKey2.equals(object0);
      Integer integer2 = new Integer(730);
      Integer integer3 = new Integer((-1757));
      MultiKey<Object> multiKey3 = new MultiKey<Object>("MultiKey[MultiKey[0, 0, 0], MultiKey[0, 0, 0], MultiKey[0, 0, 0], W'||n3t{4WA'P!, null]", integer2, "MultiKey[MultiKey[0, 0, 0], MultiKey[0, 0, 0], MultiKey[0, 0, 0], W'||n3t{4WA'P!, null]", integer3);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[MultiKey[0, 0, 0], MultiKey[0, 0, 0], MultiKey[0, 0, 0], W'||n3t{4WA'P!, null], 730, MultiKey[MultiKey[0, 0, 0], MultiKey[0, 0, 0], MultiKey[0, 0, 0], W'||n3t{4WA'P!, null], -1757]", string0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) multiKey1;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "W'||n3t{4WA'P!";
      boolean boolean1 = multiKey1.equals(objectArray0[0]);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("3qi>~;z1Q", "3qi>~;z1Q");
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(63);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3029);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) integerArray0, true);
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("R yb;r:", "R yb;r:", "R yb;r:", "R yb;r:");
      multiKey0.equals("R yb;r:");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      multiKey1.getKeys();
      // Undeclared exception!
      try { 
        multiKey1.getKey(19);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 19
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[]", string0);
      
      multiKey0.size();
      boolean boolean0 = multiKey0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = null;
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, (Object) null, (Object) null);
      multiKey0.getKey(0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "I#\"?b-<^)p`@ fH.K";
      stringArray0[3] = ",XWIEH}Kw=F0-Q#2f*";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, multiKey1, (Object) null, "");
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.getKey(0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, (Integer) null, integer1);
      multiKey3.hashCode();
      multiKey3.getKey(0);
      multiKey2.getKey(0);
      MultiKey<String> multiKey4 = new MultiKey<String>("I#\"?b-<^)p`@ fH.K", "");
      // Undeclared exception!
      try { 
        multiKey4.getKey((-2906));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2906
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      Integer integer0 = new Integer(1481);
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1);
      MultiKey<String> multiKey2 = new MultiKey<String>("", "@.I\"\"TS_C)#q", (String) null);
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 4);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "{~_-pPsB;Aph?a";
      stringArray0[1] = "FZ@Qs{";
      stringArray0[2] = "";
      stringArray0[3] = "y;Z4)";
      stringArray0[4] = "\"_`HRdqJV6g;41";
      stringArray0[5] = "The array of keys must not be null";
      stringArray0[6] = ")ceh#d,gsi<n{C,KM";
      stringArray0[7] = "n;s bjl";
      stringArray0[8] = "H`LVeujU2aMPk +M&";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("{~_-pPsB;Aph?a", (Object) null);
      multiKeyArray0[0] = multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      multiKeyArray0[1] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, true);
      multiKey3.getKey(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey4 = new MultiKey<Object>("{~_-pPsB;Aph?a", ")ceh#d,gsi<n{C,KM", object0);
      multiKeyArray0[2] = multiKey4;
      MultiKey<Object> multiKey5 = new MultiKey<Object>((Object[]) stringArray0, false);
      multiKeyArray0[3] = multiKey5;
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      assertEquals(4, multiKey6.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      int int0 = (-462);
      Integer integer0 = new Integer((-462));
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, (Integer) null);
      multiKey1.toString();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-462));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -462
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-614));
      Integer integer2 = new Integer(823);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer2);
      multiKey0.toString();
      Integer integer3 = new Integer(0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "MultiKey[0, -614, 0, 823]";
      stringArray0[1] = "MultiKey[0, -614, 0, 823]";
      boolean boolean0 = true;
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer3, object2);
      // Undeclared exception!
      try { 
        multiKey2.getKey(823);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 823
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 3839;
      Integer integer0 = new Integer(3839);
      Integer integer1 = new Integer(3839);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer1);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Wlj0=5pX:";
      stringArray0[1] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      MultiKey<String> multiKey2 = new MultiKey<String>("", "<vrU1x0", "Wlj0=5pX:", "", "MultiKey");
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey1, multiKey2, multiKey1, multiKey1);
      multiKey3.toString();
      multiKey3.getKeys();
      multiKey1.size();
      // Undeclared exception!
      try { 
        multiKey3.getKey(3839);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3839
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = null;
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
