/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:47:16 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("B!`nhV+", "B!`nhV+", "", "");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "B!`nhV+";
      stringArray0[1] = "B!`nhV+";
      stringArray0[2] = "B!`nhV+";
      stringArray0[3] = "B!`nhV+";
      MultiKey<String> multiKey1 = new MultiKey<String>("", "B!`nhV+", "", "B!`nhV+", "B!`nhV+");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, (MultiKey<String>) null, multiKey0, multiKey1);
      int int0 = multiKey1.size();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0, false);
      multiKey3.toString();
      int int1 = multiKey3.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer1, integer0, integer0, integer1);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", (String) null);
      multiKey1.toString();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey2.toString();
      Object[] objectArray1 = multiKey2.getKeys();
      assertEquals(0, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(2014);
      Integer integer1 = new Integer(2014);
      Integer integer2 = new Integer(2014);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[2014, 2014, 2014]", string0);
      
      multiKey0.getKey(0);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "6 x}S!j", "", "", "6 x}S!j");
      boolean boolean0 = multiKey1.equals(integer0);
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[2014, 2014, 2014]", "");
      Object object0 = new Object();
      Object object1 = new Object();
      Integer integer3 = new Integer(0);
      MultiKey<String> multiKey3 = new MultiKey<String>("6 x}S!j", (String) null, "Nj7EL", "Nj7EL");
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey1, multiKey3, multiKey2);
      boolean boolean1 = multiKey0.equals(multiKey0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "F0C9^i.,sZ5Nk";
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.getKey(0);
      Integer integer1 = new Integer(0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) integer1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.getKey(0);
      MultiKey<Integer> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey0, multiKey1, multiKey1);
      multiKey2.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey1, multiKey0, multiKey2, multiKey0);
      multiKey3.getKeys();
      multiKey0.getKeys();
      multiKey1.toString();
      MultiKey<String> multiKey4 = new MultiKey<String>("", "", "Z=x'#*]>PF7g44E_Wh", "Z=x'#*]>PF7g44E_Wh", "");
      String[] stringArray0 = new String[2];
      multiKey4.toString();
      stringArray0[0] = "\"IC5;>J>MR7jDjb ";
      stringArray0[1] = "";
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray0);
      // Undeclared exception!
      try { 
        multiKey5.getKey((-695));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -695
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(232);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1626));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      Integer integer4 = multiKey0.getKey(0);
      assertEquals(232, (int)integer4);
      
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, true);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey1.toString();
      multiKey1.equals(integer3);
      multiKey1.size();
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[232, -1626, -1626, 0]", "MultiKey[232, -1626, -1626, 0]", "", "MultiKey[232, -1626, -1626, 0]");
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[232, -1626, -1626, 0], MultiKey[232, -1626, -1626, 0], , MultiKey[232, -1626, -1626, 0]]", string0);
      
      boolean boolean0 = multiKey2.equals("MultiKey[232, -1626, -1626, 0]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "/T#mdJuw@-4_~tUb";
      stringArray0[1] = "/T#mdJuw@-4_~tUb";
      stringArray0[2] = "/T#mdJuw@-4_~tUb";
      stringArray0[3] = "57@ov5BWv";
      stringArray0[4] = "/T#mdJuw@-4_~tUb";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey1, multiKey0, multiKey1);
      Object object0 = multiKey2.getKey(0);
      multiKey2.toString();
      Integer integer0 = new Integer(0);
      multiKey1.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object) null, "/T#mdJuw@-4_~tUb", object0, integer0);
      Object object1 = multiKey3.getKey(0);
      assertNull(object1);
      
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[/T#mdJuw@-4_~tUb, /T#mdJuw@-4_~tUb, /T#mdJuw@-4_~tUb, 57@ov5BWv, /T#mdJuw@-4_~tUb]", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("&x?DYp}P", "5JRD=uuI3CD_", (Object) null);
      multiKey0.hashCode();
      MultiKey<String> multiKey1 = new MultiKey<String>("5JRD=uuI3CD_", "&x?DYp}P", "", "N1^8", "");
      String string0 = multiKey1.getKey(0);
      assertEquals("5JRD=uuI3CD_", string0);
      
      multiKey0.hashCode();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 5);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey1;
      multiKeyArray0[3] = multiKey1;
      multiKeyArray0[4] = multiKey1;
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      boolean boolean0 = multiKey2.equals(multiKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(3417);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      Integer[] integerArray1 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray1, true);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey1);
      assertEquals(3, multiKey2.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("]}45", "ovKod.i|x", "(&0+S7fr+YP)=vUT,8r", "", "The array of keys must not be null");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "ovKod.i|x", "");
      // Undeclared exception!
      try { 
        multiKey1.getKey(2174);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2174
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 3);
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", (String) null, "", "");
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("", (String) null, "", (String) null, "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKeyArray0[1] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", (String) null);
      multiKeyArray0[2] = multiKey2;
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      MultiKey<String>[] multiKeyArray1 = multiKey3.getKeys();
      assertNotSame(multiKeyArray0, multiKeyArray1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(2);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(1526);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      Integer[] integerArray1 = multiKey0.getKeys();
      assertNotSame(integerArray0, integerArray1);
  }
}
