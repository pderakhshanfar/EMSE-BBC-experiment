/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:44:05 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(4);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(4);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer3);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      Integer integer4 = new Integer(0);
      multiKey0.hashCode();
      boolean boolean0 = multiKey0.equals(integer3);
      multiKey0.equals(integer3);
      Integer integer5 = new Integer(23);
      Integer integer6 = new Integer((-1));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer2, integer6, integer6, integer4);
      Integer integer7 = new Integer((-1));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer5);
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey1, multiKey2, multiKey2);
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey2);
      MultiKey<Integer> multiKey5 = multiKey3.getKey(4);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey6 = new MultiKey<Object>(objectArray0, false);
      MultiKey<MultiKey<Object>> multiKey7 = new MultiKey<MultiKey<Object>>(multiKey6, multiKey6, multiKey6);
      MultiKey<String> multiKey8 = new MultiKey<String>("V_ar-^%8c", "MultiKey[0, 4, 0, 4]", "MultiKey[0, 4, 0, 4]");
      boolean boolean1 = multiKey2.equals(multiKey5);
      assertFalse(boolean1 == boolean0);
      
      String string0 = multiKey6.toString();
      assertEquals("MultiKey[]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = null;
      objectArray0[1] = null;
      objectArray0[2] = null;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0);
      Object object0 = multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, multiKey1, object0, (Object) null, multiKey1);
      Object object1 = new Object();
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey0, (Object) null, object1, integer0, multiKey2);
      boolean boolean0 = multiKey2.equals(multiKey3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      Object object0 = new Object();
      multiKey0.equals(object0);
      Integer[] integerArray1 = multiKey0.getKeys();
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-798));
      Integer integer1 = new Integer((-798));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer1, integer1, integer0);
      multiKey0.hashCode();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, integer1, integer0);
      multiKey1.hashCode();
      multiKey1.hashCode();
      multiKey1.equals(integer1);
      multiKey0.equals(multiKey1);
      String string0 = "";
      String string1 = "}Y(;&";
      String string2 = null;
      MultiKey<String> multiKey2 = new MultiKey<String>("", (String) null, "", "UTufM^*F-eP|Gr*E$1", "");
      multiKey2.toString();
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey((-798));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -798
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(4);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(4);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer3);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.hashCode();
      multiKey0.hashCode();
      multiKey0.equals(integer3);
      multiKey0.equals(integer3);
      String string0 = "}Y(;&";
      MultiKey<String> multiKey1 = new MultiKey<String>("", "MultiKey[0, 4, 0, 4]", "}Y(;&", "Z/f;~-AETTxC-jUv", "UTufM^*F-eP|Gr*E$1");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKey(4);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "MultiKey[0, 4, 0, 4]";
      stringArray0[1] = "";
      MultiKey<MultiKey<String>> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.size();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 4);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      int int0 = 0;
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer((-2164));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2, integer3, integer4);
      multiKeyArray0[0] = multiKey1;
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer3;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      multiKeyArray0[1] = multiKey2;
      Integer integer5 = new Integer((-1068));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer3, (Integer) int0, integer2, integer5);
      multiKeyArray0[2] = multiKey3;
      Integer integer6 = new Integer((-2164));
      Integer integer7 = new Integer(0);
      Integer integer8 = new Integer(59);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer6, integer7, integer8, integer7);
      multiKeyArray0[3] = multiKey4;
      MultiKey<MultiKey<Integer>> multiKey5 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      MultiKey<Integer> multiKey6 = multiKey5.getKey(0);
      assertEquals(5, multiKey6.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "6lBiN2Q.\"2.d_YqG", "d4[!&>^=u$ #LZ", "ZLeMXh~W06w`WT", "");
      multiKey0.getKey(0);
      objectArray0[1] = (Object) null;
      Integer integer0 = new Integer((-3063));
      Integer integer1 = new Integer((-3063));
      Integer integer2 = new Integer(2208);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2, integer1, (Integer) null);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey1, multiKey1);
      MultiKey<Integer> multiKey3 = multiKey2.getKey(0);
      objectArray0[2] = (Object) multiKey3;
      Object object1 = new Object();
      objectArray0[3] = object1;
      Object object2 = new Object();
      objectArray0[4] = object2;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0, true);
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKey4, multiKey4, multiKey4);
      // Undeclared exception!
      try { 
        multiKey5.getKey(2208);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2208
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      multiKey0.getKey(0);
      MultiKey<String> multiKey1 = new MultiKey<String>("P&GQZ", "", "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.getKey(0);
      multiKey1.equals("");
      multiKey0.equals(multiKey1);
      multiKey0.getKeys();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      int int0 = multiKey2.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      // Undeclared exception!
      try { 
        multiKey1.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "_*k(]H;?k>n";
      stringArray0[2] = "yplzC5#S";
      stringArray0[3] = ";2za";
      stringArray0[4] = "ae;G|-\"d5I";
      stringArray0[5] = "y]O>;f;";
      stringArray0[6] = "";
      stringArray0[7] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.getKey(1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integer0, "_*k(]H;?k>n");
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[0, 0, _*k(]H;?k>n], MultiKey[0, 0, _*k(]H;?k>n], MultiKey[0, 0, _*k(]H;?k>n], MultiKey[0, 0, _*k(]H;?k>n]]", string0);
      
      multiKey0.getKeys();
      String string1 = multiKey0.getKey(1);
      assertEquals("_*k(]H;?k>n", string1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Integer integer0 = new Integer(2306);
      int int0 = (-2705);
      Integer integer1 = new Integer((-2705));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, (Integer) null, integer0, integer1);
      // Undeclared exception!
      try { 
        multiKey0.getKey(2306);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2306
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "E!oflB";
      stringArray0[2] = "Em_HTWJ";
      stringArray0[3] = "@";
      stringArray0[4] = "#=gO#GyMmxn";
      stringArray0[5] = ")(jS{~FJuZH;1A[";
      stringArray0[6] = "The array of keys must not be null";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.getKey(0);
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, object0, "", integer0);
      multiKey1.getKey(0);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 6);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      MultiKey<String> multiKey2 = new MultiKey<String>("8EYmME}3 SaXki,", "@", "MultiKey[, E!oflB, Em_HTWJ, @, #=gO#GyMmxn, )(jS{~FJuZH;1A[, The array of keys must not be null]", "MultiKey[, E!oflB, Em_HTWJ, @, #=gO#GyMmxn, )(jS{~FJuZH;1A[, The array of keys must not be null]");
      multiKeyArray0[4] = multiKey2;
      multiKeyArray0[5] = multiKey0;
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      int int0 = multiKey3.size();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer((-393));
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer((-393));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer3);
      multiKey0.toString();
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = null;
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("35{#3n&Niz-{Po", (Object) null);
      multiKey0.toString();
      multiKey0.size();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      // Undeclared exception!
      try { 
        multiKey1.getKey(1918);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1918
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
