/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:53:29 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 6);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      multiKeyArray0[5] = multiKey0;
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[null], MultiKey[null], MultiKey[null], MultiKey[null], MultiKey[null], MultiKey[null]]", string0);
      
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      int int0 = multiKey2.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, (Integer) null);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, integer0);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[null, 3]", string0);
      
      multiKey1.hashCode();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) multiKey1;
      objectArray0[4] = (Object) integer1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer0, multiKey2, (Object) null, "");
      boolean boolean0 = multiKey0.equals(multiKey3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "MultiKey", "MultiKey", "MultiKey", (String) null);
      multiKey0.getKey(4);
      objectArray0[1] = (Object) null;
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey", (String) null, "stL{ m[0g-xO");
      multiKey1.getKey(0);
      objectArray0[2] = (Object) "MultiKey";
      Object object1 = new Object();
      objectArray0[3] = object1;
      Object object2 = new Object();
      objectArray0[4] = object2;
      Object object3 = new Object();
      objectArray0[5] = object3;
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = null;
      MultiKey<String> multiKey0 = new MultiKey<String>("", (String) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.toString();
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, integer0, (Object) null);
      Integer integer1 = new Integer(0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer1, integer0, object0, (Object) null);
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, "");
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey(1087);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1087
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(1);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "6y'Pe_RQQzG`=?";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "BdQ";
      stringArray0[8] = "The array of keys must not be null";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      Integer integer1 = new Integer(1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer1, multiKey1);
      Integer integer2 = new Integer(189);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, "", integer2);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(integer0, multiKey0, "", multiKey3);
      MultiKey multiKey5 = (MultiKey)multiKey4.getKey(1);
      assertEquals(9, multiKey5.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(4);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-1160));
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray0);
      Integer integer7 = new Integer(672);
      boolean boolean0 = multiKey1.equals(integer7);
      assertFalse(boolean0);
      
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[0, 4, 0, 0, 0, 0, -1160]", string0);
      
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[0, 4, 0, 0, 0, 0, -1160]", "MultiKey[0, 4, 0, 0, 0, 0, -1160]", "MultiKey[0, 4, 0, 0, 0, 0, -1160]");
      multiKey2.size();
      multiKey1.getKeys();
      multiKey1.getKeys();
      int int1 = multiKey1.hashCode();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey1.getKeys();
      MultiKey<String> multiKey3 = new MultiKey<String>("", "", "", "S:W`M30dxo", "");
      multiKey3.toString();
      multiKey3.size();
      multiKey0.hashCode();
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey3, multiKey3, multiKey3, multiKey3);
      multiKey4.toString();
      multiKey3.size();
      multiKey1.hashCode();
      // Undeclared exception!
      try { 
        multiKey0.getKey(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = "";
      stringArray0[0] = "";
      stringArray0[1] = "o";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "KR(92M>i)z,wVj";
      String string1 = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.size();
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-1));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "0brm.<dYE%";
      stringArray0[2] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[3] = "tjPH<(K";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.size();
      Integer integer0 = new Integer(4);
      Integer[] integerArray0 = new Integer[7];
      Integer integer1 = new Integer(4);
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, "tjPH<(K", "org.apache.commons.collections4.keyvalue.MultiKey", "", multiKey1);
      int int0 = multiKey2.size();
      int int1 = multiKey2.size();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(4098);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      multiKey0.toString();
      int int0 = multiKey0.size();
      assertEquals(4, int0);
  }
}
