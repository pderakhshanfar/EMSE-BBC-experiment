/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:45:38 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "gLVTs=. Mf(teF";
      stringArray0[1] = "MultiKey";
      stringArray0[2] = "8'dp#?C^L6r";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      boolean boolean0 = multiKey0.equals("MultiKey");
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey", integer0);
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) stringArray0, true);
      MultiKey<String> multiKey3 = new MultiKey<String>("pA5XI|9", "", "MultiKey", "", "(d*M1-QFw$zKQ4cB$");
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey3, multiKey0, multiKey3);
      MultiKey<String> multiKey5 = multiKey4.getKey(0);
      multiKey5.toString();
      multiKey5.toString();
      multiKey1.toString();
      boolean boolean1 = multiKey3.equals(multiKey5);
      assertFalse(boolean1 == boolean0);
      
      multiKey0.getKey(0);
      multiKey1.toString();
      Object object0 = new Object();
      multiKey1.size();
      String string0 = multiKey5.toString();
      assertEquals("MultiKey[pA5XI|9, , MultiKey, , (d*M1-QFw$zKQ4cB$]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "MultiKey", (String) null, "_9e\"aX1\"imrpF1DbR<", "I");
      multiKey0.getKey(0);
      objectArray0[0] = (Object) "MultiKey";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, "");
      multiKey2.equals("MultiKey[MultiKey]");
      Integer integer0 = new Integer(6);
      Integer integer1 = new Integer(8);
      Integer integer2 = new Integer(1094);
      Integer integer3 = new Integer((-3224));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>((Integer) null, integer0, integer2, integer1);
      multiKey3.equals(multiKey0);
      MultiKey<String> multiKey4 = null;
      try {
        multiKey4 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-714));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.toString();
      Object object0 = new Object();
      int int0 = multiKey1.size();
      multiKey1.hashCode();
      Integer integer1 = new Integer(5);
      Integer integer2 = new Integer(205);
      Integer integer3 = new Integer((-714));
      Integer integer4 = new Integer(1);
      Integer integer5 = new Integer(1);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer4, integer0, integer5);
      int int1 = multiKey2.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<MultiKey<Object>> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("%PDQly", "%PDQly", "");
      multiKey0.getKey(0);
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("%PDQly", multiKey0, "", integer0, "");
      multiKey1.toString();
      Object object0 = new Object();
      multiKey1.equals(object0);
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKey(0);
      multiKey1.toString();
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      multiKey1.toString();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer1, integer2, integer2);
      multiKey2.getKey(2);
      multiKey2.equals(multiKey1);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.getKey(2);
      multiKey2.size();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[%PDQly, %PDQly, ]", string0);
      
      boolean boolean0 = multiKey0.equals((Object) null);
      assertFalse(boolean0);
      
      boolean boolean1 = multiKey0.equals(multiKey2);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "gLVTs=. Mf(teF";
      stringArray0[1] = "MultiKey";
      stringArray0[2] = "8'dp#?C^L6r";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      boolean boolean0 = multiKey0.equals("MultiKey");
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey", integer0);
      Object object0 = multiKey1.getKey(0);
      assertEquals("MultiKey", object0);
      
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) stringArray0, true);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("8'dp#?C^L6r", "MultiKey", "MultiKey", multiKey2, "gLVTs=. Mf(teF");
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.hashCode();
      Integer integer1 = new Integer(2308);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer1, integer2, integer1, integer0, integer2);
      multiKey4.hashCode();
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[2308, 0, 2308, 0, 0]", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-71));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.getKeys();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.getKeys();
      multiKey1.hashCode();
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[]", "", "MultiKey[]", "]*@Z!#Z");
      int int0 = multiKey3.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey0.getKey(0);
      multiKey0.toString();
      objectArray0[3] = (Object) "";
      Integer integer0 = new Integer(2792);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer1);
      Integer integer2 = multiKey1.getKey(0);
      assertEquals(2792, (int)integer2);
      
      objectArray0[4] = (Object) integer2;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey2.size();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[2792, 0, 0]", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) "MultiKey[0, 0]";
      objectArray0[4] = (Object) multiKey1;
      objectArray0[5] = (Object) "MultiKey[0, 0]";
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey2.toString();
      multiKey2.toString();
      Object object1 = multiKey2.getKey(0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "mK50>Ez(hmw";
      MultiKey<Object> multiKey0 = new MultiKey<Object>("mK50>Ez(hmw", "mK50>Ez(hmw", "mK50>Ez(hmw", "mK50>Ez(hmw");
      multiKey0.toString();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 1);
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      int int0 = 0;
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0, (Object) null, "_:4cZk[pI", (Object) null);
      multiKeyArray0[0] = multiKey1;
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1120));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1120
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, (Object) null, (Object) null);
      multiKey0.toString();
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.hashCode();
  }
}
