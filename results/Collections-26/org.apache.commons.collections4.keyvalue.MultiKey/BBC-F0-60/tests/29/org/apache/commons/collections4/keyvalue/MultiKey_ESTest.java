/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:54:26 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(4368);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "OF)?lQKEZGFp[!wl{", "bGA}9", "bGA}9");
      int int0 = multiKey1.size();
      multiKey0.hashCode();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "bGA}9";
      stringArray0[1] = "bGA}9";
      stringArray0[2] = "";
      stringArray0[3] = "OF)?lQKEZGFp[!wl{";
      stringArray0[4] = "bGA}9";
      multiKey1.toString();
      stringArray0[6] = "bGA}9";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.getKey(5);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object) null, "", integer0, multiKey1);
      int int1 = multiKey3.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "j|G39j <F");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 4);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKeyArray0[0] = multiKey2;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey1;
      multiKeyArray0[3] = multiKey1;
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      Object object0 = multiKey3.getKey(3);
      boolean boolean0 = multiKey1.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      Integer integer0 = new Integer(3226);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integer0, (Object) null);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      Integer[] integerArray0 = new Integer[0];
      multiKey1.toString();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.hashCode();
      multiKey1.toString();
      multiKey1.toString();
      int int0 = multiKey2.size();
      boolean boolean0 = multiKey1.equals("MultiKey[3226, 3226, null]");
      assertFalse(boolean0);
      
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      multiKey3.toString();
      multiKey3.toString();
      int int1 = multiKey3.hashCode();
      assertTrue(int1 == int0);
      
      multiKey0.getKeys();
      MultiKey<String> multiKey4 = new MultiKey<String>("k/=NqaL\"r%", "MultiKey[MultiKey[3226, 3226, null], MultiKey[3226, 3226, null]]", "MultiKey[MultiKey[3226, 3226, null], MultiKey[3226, 3226, null]]", "org.apache.commons.collections4.keyvalue.MultiKey");
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey4, multiKey0, multiKey0);
      int int2 = multiKey5.hashCode();
      assertFalse(int2 == int0);
      
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[3226, 3226, null]", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("+Yu1=W:&{W+t{", "+Yu1=W:&{W+t{");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[+Yu1=W:&{W+t{, +Yu1=W:&{W+t{], MultiKey[+Yu1=W:&{W+t{, +Yu1=W:&{W+t{], MultiKey[+Yu1=W:&{W+t{, +Yu1=W:&{W+t{], MultiKey[+Yu1=W:&{W+t{, +Yu1=W:&{W+t{]]", string0);
      
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(3320);
      Integer integer1 = new Integer(3320);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals(integer1);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("&++Rt.mB", integer0, object0, integer1);
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("@m", "E", "MultiKey[&++Rt.mB, 3320, java.lang.Object@5e791260, 3320]", "MultiKey[&++Rt.mB, 3320, java.lang.Object@5e791260, 3320]", "");
      multiKey2.toString();
      multiKey2.equals("MultiKey[3320, 3320]");
      multiKey1.getKeys();
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey1.toString();
      multiKey1.size();
      int int0 = multiKey0.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(4368);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "OF)?lQKEZGFp[!wl{", "bGA}9", "bGA}9");
      int int0 = multiKey1.size();
      multiKey0.hashCode();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "bGA}9";
      stringArray0[1] = "bGA}9";
      stringArray0[2] = "";
      stringArray0[3] = "OF)?lQKEZGFp[!wl{";
      stringArray0[4] = "bGA}9";
      stringArray0[5] = "bGA}9";
      stringArray0[6] = "bGA}9";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.getKey(5);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("bGA}9", "", integer0, multiKey1);
      int int1 = multiKey3.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      multiKey0.toString();
      multiKey0.toString();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      int int0 = 3040;
      Integer integer0 = new Integer(3040);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.toString();
      String string0 = "";
      MultiKey<String> multiKey1 = new MultiKey<String>("%R:$)/", "");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1);
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1);
      multiKey3.toString();
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey3.getKey(3040);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3040
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("L'`J+Vd", "L'`J+Vd", "L'`J+Vd");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      multiKey0.hashCode();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey0.toString();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 8);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey1;
      multiKeyArray0[3] = multiKey1;
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, multiKey1);
      multiKeyArray0[4] = multiKey2;
      Integer integer1 = new Integer(3);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "MultiKey[L'`J+Vd, L'`J+Vd, L'`J+Vd]";
      stringArray0[1] = "MultiKey[]";
      stringArray0[2] = "MultiKey[L'`J+Vd, L'`J+Vd, L'`J+Vd]";
      stringArray0[3] = "MultiKey[L'`J+Vd, L'`J+Vd, L'`J+Vd]";
      stringArray0[4] = "MultiKey[L'`J+Vd, L'`J+Vd, L'`J+Vd]";
      stringArray0[5] = "MultiKey[L'`J+Vd, L'`J+Vd, L'`J+Vd]";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, true);
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object) null, integer1, multiKey3);
      multiKeyArray0[5] = multiKey4;
      multiKeyArray0[6] = multiKey1;
      multiKeyArray0[7] = multiKey1;
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      int int0 = multiKey5.size();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<String> multiKey1 = new MultiKey<String>("UJ>%z}", "UJ>%z}", "MultiKey");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      Integer integer2 = new Integer(0);
      multiKey1.equals(integer2);
      multiKey1.equals("MultiKey[UJ>%z}, UJ>%z}, MultiKey]");
      multiKey1.toString();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      Integer integer3 = new Integer(960);
      multiKey2.equals(integer3);
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey(960);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 960
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
