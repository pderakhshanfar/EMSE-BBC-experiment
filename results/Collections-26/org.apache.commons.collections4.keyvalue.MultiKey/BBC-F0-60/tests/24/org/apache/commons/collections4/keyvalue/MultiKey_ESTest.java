/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:53:23 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 6);
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "");
      multiKeyArray0[1] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "");
      multiKeyArray0[2] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("", "", "");
      multiKeyArray0[3] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("?K", "MultiKey");
      multiKeyArray0[4] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>("N*V`@<=P:", "N*V`@<=P:", "xq-p\u0007eB_%t", "", "");
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[, , ]", string0);
      
      multiKeyArray0[5] = multiKey5;
      MultiKey<MultiKey<String>> multiKey6 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      boolean boolean0 = multiKey6.equals(multiKey4);
      boolean boolean1 = multiKey2.equals(multiKey2);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(2);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null, (Integer) null);
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = null;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      Integer integer1 = new Integer(2);
      integerArray0[3] = integer1;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKey1.equals(multiKey2);
      assertFalse(multiKey2.equals((Object)multiKey0));
      assertFalse(multiKey1.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(2876);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2876);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.getKey(0);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      MultiKey<String>[] multiKeyArray1 = multiKey2.getKeys();
      assertNotSame(multiKeyArray0, multiKeyArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "", "");
      Integer integer0 = new Integer((-1));
      Object object0 = new Object();
      objectArray0[2] = object0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.size();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey2.getKeys();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      multiKey3.size();
      boolean boolean0 = multiKey0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = null;
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.size();
      multiKey0.toString();
      Integer integer0 = new Integer(4);
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      multiKey2.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey2.equals("==#6pu_(gh)S");
      multiKey2.hashCode();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1915));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1915
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = " jg^nJ";
      stringArray0[2] = "";
      stringArray0[3] = "^";
      stringArray0[4] = "";
      stringArray0[5] = "The array of keys must not be null";
      stringArray0[6] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[7] = "J!9pX0Pr";
      stringArray0[8] = "6j)5TxP&EEi_)qFVo";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[,  jg^nJ, , ^, , The array of keys must not be null, org.apache.commons.collections4.keyvalue.MultiKey, J!9pX0Pr, 6j)5TxP&EEi_)qFVo]", string0);
      
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      Object object0 = multiKey1.getKey(0);
      assertEquals("", object0);
      
      Object object1 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("J!9pX0Pr", "", "^", "", object1);
      multiKey2.toString();
      multiKey2.hashCode();
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer0, "J!9pX0Pr", object1, multiKey0, " jg^nJ");
      boolean boolean0 = multiKey0.equals(multiKey3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      MultiKey<String> multiKey0 = new MultiKey<String>("8!)->K/gJN^", "", "");
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("8!)->K/gJN^", "8!)->K/gJN^");
      multiKey1.getKey(0);
      objectArray0[0] = (Object) "8!)->K/gJN^";
      multiKey1.getKey(0);
      objectArray0[1] = (Object) "8!)->K/gJN^";
      Object object0 = new Object();
      objectArray0[2] = object0;
      // Undeclared exception!
      try { 
        multiKey0.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "B{=yB-+t";
      stringArray0[1] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-1816));
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      int int0 = multiKey1.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "org.apache.commons.collections4.keyvalue.MultiKey";
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", (String) null, (String) null, "org.apache.commons.collections4.keyvalue.MultiKey");
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "org.apache.commons.collections4.keyvalue.MultiKey", object0, object1, "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-4779));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4779
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[java.lang.Object@5706c220, java.lang.Object@5706c220]", "", "MultiKey[java.lang.Object@5706c220, java.lang.Object@5706c220]", ">j**B");
      multiKey1.toString();
      multiKey1.size();
      Integer integer0 = new Integer(4);
      multiKey1.toString();
      Integer integer1 = new Integer((-1));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, (Integer) null, integer1, integer1);
      multiKey2.toString();
      int int0 = multiKey2.size();
      multiKey2.toString();
      int int1 = multiKey1.size();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>("0>{ku", "`A%u[;(SOFb;o", "");
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.getKey(0);
      objectArray0[0] = null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      MultiKey<String> multiKey1 = new MultiKey<String>("/>M&}lv", "MultiKey");
      // Undeclared exception!
      try { 
        multiKey1.getKey(2049);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2049
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", object0, "", "");
      // Undeclared exception!
      try { 
        multiKey0.getKey(2140);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2140
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
