/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:43:20 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(828);
      Integer integer1 = new Integer(828);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      Integer integer2 = new Integer(828);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer2, integer1, integer1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey1, integer0);
      multiKey2.size();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 9);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[828, 828], MultiKey[828, 828, 828, 828], 828]", string0);
      
      multiKeyArray0[2] = multiKey1;
      multiKeyArray0[3] = multiKey1;
      multiKeyArray0[4] = multiKey0;
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, false);
      Integer integer3 = new Integer(828);
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer1, integerArray0[0], integer3, integerArray0[0], integer0);
      MultiKey<MultiKey<Integer>> multiKey5 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey0, multiKey1, multiKey1, multiKey1);
      Object object0 = new Object();
      MultiKey<String> multiKey6 = new MultiKey<String>((String) null, ".+dGe/vQ@jPzO|#UA6", "MultiKey[MultiKey[828, 828], MultiKey[828, 828, 828, 828], 828]");
      boolean boolean0 = multiKey6.equals(multiKey5);
      assertFalse(boolean0);
      
      multiKey6.equals(integerArray0[2]);
      boolean boolean1 = multiKey0.equals(multiKey0);
      boolean boolean2 = multiKey2.equals("MultiKey[MultiKey[828, 828], MultiKey[828, 828, 828, 828], 828]");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      int int0 = multiKey0.size();
      assertEquals(0, int0);
      
      String[] stringArray1 = multiKey0.getKeys();
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(4);
      Integer integer1 = new Integer((-527));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0, (Integer) null, integer1);
      multiKey0.getKey(0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null);
      Integer integer2 = new Integer((-1647));
      Integer integer3 = new Integer(3);
      Integer integer4 = new Integer(0);
      multiKey1.toString();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, integer2, integer3, integer4);
      multiKey2.toString();
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1647));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1647
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "MultiKey[0, java.lang.Object@316627de]");
      multiKey1.hashCode();
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey0.size();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.getKey(0);
      multiKey1.size();
      multiKey2.toString();
      multiKey1.toString();
      multiKey0.size();
      multiKey0.equals(multiKey2);
      multiKey1.size();
      multiKey0.hashCode();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 8);
      MultiKey<String> multiKey3 = null;
      try {
        multiKey3 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 6);
      MultiKey<String> multiKey1 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null", "..C:2(LW");
      multiKeyArray0[0] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("The array of keys must not be null", (String) null);
      multiKeyArray0[1] = multiKey2;
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = "";
      stringArray0[2] = "..C:2(LW";
      stringArray0[3] = "The array of keys must not be null";
      stringArray0[4] = null;
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      multiKeyArray0[2] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("", stringArray0[0], "", "MultiKey", (String) null);
      multiKeyArray0[3] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>("", "", "H/=$cp[w", "");
      multiKeyArray0[4] = multiKey5;
      MultiKey<String> multiKey6 = new MultiKey<String>("GZP", "", "The array of keys must not be null");
      multiKeyArray0[5] = multiKey6;
      MultiKey<MultiKey<String>> multiKey7 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      int int0 = multiKey7.size();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0, object0, object0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "y";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = " _P`W4e";
      stringArray0[4] = "2-fsZx+:`D^d";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[y, , ,  _P`W4e, 2-fsZx+:`D^d]", string0);
      
      String string1 = multiKey1.getKey(0);
      assertEquals("y", string1);
      
      multiKey0.hashCode();
      multiKey1.hashCode();
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0);
      boolean boolean0 = multiKey2.equals("y");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(828);
      Integer integer1 = new Integer(828);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      Integer integer2 = new Integer(828);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer2, integer1, integer1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey1, integer0);
      multiKey2.size();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 9);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKey2.toString();
      multiKeyArray0[2] = multiKey1;
      multiKeyArray0[3] = multiKey1;
      multiKeyArray0[4] = multiKey0;
      multiKeyArray0[5] = multiKey0;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer1, integer2);
      multiKeyArray0[6] = multiKey3;
      multiKeyArray0[7] = multiKey1;
      multiKeyArray0[8] = multiKey1;
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, true);
      Integer integer3 = new Integer(828);
      multiKey4.equals(integer3);
      multiKey2.getKeys();
      multiKey2.hashCode();
      // Undeclared exception!
      try { 
        multiKey4.getKey((-383));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -383
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "BN[8`\">z#cNyf5$A=[H";
      stringArray0[5] = "";
      stringArray0[6] = "zu?/}d Sj";
      stringArray0[7] = "\"Qc*40@]O9f";
      stringArray0[8] = "M2kj9|]e<wG=L(u]IXm";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.getKeys();
      Integer integer0 = new Integer(5);
      multiKey0.toString();
      Integer integer1 = new Integer(5);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer1);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.size();
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, "BN[8`\">z#cNyf5$A=[H", object0);
      multiKey2.toString();
      multiKey2.size();
      // Undeclared exception!
      try { 
        multiKey2.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1134));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1134
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "org.apache.commons.collections4.keyvalue.MultiKey", "", "");
      multiKey0.equals("");
      multiKey0.hashCode();
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-246));
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2, integer0, integer1);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-3145));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3145
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
