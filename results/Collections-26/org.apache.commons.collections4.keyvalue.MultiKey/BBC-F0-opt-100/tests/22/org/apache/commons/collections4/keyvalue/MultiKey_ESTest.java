/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:37:18 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object1, object0, (Object) null, object2, object2);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = object1;
      objectArray0[1] = object1;
      objectArray0[2] = null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.equals(multiKey1);
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "", "ihB5_pc", "ihB5_pc");
      int int0 = multiKey2.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, (Object) null, object0, "JOV?{F9^&y$H");
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 2);
      Integer integer0 = new Integer(106);
      Integer integer1 = new Integer(16);
      Integer integer2 = new Integer(16);
      Integer integer3 = new Integer(106);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1, integer2, integer3);
      multiKeyArray0[0] = multiKey1;
      Integer integer4 = new Integer(411);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer4, integer3, integer2, integer2, integer3);
      multiKeyArray0[1] = multiKey2;
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, true);
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      boolean boolean0 = multiKey3.equals(multiKey4);
      assertFalse(multiKey4.equals((Object)multiKey0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer((-2807));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, integer0, integer1, object0);
      multiKey0.getKeys();
      Integer integer2 = new Integer((-895));
      Object object1 = new Object();
      multiKey0.equals(object1);
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, true);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("cgqun", "cgqun", "");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[cgqun, cgqun, ]", string0);
      
      multiKey0.hashCode();
      multiKey0.size();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "MultiKey[cgqun, cgqun, ]";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.getKey(3);
      objectArray0[1] = null;
      objectArray0[2] = (Object) "cgqun";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = (Object) "MultiKey[cgqun, cgqun, ]";
      objectArray0[6] = (Object) "";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      Integer integer0 = new Integer((-860));
      boolean boolean0 = multiKey2.equals(integer0);
      assertFalse(multiKey2.equals((Object)multiKey1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(1008);
      Integer integer1 = new Integer(1008);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer1, integer1, (Object) null, integer0);
      MultiKey<String> multiKey1 = new MultiKey<String>("@m/K<RI/ZJ|tE!,a", "@m/K<RI/ZJ|tE!,a", "k>HU+s", "");
      multiKey1.toString();
      multiKey1.equals((Object) null);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[1008, 1008, 1008, null, 1008]", string0);
      
      Integer integer2 = new Integer(2035);
      boolean boolean0 = multiKey0.equals(integer2);
      assertFalse(boolean0);
      
      multiKey0.getKeys();
      boolean boolean1 = multiKey0.equals(multiKey1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "+AEM[05;JNmb@t @";
      MultiKey<String> multiKey0 = new MultiKey<String>("+AEM[05;JNmb@t @", "H.i1dqRxX", "H.i1dqRxX");
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      int int1 = 0;
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer0, integer2);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      String[] stringArray0 = null;
      boolean boolean0 = true;
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-494));
      Integer integer2 = new Integer((-3290));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer2, integer1);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey[-1, -494, -1, -3290, -494]", integer0, integer0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "#/7SL?y-J0O", "MultiKey[MultiKey[-1, -494, -1, -3290, -494], -1, -1]", "MultiKey[MultiKey[-1, -494, -1, -3290, -494], -1, -1]");
      multiKey2.equals("MultiKey[-1, -494, -1, -3290, -494]");
      multiKey1.getKey(1);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 6);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey1;
      multiKeyArray0[3] = multiKey1;
      multiKeyArray0[4] = multiKey1;
      Integer integer3 = new Integer((-1));
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer2, integer2, integer3, "MultiKey[MultiKey[-1, -494, -1, -3290, -494], -1, -1]", "MultiKey[MultiKey[-1, -494, -1, -3290, -494], -1, -1]");
      multiKeyArray0[5] = multiKey3;
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      MultiKey<Object>[] multiKeyArray1 = multiKey4.getKeys();
      assertNotSame(multiKeyArray0, multiKeyArray1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) multiKey1;
      objectArray0[2] = (Object) multiKey1;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      multiKey2.toString();
      multiKey2.size();
      multiKey2.size();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0, true);
      multiKey3.getKeys();
      int int0 = (-1150);
      // Undeclared exception!
      try { 
        multiKey3.getKey((-1150));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1150
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "*e";
      stringArray0[4] = ")8V0MWcLCZ";
      stringArray0[5] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[6] = "";
      stringArray0[7] = "fw~ED.X-=AU-1|L._";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-497));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      Integer integer4 = new Integer(2039);
      Object object0 = null;
      Integer integer5 = new Integer((-480));
      MultiKey<String> multiKey1 = new MultiKey<String>("dm!79_$w^Py-", "&U;-.BjErTPD=\"tmN");
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer5, "dm!79_$w^Py-", multiKey1, (Object) null);
      // Undeclared exception!
      try { 
        multiKey2.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "Auq I3X(:p<rP~", (String) null, "Auq I3X(:p<rP~", "");
      multiKey0.toString();
      multiKey0.equals("");
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(870);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(930);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      int int0 = multiKey1.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "D";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "D", "D");
      Integer integer0 = new Integer((-28));
      MultiKey<String> multiKey1 = new MultiKey<String>(".,xI4,9! ", "$D<b<U", "");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, "D", multiKey1);
      Integer integer1 = new Integer(0);
      String string1 = "Z";
      String string2 = "";
      MultiKey<String> multiKey3 = new MultiKey<String>("Z", "");
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey1, multiKey0, multiKey3);
      // Undeclared exception!
      try { 
        multiKey4.getKey((-28));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -28
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1629));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-1629));
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      assertEquals(6, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      int int0 = 0;
      // Undeclared exception!
      try { 
        multiKey0.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
