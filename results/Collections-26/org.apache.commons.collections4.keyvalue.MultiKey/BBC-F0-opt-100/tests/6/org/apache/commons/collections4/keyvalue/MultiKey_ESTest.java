/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:04:14 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "wIkfEikWe*Nc", "", "T=WG_6[&~fUGY'}8", "");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "", "", "");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.size();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      MultiKey<Integer>[] multiKeyArray1 = multiKey2.getKeys();
      assertNotSame(multiKeyArray1, multiKeyArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "ysP\"-R&#Y(S=r");
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", (Object) null, multiKey0, multiKey0);
      multiKey1.getKey(0);
      objectArray0[0] = (Object) "";
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1);
      MultiKey<Object> multiKey3 = multiKey2.getKey(0);
      objectArray0[1] = (Object) multiKey3;
      multiKey3.getKey(0);
      objectArray0[2] = (Object) "";
      String string0 = (String)multiKey1.getKey(0);
      assertNotNull(string0);
      
      objectArray0[3] = (Object) "";
      Object object0 = new Object();
      objectArray0[4] = object0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      Object object2 = new Object();
      objectArray0[6] = object2;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = null;
      stringArray0[6] = "ysP\"-R&#Y(S=r";
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0, false);
      boolean boolean0 = multiKey3.equals(objectArray0[1]);
      boolean boolean1 = multiKey1.equals(object1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "");
      multiKey0.getKey(1);
      Integer integer0 = new Integer(8);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0, object0, "", "");
      String[] stringArray0 = null;
      boolean boolean0 = true;
      MultiKey<String> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = null;
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "ysP\"-R&#Y(S=r");
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", (Object) null, multiKey0, multiKey0);
      multiKey1.getKey(0);
      objectArray0[0] = (Object) "";
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1);
      MultiKey<Object> multiKey3 = multiKey2.getKey(0);
      objectArray0[1] = (Object) multiKey3;
      multiKey3.getKey(0);
      objectArray0[2] = (Object) "";
      multiKey1.getKey(0);
      objectArray0[3] = (Object) "";
      Object object0 = new Object();
      objectArray0[4] = object0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      Object object2 = new Object();
      objectArray0[6] = object2;
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object) null, "", object2, multiKey2, (Object) null);
      multiKey4.getKey(0);
      objectArray0[7] = null;
      multiKey3.getKey(0);
      objectArray0[8] = (Object) "";
      MultiKey<Object> multiKey5 = new MultiKey<Object>(objectArray0, false);
      assertFalse(multiKey5.equals((Object)multiKey3));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(1467);
      Integer integer1 = new Integer(5);
      Integer integer2 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer1, integer1, object0);
      multiKey1.toString();
      multiKey0.equals(multiKey1);
      MultiKey<String> multiKey2 = new MultiKey<String>("(O`", "(O`");
      multiKey2.toString();
      multiKey2.toString();
      int int0 = multiKey2.size();
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[MultiKey[1467, 5, 1], 5, 5, java.lang.Object@61819e1]", "<TVe", "07*5dy[;V#3$ce[m8D", "<TVe", "MultiKey[(O`, (O`]");
      multiKey3.toString();
      boolean boolean0 = multiKey1.equals(multiKey3);
      assertFalse(boolean0);
      
      int int1 = multiKey1.hashCode();
      assertFalse(int1 == int0);
      
      boolean boolean1 = multiKey1.equals("<TVe");
      assertFalse(boolean1);
      
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[(O`, (O`]", string0);
      
      multiKey3.toString();
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey2, multiKey2, multiKey3);
      MultiKey<String> multiKey5 = multiKey4.getKey(0);
      assertFalse(multiKey5.equals((Object)multiKey3));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, (Integer) null, (Integer) null, (Integer) null);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, org.apache.commons.collections4.keyvalue.MultiKey, ]", object0);
      int int0 = multiKey2.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      multiKey0.toString();
      multiKey0.toString();
      String string0 = multiKey0.toString();
      boolean boolean0 = multiKey0.equals("");
      assertFalse(boolean0);
      
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey[, , ]", "", integer0, "MultiKey[, , ]", "]");
      Object object0 = multiKey1.getKey(0);
      assertTrue(object0.equals((Object)string0));
      
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", multiKey1, "MultiKey[, , ]", "MultiKey[, , ]");
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2);
      multiKey3.getKeys();
      assertFalse(multiKey1.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-420));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer2, integer0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) integer2;
      objectArray0[1] = (Object) integer1;
      objectArray0[2] = (Object) integer1;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.getKey(0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "MultiKey";
      stringArray0[1] = "Ui|i N0_/F*#0";
      stringArray0[2] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "a";
      stringArray0[6] = "U67<BZFP";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, multiKey2, multiKey2);
      multiKey3.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "yz2Oxr-4=USBl";
      MultiKey<String> multiKey0 = new MultiKey<String>("(?g", "yz2Oxr-4=USBl", "LA'hvZ9DpGKy1/z>~", "yz2Oxr-4=USBl", "(?g");
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-5));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2822));
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray0);
      multiKey1.toString();
      multiKey1.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-134));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -134
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
