/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:04:08 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Object object0 = new Object();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, integer1, object0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.size();
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey0.toString();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.getKeys();
      multiKey1.size();
      String[] stringArray1 = multiKey2.getKeys();
      multiKey1.getKeys();
      multiKey1.size();
      String[] stringArray2 = multiKey2.getKeys();
      assertNotSame(stringArray2, stringArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, multiKey0, multiKey0);
      multiKey1.size();
      multiKey1.hashCode();
      multiKey1.equals(multiKey1);
      MultiKey<String> multiKey2 = new MultiKey<String>("", "");
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, multiKey0, (MultiKey<String>) null, (MultiKey<String>) null);
      multiKey3.toString();
      Object object1 = new Object();
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object) null, multiKey1, object1, multiKey3, "");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = null;
      objectArray0[1] = (Object) multiKey2;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "MultiKey[null, MultiKey[, ], null, null]";
      objectArray0[6] = (Object) multiKey2;
      objectArray0[7] = (Object) "MultiKey[null, MultiKey[, ], null, null]";
      objectArray0[8] = (Object) multiKey0;
      MultiKey<Object> multiKey5 = new MultiKey<Object>(objectArray0);
      // Undeclared exception!
      try { 
        multiKey5.getKey(1327);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1327
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.toString();
      multiKey0.toString();
      int int0 = multiKey0.size();
      boolean boolean0 = multiKey0.equals("MultiKey[]");
      assertFalse(boolean0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      int int1 = (-1);
      Integer integer1 = new Integer((-1));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int1);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKey(0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      String string0 = multiKey2.toString();
      int int2 = multiKey2.hashCode();
      assertTrue(int2 == int0);
      
      multiKey0.size();
      multiKey0.size();
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[MultiKey[], MultiKey[]]", "MultiKey[]", "", "MultiKey[]");
      String string1 = multiKey3.getKey(0);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = (-2374);
      Integer integer0 = new Integer((-2374));
      Integer integer1 = new Integer((-2374));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0, integer1);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 9);
      Object object0 = new Object();
      String string0 = "";
      int int0 = 0;
      Integer integer0 = new Integer(0);
      MultiKey<String> multiKey0 = new MultiKey<String>("|qw.iZk&", "|qw.iZk&");
      multiKey0.getKey(0);
      MultiKey<String>[] multiKeyArray1 = null;
      MultiKey<MultiKey<String>> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Yw &";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("Yw &", "Yw &", "Yw &");
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[Yw &]", "Yw &", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.toString();
      multiKey2.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, "MultiKey[Yw &]", "Yw &", (Object) null, multiKey1);
      multiKey0.toString();
      multiKey0.toString();
      boolean boolean0 = multiKey1.equals(multiKey3);
      assertFalse(boolean0);
      
      multiKey3.getKeys();
      multiKey3.hashCode();
      boolean boolean1 = multiKey2.equals("org.apache.commons.collections4.keyvalue.MultiKey");
      assertFalse(boolean1);
      
      Integer integer0 = new Integer(3977);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer1, integer0, integer1, integer1);
      multiKey4.hashCode();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[Yw &, Yw &, Yw &]", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "%c+UGpBh9`e";
      String string1 = "1Ww,k~u\\5xPgKDjyt>";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "%c+UGpBh9`e", "%c+UGpBh9`e", "%c+UGpBh9`e", "1Ww,k~u\u0005xPgKDjyt>");
      multiKey0.toString();
      multiKey0.equals("%c+UGpBh9`e");
      Integer integer0 = new Integer((-2074));
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2);
      Object object0 = new Object();
      multiKey1.equals(object0);
      multiKey0.hashCode();
      multiKey0.size();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "MultiKey[, %c+UGpBh9`e, %c+UGpBh9`e, %c+UGpBh9`e, 1Ww,k~u\u0005xPgKDjyt>]";
      objectArray0[1] = (Object) "";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-1107));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1107));
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      String string0 = "";
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "", "");
      Integer integer2 = new Integer(1385);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer2, integer1);
      // Undeclared exception!
      try { 
        multiKey2.getKey((int) integerArray0[1]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1107
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 7);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      multiKeyArray0[5] = multiKey0;
      multiKeyArray0[6] = multiKey0;
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      Integer integer0 = new Integer(1);
      boolean boolean0 = multiKey1.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "!H?X5g", (String) null, "The array of keys must not be null");
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0, (Object) null);
      multiKey1.toString();
      Object object1 = multiKey1.getKey(0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Integer integer0 = new Integer((-3789));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-3789));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3789
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
