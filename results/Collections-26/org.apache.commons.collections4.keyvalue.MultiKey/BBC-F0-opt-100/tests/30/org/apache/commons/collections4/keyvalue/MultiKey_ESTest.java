/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 18:00:29 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      MultiKey<String> multiKey1 = new MultiKey<String>("`<qG)~e>,]vcL", "(Fdj2jW.FiFni");
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1046));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1046
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("]`)nYlo`rvp!o", "]`)nYlo`rvp!o");
      multiKey0.toString();
      multiKey0.size();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey1.toString();
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(6);
      Integer integer1 = new Integer(6);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) integer1;
      objectArray0[3] = (Object) integer1;
      objectArray0[4] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.size();
      boolean boolean0 = multiKey0.equals(objectArray0[0]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "The array of keys must not be null";
      stringArray0[1] = "7";
      stringArray0[2] = "9fgS-ZLhSL9!";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "SR([";
      stringArray0[7] = "/f15w^K/MS;b(\"|}";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      String[] stringArray1 = multiKey0.getKeys();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("/f15w^K/MS;b(\"|}", "SR([", (Object) null, object0, "");
      multiKey0.toString();
      multiKey1.hashCode();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(stringArray1);
      multiKey0.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[The array of keys must not be null, 7, 9fgS-ZLhSL9!, , , , SR([, /f15w^K/MS;b(\"|}]", string0);
      
      multiKey0.equals(multiKey2);
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey2);
      multiKey3.toString();
      boolean boolean0 = multiKey3.equals("SR([");
      assertFalse(boolean0);
      
      multiKey1.toString();
      Object object1 = multiKey2.getKey(0);
      assertFalse(multiKey2.equals((Object)multiKey1));
      assertEquals("The array of keys must not be null", object1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-336));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-336));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -336
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.hashCode();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "MultiKey[java.lang.Object@40efc2a4, java.lang.Object@57b2254d]";
      stringArray0[1] = "MultiKey[java.lang.Object@40efc2a4, java.lang.Object@57b2254d]";
      stringArray0[2] = "MultiKey[java.lang.Object@40efc2a4, java.lang.Object@57b2254d]";
      stringArray0[3] = "MultiKey[java.lang.Object@40efc2a4, java.lang.Object@57b2254d]";
      stringArray0[4] = "MultiKey[java.lang.Object@40efc2a4, java.lang.Object@57b2254d]";
      stringArray0[5] = "MultiKey[java.lang.Object@40efc2a4, java.lang.Object@57b2254d]";
      stringArray0[6] = "+";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.equals("MultiKey[java.lang.Object@40efc2a4, java.lang.Object@57b2254d]");
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer1);
      multiKey2.toString();
      multiKey0.equals(multiKey2);
      int int0 = multiKey1.size();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", "", (Object) null);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "v4Yi4#", "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.hashCode();
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1);
      multiKey1.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[, , v4Yi4#, ], MultiKey[, , v4Yi4#, ]]", string0);
      
      multiKey2.hashCode();
      Object object0 = new Object();
      multiKey0.equals(object0);
      multiKey0.getKey(0);
      multiKey0.size();
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(2085);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      boolean boolean0 = multiKey3.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "qLuAlOei3pnc";
      stringArray0[1] = "";
      stringArray0[2] = "`";
      stringArray0[3] = "#92";
      stringArray0[4] = "";
      stringArray0[5] = "{:dLGT?k\"f~`S";
      stringArray0[6] = "6es$F5bM$";
      stringArray0[7] = "\"z@b;9e";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.getKey(1);
      int int0 = multiKey0.size();
      multiKey0.equals("\"z@b;9e");
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(1494);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      int int1 = multiKey1.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.getKey(0);
      objectArray0[0] = null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      assertFalse(multiKey1.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null, (String) null);
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, integer0, integer0);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "ZdS:C* CkJ", "ZdS:C* CkJ");
      MultiKey<String> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "", "", "");
      int int0 = multiKey1.size();
      assertEquals(4, int0);
  }
}
