/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:25:40 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.toString();
      boolean boolean0 = multiKey0.equals(integer0);
      assertFalse(boolean0);
      
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer((-1221));
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer2, "", "be/#@ua\"T}ka", (Object) null, (Object) null);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey3.size();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[-1221, , be/#@ua\"T}ka, null, null]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-3147));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0);
      Integer integer1 = new Integer((-3147));
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0, integer1, (Object) null);
      multiKey1.getKeys();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "", "");
      multiKey2.toString();
      multiKey2.getKey(1);
      multiKey2.size();
      multiKey1.toString();
      multiKey2.toString();
      multiKey0.getKey(1);
      multiKey0.hashCode();
      Integer integer2 = new Integer(1);
      MultiKey<String> multiKey3 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "_2o>#T74L~]5;tDB");
      multiKey1.toString();
      multiKey2.equals(multiKey2);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-3147));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3147
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "(wtu&0 ZQfX";
      stringArray0[1] = ",R^NX$@AIPLk8i";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      Integer integer0 = new Integer(1682);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, "MultiKey[(wtu&0 ZQfX, ,R^NX$@AIPLk8i]", integer0);
      multiKey0.toString();
      multiKey1.toString();
      Object object0 = new Object();
      multiKey1.equals(object0);
      multiKey1.hashCode();
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      multiKey0.toString();
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      Object object1 = multiKey1.getKey(0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      MultiKey<String> multiKey1 = new MultiKey<String>(".*eS81\n.f8:zL#m", "-!IQ", "MultiKey[]");
      multiKey1.size();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-2108));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2108
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null);
      multiKey0.toString();
      Object object0 = null;
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-3147));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0);
      Integer integer1 = new Integer((-3147));
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0, integer1, (Object) null);
      multiKey1.getKeys();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "", "");
      multiKey2.toString();
      multiKey2.getKey(1);
      multiKey2.size();
      multiKey1.toString();
      multiKey0.toString();
      multiKey2.toString();
      multiKey0.getKey(1);
      multiKey0.hashCode();
      Integer integer2 = new Integer(1);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer1, integer0, integer0, integer2);
      multiKey3.getKey(1);
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      multiKey4.hashCode();
      MultiKey<String> multiKey5 = new MultiKey<String>("", "]");
      // Undeclared exception!
      try { 
        multiKey5.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 605;
      Integer integer0 = new Integer(605);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "(wtu&0 ZQfX";
      stringArray0[1] = ",R^NX$@AIPLk8i";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      Integer integer0 = new Integer(1682);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, "MultiKey[(wtu&0 ZQfX, ,R^NX$@AIPLk8i]", integer0);
      multiKey1.toString();
      Object object0 = new Object();
      multiKey1.equals(object0);
      multiKey1.hashCode();
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      multiKey2.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("eXD!n?Hn~7", "eXD!n?Hn~7");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(1);
      multiKey0.equals(integer0);
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[eXD!n?Hn~7, eXD!n?Hn~7]", " %v", (String) null, "The array of keys must not be null");
      MultiKey<String> multiKey2 = new MultiKey<String>("eK`", "org.apache.commons.collections4.keyvalue.MultiKey", "D{hV*v2uRbd;d!n");
      multiKey2.toString();
      multiKey2.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, multiKey2, "MultiKey[eXD!n?Hn~7, eXD!n?Hn~7]");
      multiKey3.toString();
      multiKey3.hashCode();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      // Undeclared exception!
      try { 
        multiKey4.getKey((-2742));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2742
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      String string0 = ",={X^d&_9;f";
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null", "", ",", ",={X^d&_9;f");
      int int0 = (-1);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "y";
      MultiKey<Object> multiKey0 = new MultiKey<Object>("y", "y", "y");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "y");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) multiKey1;
      objectArray0[1] = (Object) multiKey1;
      objectArray0[2] = (Object) "y";
      objectArray0[3] = (Object) "y";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      // Undeclared exception!
      try { 
        multiKey2.getKey(2890);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2890
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((-1055));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1055));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1055));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-760));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(939);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(4);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-760));
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "*hq,HT\"7F8Dh ";
      stringArray0[1] = "";
      stringArray0[2] = "$/:[t/";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      MultiKey<String> multiKey2 = new MultiKey<String>("$/:[t/", "3@l[;z(7FuI'h=!]O");
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Object object2 = multiKey0.getKey(0);
      objectArray0[2] = object2;
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "*;)vh", "");
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1349));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1349
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
