/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:07:50 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      multiKey0.toString();
      Integer integer0 = new Integer(5);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", multiKey0, integer0, "MultiKey[, , , , ]", "");
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.size();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      multiKey0.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.toString();
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer1, integer1, integer1, integer0);
      multiKey3.toString();
      multiKey3.hashCode();
      multiKey0.toString();
      boolean boolean0 = multiKey0.equals("MultiKey[1, 1, 1, 5]");
      assertFalse(boolean0);
      
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKey3, multiKey3, multiKey3);
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[MultiKey[1, 1, 1, 5], MultiKey[1, 1, 1, 5], MultiKey[1, 1, 1, 5]]", string0);
      
      MultiKey<String> multiKey5 = new MultiKey<String>("=J5", ";W={Urshitb~J'Cv");
      Object object0 = new Object();
      boolean boolean1 = multiKey1.equals(multiKey1);
      boolean boolean2 = multiKey0.equals(multiKey2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null, (Object) null);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "MultiKey[0, 0]";
      stringArray0[1] = "MultiKey[0, 0]";
      stringArray0[2] = "MultiKey[0, 0]";
      stringArray0[3] = "MultiKey[0, 0]";
      stringArray0[4] = "MultiKey[0, 0]";
      String string0 = "";
      stringArray0[5] = "";
      stringArray0[6] = "MultiKey[0, 0]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.hashCode();
      Integer integer1 = new Integer(2);
      Integer integer2 = new Integer(2);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, integer1, integer2);
      multiKey2.getKey(0);
      MultiKey<String> multiKey3 = new MultiKey<String>("", "MultiKey[0, 0]", "MultiKey[0, 0]", "", "KOUDbdKU` 0(\"/9]1I'");
      // Undeclared exception!
      try { 
        multiKey3.getKey((-1523));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1523
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "q*!NxA", "q*!NxA", (String) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", object0, "MultiKey[null, q*!NxA, q*!NxA, null]", multiKey0);
      multiKey1.toString();
      multiKey1.hashCode();
      Integer integer0 = new Integer(4);
      Integer integer1 = new Integer(4);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer1);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[4, 4, 4, 4, 4]", string0);
      
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[null, q*!NxA, q*!NxA, null]", "", "The array of keys must not be null");
      boolean boolean0 = multiKey2.equals(multiKey3);
      assertFalse(boolean0);
      
      boolean boolean1 = multiKey2.equals("The array of keys must not be null");
      assertFalse(boolean1);
      
      multiKey3.size();
      assertFalse(multiKey3.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = null;
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "9 *SXKT.v?D^<0eH";
      String string1 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("9 *SXKT.v?D^<0eH", "9 *SXKT.v?D^<0eH", "");
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 8);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0);
      multiKeyArray0[0] = multiKey1;
      String string2 = "";
      String string3 = "";
      MultiKey<String> multiKey2 = new MultiKey<String>("", "");
      int int0 = 0;
      multiKey2.getKey(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey0, multiKey0, object0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>("", "", multiKey3);
      multiKeyArray0[1] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>("9 *SXKT.v?D^<0eH", "", "9 *SXKT.v?D^<0eH");
      int int1 = (-1174);
      // Undeclared exception!
      try { 
        multiKey5.getKey((-1174));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1174
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer((-2440));
      Integer integer1 = new Integer((-2440));
      Integer integer2 = new Integer((-2440));
      Integer integer3 = new Integer((-294));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2, integer3);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.equals(integer3);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.equals(integer1);
      multiKey2.toString();
      multiKey1.equals(integer2);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      multiKey1.toString();
      multiKey3.toString();
      int int0 = multiKey3.size();
      multiKey3.getKeys();
      Integer integer4 = multiKey1.getKey(0);
      assertFalse(integer4.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "1D,sqxM";
      stringArray0[2] = "TgM$X4,";
      stringArray0[3] = "";
      stringArray0[4] = "ZN}-|!";
      stringArray0[5] = "h!Eiby}Z";
      stringArray0[6] = "qOk`";
      stringArray0[7] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("");
      multiKey0.getKeys();
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.getKeys();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey2.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", (String) null, "");
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      int int0 = 3193;
      // Undeclared exception!
      try { 
        multiKey0.getKey(3193);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3193
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(610);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer2, integer0);
      multiKey0.toString();
      multiKey0.toString();
      Object object0 = multiKey0.getKey(0);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "%", "", "");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, multiKey0, multiKey1);
      multiKey1.toString();
      multiKey1.toString();
      int int0 = multiKey2.size();
      multiKey2.size();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 9);
      multiKeyArray0[0] = multiKey2;
      multiKeyArray0[1] = multiKey2;
      multiKeyArray0[2] = multiKey2;
      multiKeyArray0[3] = multiKey2;
      multiKeyArray0[4] = multiKey2;
      multiKeyArray0[5] = multiKey2;
      multiKeyArray0[6] = multiKey2;
      multiKeyArray0[7] = multiKey2;
      multiKeyArray0[8] = multiKey2;
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      int int1 = multiKey3.size();
      assertFalse(int1 == int0);
  }
}
