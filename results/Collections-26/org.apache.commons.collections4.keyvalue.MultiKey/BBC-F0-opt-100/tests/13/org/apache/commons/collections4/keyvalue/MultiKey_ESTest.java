/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:25:06 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0, object0, object0);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 6);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      multiKeyArray0[5] = multiKey0;
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      MultiKey<Object>[] multiKeyArray1 = multiKey1.getKeys();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray1);
      Object object1 = multiKey2.getKey(4);
      boolean boolean0 = multiKey0.equals(object1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      Integer integer0 = new Integer(5);
      Integer integer1 = new Integer(5);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, (Integer) null, integer0, integer1, integer2);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.getKey(0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "MultiKey[null, null, 5, 5, 0]";
      objectArray0[1] = (Object) multiKey1;
      objectArray0[2] = (Object) "MultiKey[null, null, 5, 5, 0]";
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, true);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[null, null, 5, 5, 0], MultiKey[null, null, 5, 5, 0], MultiKey[null, null, 5, 5, 0], null, null, null]", string0);
      
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey4.equals(multiKey3);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-3245));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3245));
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>("T+", (String) null, (String) null, "T+", "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<String> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      Integer integer0 = new Integer((-2685));
      Integer integer1 = new Integer((-2685));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>(">SWb", ">SWb", ">SWb", ">SWb", ">SWb");
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.toString();
      multiKey0.size();
      multiKey0.getKeys();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.getKeys();
      // Undeclared exception!
      try { 
        multiKey0.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0);
      multiKey0.toString();
      multiKey0.hashCode();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "MultiKey[-1, 0, -1]";
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.getKeys();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(stringArray0);
      multiKey2.toString();
      multiKey2.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object) null, "MultiKey[-1, 0, -1]", multiKey2, "MultiKey[-1, 0, -1]");
      multiKey2.toString();
      multiKey3.toString();
      multiKey3.toString();
      multiKey2.equals(multiKey3);
      multiKey3.getKey(0);
      multiKey0.toString();
      multiKey0.size();
      multiKey1.getKeys();
      multiKey1.equals("MultiKey[, MultiKey[-1, 0, -1]]");
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey3.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-3245));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3245));
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      int int0 = multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>("T+", (String) null, (String) null, "T+", "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[T+, null, null, T+, ]", string0);
      
      boolean boolean0 = multiKey1.equals(integerArray0[0]);
      assertFalse(boolean0);
      
      String string1 = multiKey1.getKey(2);
      assertNull(string1);
      
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      int int1 = multiKey2.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = false;
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", integer0, integer0, "");
      multiKey0.toString();
      multiKey0.size();
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      integerArray0[8] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      multiKey1.size();
      Integer[] integerArray1 = multiKey1.getKeys();
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("vJ=54b/$Z[7oA~", "vJ=54b/$Z[7oA~", "vJ=54b/$Z[7oA~");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("nSa(");
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.hashCode();
      int int0 = (-148);
      Integer integer0 = new Integer((-148));
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, "vJ=54b/$Z[7oA~", integer0, "nSa(");
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey1);
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey((-148));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -148
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 9);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "yM";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0);
      multiKeyArray0[0] = multiKey1;
      Integer integer0 = new Integer(512);
      MultiKey<String> multiKey2 = new MultiKey<String>("0^_LhU", "yM", "0^_LhU", "org.apache.commons.collections4.keyvalue.MultiKey", "MultiKey");
      Integer integer1 = new Integer((-969));
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey0, integer0, multiKey2, multiKey1, integer1);
      multiKeyArray0[1] = multiKey3;
      Object object0 = new Object();
      Integer integer2 = new Integer(512);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer2, integer2, integer0, integer1);
      Object object1 = multiKey4.getKey(1);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey2, object0, object1);
      multiKeyArray0[2] = multiKey5;
      MultiKey<Object> multiKey6 = new MultiKey<Object>("0^_LhU", multiKey3, multiKey3);
      multiKeyArray0[3] = multiKey6;
      MultiKey<Object> multiKey7 = new MultiKey<Object>(multiKey5, integer0);
      multiKeyArray0[4] = multiKey7;
      MultiKey<Object> multiKey8 = new MultiKey<Object>("MultiKey", multiKey7);
      multiKeyArray0[5] = multiKey8;
      Integer integer3 = new Integer((-2870));
      Integer integer4 = new Integer(512);
      MultiKey<Object> multiKey9 = new MultiKey<Object>("MultiKey", integer3, integer4);
      multiKeyArray0[6] = multiKey9;
      Object object2 = new Object();
      MultiKey<Object> multiKey10 = new MultiKey<Object>(object2, multiKey0, multiKey2, multiKey3);
      multiKeyArray0[7] = multiKey10;
      MultiKey<String> multiKey11 = new MultiKey<String>("VgTyb4", (String) null, "MultiKey");
      multiKey11.getKey(0);
      Integer integer5 = new Integer((-2870));
      MultiKey<Object> multiKey12 = new MultiKey<Object>("VgTyb4", integer3, integer5, integer2);
      multiKeyArray0[8] = multiKey12;
      MultiKey<MultiKey<Object>> multiKey13 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      int int0 = 0;
      MultiKey<Object> multiKey14 = multiKey13.getKey(0);
      objectArray0[0] = (Object) multiKey14;
      Object object3 = new Object();
      objectArray0[1] = object3;
      Object object4 = new Object();
      objectArray0[2] = object4;
      Object object5 = new Object();
      MultiKey<Object> multiKey15 = new MultiKey<Object>(object5, multiKey5);
      // Undeclared exception!
      try { 
        multiKey15.getKey((-969));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -969
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1622);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, true);
      multiKey1.toString();
      String[] stringArray0 = new String[3];
      multiKey1.toString();
      stringArray0[0] = "MultiKey[1622]";
      stringArray0[1] = "MultiKey[1622]";
      stringArray0[2] = "MultiKey[1622]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      // Undeclared exception!
      try { 
        multiKey3.getKey((int) integerArray0[0]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1622
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
