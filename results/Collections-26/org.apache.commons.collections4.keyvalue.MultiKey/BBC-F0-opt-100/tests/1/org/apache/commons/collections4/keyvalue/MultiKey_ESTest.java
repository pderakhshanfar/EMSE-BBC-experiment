/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:03:14 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "bneC~,@<dIs@HF", "org.apache.commons.collections4.keyvalue.MultiKey", "bneC~,@<dIs@HF", "bneC~,@<dIs@HF");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) "bneC~,@<dIs@HF";
      objectArray0[2] = (Object) "bneC~,@<dIs@HF";
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, bneC~,@<dIs@HF, org.apache.commons.collections4.keyvalue.MultiKey, bneC~,@<dIs@HF, bneC~,@<dIs@HF]", string0);
      
      objectArray0[3] = (Object) "bneC~,@<dIs@HF";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "bneC~,@<dIs@HF";
      objectArray0[6] = (Object) "org.apache.commons.collections4.keyvalue.MultiKey";
      objectArray0[7] = (Object) "org.apache.commons.collections4.keyvalue.MultiKey";
      objectArray0[8] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      Object object1 = multiKey1.getKey(0);
      boolean boolean0 = multiKey0.equals(object1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = ",";
      stringArray0[2] = "X<k<Ki Tk&AP ";
      stringArray0[3] = ",";
      stringArray0[4] = ",";
      stringArray0[5] = ",";
      stringArray0[6] = ",";
      stringArray0[7] = ",";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, ,, X<k<Ki Tk&AP , ,, ,, ,, ,, ,]", string0);
      
      boolean boolean0 = multiKey0.equals("");
      assertFalse(boolean0);
      
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      boolean boolean1 = multiKey1.equals(multiKey0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(8);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(7);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(7);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      multiKey1.getKeys();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integerArray0);
      multiKey2.equals(integer2);
      multiKey2.toString();
      multiKey0.toString();
      multiKey1.hashCode();
      multiKey2.toString();
      Object[] objectArray0 = multiKey2.getKeys();
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Object object0 = new Object();
      boolean boolean0 = multiKey0.equals(object0);
      assertFalse(boolean0);
      
      multiKey0.size();
      multiKey0.toString();
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null, object1);
      multiKey1.toString();
      multiKey1.getKey(0);
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[]", "", "MultiKey[]", "");
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[], , MultiKey[], ]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(2600);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null, (Integer) null, integer0);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0);
      multiKey0.toString();
      multiKey0.toString();
      int int0 = 1;
      multiKey0.getKey(1);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 5);
      String string0 = "";
      String string1 = "";
      MultiKey<String> multiKey2 = new MultiKey<String>("", "MultiKey[null, null, null, null, 2600]", "", "}(0h-WepS0(l");
      multiKeyArray0[0] = multiKey2;
      MultiKey<String> multiKey3 = null;
      try {
        multiKey3 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[]", string0);
      
      Integer integer0 = new Integer((-580));
      Integer integer1 = new Integer((-580));
      Integer integer2 = new Integer((-580));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer0, integer0, integer2);
      boolean boolean0 = multiKey1.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("bf-i[Ed:jFLfj", "bf-i[Ed:jFLfj", "Y");
      assertEquals(3, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "[", "[", "[", "u%*m!.a=z,EaYL#^&");
      multiKey0.size();
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(2442);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      Object object0 = multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integerArray0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, "", multiKey2, "u%*m!.a=z,EaYL#^&");
      // Undeclared exception!
      try { 
        multiKey3.getKey(779);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 779
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "<(L[V[A0PRM.", "", "WF@*I m<@", "");
      multiKey0.toString();
      multiKey0.toString();
      int int0 = 0;
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      multiKey0.toString();
      boolean boolean0 = false;
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", object0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.size();
      multiKey1.hashCode();
      Integer integer0 = new Integer(679);
      Integer integer1 = new Integer(2);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer1);
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.getKey(2);
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey3.size();
      multiKey3.getKeys();
      multiKey2.equals(multiKey1);
      multiKey1.size();
      // Undeclared exception!
      try { 
        multiKey1.getKey(2331);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2331
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "5Wi>k-Y4xCx%h~eg";
      stringArray0[1] = "MultiKey";
      stringArray0[2] = "";
      stringArray0[3] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[4] = "CDU2GvB+-[NM%sXtX";
      stringArray0[5] = "";
      stringArray0[6] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, false);
      int int0 = multiKey1.size();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      int int0 = 2076;
      Integer integer0 = new Integer(2076);
      Integer integer1 = new Integer(2076);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0, integer0, integer1, integer0);
      // Undeclared exception!
      try { 
        multiKey0.getKey(2076);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2076
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      String[] stringArray0 = new String[7];
      String string0 = "{Kfcow ^$B#^nO.m\\d?";
      stringArray0[0] = "{Kfcow ^$B#^nO.md?";
      stringArray0[1] = "k0<<p~OarOu)N#Zed";
      stringArray0[2] = "";
      stringArray0[3] = "n)-Qv";
      stringArray0[4] = "E/L0<1=~wr#K-xs(|^";
      stringArray0[5] = ";o0qV?FZvdeV=U";
      String string1 = "";
      stringArray0[6] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      int int0 = (-2163);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-2163));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2163
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      int int0 = 1;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1902);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0);
      // Undeclared exception!
      try { 
        multiKey1.getKey((int) integerArray0[4]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1902
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Integer[] integerArray0 = new Integer[9];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(1);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int0);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(0);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      Integer integer9 = multiKey0.getKey(5);
      multiKey0.toString();
      objectArray0[0] = (Object) integer9;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      Object[] objectArray1 = multiKey1.getKeys();
      assertNotSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, multiKey0);
      assertEquals(2, multiKey1.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiKey<MultiKey<Object>> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
