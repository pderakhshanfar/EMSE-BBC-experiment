/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:46:27 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("79tJWL1'j=;=K", object0, object0);
      multiKey0.equals(multiKey0);
      multiKey0.size();
      multiKey0.getKeys();
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(3);
      Integer integer2 = new Integer((-1));
      Integer integer3 = new Integer(3);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer2, integer2, integer2, integer3);
      Integer integer4 = new Integer(3);
      Integer integer5 = new Integer(1210);
      Integer integer6 = new Integer((-1));
      Integer integer7 = new Integer(3);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer5, integer6, integer3, integer7, integer4);
      Integer integer8 = new Integer(3395);
      Integer integer9 = new Integer(920);
      Integer integer10 = new Integer((-1));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer9, integer10, integer0);
      Integer[] integerArray0 = new Integer[4];
      integerArray0[2] = integer5;
      Integer integer11 = new Integer((-413));
      multiKey3.equals((Object) null);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 1);
      multiKeyArray0[0] = multiKey0;
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      // Undeclared exception!
      try { 
        multiKey4.getKey(5065);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5065
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("79tJWL1'j=;=K", object0, object0);
      multiKey0.equals((Object) null);
      multiKey0.size();
      multiKey0.getKeys();
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(3);
      Integer integer2 = new Integer((-1));
      Integer integer3 = new Integer(3);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer2, integer2, integer2, integer3);
      Integer integer4 = new Integer(3);
      Integer integer5 = new Integer(1210);
      Integer integer6 = new Integer((-1));
      Integer integer7 = new Integer(3);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer5, integer6, integer3, integer7, integer4);
      Integer integer8 = new Integer(3395);
      Integer integer9 = new Integer(920);
      Integer integer10 = new Integer((-1));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer9, integer10, integer0);
      Integer[] integerArray0 = new Integer[4];
      integerArray0[2] = integer5;
      Integer integer11 = new Integer((-413));
      integerArray0[1] = integer11;
      integerArray0[2] = integer8;
      integerArray0[3] = integer5;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer1, integer4);
      MultiKey<MultiKey<Integer>> multiKey6 = null;
      try {
        multiKey6 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      boolean boolean0 = multiKey0.equals((Object) null);
      assertFalse(boolean0);
      
      int int0 = multiKey0.size();
      multiKey0.getKeys();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 5);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer1, integer0);
      multiKeyArray0[0] = multiKey1;
      Integer integer2 = new Integer((-678));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer1, integer0, integer2, integer2);
      multiKeyArray0[1] = multiKey2;
      Integer integer3 = new Integer(3395);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer2, integer1, integer3);
      multiKeyArray0[2] = multiKey3;
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      multiKeyArray0[3] = multiKey4;
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer0, (Integer) null);
      multiKeyArray0[4] = multiKey5;
      MultiKey<MultiKey<Integer>> multiKey6 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, false);
      int int1 = multiKey6.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.toString();
      multiKey0.getKey(1);
      objectArray0[0] = null;
      int int0 = 1102;
      // Undeclared exception!
      try { 
        multiKey0.getKey(1102);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1102
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.getKeys();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "%fdVDfJCn0E";
      stringArray0[1] = "org.apache.commons.collections4.keyvalue.MultiKey";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.getKey(1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "%fdVDfJCn0E");
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, "%fdVDfJCn0E");
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey2, multiKey2, multiKey3, multiKey2);
      MultiKey<Object> multiKey5 = multiKey4.getKey(1);
      assertNotSame(multiKey5, multiKey3);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.toString();
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, integer2);
      multiKey0.toString();
      Object object0 = multiKey1.getKey(0);
      Integer integer3 = new Integer(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, object0, integer3);
      multiKey2.toString();
      assertTrue(multiKey1.equals((Object)multiKey0));
      
      multiKey2.equals(integer1);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[0, 0]", "", "", "");
      multiKey3.toString();
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey2);
      multiKey4.toString();
      multiKey4.hashCode();
      multiKey2.hashCode();
      multiKey0.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[0, 0], 0, 0]", string0);
      
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer0, integer0);
      multiKey1.equals(multiKey5);
      multiKey3.equals((Object) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "MultiKey[MultiKey[0, 0], , , ]";
      MultiKey<String> multiKey6 = new MultiKey<String>(stringArray0, false);
      multiKey6.getKey(0);
      assertFalse(multiKey6.equals((Object)multiKey3));
      
      boolean boolean0 = multiKey2.equals("MultiKey[MultiKey[0, 0], , , ]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-2914));
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(1102);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer3);
      multiKey0.hashCode();
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>) null, (MultiKey<Integer>) null);
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "MultiKey");
      multiKey2.toString();
      multiKey0.toString();
      Object[] objectArray0 = new Object[3];
      multiKey0.toString();
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) "MultiKey[null, null]";
      multiKey2.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, true);
      multiKey3.toString();
      multiKey2.hashCode();
      multiKey0.hashCode();
      multiKey2.getKey(0);
      multiKey3.toString();
      int int0 = multiKey0.size();
      int int1 = multiKey2.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, (Object) null, object0, "#|3)^KT+\"w~R.*Ho:");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "#|3)^KT+\"w~R.*Ho:";
      stringArray0[1] = "#|3)^KT+\"w~R.*Ho:";
      stringArray0[2] = "#|3)^KT+\"w~R.*Ho:";
      stringArray0[3] = "#|3)^KT+\"w~R.*Ho:";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.hashCode();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer1);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[0, 0, 0]", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("The array of keys must not be null", "The array of keys must not be null");
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey", "", "MultiKey", "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("79tJWL1'j=;=K", "79tJWL1'j=;=K", "79tJWL1'j=;=K", "79tJWL1'j=;=K", "");
      String string0 = multiKey0.getKey(0);
      assertEquals("79tJWL1'j=;=K", string0);
  }
}
