/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:47:10 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 8);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      multiKeyArray0[5] = multiKey0;
      multiKeyArray0[6] = multiKey0;
      multiKeyArray0[7] = multiKey0;
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      Object object0 = multiKey1.getKey(0);
      boolean boolean0 = multiKey0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(2741);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2741);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[1]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[0]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[2]);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(17);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((int) integerArray0[1]);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      MultiKey<String> multiKey1 = new MultiKey<String>(";kL!", (String) null, (String) null);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, integerArray0[2]);
      multiKey2.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[null, 2741]", string0);
      
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integerArray0[2], multiKey1);
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object[]) integerArray0, true);
      multiKey0.equals(multiKey4);
      multiKey3.getKeys();
      assertFalse(multiKey3.equals((Object)multiKey4));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-430));
      MultiKey<String> multiKey0 = new MultiKey<String>("%N:z9/  N", "iU(Tv_lQ.gPCQ`");
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, "iU(Tv_lQ.gPCQ`");
      multiKey1.getKey(0);
      Object object0 = new Object();
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, object0, integer1, "iU(Tv_lQ.gPCQ`", integer0);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-430));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -430
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("=XHs%|?@rUC0Jw]j", "", "", "", "");
      multiKey0.toString();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      int int0 = 0;
      // Undeclared exception!
      try { 
        multiKey1.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.toString();
      int int0 = multiKey0.size();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey[]", "MultiKey[]", object0);
      multiKey1.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[]", string0);
      
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.equals("@&g1Mf(5b>h");
      boolean boolean0 = multiKey0.equals((Object) null);
      assertFalse(boolean0);
      
      int int1 = multiKey0.hashCode();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(1631);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(550);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, "E2$usG+)]7@Zq", "The array of keys must not be null", "");
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, (Object) null, (Object) null, multiKey0);
      multiKey1.size();
      // Undeclared exception!
      try { 
        multiKey1.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(5);
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0);
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Integer integer0 = new Integer(1103);
      int int0 = (-84);
      Integer integer1 = new Integer((-84));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer1);
      Object object0 = multiKey0.getKey(0);
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(2741);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
      multiKey0.toString();
      boolean boolean0 = multiKey0.equals(integer0);
      assertFalse(boolean0);
      
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "");
      multiKey1.size();
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      integerArray0[8] = integer0;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[2741, 2741, 2741, 2741, 2741, 2741, 2741, 2741, 2741]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      int int1 = 3;
      Integer integer1 = new Integer(3);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(3);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int1);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      Object object0 = multiKey1.getKey(int0);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, multiKey0, multiKey0, integer2);
      multiKey2.getKeys();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "MultiKey[MultiKey[0, 3, 3, 3, 0], MultiKey[0, 3, 3, 3, 0]]";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      multiKey3.hashCode();
      multiKey2.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[0, 3, 3, 3, 0], MultiKey[0, 3, 3, 3, 0], MultiKey[0, 3, 3, 3, 0], 3]", string0);
      
      multiKey2.getKey(0);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey2);
      multiKey4.hashCode();
      multiKey2.getKeys();
      multiKey2.getKey(int0);
      int int2 = multiKey0.hashCode();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      boolean boolean0 = multiKey2.equals(multiKey4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "YogDG[9.qx>'";
      stringArray0[1] = "\"Q29)>1d-_!";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "y";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[YogDG[9.qx>', \"Q29)>1d-_!, , , y]", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<String> multiKey0 = new MultiKey<String>("", (String) null);
      multiKey0.toString();
      int int0 = 0;
      multiKey0.getKey(0);
      objectArray0[1] = (Object) "";
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, null]", string0);
      
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertFalse(boolean0);
      
      multiKey1.toString();
      multiKey1.hashCode();
      int int1 = multiKey1.hashCode();
      assertFalse(int1 == int0);
      
      multiKey1.getKeys();
      multiKey1.getKeys();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      Integer integer5 = multiKey2.getKey(0);
      assertEquals(1, (int)integer5);
  }
}
