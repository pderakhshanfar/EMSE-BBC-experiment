/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:49:19 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 1);
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "");
      multiKeyArray0[0] = multiKey0;
      multiKey0.toString();
      boolean boolean0 = true;
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      multiKey1.toString();
      multiKey1.size();
      multiKey1.toString();
      Integer integer0 = new Integer(1);
      multiKey1.toString();
      Integer integer1 = new Integer(13);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer1);
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, object0);
      multiKey2.toString();
      multiKey3.equals(multiKey1);
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey2, multiKey2, multiKey2);
      multiKey4.size();
      multiKey0.size();
      multiKey0.equals("MultiKey[MultiKey[null, ]]");
      multiKey0.size();
      multiKey3.size();
      multiKey3.toString();
      multiKey0.equals(multiKey0);
      MultiKey<Object>[] multiKeyArray1 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 8);
      Integer integer2 = new Integer((-1830));
      Integer integer3 = new Integer(2);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>((Integer) null, integer2, integer0, integer3, integer3);
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      Integer integer4 = new Integer((-1830));
      integerArray0[2] = integer4;
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integerArray0);
      // Undeclared exception!
      try { 
        multiKey6.getKey(8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Integer>> multiKey0 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "MultiKey[]";
      stringArray0[1] = "MultiKey[]";
      multiKey0.toString();
      stringArray0[2] = "MultiKey[]";
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey1.toString();
      multiKey1.getKeys();
      // Undeclared exception!
      try { 
        multiKey0.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("ecH#*%vS>'cBy}:*", "ecH#*%vS>'cBy}:*", "r5nkfgLnaxw8U>-!@gO", (String) null);
      multiKey0.toString();
      multiKey0.toString();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "ecH#*%vS>'cBy}:*";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "ecH#*%vS>'cBy}:*";
      objectArray0[4] = (Object) "r5nkfgLnaxw8U>-!@gO";
      objectArray0[5] = (Object) "ecH#*%vS>'cBy}:*";
      objectArray0[6] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKey(0);
      multiKey1.getKey(0);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      MultiKey<String> multiKey0 = new MultiKey<String>("p<`CSwLF]{wsQxO", "h/;[Vktf~HL$:vU", "The array of keys must not be null", "The array of keys must not be null");
      multiKey0.getKey(0);
      multiKey0.toString();
      objectArray0[2] = (Object) "p<`CSwLF]{wsQxO";
      multiKey0.getKey(0);
      multiKey0.toString();
      objectArray0[3] = (Object) "p<`CSwLF]{wsQxO";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      String string0 = "I{[-~aFI.c'ML";
      MultiKey<String> multiKey3 = new MultiKey<String>("", "I{[-~aFI.c'ML");
      multiKey3.toString();
      multiKey0.equals(multiKey3);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1761));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1761
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0);
      multiKey0.toString();
      multiKey0.getKey(0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "MultiKey[java.lang.Object@40ff5120, java.lang.Object@40ff5120, java.lang.Object@40ff5120]";
      stringArray0[1] = "MultiKey[java.lang.Object@40ff5120, java.lang.Object@40ff5120, java.lang.Object@40ff5120]";
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.toString();
      Object object1 = new Object();
      multiKey1.equals(object1);
      multiKey0.toString();
      multiKey0.getKeys();
      MultiKey<MultiKey<String>> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      multiKey0.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey[]", "MultiKey[]", object0);
      multiKey1.toString();
      multiKey1.getKey(0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.equals("");
      multiKey0.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("{oeH*_WCc^,>7CPG%)", "MultiKey[]", "");
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.getKey(0);
      multiKey0.toString();
      multiKey0.equals((Object) null);
      multiKey2.getKey(0);
      // Undeclared exception!
      try { 
        multiKey1.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 9);
      Integer integer0 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKeyArray0[0] = multiKey0;
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(4);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, integer2, integer0, integer2);
      multiKeyArray0[1] = multiKey1;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer2, integer0, integer2);
      multiKeyArray0[2] = multiKey2;
      Integer integer3 = new Integer(1);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer2, integer2, integer3);
      multiKeyArray0[3] = multiKey3;
      Integer integer4 = new Integer(0);
      Integer integer5 = new Integer(1);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer1, integer4, integer5, integer0);
      multiKeyArray0[4] = multiKey4;
      MultiKey<Integer> multiKey5 = null;
      try {
        multiKey5 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "0I", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      Integer integer0 = new Integer(5);
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "dFDpO$H_vx>~1'?W'", "The array of keys must not be null", (String) null);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      int int0 = 2381;
      // Undeclared exception!
      try { 
        multiKey2.getKey(2381);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2381
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      multiKey0.toString();
      multiKey0.equals("");
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "VI#b*wx!>[o", "", "", "93g9qN3z#pf ");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey1);
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey1.equals("93g9qN3z#pf ");
      MultiKey<Object> multiKey3 = new MultiKey<Object>("MultiKey[, , ]", multiKey2, (Object) null, (Object) null);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[, , ], MultiKey[MultiKey[, , ], MultiKey[, , ], MultiKey[, VI#b*wx!>[o, , , 93g9qN3z#pf ]], null, null]", string0);
      
      multiKey3.size();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(4);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(4);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(3577);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      boolean boolean0 = multiKey4.equals("MultiKey[MultiKey[, , ], MultiKey[MultiKey[, , ], MultiKey[, , ], MultiKey[, VI#b*wx!>[o, , , 93g9qN3z#pf ]], null, null]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      int int0 = 943;
      Integer integer0 = new Integer(943);
      Integer integer1 = new Integer(943);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, (Integer) null);
      // Undeclared exception!
      try { 
        multiKey0.getKey(943);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 943
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("s=k$uRI6\u0003et`Cm61", "Rib]hAt?`X%yrC", "Rib]hAt?`X%yrC", "Rib]hAt?`X%yrC", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
