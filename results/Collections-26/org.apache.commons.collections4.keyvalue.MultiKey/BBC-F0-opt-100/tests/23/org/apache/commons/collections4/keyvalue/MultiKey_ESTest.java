/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:39:17 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object1);
      multiKey0.toString();
      multiKey0.getKeys();
      Integer integer0 = new Integer(2274);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(2274);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, (Integer) null, integer2);
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0);
      Object object2 = multiKey2.getKey(0);
      multiKey0.equals(object2);
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[2274, 0, null, 2274]", "", "MultiKey[2274, 0, null, 2274]", "The array of keys must not be null");
      int int0 = multiKey3.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = (-2077);
      Integer integer0 = new Integer((-2077));
      Integer integer1 = new Integer((-2077));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      String string0 = "";
      Object object0 = new Object();
      Object object1 = null;
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = null;
      int int0 = (-1);
      Integer integer1 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer1, integer1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer1);
      MultiKey<Object> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "x]\"P";
      stringArray0[1] = "rmX{{[14gQn|";
      stringArray0[2] = "-hhfk";
      stringArray0[3] = "4pXd1Nx#Wkqqu%tQj";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.size();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, false);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.getKey(0);
      objectArray0[0] = null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "MultiKey";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1);
      MultiKey<String> multiKey3 = multiKey2.getKey(0);
      objectArray0[4] = (Object) multiKey3;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0, false);
      assertFalse(multiKey4.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, object0, "9]}TdGKRKA4nMAV", (Object) null, (Object) null);
      Integer integer0 = new Integer((-1348));
      Integer integer1 = new Integer(1031);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.size();
      multiKey0.toString();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "MultiKey[-1348, -1348, 1031]";
      multiKey0.toString();
      stringArray0[1] = "9]}TdGKRKA4nMAV";
      stringArray0[2] = "9]}TdGKRKA4nMAV";
      stringArray0[3] = "9]}TdGKRKA4nMAV";
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      multiKey2.equals(integer1);
      multiKey0.toString();
      multiKey1.equals(multiKey0);
      multiKey0.toString();
      multiKey2.getKey(0);
      multiKey2.getKey(0);
      multiKey2.getKeys();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 8);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      Integer integer2 = new Integer(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey0, integer2, object0, "MultiKey[-1348, -1348, 1031]", multiKey1);
      multiKeyArray0[4] = multiKey3;
      multiKeyArray0[5] = multiKey0;
      MultiKey<Object> multiKey4 = new MultiKey<Object>("9]}TdGKRKA4nMAV", "MultiKey[null, java.lang.Object@1cfeaf5d, 9]}TdGKRKA4nMAV, null, null]");
      multiKeyArray0[6] = multiKey4;
      multiKeyArray0[7] = multiKey0;
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      // Undeclared exception!
      try { 
        multiKey5.getKey((-2806));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2806
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(677);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer1, integer2);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[0, 0, 0, 0, 677]", string0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) integer1;
      objectArray0[1] = (Object) integer1;
      objectArray0[2] = (Object) integer2;
      objectArray0[3] = (Object) "MultiKey[0, 0, 0, 0, 677]";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      boolean boolean0 = multiKey1.equals(objectArray0[0]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.toString();
      multiKey0.getKeys();
      Integer integer0 = new Integer(1);
      int int0 = 0;
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1);
      multiKey1.toString();
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.hashCode();
      multiKey0.size();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0);
      MultiKey<String> multiKey4 = new MultiKey<String>("MultiKey[]", "MultiKey[]");
      // Undeclared exception!
      try { 
        multiKey4.getKey(2486);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2486
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      multiKey0.getKeys();
      MultiKey<String> multiKey1 = new MultiKey<String>("", ".UFqi;~0n;fc<Gi", (String) null, (String) null, "");
      multiKey1.toString();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(901);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 901
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer((-1931));
      Integer integer1 = new Integer((-1931));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1931));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1931
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "MultiKey";
      stringArray0[1] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-1));
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      Object object0 = multiKey0.getKey(int0);
      multiKey0.toString();
      Integer integer6 = new Integer(558);
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object1, int0);
      Object object2 = multiKey1.getKey(int0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, integer6, integer2, object2, int0);
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey(558);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 558
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-1611));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-420));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-420));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[2]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(1);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(1);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(1230);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      assertEquals(8, multiKey0.size());
  }
}
