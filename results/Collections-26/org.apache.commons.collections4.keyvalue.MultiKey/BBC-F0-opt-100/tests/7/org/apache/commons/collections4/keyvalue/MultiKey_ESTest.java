/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:04:25 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 5);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKeyArray0);
      multiKey1.equals(multiKey2);
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "'SqHoy}z[-3Z6e", "", "'SqHoy}z[-3Z6e");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "", multiKey0);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey1.getKey(1);
      multiKey1.equals("");
      multiKey1.getKeys();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      int int0 = multiKey2.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, "3,", "");
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-765));
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      multiKey1.equals(integerArray0[0]);
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integerArray0);
      multiKey2.equals(multiKey1);
      int int0 = multiKey2.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.getKeys();
      Integer integer0 = new Integer((-480));
      Integer integer1 = new Integer(1607);
      Integer integer2 = new Integer((-480));
      Integer integer3 = new Integer((-480));
      Integer integer4 = new Integer(616);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2, integer3, integer4);
      multiKey1.size();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "", "The array of keys must not be null");
      multiKey2.toString();
      multiKey2.size();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[, , , The array of keys must not be null]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("rN?/irqS>}c%X9<E.h3", "rN?/irqS>}c%X9<E.h3", "rN?/irqS>}c%X9<E.h3", "rN?/irqS>}c%X9<E.h3", (String) null);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) "rN?/irqS>}c%X9<E.h3";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.hashCode();
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-761));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1520));
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKey2.equals(multiKey1);
      multiKey2.hashCode();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.apache.commons.collections4.keyvalue.MultiKey";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      int int0 = 0;
      multiKey1.getKey(0);
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, true);
      multiKey2.getKeys();
      multiKey0.hashCode();
      multiKey0.size();
      MultiKey<String> multiKey3 = new MultiKey<String>("Mw$!iZ", "Tm|x", "Mw$!iZ", "org.apache.commons.collections4.keyvalue.MultiKey", "");
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey3, multiKey1, multiKey3, multiKey3);
      // Undeclared exception!
      try { 
        multiKey4.getKey(1080);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1080
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null, (String) null);
      multiKey0.toString();
      String string0 = multiKey0.getKey(0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<MultiKey<Object>> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(2898);
      Integer integer1 = new Integer(2898);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer2 = new Integer(1724);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer2, integer1, integer2);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey1.toString();
      multiKey1.hashCode();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "MultiKey[1724, 2898, 1724]";
      stringArray0[1] = "MultiKey[2898, 2898]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      // Undeclared exception!
      try { 
        multiKey2.getKey(1724);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1724
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      int int0 = (-2525);
      Integer integer0 = new Integer((-2525));
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, integer0, integer0, integer0);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey1, multiKey1);
      Object object0 = multiKey2.getKey(0);
      Integer integer2 = new Integer(0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "The array of keys must not be null";
      stringArray0[1] = "oh#Le5Ec=\u0005Dl*'Q";
      stringArray0[2] = "L5n(*`:>=v^z#3Q[XU6";
      stringArray0[3] = "1;)|h0k";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      multiKey3.getKey(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object) null, object0, multiKey2, integer2, "The array of keys must not be null");
      // Undeclared exception!
      try { 
        multiKey4.getKey((-2525));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2525
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("kKbFEdP-@S6=", "kKbFEdP-@S6=");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kKbFEdP-@S6=";
      stringArray0[1] = "kKbFEdP-@S6=";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      multiKey1.toString();
      boolean boolean0 = multiKey0.equals("kKbFEdP-@S6=");
      assertFalse(boolean0);
      
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 4);
      Integer integer0 = new Integer(1133);
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer(1133);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer1, integer2);
      multiKeyArray0[0] = multiKey2;
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0, false);
      multiKeyArray0[1] = multiKey3;
      Integer integer3 = new Integer((-1));
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0[1], integer3);
      multiKeyArray0[2] = multiKey4;
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integerArray0, false);
      multiKeyArray0[3] = multiKey5;
      MultiKey<MultiKey<Integer>> multiKey6 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      String string0 = multiKey6.toString();
      assertEquals("MultiKey[MultiKey[1133, 1133, -1, 1133], MultiKey[1133, 1133, -1, 1133], MultiKey[1133, -1], MultiKey[1133, 1133, -1, 1133]]", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      MultiKey<Object> multiKey0 = new MultiKey<Object>("jO]j", "", "@", "", object1);
      int int0 = (-2673);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-2673));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2673
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "vf^KP-6oTq$", "", "");
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "", "", object0);
      int int0 = multiKey1.size();
      assertEquals(4, int0);
  }
}
