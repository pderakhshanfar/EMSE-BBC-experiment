/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:49:09 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-457));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      Integer integer1 = new Integer((-457));
      Integer integer2 = new Integer((-457));
      Integer integer3 = new Integer((-1139));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, (Integer) null, integer2, integer3);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      int int0 = multiKey2.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("KTcN|sHiMsjT#u4'", "v1s-}UAI333=hl`I;A", "KTcN|sHiMsjT#u4'", "v1s-}UAI333=hl`I;A", "");
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("v1s-}UAI333=hl`I;A", "v1s-}UAI333=hl`I;A");
      multiKey1.getKeys();
      multiKey1.getKeys();
      multiKey1.hashCode();
      multiKey1.size();
      multiKey0.toString();
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer0);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[2, 0, 2]", string0);
      
      MultiKey<String> multiKey3 = new MultiKey<String>("'yF{<9cHW&2<", "C", "MultiKey[KTcN|sHiMsjT#u4', v1s-}UAI333=hl`I;A, KTcN|sHiMsjT#u4', v1s-}UAI333=hl`I;A, ]", "MultiKey[2, 0, 2]");
      MultiKey<String> multiKey4 = new MultiKey<String>("MultiKey[2, 0, 2]", "v1s-}UAI333=hl`I;A");
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey3, multiKey0, multiKey4);
      Object object0 = multiKey5.getKey(0);
      boolean boolean0 = multiKey0.equals(object0);
      assertTrue(boolean0);
      assertFalse(multiKey4.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 310;
      Integer integer0 = new Integer(310);
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "U+&*yriZ#eBg7o'hL: ", "Vq}c2j}");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, multiKey0, integer0);
      String string0 = "p$ ";
      MultiKey<String> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "=7a[j=|b");
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer((-1));
      Integer integer4 = new Integer((-3520));
      Integer integer5 = new Integer(1);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer2, integer3, integer4, integer2, integer5);
      MultiKey<String> multiKey2 = new MultiKey<String>("*JdR[}aIXdAh", "", "", "");
      multiKey2.toString();
      multiKey2.toString();
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer1, (Integer) null, (Integer) null, (Integer) null, (Integer) null);
      multiKey3.getKey(4);
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object) null, integer3);
      multiKey4.toString();
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[null, -1]", string0);
      
      multiKey4.equals((Object) null);
      boolean boolean0 = multiKey4.equals("MultiKey[*JdR[}aIXdAh, , , ]");
      assertFalse(boolean0);
      
      multiKey0.size();
      assertFalse(multiKey0.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      Integer integer0 = new Integer(677);
      boolean boolean0 = multiKey0.equals(integer0);
      assertFalse(boolean0);
      
      multiKey0.toString();
      Integer integer1 = new Integer(1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer1, integer1, multiKey0, integer1, integer0);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      boolean boolean1 = multiKey0.equals(multiKey1);
      assertFalse(boolean1);
      
      multiKey0.getKeys();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "MultiKey[1, 1, MultiKey[], 1, 677]";
      stringArray0[1] = "MultiKey[1, 1, MultiKey[], 1, 677]";
      stringArray0[2] = "MultiKey[]";
      stringArray0[3] = "MultiKey[]";
      stringArray0[4] = "MultiKey[1, 1, MultiKey[], 1, 677]";
      stringArray0[5] = "MultiKey[]";
      stringArray0[6] = "MultiKey[1, 1, MultiKey[], 1, 677]";
      stringArray0[7] = "MultiKey[1, 1, MultiKey[], 1, 677]";
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      multiKey2.hashCode();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-6183));
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      int int0 = multiKey0.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0, object0, object0);
      MultiKey<String> multiKey1 = new MultiKey<String>("#^Y", "The array of keys must not be null", "#^Y");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey1, object0, "The array of keys must not be null", (Object) null);
      multiKey2.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.getKey(0);
      multiKey0.hashCode();
      int int0 = multiKey0.size();
      multiKey0.toString();
      int int1 = multiKey0.hashCode();
      assertFalse(int1 == int0);
      
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(5);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0, integer1);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[0, 0, 5]", string0);
      
      multiKey3.size();
      Integer integer2 = new Integer(552);
      boolean boolean0 = multiKey1.equals(integer2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(5);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, integer0, integer0, (Integer) null);
      multiKey0.toString();
      Integer integer1 = new Integer(5);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer1, integer1);
      multiKey1.equals((Object) null);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 4);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey1;
      multiKeyArray0[3] = multiKey1;
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      multiKey2.equals(multiKey1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "MultiKey[null, null, 5, 5, null]";
      stringArray0[1] = "MultiKey[5, 5]";
      stringArray0[2] = "MultiKey[5, 5]";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>("MultiKey[null, null, 5, 5, null]", multiKey1);
      // Undeclared exception!
      try { 
        multiKey4.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = null;
      MultiKey<String> multiKey0 = new MultiKey<String>("7'$.59&u-i Z`b", "7'$.59&u-i Z`b", "7'$.59&u-i Z`b", "aIc'UHXQ", "e,64haj5");
      multiKey0.toString();
      int int0 = 1269;
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(1269);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1269
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null);
      int int0 = 374;
      // Undeclared exception!
      try { 
        multiKey0.getKey(374);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 374
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-1484));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("KTcN|sHiMsjT#u4'", "v1s-}UAI333=hl`I;A", "KTcN|sHiMsjT#u4'", "v1s-}UAI333=hl`I;A", "");
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("v1s-}UAI333=hl`I;A", "v1s-}UAI333=hl`I;A");
      multiKey1.getKeys();
      multiKey1.getKeys();
      multiKey1.hashCode();
      multiKey1.size();
      multiKey0.toString();
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer0);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[2, 0, 2]", string0);
      
      Integer integer2 = multiKey2.getKey(2);
      assertEquals(2, (int)integer2);
      
      Integer integer3 = new Integer(0);
      boolean boolean0 = multiKey0.equals(integer3);
      assertFalse(boolean0);
  }
}
