/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:05:13 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null]", string0);
      
      boolean boolean0 = multiKey0.equals((Object) null);
      boolean boolean1 = multiKey0.equals(multiKey0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "i;s");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "MultiKey[MultiKey, i;s]";
      stringArray0[1] = "MultiKey[MultiKey, i;s]";
      stringArray0[2] = "MultiKey[MultiKey, i;s]";
      stringArray0[3] = "MultiKey[MultiKey, i;s]";
      stringArray0[4] = "MultiKey[MultiKey, i;s]";
      stringArray0[5] = "MultiKey[MultiKey, i;s]";
      stringArray0[6] = "MultiKey[MultiKey, i;s]";
      stringArray0[7] = "MultiKey[MultiKey, i;s]";
      stringArray0[8] = "MultiKey[MultiKey, i;s]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey0.hashCode();
      MultiKey<String> multiKey2 = new MultiKey<String>((String) null, "MultiKey[MultiKey, i;s]", "MultiKey[MultiKey, i;s]");
      multiKey2.toString();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      multiKey3.size();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer1);
      multiKey4.toString();
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey3, "MultiKey[MultiKey, i;s]", multiKey4);
      // Undeclared exception!
      try { 
        multiKey5.getKey(1435);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1435
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "i;s");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(606);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer2, (Integer) null, integer0, integer2, integer3);
      Integer integer4 = new Integer((-1150));
      Integer integer5 = new Integer((-1150));
      Integer integer6 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer4, (Integer) null, (Integer) null);
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      MultiKey<Integer>[] multiKeyArray1 = multiKey3.getKeys();
      assertFalse(multiKeyArray1.equals((Object)multiKeyArray0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(2891);
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, integer0, object0, "r=&4$?v]_KG!", object1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals(integer0);
      multiKey0.toString();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "MultiKey[java.lang.Object@1d79b05, 2891, java.lang.Object@1d79b05, r=&4$?v]_KG!, java.lang.Object@6449a469]";
      stringArray0[1] = "r=&4$?v]_KG!";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey0.equals("MultiKey[java.lang.Object@1d79b05, 2891, java.lang.Object@1d79b05, r=&4$?v]_KG!, java.lang.Object@6449a469]");
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(2366);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, integer0, integer0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null, multiKey0);
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.size();
      multiKey0.size();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.size();
      multiKey1.equals(multiKey0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "MultiKey[null, null, 2366, 2366]";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      multiKey3.hashCode();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 7);
      multiKeyArray0[0] = multiKey3;
      multiKeyArray0[1] = multiKey3;
      multiKeyArray0[2] = multiKey3;
      multiKeyArray0[3] = multiKey3;
      multiKeyArray0[4] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("MultiKey[null, null, 2366, 2366]", "", "MultiKey[null, null, 2366, 2366]");
      multiKeyArray0[5] = multiKey4;
      multiKey3.toString();
      multiKeyArray0[6] = multiKey3;
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      multiKey5.size();
      multiKey0.toString();
      Object object0 = multiKey1.getKey(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      boolean boolean0 = false;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.toString();
      Object object0 = null;
      MultiKey<MultiKey<Object>> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("1FpX&;bq)8@Sl~7v9m", "Uw#Ujt{?eh2", "1FpX&;bq)8@Sl~7v9m");
      Object object0 = new Object();
      Integer integer0 = new Integer((-2564));
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "Uw#Ujt{?eh2", object0, multiKey0, integer0);
      multiKey1.equals(multiKey0);
      Integer integer1 = new Integer((-3222));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1);
      multiKey2.toString();
      multiKey1.hashCode();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 6);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      MultiKey<String> multiKey3 = new MultiKey<String>("", "Uw#Ujt{?eh2", (String) null, "bYL");
      multiKeyArray0[5] = multiKey3;
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      int int0 = multiKey4.size();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer1);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = (Object) multiKey0;
      objectArray0[6] = (Object) integer1;
      objectArray0[7] = (Object) integer1;
      Object object0 = new Object();
      objectArray0[8] = object0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      MultiKey multiKey2 = (MultiKey)multiKey1.getKey(0);
      assertEquals(4, multiKey2.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Integer[] integerArray0 = new Integer[6];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1833);
      integerArray0[1] = integer1;
      int int1 = 1;
      Integer integer2 = new Integer(1);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int1);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[1]);
      integerArray0[4] = integer4;
      int int2 = 2898;
      Integer integer5 = new Integer(2898);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      // Undeclared exception!
      try { 
        multiKey0.getKey((int) integerArray0[5]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2898
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null]", string0);
      
      multiKey0.equals((Object) null);
      boolean boolean0 = multiKey0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.hashCode();
      Integer integer2 = multiKey1.getKey(1);
      assertEquals(0, (int)integer2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(559);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2303);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[1]);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray0[4], multiKey0);
      // Undeclared exception!
      try { 
        multiKey1.getKey((int) integerArray0[3]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2303
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
