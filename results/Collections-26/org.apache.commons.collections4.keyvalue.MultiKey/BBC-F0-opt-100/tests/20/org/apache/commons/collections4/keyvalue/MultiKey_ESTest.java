/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:43:10 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "The array of keys must not be null", "", "", "The array of keys must not be null");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, The array of keys must not be null, , , The array of keys must not be null]", string0);
      
      int int0 = multiKey1.size();
      Integer integer0 = new Integer(823);
      Object object0 = new Object();
      Integer integer1 = new Integer((-1190));
      Object object1 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, "");
      int int1 = multiKey1.hashCode();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null", "The array of keys must not be null");
      int int0 = 3;
      Integer integer0 = new Integer(3);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey1, multiKey1);
      Integer[] integerArray0 = new Integer[3];
      Integer integer1 = new Integer((-498));
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0, false);
      Object object0 = multiKey3.getKey(0);
      Object[] objectArray0 = new Object[6];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) multiKey2;
      objectArray0[2] = (Object) int0;
      objectArray0[3] = (Object) "The array of keys must not be null";
      objectArray0[4] = (Object) int0;
      objectArray0[5] = (Object) "The array of keys must not be null";
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0);
      multiKey4.getKey(3);
      multiKey4.toString();
      MultiKey<Object> multiKey5 = new MultiKey<Object>(object0, int0, "The array of keys must not be null", multiKey0, "The array of keys must not be null");
      boolean boolean0 = multiKey2.equals(multiKey5);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null, "nnUr6%/2XgE?5");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals(multiKey0);
      multiKey0.size();
      Integer integer0 = new Integer(1578);
      Integer integer1 = new Integer(5);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, (Integer) null);
      multiKey1.size();
      Integer integer2 = new Integer(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer2, integer0);
      multiKey2.toString();
      multiKey2.size();
      Integer integer3 = multiKey1.getKey(2);
      assertNull(integer3);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Integer integer0 = new Integer((-1222));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, integer0, integer0);
      multiKey0.toString();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.getKeys();
      multiKey1.hashCode();
      Integer integer1 = new Integer((-1222));
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, integer1, multiKey1, (Object) null);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.size();
      // Undeclared exception!
      try { 
        multiKey1.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null, "nnUr6%/2XgE?5");
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\"fowqRxj$.1sA";
      stringArray0[1] = "jVz!";
      stringArray0[2] = "I_%A";
      stringArray0[3] = "MultiKey";
      stringArray0[4] = "B\u0007aaK2]K!GF.rVyVOS";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.getKey(4);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, "B\u0007aaK2]K!GF.rVyVOS");
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("B\u0007aaK2]K!GF.rVyVOS", "I_%A", (Object) null, "MultiKey");
      multiKey1.toString();
      Object[] objectArray0 = multiKey1.getKeys();
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(4);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0, integer1, integer2);
      multiKey0.toString();
      multiKey0.toString();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) integer0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.hashCode();
      MultiKey<MultiKey<Object>> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "R:r]6P(Aam'";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "#Y_aEp`1";
      stringArray0[4] = "gGuRr$')3]T";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      Integer integer0 = new Integer((-1298));
      Integer integer1 = new Integer((-1298));
      Integer integer2 = new Integer((-1298));
      Integer integer3 = new Integer((-1298));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1, integer2, integer3);
      boolean boolean0 = multiKey1.equals(integer2);
      assertFalse(boolean0);
      
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[R:r]6P(Aam', , , #Y_aEp`1, gGuRr$')3]T]", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 5);
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", (String) null, (String) null);
      multiKeyArray0[1] = multiKey1;
      String string0 = "";
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", (String) null, "");
      multiKeyArray0[2] = multiKey2;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "rc3Pk|+#vT|STwN=5E";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      multiKeyArray0[3] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("", " as", "rc3Pk|+#vT|STwN=5E");
      multiKeyArray0[4] = multiKey4;
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey5.toString();
      MultiKey<Object> multiKey6 = new MultiKey<Object>((Object[]) stringArray0, false);
      // Undeclared exception!
      try { 
        multiKey6.getKey((-1842));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1842
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("oL", "uc ", "2xPlipi");
      MultiKey<String> multiKey1 = new MultiKey<String>("2xPlipi", "uc ", (String) null, "2xPlipi");
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey1);
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey1.size();
      multiKey0.hashCode();
      Integer integer0 = new Integer(4);
      Integer integer1 = new Integer(4);
      Integer integer2 = new Integer(4);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer1, integer2);
      MultiKey<Object> multiKey4 = new MultiKey<Object>("uc ", "MultiKey[MultiKey[oL, uc , 2xPlipi], MultiKey[oL, uc , 2xPlipi], MultiKey[oL, uc , 2xPlipi], MultiKey[oL, uc , 2xPlipi], MultiKey[2xPlipi, uc , null, 2xPlipi]]", "MultiKey[MultiKey[oL, uc , 2xPlipi], MultiKey[oL, uc , 2xPlipi], MultiKey[oL, uc , 2xPlipi], MultiKey[oL, uc , 2xPlipi], MultiKey[2xPlipi, uc , null, 2xPlipi]]", "2xPlipi", multiKey3);
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[uc , MultiKey[MultiKey[oL, uc , 2xPlipi], MultiKey[oL, uc , 2xPlipi], MultiKey[oL, uc , 2xPlipi], MultiKey[oL, uc , 2xPlipi], MultiKey[2xPlipi, uc , null, 2xPlipi]], MultiKey[MultiKey[oL, uc , 2xPlipi], MultiKey[oL, uc , 2xPlipi], MultiKey[oL, uc , 2xPlipi], MultiKey[oL, uc , 2xPlipi], MultiKey[2xPlipi, uc , null, 2xPlipi]], 2xPlipi, MultiKey[4, 4, 4]]", string0);
  }
}
