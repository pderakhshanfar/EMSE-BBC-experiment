/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:47:39 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(50);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey0.toString();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      String[] stringArray1 = multiKey1.getKeys();
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
      
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, multiKey0, multiKey0, multiKey0, object0);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey2);
      multiKey3.hashCode();
      assertFalse(multiKey2.equals((Object)multiKey0));
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(1885);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-564));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      MultiKey<String> multiKey4 = new MultiKey<String>("{,`", "", "{,`", "QYX*zL$5J^]',", "");
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[{,`, , {,`, QYX*zL$5J^]',, ]", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      Object object2 = multiKey0.getKey(1);
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      boolean boolean0 = true;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      Object object3 = multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, object1, object2, "An8]etF", object3);
      multiKey2.getKey(0);
      objectArray0[1] = null;
      Object object4 = new Object();
      objectArray0[2] = object4;
      Object object5 = new Object();
      objectArray0[3] = object5;
      MultiKey<String> multiKey3 = new MultiKey<String>("An8]etF", "An8]etF", "");
      MultiKey<String> multiKey4 = new MultiKey<String>("An8]etF", "An8]etF", "", "An8]etF");
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKey3, multiKey3, multiKey3, multiKey4, multiKey4);
      // Undeclared exception!
      try { 
        multiKey5.getKey((-894));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -894
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "The array of keys must not be null", (String) null, "''24]", "The array of keys must not be null");
      int int0 = multiKey2.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[1] = "";
      stringArray0[2] = "U&~";
      stringArray0[3] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[4] = "";
      stringArray0[5] = "[;xnJiN=yCdbkz";
      stringArray0[6] = "MultiKey";
      stringArray0[7] = "";
      stringArray0[8] = "S";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      MultiKey<String> multiKey2 = multiKey1.getKey(1);
      objectArray0[0] = (Object) multiKey2;
      // Undeclared exception!
      try { 
        multiKey2.getKey(2963);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2963
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey0.equals(multiKey1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, multiKey1, multiKey0, multiKey1, object0);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey3);
      multiKey4.hashCode();
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(1885);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-564));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integerArray0, true);
      boolean boolean1 = multiKey5.equals(multiKey4);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-768));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer1, integer0);
      // Undeclared exception!
      try { 
        multiKey0.getKey(1954);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1954
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.toString();
      multiKey0.equals("");
      multiKey0.hashCode();
      MultiKey<MultiKey<String>> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 4);
      MultiKey<String> multiKey1 = new MultiKey<String>(":u", ":u", ":u", ":u", "");
      multiKeyArray0[0] = multiKey1;
      String[] stringArray0 = new String[8];
      stringArray0[0] = ":u";
      stringArray0[1] = "";
      stringArray0[2] = ":u";
      stringArray0[3] = "";
      stringArray0[4] = ":u";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = ":u";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKeyArray0[1] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("", (String) null);
      multiKeyArray0[2] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0);
      multiKeyArray0[3] = multiKey4;
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      MultiKey<String>[] multiKeyArray1 = multiKey5.getKeys();
      assertFalse(multiKeyArray1.equals((Object)multiKeyArray0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "%\"", int0, multiKey0);
      int int1 = multiKey1.size();
      assertEquals(4, int1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
