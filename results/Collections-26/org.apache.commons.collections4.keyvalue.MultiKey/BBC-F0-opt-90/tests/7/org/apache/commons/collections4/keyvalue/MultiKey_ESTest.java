/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:04:59 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 7);
      MultiKey<String> multiKey0 = new MultiKey<String>("~`!8QIg<cU4zdB", "L<.-SkahIElP9%L", "");
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("~`!8QIg<cU4zdB", "");
      multiKeyArray0[1] = multiKey1;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "~`!8QIg<cU4zdB";
      stringArray0[1] = "L<.-SkahIElP9%L";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKeyArray0[2] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("", "~`!8QIg<cU4zdB");
      multiKeyArray0[3] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0);
      MultiKey<String> multiKey5 = new MultiKey<String>("", "", "~`!8QIg<cU4zdB", "+v(", "YM,7 HHmo6Zs~dgN7%p");
      multiKeyArray0[5] = multiKey5;
      MultiKey<String> multiKey6 = new MultiKey<String>("YM,7 HHmo6Zs~dgN7%p", "L<.-SkahIElP9%L", "L<.-SkahIElP9%L", "", "");
      multiKey0.toString();
      multiKeyArray0[6] = multiKey6;
      multiKey6.toString();
      MultiKey<MultiKey<String>> multiKey7 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
      assertFalse(multiKey0.equals((Object)multiKey1));
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(118);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey8 = new MultiKey<Integer>(integerArray0);
      String string0 = multiKey8.toString();
      assertEquals("MultiKey[118]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Ef_(v<7cWw=S)U5q";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.size();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      multiKey1.hashCode();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.size();
      String[] stringArray1 = multiKey0.getKeys();
      multiKey2.size();
      MultiKey<String> multiKey3 = new MultiKey<String>((String) null, "", "Ef_(v<7cWw=S)U5q", "", "MO}#o\"LJ hN");
      String string0 = "OGSRR=?";
      multiKey3.toString();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      multiKey4.size();
      MultiKey<Object> multiKey5 = new MultiKey<Object>((Object[]) stringArray1, true);
      Object object0 = null;
      Object object1 = new Object();
      String string1 = "";
      MultiKey<String> multiKey6 = new MultiKey<String>("Ef_(v<7cWw=S)U5q", "MO}#o\"LJ hN", "");
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey6.getKey((-3432));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3432
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, "");
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[0, ], MultiKey[0, ]]", string0);
      
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKey2.getKeys();
      boolean boolean0 = multiKey0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object1, object0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object1, multiKey0, object1);
      multiKey0.equals(multiKey1);
      MultiKey<String> multiKey2 = new MultiKey<String>("", "o4N@H*VQ", "");
      int int0 = multiKey2.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((-2522));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(150);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1965);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(3);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(150);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, false);
      Integer integer7 = new Integer(0);
      multiKey1.equals(integer7);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey0.toString();
      multiKey2.size();
      multiKey2.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>((String) null, "MultiKey[-2522, 150, 1965, -2522, 0, 3, 150]");
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.getKey(0);
      multiKey2.getKeys();
      // Undeclared exception!
      try { 
        multiKey1.getKey((int) integerArray0[6]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 150
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      int int0 = 1180;
      Integer integer0 = new Integer(1180);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, integer0, object0, integer0);
      MultiKey<String> multiKey1 = new MultiKey<String>("PO-{jnE\"3h4n-l4", "org.apache.commons.collections4.keyvalue.MultiKey", "PO-{jnE\"3h4n-l4", "The array of keys must not be null");
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey0.getKeys();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, false);
      // Undeclared exception!
      try { 
        multiKey2.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = false;
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "`8X2v23|%";
      stringArray0[2] = "a3";
      stringArray0[3] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      boolean boolean0 = multiKey1.equals("`8X2v23|%");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("q}", "n3", "n3", "`@", "n3");
      multiKey0.toString();
      multiKey0.toString();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "n3";
      stringArray0[1] = "`@";
      stringArray0[2] = "`@";
      stringArray0[3] = "`@";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      Object object0 = multiKey1.getKey(1);
      assertEquals("`@", object0);
      
      MultiKey<Object> multiKey2 = new MultiKey<Object>("q}", "`@", "q}", "");
      multiKey2.toString();
      Object object1 = new Object();
      boolean boolean0 = multiKey2.equals(object1);
      assertFalse(boolean0);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      int int0 = 0;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[1, 1, 0, 0, 0, 0]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[1] = "The array of keys must not be null";
      stringArray0[2] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(488);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      multiKey1.equals("MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, The array of keys must not be null, ]");
      // Undeclared exception!
      try { 
        multiKey1.getKey(1649);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1649
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "The array of keys must not be null";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "y@w}d\"il#f^STB}/)r", "", (String) null, "The array of keys must not be null");
      multiKey0.hashCode();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1);
      Object object0 = new Object();
      multiKey1.toString();
      multiKey1.toString();
      Object object1 = new Object();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", (Object) null, multiKey1, object0, object1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1302));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1302
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "Fj", "Fj");
      multiKey0.size();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, multiKey0, object0, object0, "MultiKey");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, multiKey0, "MultiKey");
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1348));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1348
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
