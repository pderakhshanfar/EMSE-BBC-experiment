/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:04:22 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-904));
      Integer integer1 = new Integer(3907);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) multiKey0;
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 3);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, false);
      MultiKey<Integer> multiKey2 = multiKey1.getKey(2);
      objectArray0[1] = (Object) multiKey2;
      objectArray0[2] = (Object) integer1;
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[-904, 3907]", string0);
      
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) integer0;
      objectArray0[5] = (Object) multiKey0;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey0.equals(multiKey3);
      boolean boolean1 = multiKey0.equals(objectArray0[1]);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "2}M}q&%au.?";
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.getKey(1);
      objectArray0[1] = null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[java.lang.Object@b960816, null]", (String) null);
      int int0 = 0;
      multiKey2.getKey(0);
      multiKey2.toString();
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey(4630);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4630
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("#PM(AR+", "OVN7O^( 5sW!");
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      multiKey1.size();
      multiKey0.size();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 4);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      Object object0 = multiKey2.getKey(2);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, integer0);
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey3.getKey(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", multiKey0, object0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.getKeys();
      Integer integer0 = new Integer(0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer0);
      multiKey2.toString();
      multiKey1.toString();
      multiKey0.equals(multiKey2);
      multiKey1.hashCode();
      multiKey0.size();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey2.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      int int0 = (-1102);
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1102));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1102
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "u AAv4%}'Hf3Q(";
      stringArray0[2] = "";
      stringArray0[3] = "D4fjT`{&`&{R;]\"t";
      stringArray0[4] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0, object0, multiKey0, "u AAv4%}'Hf3Q(");
      multiKey0.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.toString();
      multiKey0.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      Integer integer0 = new Integer(1);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, multiKey2, integer0);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 8);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey2;
      multiKeyArray0[2] = multiKey2;
      multiKeyArray0[3] = multiKey2;
      multiKeyArray0[4] = multiKey2;
      multiKeyArray0[5] = multiKey0;
      multiKeyArray0[6] = multiKey0;
      multiKeyArray0[7] = multiKey0;
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      multiKey4.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("F\"$=_pJ#n&", "F\"$=_pJ#n&");
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "F\"$=_pJ#n&", integer0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, integer0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.toString();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 2);
      multiKeyArray0[0] = multiKey2;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[1] = multiKey3;
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      MultiKey<Object>[] multiKeyArray1 = multiKey4.getKeys();
      assertEquals(2, multiKeyArray1.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-32));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0, integer0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[-32, -32, -32, -32]", string0);
      
      multiKey0.getKey(0);
      multiKey0.size();
      Object object0 = new Object();
      boolean boolean0 = multiKey0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("L8)jupihBeT<Q/x", "A1;! J#VYI'", "\u00019Ry7;+#70");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "a0 kM1Z%12tJspqias");
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-920));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -920
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 6);
      MultiKey<String> multiKey0 = new MultiKey<String>("[O1ehakCD-4w)D>.f`x", "[O1ehakCD-4w)D>.f`x", "MultiKey", "MultiKey", "[O1ehakCD-4w)D>.f`x");
      multiKeyArray0[0] = multiKey0;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "MultiKey";
      stringArray0[1] = "[O1ehakCD-4w)D>.f`x";
      stringArray0[2] = "[O1ehakCD-4w)D>.f`x";
      stringArray0[3] = "[O1ehakCD-4w)D>.f`x";
      stringArray0[4] = "MultiKey";
      stringArray0[5] = ",h4U&3F_8Lj=+[";
      stringArray0[6] = "MultiKey";
      stringArray0[7] = "MultiKey";
      stringArray0[8] = "[O1ehakCD-4w)D>.f`x";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKeyArray0[1] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      multiKeyArray0[2] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("[O1ehakCD-4w)D>.f`x", "The array of keys must not be null", "[");
      multiKeyArray0[3] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("The array of keys must not be null", "[O1ehakCD-4w)D>.f`x", "The array of keys must not be null");
      multiKeyArray0[4] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray0);
      multiKeyArray0[5] = multiKey5;
      MultiKey<MultiKey<String>> multiKey6 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      assertEquals(6, multiKey6.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.size();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, "", "");
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>("", "", object0);
      // Undeclared exception!
      try { 
        multiKey3.getKey(3489);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3489
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
