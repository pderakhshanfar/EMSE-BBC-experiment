/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:54:04 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, "9TYg2");
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 3);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      Object object0 = multiKey1.getKey(0);
      boolean boolean0 = multiKey0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0, object0);
      multiKey0.equals(object0);
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object1, object1);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.getKeys();
      String string0 = multiKey0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.hashCode();
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-2768));
      int int0 = (-2944);
      Integer integer1 = new Integer((-2944));
      Integer integer2 = new Integer((-2768));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer2);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer1, integer0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.equals(integer2);
      multiKey1.getKeys();
      Object object0 = new Object();
      multiKey0.equals(object0);
      multiKey1.getKeys();
      multiKey1.equals("MultiKey[-2944, -2768]");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 8);
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[-2944, -2768]", "", "");
      multiKeyArray0[0] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[-2768, -2768, -2944, -2768]", "MultiKey[-2768, -2768, -2944, -2768]", "MultiKey[-2768, -2768, -2944, -2768]");
      multiKeyArray0[1] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("5;9bL=2/", "MultiKey[-2768, -2768, -2944, -2768]", "", "");
      multiKeyArray0[2] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>("", "", "");
      multiKeyArray0[3] = multiKey5;
      MultiKey<String> multiKey6 = new MultiKey<String>("MultiKey[-2944, -2768]", "");
      multiKeyArray0[4] = multiKey6;
      MultiKey<String> multiKey7 = new MultiKey<String>("", "", "MultiKey[-2768, -2768, -2944, -2768]", "");
      multiKeyArray0[5] = multiKey7;
      MultiKey<String> multiKey8 = new MultiKey<String>("X!}.r7UfF<NPy8;", "MultiKey[-2768, -2768, -2944, -2768]", "X!}.r7UfF<NPy8;");
      multiKeyArray0[6] = multiKey8;
      MultiKey<String> multiKey9 = null;
      try {
        multiKey9 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, (Object) null, "");
      int int0 = 0;
      multiKey0.getKey(0);
      objectArray0[0] = null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Integer integer0 = new Integer(0);
      multiKey0.toString();
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1, integer1);
      Integer integer2 = multiKey1.getKey(0);
      objectArray0[2] = (Object) integer2;
      MultiKey<String> multiKey2 = new MultiKey<String>("", "4ZZ", "4ZZ", "");
      multiKey2.getKey(0);
      objectArray0[3] = (Object) "";
      multiKey0.getKey(0);
      multiKey2.toString();
      objectArray0[4] = null;
      Object object1 = new Object();
      objectArray0[5] = object1;
      Object object2 = new Object();
      objectArray0[6] = object2;
      // Undeclared exception!
      try { 
        multiKey1.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "j@(C'M_tXt");
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, , , j@(C'M_tXt]", string0);
      
      multiKey0.hashCode();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, (Object) null, "", (Object) null, "MultiKey[, , , j@(C'M_tXt]");
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, "~s8`Z?QRW#dR/=<Ck");
      multiKey0.getKey(0);
      objectArray0[0] = (Object) null;
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, integer0, (Object) null, "~s8`Z?QRW#dR/=<Ck", objectArray0[0]);
      multiKey2.getKey(0);
      objectArray0[1] = null;
      Object object0 = new Object();
      objectArray0[2] = object0;
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 4);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0, integer1);
      multiKeyArray0[0] = multiKey3;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer0);
      multiKeyArray0[1] = multiKey4;
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer1, (Integer) null);
      multiKeyArray0[2] = multiKey5;
      Integer integer2 = new Integer((-575));
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integer2, integer0);
      multiKeyArray0[3] = multiKey6;
      MultiKey<MultiKey<Integer>> multiKey7 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, false);
      // Undeclared exception!
      try { 
        multiKey7.getKey((-575));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -575
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@)Yw& 3A0";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "1}R%?Yd";
      stringArray0[4] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.hashCode();
      Integer integer0 = new Integer(1433);
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integer1, "");
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.toString();
      boolean boolean0 = multiKey2.equals("1}R%?Yd");
      assertFalse(boolean0);
      
      multiKey0.getKeys();
      multiKey1.size();
      multiKey1.toString();
      multiKey1.toString();
      int int0 = multiKey0.size();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[1433, 0, ]", string0);
      
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(3);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer2, (Integer) null, integer0, integer3);
      int int1 = multiKey3.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      int int0 = 2;
      Integer integer0 = new Integer(2);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2146);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[2, 2146]", string0);
      
      boolean boolean0 = multiKey0.equals(int0);
      assertFalse(boolean0);
      
      MultiKey<String> multiKey1 = new MultiKey<String>("g1.", "The array of keys must not be null", "MultiKey[2, 2146]");
      int int1 = multiKey1.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) multiKey1;
      objectArray0[1] = (Object) multiKey1;
      objectArray0[2] = (Object) multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      int int0 = (-1304);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1304));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1304
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
