/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:05:25 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("#'OQU\"S", "", "org.apache.commons.collections4.keyvalue.MultiKey", "", "s/NJjJ YS(");
      MultiKey<String> multiKey1 = new MultiKey<String>("$gs=^", "$gs=^", "");
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey1, multiKey1);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[#'OQU\"S, , org.apache.commons.collections4.keyvalue.MultiKey, , s/NJjJ YS(], MultiKey[#'OQU\"S, , org.apache.commons.collections4.keyvalue.MultiKey, , s/NJjJ YS(], MultiKey[$gs=^, $gs=^, ], MultiKey[$gs=^, $gs=^, ]]", string0);
      
      multiKey2.equals("#'OQU\"S");
      boolean boolean0 = multiKey0.equals(multiKey0);
      boolean boolean1 = multiKey0.equals("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey0.size();
      Integer integer0 = new Integer((-4661));
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer0);
      // Undeclared exception!
      try { 
        multiKey1.getKey(19);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 19
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "");
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      Integer[] integerArray1 = multiKey1.getKeys();
      Integer[] integerArray2 = multiKey1.getKeys();
      assertNotSame(integerArray2, integerArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null, (Object) null);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey1);
      Integer integer0 = new Integer(1);
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, true);
      multiKey3.getKey(1);
      Integer integer1 = new Integer(1);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey1, integer0, (Object) null, integer1);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(1);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer1, integer2, integer1, integer3, integer1);
      boolean boolean0 = multiKey5.equals(integer0);
      assertFalse(boolean0);
      
      multiKey0.size();
      assertFalse(multiKey0.equals((Object)multiKey4));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      multiKey0.equals(multiKey1);
      Integer integer0 = new Integer(8);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, multiKey0, integer0);
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey2, multiKey2);
      multiKey3.hashCode();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-303));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -303
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", (String) null, "");
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "", multiKey0);
      multiKey1.hashCode();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "MultiKey[, null, ]";
      stringArray0[1] = null;
      stringArray0[2] = "AZj";
      stringArray0[3] = "";
      stringArray0[4] = "AZj";
      stringArray0[5] = "";
      stringArray0[6] = null;
      stringArray0[7] = null;
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[, null, ], null, AZj, , AZj, , null, null]", string0);
      
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey0, "AZj", multiKey2, (Object) null);
      boolean boolean0 = multiKey1.equals(multiKey3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", " -CU$$#ibY7]R1N");
      multiKey0.toString();
      multiKey0.toString();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "MultiKey[,  -CU$$#ibY7]R1N]";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "MultiKey[,  -CU$$#ibY7]R1N]";
      objectArray0[3] = (Object) "MultiKey[,  -CU$$#ibY7]R1N]";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) " -CU$$#ibY7]R1N";
      objectArray0[6] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      Object[] objectArray1 = multiKey1.getKeys();
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = null;
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object4, object3, (Object) null, object0, (Object) null);
      Object object5 = multiKey0.getKey(0);
      objectArray0[5] = object5;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      int int0 = multiKey1.size();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "}PZ", "");
      multiKey0.size();
      multiKey0.toString();
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(3);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integer1);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey1.size();
      // Undeclared exception!
      try { 
        multiKey1.getKey(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(1043);
      MultiKey<Object> multiKey0 = new MultiKey<Object>("MultiKey", "MultiKey", integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>("*\"%$@7P2X/YNR\"", "The array of keys must not be null", "*\"%$@7P2X/YNR\"");
      multiKey1.toString();
      Object object0 = new Object();
      boolean boolean0 = multiKey1.equals(object0);
      assertFalse(boolean0);
      
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey2.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[MultiKey, MultiKey, 1043]", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-892));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) integer1;
      objectArray0[1] = (Object) "MultiKey[0, -892]";
      objectArray0[2] = (Object) "MultiKey[0, -892]";
      multiKey0.toString();
      objectArray0[3] = (Object) "MultiKey[0, -892]";
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[0, -892]", "MultiKey[0, -892]", "MultiKey[0, -892]", "MultiKey");
      // Undeclared exception!
      try { 
        multiKey1.getKey((-892));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -892
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
