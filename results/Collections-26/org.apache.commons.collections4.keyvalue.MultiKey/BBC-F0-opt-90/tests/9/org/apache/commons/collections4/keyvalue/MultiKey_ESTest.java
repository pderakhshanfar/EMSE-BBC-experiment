/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:50:16 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "b<;@V7D_)Bw", "");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      MultiKey<String> multiKey2 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey2.getKey(0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(21);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer2, integer3, integer2);
      multiKey3.toString();
      multiKey3.toString();
      String[] stringArray0 = new String[6];
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[3] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[4] = "";
      stringArray0[5] = "b<;@V7D_)Bw";
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0);
      multiKey4.getKey(0);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey2, (Object) null, "", integer2, "");
      MultiKey<Object> multiKey6 = new MultiKey<Object>(multiKey0, "org.apache.commons.collections4.keyvalue.MultiKey", multiKey5);
      MultiKey<String> multiKey7 = new MultiKey<String>("", "", "", "org.apache.commons.collections4.keyvalue.MultiKey");
      assertEquals(4, multiKey7.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(")&h j$jj >! oFr", ",", "%CW!?*-zfg;W,", "The array of keys must not be null", "");
      MultiKey<String> multiKey1 = new MultiKey<String>(")&h j$jj >! oFr", "org.apache.commons.collections4.keyvalue.MultiKey", "");
      MultiKey<String> multiKey2 = new MultiKey<String>("", "d%", "MultiKey", "");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "o";
      stringArray0[1] = "d%";
      stringArray0[2] = "AU'*R)]*~|x";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      multiKey4.size();
      MultiKey<Object> multiKey5 = new MultiKey<Object>((Object[]) stringArray0, true);
      MultiKey<Object> multiKey6 = new MultiKey<Object>(multiKeyArray0);
      Object[] objectArray0 = multiKey6.getKeys();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "}V:`izVOj{#", "");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "}V:`izVOj{#";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) multiKey0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey2.toString();
      boolean boolean0 = multiKey2.equals(objectArray0[3]);
      assertFalse(boolean0);
      
      multiKey2.toString();
      Object object0 = new Object();
      multiKey2.equals(objectArray0[2]);
      multiKey0.size();
      multiKey2.size();
      Integer integer0 = new Integer(327);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("", integer0, "MultiKey[}V:`izVOj{#, , , MultiKey[, , }V:`izVOj{#, ]]");
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0, false);
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey3, multiKey4, multiKey2);
      multiKey5.toString();
      multiKey2.toString();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey6.equals("MultiKey[}V:`izVOj{#, , , MultiKey[, , }V:`izVOj{#, ]]");
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[}V:`izVOj{#, , , MultiKey[, , }V:`izVOj{#, ]]", string0);
      
      multiKey2.getKeys();
      Object object1 = new Object();
      boolean boolean1 = multiKey0.equals(objectArray0[3]);
      Integer integer1 = new Integer(20);
      MultiKey<Integer> multiKey7 = new MultiKey<Integer>(integer1, integer0);
      Integer integer2 = new Integer(20);
      boolean boolean2 = multiKey7.equals(integer2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      multiKey0.size();
      Integer integer0 = new Integer(5);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      multiKey1.size();
      multiKey0.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "MultiKey[java.lang.Object@7a2f1d6c, java.lang.Object@4f00a584, java.lang.Object@38b2b1b9, java.lang.Object@4b20f51b]", "org.apache.commons.collections4.keyvalue.MultiKey", "MultiKey[java.lang.Object@7a2f1d6c, java.lang.Object@4f00a584, java.lang.Object@38b2b1b9, java.lang.Object@4b20f51b]");
      multiKey2.toString();
      multiKey2.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey1.equals(multiKey3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      int int0 = multiKey1.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = null;
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      int int0 = 0;
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, integer0, object0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      MultiKey<Object> multiKey2 = multiKey1.getKey(0);
      objectArray0[1] = (Object) multiKey2;
      multiKey0.toString();
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      Object object3 = new Object();
      objectArray0[4] = object3;
      multiKey2.toString();
      Object object4 = new Object();
      objectArray0[5] = object4;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, false);
      multiKey0.toString();
      Integer integer1 = new Integer(0);
      multiKey3.equals(integer1);
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0, true);
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[0, 0, 0]", string0);
      
      Integer integer2 = new Integer(int0);
      boolean boolean0 = multiKey4.equals(integer2);
      assertFalse(boolean0);
      
      multiKey0.getKeys();
      assertFalse(multiKey0.equals((Object)multiKey3));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = false;
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      multiKey0.size();
      // Undeclared exception!
      try { 
        multiKey0.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("{8a;V)%O(*\">`", "(p_I6xi", "(p_I6xi");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(2);
      Integer integer2 = new Integer(2);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[2, 2, 2]", string0);
      
      multiKey1.hashCode();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) multiKey1;
      objectArray0[2] = (Object) "{8a;V)%O(*\">`";
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = (Object) "MultiKey[2, 2, 2]";
      objectArray0[5] = (Object) "{8a;V)%O(*\">`";
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) integer0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      Integer integer3 = new Integer(0);
      boolean boolean0 = multiKey2.equals(integer3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(2015);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[5]);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(1511);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer((-704));
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      assertEquals(9, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, object0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "6L3Ff<uD|BTlG3@,(", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[java.lang.Object@142a9924, java.lang.Object@142a9924, java.lang.Object@142a9924]", "MultiKey[java.lang.Object@142a9924, java.lang.Object@142a9924, java.lang.Object@142a9924]");
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, "", (Object) null);
      MultiKey<Object> multiKey3 = null;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "MultiKey[java.lang.Object@142a9924, java.lang.Object@142a9924, java.lang.Object@142a9924]";
      objectArray0[1] = (Object) multiKey2;
      objectArray0[2] = (Object) multiKey2;
      objectArray0[3] = (Object) multiKey2;
      objectArray0[4] = (Object) "MultiKey[java.lang.Object@142a9924, java.lang.Object@142a9924, java.lang.Object@142a9924]";
      objectArray0[5] = (Object) "MultiKey[java.lang.Object@142a9924, java.lang.Object@142a9924, java.lang.Object@142a9924]";
      objectArray0[6] = (Object) "MultiKey[java.lang.Object@142a9924, java.lang.Object@142a9924, java.lang.Object@142a9924]";
      // Undeclared exception!
      try { 
        multiKey1.getKey((-2782));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2782
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(917);
      Integer integer1 = new Integer((-761));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      Object object0 = multiKey0.getKey(3);
      Integer integer2 = new Integer(917);
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, integer2, object1);
      multiKey0.toString();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(1799);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1799
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
