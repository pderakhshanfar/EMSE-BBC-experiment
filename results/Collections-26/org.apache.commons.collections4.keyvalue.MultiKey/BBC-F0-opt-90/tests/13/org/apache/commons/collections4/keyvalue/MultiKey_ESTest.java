/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:24:07 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, integer0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "HcD<7]/(]8tdg_";
      stringArray0[1] = "HcD<7]/(]8tdg_";
      stringArray0[2] = "HcD<7]/(]8tdg_";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "HcD<7]/(]8tdg_";
      stringArray0[6] = "HcD<7]/(]8tdg_";
      stringArray0[7] = "HcD<7]/(]8tdg_";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      MultiKey<String> multiKey3 = new MultiKey<String>("HcD<7]/(]8tdg_", "", "org.apache.commons.collections4.keyvalue.MultiKey");
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey2, multiKey3);
      Object object1 = multiKey4.getKey(0);
      Integer integer2 = new Integer(2329);
      Integer integer3 = new Integer((-2910));
      MultiKey<Object> multiKey5 = new MultiKey<Object>("HcD<7]/(]8tdg_", multiKey1, object1, "HcD<7]/(]8tdg_");
      MultiKey<Object> multiKey6 = new MultiKey<Object>(multiKey5, integer0, multiKey3, (Object) null);
      boolean boolean0 = multiKey5.equals(multiKey5);
      assertFalse(multiKey3.equals((Object)multiKey2));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, (Object) null, (Object) null);
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null, (String) null);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "MultiKey", "MultiKey", "MultiKey");
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null);
      MultiKey<Object> multiKey2 = multiKey1.getKey(1);
      assertNull(multiKey2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer1, integer1, integer2);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, integer0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "HcD<7]/(]8tdg_";
      stringArray0[1] = "HcD<7]/(]8tdg_";
      stringArray0[2] = "HcD<7]/(]8tdg_";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "HcD<7]/(]8tdg_";
      stringArray0[6] = "HcD<7]/(]8tdg_";
      stringArray0[7] = "HcD<7]/(]8tdg_";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      MultiKey<String> multiKey3 = new MultiKey<String>("HcD<7]/(]8tdg_", "", "org.apache.commons.collections4.keyvalue.MultiKey");
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey2, multiKey3);
      MultiKey multiKey5 = (MultiKey)multiKey4.getKey(0);
      Integer integer3 = new Integer(2329);
      Integer integer4 = new Integer((-2910));
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>((Integer) null, integer4);
      MultiKey<Object> multiKey7 = new MultiKey<Object>("HcD<7]/(]8tdg_", multiKey6, multiKey5, "HcD<7]/(]8tdg_");
      MultiKey<Object> multiKey8 = new MultiKey<Object>(multiKey7, integer0, multiKey3, (Object) null);
      MultiKey<Object> multiKey9 = new MultiKey<Object>(stringArray0);
      boolean boolean0 = multiKey7.equals(multiKey9);
      assertFalse(boolean0);
      assertEquals(8, multiKey5.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      String[] stringArray1 = multiKey1.getKeys();
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-2364));
      Integer integer1 = new Integer(88);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null, integer1, integer2, integer3);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) integer3;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) integer2;
      objectArray0[3] = (Object) integer1;
      objectArray0[4] = (Object) integer2;
      objectArray0[5] = (Object) null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.hashCode();
      MultiKey<String> multiKey2 = new MultiKey<String>((String) null, (String) null, "4+=\"CL/J>&", "4+=\"CL/J>&", "4+=\"CL/J>&");
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey(1200);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1200
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "H6F", "H6F");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("H6F", "H6F", multiKey0, multiKey0);
      Integer[] integerArray0 = new Integer[9];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      multiKey1.toString();
      Integer integer2 = new Integer((-3778));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      integerArray0[3] = integer3;
      multiKey1.toString();
      Integer integer4 = new Integer((-299));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(4);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(2187);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer((int) integerArray0[4]);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      multiKey2.getKeys();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      multiKey3.toString();
      multiKey3.toString();
      multiKey1.getKeys();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, H6F, H6F]", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(241);
      Integer integer1 = new Integer(241);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      Integer integer2 = new Integer(4);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[2] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, integer1, integer0, integer2, multiKey1);
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey2);
      // Undeclared exception!
      try { 
        multiKey3.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0);
      int int0 = 0;
      MultiKey<Object> multiKey2 = multiKey1.getKey(0);
      objectArray0[2] = (Object) multiKey2;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, false);
      multiKey3.toString();
      int int1 = 543;
      // Undeclared exception!
      try { 
        multiKey3.getKey(543);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 543
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Y4\"FEy.>/N:'-vEpO1l";
      String string0 = "bS!hf";
      stringArray0[1] = "bS!hf";
      stringArray0[2] = "\"s)5\"SPu.`so";
      boolean boolean0 = false;
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      Integer integer0 = new Integer(2683);
      int int0 = 2244;
      Integer integer1 = new Integer(2244);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1);
      // Undeclared exception!
      try { 
        multiKey2.getKey(2683);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2683
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("HcD<7]/(]8tdg_", multiKey0, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      multiKey0.equals(integer0);
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.size();
      multiKey2.size();
      multiKey1.size();
      MultiKey<Integer> multiKey3 = null;
      try {
        multiKey3 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      int int0 = 3;
      // Undeclared exception!
      try { 
        multiKey0.getKey(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-510));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(563);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(501);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      assertEquals(3, multiKey0.size());
  }
}
