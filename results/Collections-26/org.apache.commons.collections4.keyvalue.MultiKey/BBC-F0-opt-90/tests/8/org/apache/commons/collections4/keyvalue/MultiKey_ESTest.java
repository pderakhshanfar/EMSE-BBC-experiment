/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:49:23 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("XdCua0A[5<EP)b[Y3o", "XdCua0A[5<EP)b[Y3o", "U-P4CqA{?r?TU&s=_V+", "", "");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "U-P4CqA{?r?TU&s=_V+";
      objectArray0[1] = (Object) "XdCua0A[5<EP)b[Y3o";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "U-P4CqA{?r?TU&s=_V+";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", multiKey1, objectArray0[2], "U-P4CqA{?r?TU&s=_V+");
      Object object0 = multiKey2.getKey(1);
      boolean boolean0 = multiKey1.equals(object0);
      assertTrue(boolean0);
      assertFalse(multiKey2.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 4);
      int int0 = 2;
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(874);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0, (Integer) null, integer1);
      multiKeyArray0[0] = multiKey0;
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = null;
      integerArray0[2] = integer0;
      integerArray0[3] = integer1;
      integerArray0[4] = integer1;
      integerArray0[5] = integer1;
      integerArray0[6] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKeyArray0[1] = multiKey1;
      Integer integer2 = new Integer((int) integerArray0[3]);
      Integer integer3 = new Integer((-2047));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) int0, integer2, integer3, (Integer) null);
      multiKeyArray0[2] = multiKey2;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>((Integer) int0, integer3);
      assertFalse(multiKey3.equals((Object)multiKey2));
      
      multiKeyArray0[3] = multiKey3;
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, true);
      MultiKey<Object> multiKey5 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      boolean boolean0 = multiKey4.equals(multiKey5);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "i.=L> lc-~s ]";
      stringArray0[1] = "H<~c8XP";
      stringArray0[2] = "_~^0[";
      stringArray0[3] = "{#aVY;3";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "]K$";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.getKeys();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, true);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.toString();
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      Object[] objectArray1 = multiKey1.getKeys();
      assertNotSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      Object object1 = multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object1, object0);
      multiKey1.toString();
      multiKey1.toString();
      Object object2 = multiKey1.getKey(0);
      MultiKey<String> multiKey2 = new MultiKey<String>("Wmu", "JfCk*iRcHW(`~]TRo");
      multiKey0.toString();
      multiKey2.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(2);
      multiKey2.toString();
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0, integer1, integer1);
      multiKey3.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[Wmu, JfCk*iRcHW(`~]TRo]", string0);
      
      multiKey1.toString();
      multiKey1.toString();
      boolean boolean0 = multiKey2.equals(multiKey3);
      assertFalse(boolean0);
      
      boolean boolean1 = multiKey2.equals(object2);
      assertFalse(boolean1);
      
      int int0 = multiKey0.size();
      int int1 = multiKey3.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, integer0, (Object) null, integer0, (Object) null);
      multiKey0.toString();
      multiKey0.getKey(0);
      multiKey0.getKeys();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "/ffB", "dIC:|mkg@WU");
      multiKey1.hashCode();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      Integer integer0 = new Integer((-1297));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, (Integer) null);
      multiKey2.hashCode();
      multiKey0.hashCode();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "m5jx@QT/(K+";
      stringArray0[1] = "";
      stringArray0[2] = "~N@snTet.s<u0";
      stringArray0[3] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0, multiKey0, "", "");
      int int0 = (-2781);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-2781));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2781
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("Q`(:Gf+Ct", "lh/rVg");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("Q`(:Gf+Ct");
      multiKey0.toString();
      Object[] objectArray0 = new Object[8];
      multiKey0.toString();
      objectArray0[0] = (Object) "lh/rVg";
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) "MultiKey[Q`(:Gf+Ct, lh/rVg]";
      objectArray0[4] = (Object) "MultiKey[Q`(:Gf+Ct, lh/rVg]";
      objectArray0[5] = (Object) multiKey0;
      objectArray0[6] = (Object) "Q`(:Gf+Ct";
      objectArray0[7] = (Object) "lh/rVg";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      boolean boolean0 = multiKey1.equals("MultiKey[Q`(:Gf+Ct, lh/rVg]");
      assertFalse(boolean0);
      
      multiKey1.getKeys();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.size();
      multiKey1.getKeys();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[lh/rVg, MultiKey[Q`(:Gf+Ct, lh/rVg], MultiKey[Q`(:Gf+Ct, lh/rVg], MultiKey[Q`(:Gf+Ct, lh/rVg], MultiKey[Q`(:Gf+Ct, lh/rVg], MultiKey[Q`(:Gf+Ct, lh/rVg], Q`(:Gf+Ct, lh/rVg]", string0);
      
      multiKey1.getKey(0);
      multiKey1.size();
      String string1 = multiKey0.getKey(0);
      assertEquals("Q`(:Gf+Ct", string1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", (String) null, "", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      int int0 = (-983);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-983));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -983
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, (MultiKey<String>) null, (MultiKey<String>) null);
      multiKey2.size();
      multiKey2.toString();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(3);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      int int0 = 1;
      Integer integer2 = new Integer(1);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(2140);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      int int1 = multiKey3.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      Object object2 = new Object();
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "i.=L> lc-~s ]";
      stringArray0[1] = "H<~c8XP";
      stringArray0[2] = "_~^0[";
      stringArray0[3] = "{#aVY;3";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "]K$";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      String[] stringArray1 = multiKey0.getKeys();
      assertNotSame(stringArray0, stringArray1);
  }
}
