/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:48:34 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.toString();
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1);
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>("", "The array of keys must not be null");
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey3, multiKey3, multiKey3);
      multiKey3.toString();
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[MultiKey[, The array of keys must not be null], MultiKey[, The array of keys must not be null], MultiKey[, The array of keys must not be null]]", string0);
      
      MultiKey<String> multiKey5 = multiKey4.getKey(2);
      multiKey3.hashCode();
      boolean boolean0 = multiKey3.equals(multiKey5);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      int int0 = 1;
      Integer integer0 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0, integer0);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("Z #G", "AS+BSY=Rj");
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      Object[] objectArray0 = new Object[0];
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey0.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.equals("MultiKey[Z #G, AS+BSY=Rj]");
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.getKey(1);
      multiKey0.toString();
      multiKey2.getKeys();
      multiKey2.size();
      // Undeclared exception!
      try { 
        multiKey2.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "The array of keys must not be null", "The array of keys must not be null");
      multiKey0.size();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", object0);
      Integer integer0 = new Integer(4);
      Integer integer1 = new Integer(0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, (Integer) null, integer0, integer1, (Integer) null);
      multiKey1.equals(multiKey2);
      multiKey2.getKey(4);
      // Undeclared exception!
      try { 
        multiKey2.getKey(554);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 554
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<MultiKey<Object>> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null);
      multiKey0.getKeys();
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-3571));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(3450);
      integerArray0[3] = integer3;
      int int0 = 0;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-769));
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(965);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      Integer[] integerArray1 = multiKey1.getKeys();
      assertEquals(8, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Integer integer0 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer0);
      multiKey0.hashCode();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = " >hD^S'QZ,";
      stringArray0[2] = "#$Z@U_zw(`:c";
      stringArray0[3] = "$Nk/0)G`";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      boolean boolean0 = multiKey1.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Integer integer0 = new Integer((-1530));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null, (String) null);
      multiKey1.toString();
      multiKey1.hashCode();
      MultiKey<Object> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, ]", string0);
      
      Integer integer0 = new Integer(1953);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, "MultiKey[, ]", integer0, "cj^IrwMp-4");
      Object object0 = multiKey1.getKey(0);
      assertEquals(1953, object0);
      
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[, ]", "Cbpbo5e", object0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("MultiKey[, ]", multiKey2);
      boolean boolean0 = multiKey3.equals(multiKey0);
      assertFalse(boolean0);
      
      MultiKey<String> multiKey4 = new MultiKey<String>("MultiKey[, ]", "MultiKey[, ]", "MultiKey[, ]", "MultiKey[, ]");
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey4, multiKey2, multiKey1);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "cj^IrwMp-4";
      objectArray0[2] = (Object) multiKey3;
      MultiKey<Object> multiKey6 = new MultiKey<Object>(objectArray0);
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey7 = new MultiKey<Object>(objectArray0[1], integer1);
      MultiKey<MultiKey<Object>> multiKey8 = new MultiKey<MultiKey<Object>>(multiKey5, multiKey1, multiKey6, multiKey7);
      multiKey8.hashCode();
      assertFalse(multiKey6.equals((Object)multiKey5));
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      String string0 = "JzjwxozvBe:J7";
      MultiKey<String> multiKey0 = new MultiKey<String>("JzjwxozvBe:J7", "JzjwxozvBe:J7", "JzjwxozvBe:J7");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-231));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -231
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 5);
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", "");
      multiKeyArray0[0] = multiKey0;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, "", (Object) null, "", "");
      multiKeyArray0[1] = multiKey2;
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) stringArray0, true);
      MultiKey<Object> multiKey4 = new MultiKey<Object>("", multiKey3);
      multiKeyArray0[2] = multiKey4;
      MultiKey<Object> multiKey5 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      multiKeyArray0[3] = multiKey5;
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey6 = new MultiKey<Object>("", object1);
      multiKey6.getKey(0);
      MultiKey<Object> multiKey7 = new MultiKey<Object>(object0, "", multiKey0, multiKey1);
      multiKeyArray0[4] = multiKey7;
      MultiKey<MultiKey<Object>> multiKey8 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      assertEquals(5, multiKey8.size());
  }
}
