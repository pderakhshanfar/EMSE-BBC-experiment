/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:03:37 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(",[#%@%7Qetx", ",[#%@%7Qetx", "B=", "B=", "");
      boolean boolean0 = multiKey0.equals("");
      Object object0 = new Object();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null, (Integer) null);
      Integer integer0 = new Integer((-1994));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>((Integer) null, integer0, (Integer) null);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[null, null, null, null]", string0);
      
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 7);
      multiKeyArray0[0] = multiKey2;
      multiKeyArray0[2] = multiKey3;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "B=";
      boolean boolean1 = multiKey0.equals(multiKey0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = 6;
      Integer integer0 = new Integer(6);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray0);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.size();
      Integer integer0 = new Integer(3521);
      int int0 = 0;
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey[]", multiKey0, multiKey0, integer0, integer1);
      Integer integer2 = new Integer(3521);
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer1;
      integerArray0[1] = integer2;
      integerArray0[2] = integer1;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, true);
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, "MultiKey[]", integer2, multiKey2, object0);
      Object[] objectArray0 = multiKey3.getKeys();
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "br_C- TX3u";
      String string1 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("br_C- TX3u", "", "Cxc");
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[]", "MultiKey[]", "MultiKey[]");
      multiKey1.toString();
      multiKey1.size();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("L{[]Dcn/J &>Ue6}PY", "L{[]Dcn/J &>Ue6}PY", "HN1+NRDdi+e", "L{[]Dcn/J &>Ue6}PY");
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 3);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      multiKeyArray0[0] = multiKey1;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1);
      multiKeyArray0[1] = multiKey2;
      multiKey1.toString();
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer2, integer0, integer2);
      multiKeyArray0[2] = multiKey3;
      multiKey1.toString();
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      multiKey4.toString();
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[MultiKey[0, 0, 0, 0], MultiKey[0, 0], MultiKey[0, 0, 0, 0]]", string0);
      
      MultiKey<String> multiKey5 = new MultiKey<String>("UZz8", "");
      Integer integer3 = new Integer(0);
      MultiKey<Object> multiKey6 = new MultiKey<Object>(multiKey5, integer3, integer2);
      boolean boolean0 = multiKey6.equals(multiKey5);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<MultiKey<Integer>> multiKey0 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>) null, (MultiKey<Integer>) null);
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey1);
      multiKey2.toString();
      Integer integer0 = new Integer(484);
      Integer integer1 = new Integer(484);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer1);
      int int0 = multiKey3.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("*}an3Q7%v3AN=, f}", "(kZZ-{AP%N>\".$K:jH", "(kZZ-{AP%N>\".$K:jH", "L>%d,.k=@L@bH");
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(2415);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2415
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("+2GcNS}ZMZ{ocMn|w", object0, object0, object0, object0);
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(2);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) integer0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.getKey(2);
      objectArray0[1] = null;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) multiKey0;
      Object object0 = multiKey1.getKey(2);
      objectArray0[5] = object0;
      objectArray0[6] = (Object) integer0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey2.toString();
      multiKey2.getKeys();
      // Undeclared exception!
      try { 
        multiKey2.getKey(2247);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2247
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "MultiKey";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "9p";
      stringArray0[4] = "MultiKey";
      stringArray0[5] = "!`";
      stringArray0[6] = "org.apache.commons.collections4.keyvalue.MultiKey";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[MultiKey, , , 9p, MultiKey, !`, org.apache.commons.collections4.keyvalue.MultiKey]", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(",[#%@%7Qetx", ",[#%@%7Qetx", "B=", "B=", "");
      multiKey0.equals("");
      String string0 = multiKey0.getKey(0);
      assertEquals(",[#%@%7Qetx", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      int int0 = 1;
      Object object1 = multiKey0.getKey(1);
      objectArray0[1] = null;
      multiKey0.getKey(1);
      objectArray0[2] = null;
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 3);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0, object1);
      multiKeyArray0[2] = multiKey1;
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-3667));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3667
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
