/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:04:01 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, "", (Object) null);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, "", multiKey0, (Object) null, multiKey0);
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
      assertFalse(multiKey0.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "");
      multiKey1.getKey(3);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      multiKey2.size();
      // Undeclared exception!
      try { 
        multiKey2.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-47));
      Integer integer1 = new Integer(4);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1);
      multiKey0.toString();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      Object[] objectArray1 = multiKey1.getKeys();
      assertNotSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "^Z fB,Y(^On;XsqEiC", (String) null);
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, (Object) null);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, object0, integer0, integer0, multiKey1);
      Object object1 = multiKey2.getKey(0);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 6);
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1885);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer0, integer0);
      multiKeyArray0[0] = multiKey0;
      int int1 = (-1064);
      Integer integer2 = new Integer((-1064));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, integer2);
      multiKeyArray0[1] = multiKey1;
      int int2 = 0;
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer(0);
      Integer integer5 = null;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, integer3, (Integer) null, integer4, (Integer) null);
      multiKeyArray0[2] = multiKey2;
      MultiKey<Integer> multiKey3 = null;
      try {
        multiKey3 = new MultiKey<Integer>((Integer[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<MultiKey<String>> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", (String) null, "");
      multiKey0.toString();
      multiKey0.size();
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(4);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      multiKey1.toString();
      Object object0 = new Object();
      multiKey1.equals(object0);
      Object object1 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer1, (Object) null, multiKey0, object1, multiKey1);
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.getKeys();
      multiKey0.getKey(0);
      multiKey2.toString();
      multiKey2.size();
      multiKey2.getKeys();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey2);
      multiKey3.toString();
      multiKey3.size();
      multiKey1.equals("MultiKey[4, null, MultiKey[, , null, ], java.lang.Object@24ac8d3, MultiKey[1, 4]]");
      multiKey0.equals(multiKey2);
      int int0 = multiKey1.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 2);
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKeyArray0[0] = multiKey1;
      multiKey1.toString();
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKey2.toString();
      multiKeyArray0[1] = multiKey2;
      multiKey2.toString();
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, true);
      multiKey3.toString();
      multiKey3.getKeys();
      Integer integer1 = new Integer(int0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>("MultiKey[]", integer1, int0, "MultiKey[]");
      multiKey4.toString();
      multiKey4.getKey(0);
      multiKey4.toString();
      multiKey4.toString();
      multiKey4.toString();
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey5.getKeys();
      multiKey2.getKey(0);
      multiKey1.hashCode();
      int int1 = multiKey4.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 2);
      Object object0 = new Object();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "The array of keys must not be null", "", "N+g:");
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", "", object0, multiKey1);
      multiKeyArray0[0] = multiKey2;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[1] = multiKey3;
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      multiKey4.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer((-158));
      Integer integer1 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1);
      multiKey0.toString();
      String[] stringArray0 = new String[1];
      multiKey0.toString();
      stringArray0[0] = "The array of keys must not be null";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.toString();
      multiKey2.size();
      multiKey0.toString();
      multiKey1.size();
      MultiKey<Object> multiKey3 = new MultiKey<Object>("The array of keys must not be null", "", (Object) null);
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.hashCode();
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey3, multiKey3, multiKey3, multiKey3);
      multiKey4.toString();
      multiKey4.size();
      multiKey1.hashCode();
      multiKey3.hashCode();
      multiKey1.getKey(0);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-788));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -788
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(2068);
      int int0 = 4;
      Integer integer1 = new Integer(4);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1);
      multiKey0.toString();
      Object object0 = new Object();
      multiKey0.equals(object0);
      MultiKey<String> multiKey1 = new MultiKey<String>("wZ^u{WIh83^$i,\"", "", "");
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(521);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 521
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(883);
      Integer integer1 = new Integer(883);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "MultiKey", "", "");
      multiKey1.toString();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) multiKey1;
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      objectArray0[2] = (Object) multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey2.size();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2);
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.size();
      multiKey2.toString();
      multiKey2.equals("MultiKey[, MultiKey, , ]");
      multiKey1.equals(integer0);
      multiKey3.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(883);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 883
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-3847));
      integerArray0[7] = integer7;
      Integer integer8 = new Integer((-2061));
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.toString();
      Integer integer9 = new Integer(99);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, integer9, integer8, integer6, integer2);
      // Undeclared exception!
      try { 
        multiKey1.getKey(450);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 450
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
