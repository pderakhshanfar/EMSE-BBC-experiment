/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:40:39 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = ";0u";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.getKeys();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      int int0 = multiKey2.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null]", string0);
      
      Integer integer0 = new Integer((-821));
      Integer integer1 = new Integer((-2));
      Integer integer2 = new Integer(4);
      Integer integer3 = new Integer((-2));
      Integer integer4 = new Integer(4);
      Integer integer5 = new Integer((-208));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer3, integer4, integer5, integer0, integer5);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer2);
      Integer integer6 = new Integer(1836);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object) null, integer1, integer6);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey3, multiKey3, multiKey3, multiKey3);
      Object object0 = new Object();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 2);
      Object object1 = new Object();
      MultiKey<Object> multiKey5 = new MultiKey<Object>(object1, object0, integer0, integer0);
      multiKeyArray0[0] = multiKey5;
      multiKeyArray0[1] = multiKey3;
      boolean boolean0 = multiKey5.equals(multiKey5);
      assertTrue(boolean0);
      assertFalse(multiKey5.equals((Object)multiKey3));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(2);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, integer2);
      multiKey0.toString();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) integer0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      Object object0 = new Object();
      multiKey1.equals(object0);
      multiKey0.getKey(0);
      String[] stringArray0 = new String[0];
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      multiKey2.getKeys();
      // Undeclared exception!
      try { 
        multiKey1.getKey(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "B=";
      MultiKey<String> multiKey0 = new MultiKey<String>("B=", "B=", "B=", "B=", "B=");
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 2);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "B=", (Object) null);
      multiKeyArray0[0] = multiKey1;
      Object object0 = new Object();
      Object object1 = new Object();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, multiKey1, object1);
      multiKey2.toString();
      multiKeyArray0[1] = multiKey2;
      MultiKey<Integer> multiKey3 = null;
      try {
        multiKey3 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = null;
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-2494));
      Integer integer1 = new Integer((-2494));
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer1, integer2);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>) null, multiKey0, (MultiKey<Integer>) null);
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, object0, integer2, integer0);
      multiKey2.hashCode();
      Integer integer3 = new Integer((-2494));
      Integer integer4 = new Integer((-2494));
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object) null, multiKey1, integer3, (Object) null, integer4);
      multiKey3.getKey(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey2, (Object) null, (Object) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = ")j1+nR\"2T1T<";
      stringArray0[1] = "";
      stringArray0[2] = "{5l,0 G2{(@Iq0j4";
      stringArray0[3] = "";
      stringArray0[4] = "{X L";
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray0);
      int int0 = (-1247);
      // Undeclared exception!
      try { 
        multiKey5.getKey((-1247));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1247
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-658));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[-658, -658, -658, -658]", string0);
      
      multiKey0.hashCode();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "L8~;0.S";
      stringArray0[1] = "MultiKey[-658, -658, -658, -658]";
      stringArray0[2] = "MultiKey[-658, -658, -658, -658]";
      stringArray0[3] = "MultiKey[-658, -658, -658, -658]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      Integer integer1 = new Integer(2);
      Integer integer2 = new Integer((-3786));
      Integer integer3 = new Integer(2311);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer1, integer0, integer2, integer3);
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "MultiKey[-658, -658, -658, -658]";
      objectArray0[1] = (Object) "L8~;0.S";
      objectArray0[2] = (Object) "L8~;0.S";
      objectArray0[3] = (Object) multiKey2;
      objectArray0[4] = (Object) "L8~;0.S";
      objectArray0[5] = (Object) "MultiKey[-658, -658, -658, -658]";
      objectArray0[6] = (Object) multiKey2;
      objectArray0[7] = (Object) multiKey2;
      objectArray0[8] = (Object) integer1;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, true);
      boolean boolean1 = multiKey3.equals("MultiKey[-658, -658, -658, -658]");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "1m _x8N?oSw\"s");
      multiKey0.hashCode();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.toString();
      multiKey1.toString();
      Integer integer0 = new Integer((-646));
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[]", integer0, "");
      // Undeclared exception!
      try { 
        multiKey2.getKey((-646));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -646
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-1762));
      Integer integer1 = new Integer((-427));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, (Integer) null, integer0);
      int int0 = multiKey0.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "~kRRoLedDEIBQU=c{:";
      stringArray0[1] = "N:^2Ddl9$";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(225);
      multiKey0.equals(integer0);
      int int0 = 1870;
      Integer integer1 = new Integer(1870);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer1, "~kRRoLedDEIBQU=c{:", integer0, object0);
      multiKey1.getKeys();
      multiKey1.toString();
      multiKey1.equals(object0);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1507));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1507
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Integer integer0 = new Integer(1114);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      Integer integer1 = new Integer(937);
      integerArray0[3] = integer1;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      int int0 = 0;
      Object object2 = multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object2, integerArray0[2], integer0);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey3, multiKey0, multiKey3);
      // Undeclared exception!
      try { 
        multiKey4.getKey((int) integerArray0[0]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1114
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("B=", "B=", "B=", "B=", "B=");
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 2);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "B=", (Object) null);
      multiKeyArray0[0] = multiKey1;
      Object object0 = new Object();
      Object object1 = new Object();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, multiKey1, object1);
      multiKey2.toString();
      multiKeyArray0[1] = multiKey2;
      multiKey2.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      multiKey3.toString();
      multiKey3.equals((Object) null);
      multiKey2.toString();
      int int0 = 2566;
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(2566);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2566
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
