/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:03:49 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(")+G#]:o=4A=", "", ")+G#]:o=4A=", "");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      Object[] objectArray1 = multiKey1.getKeys();
      assertEquals(0, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("F~zeq42PD#X!D@I", "F~zeq42PD#X!D@I", "F~zeq42PD#X!D@I");
      multiKey0.toString();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 5);
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, integer0, (Object) null, (Object) null);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, multiKey0);
      multiKey0.toString();
      multiKeyArray0[0] = multiKey1;
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, object0);
      multiKeyArray0[1] = multiKey2;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKeyArray0);
      multiKey3.toString();
      multiKeyArray0[2] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("", "");
      multiKey4.equals(multiKey4);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer((-503));
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer2;
      integerArray0[1] = integer0;
      integerArray0[2] = integer2;
      integerArray0[3] = integer1;
      integerArray0[4] = integer2;
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integerArray0);
      int int0 = multiKey5.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 8);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      multiKeyArray0[0] = multiKey0;
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, "org.apache.commons.collections4.keyvalue.MultiKey");
      Object object1 = multiKey1.getKey(0);
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, object1, integer0, (Object) null, object1);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey0, "", multiKey2);
      multiKeyArray0[1] = multiKey3;
      MultiKey<Object> multiKey4 = new MultiKey<Object>("org.apache.commons.collections4.keyvalue.MultiKey", multiKey2, object1);
      multiKeyArray0[2] = multiKey4;
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[2] = null;
      stringArray0[3] = "";
      stringArray0[4] = "org.apache.commons.collections4.keyvalue.MultiKey";
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray0, true);
      multiKey5.getKey(0);
      MultiKey<Object> multiKey6 = new MultiKey<Object>("", (Object) null);
      multiKeyArray0[3] = multiKey6;
      Object object2 = new Object();
      MultiKey<Object> multiKey7 = new MultiKey<Object>(object2, (Object) null);
      multiKeyArray0[4] = multiKey7;
      Integer integer1 = new Integer(0);
      Object object3 = new Object();
      MultiKey<Object> multiKey8 = new MultiKey<Object>(multiKey7, multiKey2, multiKey4);
      MultiKey<Object> multiKey9 = new MultiKey<Object>(stringArray0[2], "");
      // Undeclared exception!
      try { 
        multiKey9.getKey(1282);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1282
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      boolean boolean0 = multiKey1.equals(multiKey0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      multiKey1.getKeys();
      multiKey0.size();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "", "");
      String[] stringArray0 = new String[5];
      multiKey1.toString();
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      multiKey1.toString();
      stringArray0[4] = "";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      multiKey3.getKey(0);
      String string0 = multiKey3.toString();
      //  // Unstable assertion: assertEquals("MultiKey[, , , , ]", string0);
      
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey2, "");
      int int0 = multiKey4.size();
      int int1 = multiKey1.hashCode();
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      multiKey4.size();
      int int2 = multiKey0.hashCode();
      //  // Unstable assertion: assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.equals("MultiKey[, ]");
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, multiKey0, object0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey2.getKeys();
      multiKey0.toString();
      multiKey0.getKey(0);
      multiKey2.size();
      int int0 = multiKey2.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", (String) null);
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-1));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1);
      multiKey1.toString();
      multiKey1.size();
      multiKey0.toString();
      Integer integer2 = new Integer(3);
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer2, integer1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.toString();
      multiKey2.toString();
      multiKey2.getKeys();
      multiKey0.hashCode();
      // Undeclared exception!
      try { 
        multiKey2.getKey((-103));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -103
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, false);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.hashCode();
      Integer[] integerArray0 = new Integer[8];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-260));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(792);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int0);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, true);
      Integer[] integerArray1 = multiKey2.getKeys();
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("6S|KX>L =", "6S|KX>L =", "", "", "6S|KX>L =");
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray0 = null;
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "7H6A^iLji*Gs#x";
      stringArray0[2] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "`=";
      stringArray0[7] = "";
      stringArray0[8] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) stringArray0, false);
      multiKey2.toString();
      int int0 = multiKey0.size();
      assertEquals(9, int0);
  }
}
