/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:27:10 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(2);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer0, integer2);
      Object object1 = new Object();
      multiKey0.equals(multiKey0);
      String[] stringArray0 = new String[2];
      String string0 = "Nv?";
      stringArray0[0] = "Nv?";
      stringArray0[1] = "hWiMu$,P1nvd~~Rh4";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null);
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-2599));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-471));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      int int0 = 2;
      Integer integer3 = new Integer(2);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[2]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[1]);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((int) integerArray0[2]);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(2);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) integerArray0, false);
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(295);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.equals((Object) null);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, multiKey0, (Object) null, "");
      multiKey1.getKeys();
      multiKey0.size();
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, (MultiKey<Integer>) null);
      multiKey2.toString();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, true);
      // Undeclared exception!
      try { 
        multiKey3.getKey(295);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 295
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "W+pnili}c";
      stringArray0[1] = "S{w[vK";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      multiKey0.toString();
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2, integer2, integer3);
      multiKey1.toString();
      multiKey1.hashCode();
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.getKey(0);
      multiKey2.toString();
      Integer integer4 = new Integer(0);
      Integer integer5 = new Integer(0);
      multiKey0.toString();
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>((Integer) null, integer4, integer1, integer5);
      multiKey3.getKey(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>("W+pnili}c", (Object) null, "W+pnili}c");
      multiKey4.getKey(0);
      multiKey0.getKeys();
      multiKey2.toString();
      multiKey3.getKey(0);
      multiKey4.toString();
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[W+pnili}c, null, W+pnili}c]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0, multiKey0, object0);
      multiKey1.toString();
      multiKey1.getKey(3);
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.toString();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 2);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey0;
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      multiKey2.toString();
      MultiKey<Object>[] multiKeyArray1 = multiKey2.getKeys();
      assertNotSame(multiKeyArray0, multiKeyArray1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("*I*4KB,|(:ovyUDmqC", "", "*I*4KB,|(:ovyUDmqC");
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[*I*4KB,|(:ovyUDmqC, , *I*4KB,|(:ovyUDmqC]", string0);
      
      multiKey0.size();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "MultiKey[*I*4KB,|(:ovyUDmqC, , *I*4KB,|(:ovyUDmqC]";
      objectArray0[1] = (Object) "MultiKey[*I*4KB,|(:ovyUDmqC, , *I*4KB,|(:ovyUDmqC]";
      objectArray0[2] = (Object) "MultiKey[*I*4KB,|(:ovyUDmqC, , *I*4KB,|(:ovyUDmqC]";
      objectArray0[3] = (Object) "";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(3);
      integerArray0[0] = integer0;
      int int0 = 1;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(232);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-1128));
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-3555));
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey2, multiKey2, multiKey2, multiKey2);
      Object object0 = multiKey3.getKey(int0);
      boolean boolean0 = multiKey1.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-809));
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer((-809));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, (Integer) null, integer2);
      multiKey0.toString();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) integer0;
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      int int0 = multiKey1.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey0, multiKey1);
      Object[] objectArray0 = multiKey2.getKeys();
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "t\u0006v2_`.yER~cr";
      stringArray0[1] = "";
      stringArray0[2] = "w";
      stringArray0[3] = "";
      stringArray0[4] = "AW";
      stringArray0[5] = "";
      stringArray0[6] = "-`Lsj]:gPBWo'J0V*";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("t\u0006v2_`.yER~cr", "", "", multiKey0);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(2516);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2516
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[1] = "";
      String string0 = "8Ng3,{Q6(";
      stringArray0[2] = "8Ng3,{Q6(";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "zcX.x%xfZR";
      String string1 = "dL?Vmw";
      stringArray0[6] = "dL?Vmw";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, object0, multiKey0, "dL?Vmw");
      Object object1 = multiKey1.getKey(0);
      MultiKey<String> multiKey2 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey2.getKey(1);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object1, "", "", "", "org.apache.commons.collections4.keyvalue.MultiKey");
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 8);
      multiKeyArray0[0] = multiKey3;
      String string2 = null;
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object) null, "8Ng3,{Q6(", multiKey3, "8Ng3,{Q6(", "dL?Vmw");
      multiKeyArray0[1] = multiKey4;
      multiKeyArray0[2] = multiKey3;
      multiKeyArray0[3] = multiKey3;
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(integer1, multiKey2, multiKey4);
      multiKeyArray0[4] = multiKey5;
      multiKeyArray0[5] = multiKey1;
      multiKeyArray0[6] = multiKey1;
      MultiKey<String> multiKey6 = new MultiKey<String>(stringArray0, false);
      // Undeclared exception!
      try { 
        multiKey6.getKey((-1523));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1523
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(2855);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(3);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-1));
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(2855);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      // Undeclared exception!
      try { 
        multiKey0.getKey((int) integerArray0[0]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2855
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("@>", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer0);
      multiKey0.toString();
      multiKey0.toString();
      Object object0 = multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, object0);
      multiKey2.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[@>, org.apache.commons.collections4.keyvalue.MultiKey], 0]", string0);
      
      boolean boolean0 = multiKey2.equals("org.apache.commons.collections4.keyvalue.MultiKey");
      assertFalse(boolean0);
  }
}
