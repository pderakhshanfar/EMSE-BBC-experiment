/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:41:43 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("!'IpoKP`", "!'IpoKP`", "!'IpoKP`");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("The array of keys must not be null", "The array of keys must not be null");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) "The array of keys must not be null";
      Integer[] integerArray0 = new Integer[3];
      int int0 = 7;
      Integer integer0 = new Integer(7);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey1);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer1, (Integer) int0);
      objectArray0[3] = (Object) multiKey3;
      objectArray0[4] = (Object) multiKey0;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0);
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey4);
      String string0 = multiKey5.toString();
      assertEquals("MultiKey[MultiKey[The array of keys must not be null, The array of keys must not be null], MultiKey[The array of keys must not be null, The array of keys must not be null], MultiKey[The array of keys must not be null, The array of keys must not be null], MultiKey[The array of keys must not be null, The array of keys must not be null], MultiKey[MultiKey[The array of keys must not be null, The array of keys must not be null], MultiKey[The array of keys must not be null, The array of keys must not be null], The array of keys must not be null, MultiKey[7, 7, 7], MultiKey[The array of keys must not be null, The array of keys must not be null]]]", string0);
      
      boolean boolean0 = multiKey0.equals(objectArray0[0]);
      assertTrue(boolean0);
      
      multiKey0.size();
      MultiKey<Object> multiKey6 = new MultiKey<Object>(objectArray0[1], multiKey4, multiKey0, objectArray0[3]);
      assertFalse(multiKey6.equals((Object)multiKey4));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, integer2, integer0);
      multiKey0.toString();
      multiKey0.toString();
      Object object0 = new Object();
      multiKey0.equals(object0);
      String string0 = "^IBo='";
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "^IBo='", "");
      multiKey1.toString();
      MultiKey<String> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      Integer[] integerArray1 = multiKey0.getKeys();
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, integer2, integer0);
      multiKey0.toString();
      multiKey0.toString();
      boolean boolean0 = multiKey0.equals("<4.");
      assertFalse(boolean0);
      
      MultiKey<String> multiKey1 = new MultiKey<String>("G/JHf:{l$$2~0F", "<4.", "l5'w9tIbduh 65", "");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[G/JHf:{l$$2~0F, <4., l5'w9tIbduh 65, ]", string0);
      
      stringArray0[1] = "<4.";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      boolean boolean1 = multiKey1.equals(multiKey2);
      assertFalse(boolean1);
      
      multiKey2.hashCode();
      assertFalse(multiKey2.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "", ">~X x'}'!5(R", "if!5q'");
      multiKey0.getKey(0);
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0, (Object) null, ">~X x'}'!5(R", object1);
      Object[] objectArray0 = multiKey1.getKeys();
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, false);
      multiKey1.toString();
      multiKey1.getKey(0);
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[0, 0, 0]", "rI", "QE8:~yr>*&^(<T^|A", "Nvng");
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      Integer integer3 = new Integer(int0);
      multiKey2.equals(integer3);
      multiKey1.toString();
      multiKey2.size();
      // Undeclared exception!
      try { 
        multiKey2.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      multiKey1.getKey(0);
      Integer integer0 = new Integer(152);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey1, multiKey1);
      Object object0 = multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("", integer0, object0, (Object) null);
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object) null, "The array of keys must not be null");
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKey3, multiKey3, multiKey4);
      assertTrue(multiKey1.equals((Object)multiKey0));
      
      Integer integer1 = new Integer(0);
      boolean boolean0 = multiKey5.equals(integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object1, object1);
      multiKey0.toString();
      Object object2 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, (Object) null, "76rs`", object2, object2);
      multiKey1.equals(object1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey0.toString();
      multiKey1.size();
      Integer integer0 = new Integer(2985);
      Integer integer1 = new Integer((-2414));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer0);
      multiKey2.toString();
      multiKey0.toString();
      Integer integer2 = new Integer((-527));
      multiKey2.equals(integer2);
      multiKey0.toString();
      multiKey2.toString();
      multiKey1.size();
      multiKey0.equals(object1);
      // Undeclared exception!
      try { 
        multiKey1.getKey(2985);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2985
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("{xlEi-h.v~6", ":)}uus^\"oL^Idlg).", ":)}uus^\"oL^Idlg).");
      multiKey0.hashCode();
      MultiKey<String> multiKey1 = new MultiKey<String>(":)}uus^\"oL^Idlg).", "T{?N+e{a;(:K");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "T{?N+e{a;(:K";
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) ":)}uus^\"oL^Idlg).";
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "{xlEi-h.v~6";
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "{xlEi-h.v~6";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, object0, multiKey2, "");
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey3, multiKey3, multiKey3, multiKey2, multiKey2);
      // Undeclared exception!
      try { 
        multiKey4.getKey(473);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 473
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = null;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = null;
      objectArray0[1] = null;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-256));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -256
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
