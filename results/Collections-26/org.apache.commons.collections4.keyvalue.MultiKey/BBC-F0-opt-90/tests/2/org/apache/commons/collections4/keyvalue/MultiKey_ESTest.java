/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:03:30 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>(",8RuBz;yR!])A66Oq", ",8RuBz;yR!])A66Oq", ",8RuBz;yR!])A66Oq");
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) multiKey1;
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) ",8RuBz;yR!])A66Oq";
      objectArray0[5] = (Object) multiKey0;
      objectArray0[6] = (Object) multiKey0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey1.equals(objectArray0[2]);
      assertTrue(boolean0);
      
      multiKey2.size();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[,8RuBz;yR!])A66Oq, ,8RuBz;yR!])A66Oq, ,8RuBz;yR!])A66Oq]", string0);
      assertFalse(multiKey0.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) ",8RuBz;yR!])A66Oq";
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      Integer integer0 = new Integer((-2112));
      multiKey0.toString();
      int int0 = 3;
      Integer integer1 = new Integer(3);
      Integer integer2 = new Integer(3);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer1, integer2, integer2);
      multiKey1.size();
      multiKey1.toString();
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[]", object0, object1);
      // Undeclared exception!
      try { 
        multiKey2.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>(",8RuBz;yR!])A66Oq", ",8RuBz;yR!])A66Oq", ",8RuBz;yR!])A66Oq");
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) multiKey1;
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) ",8RuBz;yR!])A66Oq";
      objectArray0[5] = object0;
      objectArray0[6] = (Object) multiKey0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey2, multiKey2, multiKey2, multiKey2);
      boolean boolean0 = multiKey3.equals(objectArray0[2]);
      assertFalse(boolean0);
      
      multiKey2.size();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[,8RuBz;yR!])A66Oq, ,8RuBz;yR!])A66Oq, ,8RuBz;yR!])A66Oq]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = null;
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, "");
      Object object1 = multiKey0.getKey(0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object1, multiKey0, multiKey0, (Object) null);
      multiKey1.getKeys();
      Integer integer0 = new Integer((-667));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0);
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.size();
      multiKey1.toString();
      multiKey0.toString();
      multiKey2.size();
      MultiKey<String> multiKey3 = null;
      try {
        multiKey3 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[]", "", "MultiKey[]", ":;39{sioC}G#4+", "MultiKey[]");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.toString();
      multiKey2.toString();
      multiKey2.toString();
      MultiKey<String> multiKey3 = multiKey2.getKey(0);
      multiKey3.toString();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey1, multiKey2, "MultiKey[]", (Object) null);
      multiKey2.toString();
      multiKey4.toString();
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKey4, multiKey4);
      boolean boolean0 = multiKey5.equals("MultiKey[MultiKey[], MultiKey[MultiKey[], , MultiKey[], :;39{sioC}G#4+, MultiKey[]]]");
      assertFalse(boolean0);
      
      multiKey4.size();
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[MultiKey[MultiKey[], , MultiKey[], :;39{sioC}G#4+, MultiKey[]], MultiKey[MultiKey[], MultiKey[MultiKey[], , MultiKey[], :;39{sioC}G#4+, MultiKey[]]], MultiKey[], null]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, (Object) null, (Object) null, (Object) null);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      multiKey1.hashCode();
      multiKey1.size();
      multiKey0.getKey(2);
      multiKey0.getKeys();
      multiKey0.toString();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 1);
      multiKeyArray0[0] = multiKey0;
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey0.getKey(0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[3] = "";
      stringArray0[4] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      MultiKey<String> multiKey2 = new MultiKey<String>("", (String) null, "org.apache.commons.collections4.keyvalue.MultiKey", "", "");
      Integer integer0 = new Integer(1);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, "", "", integer0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>("", multiKey3, integer0);
      MultiKey<Object> multiKey5 = new MultiKey<Object>("org.apache.commons.collections4.keyvalue.MultiKey", "", "", multiKey1, multiKey4);
      multiKey5.toString();
      multiKey5.size();
      String string0 = multiKey5.toString();
      assertEquals("MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, , , MultiKey[, , org.apache.commons.collections4.keyvalue.MultiKey, , ], MultiKey[, MultiKey[MultiKey[, null, org.apache.commons.collections4.keyvalue.MultiKey, , ], , , 1], 1]]", string0);
      
      multiKey0.size();
      boolean boolean0 = multiKey1.equals(multiKey5);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "!Y2:_kIm3";
      stringArray0[1] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", object0, "MultiKey[!Y2:_kIm3, ]");
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      Integer integer0 = new Integer((-1304));
      Integer integer1 = new Integer((-1304));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      multiKey3.toString();
      multiKey3.size();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      int int0 = 4;
      // Undeclared exception!
      try { 
        multiKey1.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "The array of keys must not be null");
      multiKey0.toString();
      Integer integer0 = new Integer(5);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("The array of keys must not be null", "T<8E%zd#raQ{2*", "", "");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, "", multiKey1, "The array of keys must not be null");
      multiKey2.toString();
      boolean boolean0 = multiKey2.equals("F>c_0D");
      assertFalse(boolean0);
      
      multiKey1.hashCode();
      multiKey0.hashCode();
      multiKey0.hashCode();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[5, , MultiKey[The array of keys must not be null, T<8E%zd#raQ{2*, , ], The array of keys must not be null]", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "Y,S _VLLD";
      MultiKey<String> multiKey0 = new MultiKey<String>("Y,S _VLLD", "Y,S _VLLD", "Y,S _VLLD", "{HT[g/", ",8RuBz;yR!])A66Oq");
      // Undeclared exception!
      try { 
        multiKey0.getKey((-2055));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2055
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
