/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:29:18 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-801));
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      Integer[] integerArray1 = multiKey1.getKeys();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) integerArray1, false);
      multiKey2.toString();
      multiKey2.size();
      boolean boolean0 = multiKey2.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "", "");
      multiKey0.toString();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      Object[] objectArray1 = multiKey1.getKeys();
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "`U dj";
      stringArray0[2] = "wE;%%";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "wY78[Gw|{";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, multiKey0, "", "");
      Object object0 = new Object();
      MultiKey<String> multiKey2 = new MultiKey<String>("wY78[Gw|{", "");
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, "", "", object0, multiKey2);
      Object object1 = multiKey3.getKey(3);
      objectArray0[0] = object1;
      Object object2 = new Object();
      objectArray0[1] = object2;
      Object object3 = new Object();
      objectArray0[2] = object3;
      Object object4 = new Object();
      objectArray0[3] = object4;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>((Integer) null, (Integer) null);
      multiKey4.getKey(0);
      objectArray0[4] = (Object) null;
      MultiKey<Object> multiKey5 = new MultiKey<Object>(objectArray0, true);
      assertFalse(multiKey5.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = null;
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null);
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 1);
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[null, null, null]", "org.apache.commons.collections4.keyvalue.MultiKey", "^qQ5H{Jh9=t^8", "Jh@m!Gt<LyN1c~FK8._", "Jh@m!Gt<LyN1c~FK8._");
      multiKey1.toString();
      multiKeyArray0[0] = multiKey1;
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      multiKey2.hashCode();
      multiKey1.size();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKeyArray0);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[MultiKey[null, null, null], org.apache.commons.collections4.keyvalue.MultiKey, ^qQ5H{Jh9=t^8, Jh@m!Gt<LyN1c~FK8._, Jh@m!Gt<LyN1c~FK8._]]", string0);
      
      multiKey3.getKey(0);
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, object0, (Object) null);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey1.size();
      Object object1 = new Object();
      boolean boolean0 = multiKey1.equals(object1);
      assertFalse(boolean0);
      
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[]", "MultiKey[]", "bDC,_JMTey*BnG");
      multiKey3.toString();
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[], MultiKey[], bDC,_JMTey*BnG]", string0);
      
      multiKey3.getKey(0);
      multiKey1.size();
      assertFalse(multiKey1.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "b\"J21n!9dJ}(=G";
      stringArray0[1] = "org.apache.commons.collections4.keyvalue.MultiKey";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1486));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1486
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = "";
      stringArray0[0] = "";
      String string1 = "";
      stringArray0[1] = "";
      stringArray0[2] = "ve8in";
      stringArray0[3] = "QmBBl#";
      String string2 = "";
      stringArray0[4] = "";
      String string3 = "";
      stringArray0[5] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.size();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 5);
      Integer integer0 = new Integer((-560));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0);
      // Undeclared exception!
      try { 
        multiKey1.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.toString();
      multiKey1.toString();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "MultiKey[MultiKey[], MultiKey[]]";
      stringArray0[1] = "MultiKey[MultiKey[], MultiKey[]]";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      multiKey3.toString();
      multiKey3.getKeys();
      multiKey3.toString();
      multiKey1.hashCode();
      Object[] objectArray0 = multiKey1.getKeys();
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "The array of keys must not be null";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("The array of keys must not be null", "The array of keys must not be null", "c^{mLve7jR[6!|", multiKey0, object0);
      multiKey0.toString();
      int int0 = 3612;
      // Undeclared exception!
      try { 
        multiKey1.getKey(3612);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3612
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "";
      Object object0 = null;
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      int int0 = 801;
      // Undeclared exception!
      try { 
        multiKey0.getKey(801);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 801
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 7);
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(670);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKeyArray0[0] = multiKey0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKeyArray0[1] = multiKey1;
      Integer integer1 = new Integer((int) integerArray0[0]);
      Integer integer2 = new Integer(514);
      Integer integer3 = new Integer(1);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0[0], integer0, integer1, integer2, integer3);
      multiKeyArray0[2] = multiKey2;
      Integer integer4 = new Integer(670);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer4, integer1);
      multiKeyArray0[3] = multiKey3;
      Integer integer5 = new Integer(670);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer3, integer1, integer5);
      multiKeyArray0[4] = multiKey4;
      Integer integer6 = new Integer(670);
      Integer integer7 = new Integer(0);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer5, integer6, integer7);
      multiKeyArray0[5] = multiKey5;
      Integer integer8 = new Integer(2);
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integer8, integer5);
      multiKeyArray0[6] = multiKey6;
      MultiKey<MultiKey<Integer>> multiKey7 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, false);
      MultiKey<Integer>[] multiKeyArray1 = multiKey7.getKeys();
      assertNotSame(multiKeyArray0, multiKeyArray1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("=1}4+qC", "", "=1}4+qC", "", "=1}4+qC");
      assertEquals(5, multiKey0.size());
  }
}
