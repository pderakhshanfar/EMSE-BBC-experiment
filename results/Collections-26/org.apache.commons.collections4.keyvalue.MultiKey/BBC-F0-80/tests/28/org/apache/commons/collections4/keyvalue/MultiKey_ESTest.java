/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:54:22 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("_ony ", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "_ony ");
      multiKey0.equals(multiKey0);
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-2215));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2249);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[2]);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      // Undeclared exception!
      try { 
        multiKey1.getKey((int) integerArray0[1]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2215
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, "", (Object) null, (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.getKey(0);
      multiKey1.hashCode();
      multiKey0.hashCode();
      MultiKey<MultiKey<Object>> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, (Object) null, object1);
      Object object2 = multiKey0.getKey(0);
      objectArray0[1] = object2;
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, (String) null, "hX;=#8T#", "");
      multiKey1.getKey(0);
      objectArray0[2] = (Object) null;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      assertFalse(multiKey2.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("n^EBl?l", "");
      multiKey0.toString();
      int int0 = multiKey0.size();
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(2);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2648));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2648));
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      multiKey1.toString();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "MultiKey[n^EBl?l, ]";
      stringArray0[2] = "n^EBl?l";
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertFalse(boolean0);
      
      int int1 = multiKey1.hashCode();
      assertFalse(int1 == int0);
      
      MultiKey<Object> multiKey3 = new MultiKey<Object>("MultiKey[2, -2648, -2648]", integer1);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[2, -2648, -2648], -2648]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      String[] stringArray0 = new String[8];
      multiKey0.toString();
      stringArray0[0] = "bS9^ER|)a`s8,";
      stringArray0[1] = " amWe+vK(F";
      stringArray0[2] = "The array of keys must not be null";
      stringArray0[3] = "j-,|c";
      stringArray0[4] = "n.[k@E4$S";
      stringArray0[5] = "MultiKey";
      stringArray0[6] = "1i'gTNC#M'jp";
      stringArray0[7] = "DxK?re=A3-}(%@V4";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.hashCode();
      Integer[] integerArray1 = multiKey0.getKeys();
      multiKey1.getKeys();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integerArray1);
      int int0 = multiKey2.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("XV$'YLjmB", "", "The array of keys must not be null");
      multiKey0.toString();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.toString();
      multiKey1.getKeys();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[XV$'YLjmB, , The array of keys must not be null], MultiKey[XV$'YLjmB, , The array of keys must not be null], MultiKey[XV$'YLjmB, , The array of keys must not be null], MultiKey[XV$'YLjmB, , The array of keys must not be null]]", string0);
      
      boolean boolean0 = multiKey1.equals("The array of keys must not be null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "MultiKey";
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "-Wzo?", "MultiKey", "MultiKey");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      multiKey0.size();
      Integer integer0 = new Integer(4);
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, integer0, (Integer) null);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.equals((Object) null);
      Integer integer1 = new Integer(2487);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 1);
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[MultiKey, -Wzo?, MultiKey, MultiKey]", "MultiKey", "-Wzo?", "FY[A6[0Z(Qx");
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, "MultiKey[null, 4, null]");
      multiKeyArray0[0] = multiKey3;
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      // Undeclared exception!
      try { 
        multiKey4.getKey(276);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 276
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "a/");
      multiKey0.getKey(0);
      objectArray0[0] = (Object) "";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      Object object0 = multiKey1.getKey(0);
      assertNotNull(object0);
      
      objectArray0[1] = (Object) "";
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      Object object3 = new Object();
      objectArray0[4] = object3;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey2.getKeys();
      assertFalse(multiKey2.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(289);
      Integer integer1 = new Integer(289);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>("|m2o1m", "", "");
      multiKey1.toString();
      Object object0 = new Object();
      Integer integer2 = new Integer(2);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, integer2, "MultiKey[|m2o1m, , ]", "");
      multiKey1.toString();
      multiKey2.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, multiKey2, integer0, "", (Object) null);
      multiKey2.toString();
      multiKey3.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey3.getKey(0);
      multiKey0.getKey(0);
      // Undeclared exception!
      try { 
        multiKey3.getKey((-1506));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1506
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Object object0 = new Object();
      Integer integer1 = new Integer(1);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, (Object) null, object0, integer1);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "xYn+t:";
      stringArray0[1] = "";
      stringArray0[2] = "The array of keys must not be null";
      stringArray0[3] = "";
      stringArray0[4] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKey(1);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey0.size();
      int int0 = multiKey0.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(2);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1306);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1306);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[1]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-3152));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-780));
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-952));
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-780));
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(0);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0, multiKey0);
      MultiKey<Integer> multiKey2 = multiKey1.getKey(0);
      assertSame(multiKey2, multiKey0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "|}kT!pn ztze{je*OI";
      String string1 = "ghC%<yRxjO,\\Q?uDxkl";
      MultiKey<String> multiKey0 = new MultiKey<String>("|}kT!pn ztze{je*OI", "", "ghC%<yRxjO,Q?uDxkl");
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, "|}kT!pn ztze{je*OI");
      int int0 = (-1052);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1052));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1052
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
