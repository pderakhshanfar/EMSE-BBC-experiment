/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:53:07 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(8);
      MultiKey<String> multiKey0 = new MultiKey<String>("v{Yk,hS'qq", "v{Yk,hS'qq", "$?");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "$?";
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) integer1;
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) integer0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) integer1;
      objectArray0[7] = (Object) "$?";
      objectArray0[8] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.getKeys();
      boolean boolean0 = multiKey0.equals(objectArray0[8]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.size();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      multiKey0.equals("MultiKey[]");
      multiKey0.getKeys();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "MultiKey[]");
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey0, multiKey0, multiKey1);
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.size();
      multiKey1.size();
      multiKey1.toString();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      String[] stringArray1 = multiKey3.getKeys();
      String[] stringArray2 = multiKey3.getKeys();
      assertNotSame(stringArray2, stringArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-1076));
      Integer integer1 = new Integer((-1076));
      Integer integer2 = new Integer((-1076));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer2);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 1);
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, (String) null, "6O*");
      multiKeyArray0[0] = multiKey1;
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer((-1076));
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, integer3, "6O*", multiKey2, integer4);
      boolean boolean0 = multiKey2.equals(multiKey3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "aZ=(TgX*}Ioe%";
      multiKey0.toString();
      stringArray0[1] = "MultiKey[]";
      stringArray0[2] = "MultiKey[]";
      stringArray0[3] = "MultiKey[]";
      stringArray0[4] = "MultiKey[]";
      multiKey0.toString();
      stringArray0[5] = "";
      stringArray0[6] = "MultiKey[]";
      stringArray0[7] = "MultiKey[]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.equals("MultiKey[]");
      multiKey0.getKeys();
      MultiKey<MultiKey<String>> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "54 U)nQ;q`";
      stringArray0[1] = "The array of keys must not be null";
      stringArray0[2] = ",Pc<bBTWPnDEiJ^oZ)";
      stringArray0[3] = "";
      stringArray0[4] = "2n*";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.getKeys();
      MultiKey<MultiKey<String>> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = null;
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("cnesY|UiR", "cnesY|UiR");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, multiKey0, object0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey1.toString();
      multiKey1.getKey(0);
      int int0 = multiKey0.size();
      multiKey1.toString();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(571);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2704));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1807);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[1]);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, true);
      int int1 = multiKey2.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", multiKey1, multiKey0, integer0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.hashCode();
      MultiKey<String> multiKey3 = new MultiKey<String>("", "MultiKey[, MultiKey[-1, -1, -1], MultiKey[-1, -1], -1]", "v6,]X}N!crGn", "j%UAc.8yI&KCo$");
      multiKey3.toString();
      multiKey3.hashCode();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 7);
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-626));
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      multiKeyArray0[0] = multiKey4;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey1;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey1;
      multiKeyArray0[5] = multiKey1;
      multiKeyArray0[6] = multiKey0;
      MultiKey<MultiKey<Integer>> multiKey5 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, true);
      MultiKey<Integer>[] multiKeyArray1 = multiKey5.getKeys();
      assertNotSame(multiKeyArray0, multiKeyArray1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey0.toString();
      boolean boolean0 = multiKey1.equals((Object) null);
      assertFalse(boolean0);
      
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[-1, -1], MultiKey[-1, -1], MultiKey[-1, -1], MultiKey[-1, -1]]", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(1120);
      int int0 = 0;
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer2, integer3);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, (Object) null, integer3, integer3);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-87));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -87
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      multiKey2.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[, , , ]", string0);
      
      Object object3 = multiKey0.getKey(0);
      assertSame(object3, object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Vu";
      stringArray0[1] = "";
      stringArray0[2] = "P]BmPY\"hUE8";
      stringArray0[3] = "u[+wj!!kfL\"U*MSFhV";
      stringArray0[4] = "w'C)Yp(2!~";
      stringArray0[5] = "`xk&nY!c]k+J";
      stringArray0[6] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      int int0 = 4;
      multiKey0.getKey(4);
      objectArray0[5] = (Object) "w'C)Yp(2!~";
      Object object5 = new Object();
      objectArray0[6] = object5;
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", object5);
      // Undeclared exception!
      try { 
        multiKey1.getKey(1209);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1209
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
