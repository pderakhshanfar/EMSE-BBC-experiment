/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:53:05 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("aPjKc2H-y08H+?", "^}u6QZ3=T]{R?-0-[3", "The array of keys must not be null", "3Z{m");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "The array of keys must not be null";
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      Integer integer0 = new Integer((-1));
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[aPjKc2H-y08H+?, ^}u6QZ3=T]{R?-0-[3, The array of keys must not be null, 3Z{m]", string0);
      
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, object0, multiKey1, integer0, object0);
      Object object1 = multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object1, "aPjKc2H-y08H+?");
      Integer integer1 = new Integer(0);
      boolean boolean0 = multiKey1.equals(integer1);
      multiKey3.getKey(0);
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 7);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer1, integer0, integer2);
      multiKeyArray0[0] = multiKey4;
      boolean boolean1 = multiKey4.equals(multiKey4);
      assertFalse(boolean1 == boolean0);
      
      String string1 = multiKey0.getKey(0);
      assertEquals("aPjKc2H-y08H+?", string1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, integer0, integer0);
      multiKey0.getKey(0);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-640));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -640
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(9);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null, integer0, integer0, integer0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer((-287));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer2, integer1);
      Integer integer3 = new Integer(1);
      multiKey0.equals(integer3);
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.size();
      Integer integer0 = new Integer(0);
      multiKey0.toString();
      Integer integer1 = new Integer(2041);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, (Integer) null, (Integer) null, integer1, (Integer) null);
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey2.hashCode();
      multiKey1.toString();
      String[] stringArray0 = new String[2];
      multiKey0.toString();
      stringArray0[0] = "";
      stringArray0[1] = "MultiKey[]";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      multiKey3.getKey(0);
      // Undeclared exception!
      try { 
        multiKey0.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "The array of keys must not be null";
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", (String) null);
      Integer integer0 = new Integer(1665);
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      multiKey1.toString();
      multiKey1.size();
      MultiKey<MultiKey<String>> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "ardNDzAt%Z";
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer0, objectArray0[0]);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey0);
      multiKey2.toString();
      multiKey2.toString();
      Object object0 = multiKey2.getKey(0);
      multiKey0.toString();
      multiKey2.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>("ardNDzAt%Z", multiKey0, multiKey0, object0);
      multiKey3.size();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      multiKey2.toString();
      multiKey4.getKeys();
      multiKey1.toString();
      multiKey3.getKeys();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-3528));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3528
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(5);
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, object0, object0);
      Object object1 = new Object();
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      // Undeclared exception!
      try { 
        multiKey1.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("b=:3'|~!&'lRae=k", "3|lIe}m", "3|lIe}m");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "b=:3'|~!&'lRae=k";
      stringArray0[1] = "b=:3'|~!&'lRae=k";
      stringArray0[2] = "3|lIe}m";
      stringArray0[3] = "b=:3'|~!&'lRae=k";
      stringArray0[4] = "x9/+T4I_S3S7ea7";
      stringArray0[5] = "x9/+T4I_S3S7ea7";
      stringArray0[6] = "b=:3'|~!&'lRae=k";
      stringArray0[7] = "3|lIe}m";
      stringArray0[8] = "3|lIe}m";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.getKey(0);
      MultiKey<String> multiKey2 = new MultiKey<String>("gU*kisRwV~w[", "b=:3'|~!&'lRae=k", "H5g", "b=:3'|~!&'lRae=k", "6d");
      multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("x9/+T4I_S3S7ea7", "b=:3'|~!&'lRae=k", "gU*kisRwV~w[", "H5g");
      Object[] objectArray0 = multiKey3.getKeys();
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0);
      Object object0 = multiKey0.getKey(1);
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = multiKey0.getKey(0);
      objectArray0[5] = object5;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      assertEquals(6, multiKey1.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "JoGV1`cuPY&=", "", "JoGV1`cuPY&=", "JoGV1`cuPY&=");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[, JoGV1`cuPY&=, , JoGV1`cuPY&=, JoGV1`cuPY&=], MultiKey[, JoGV1`cuPY&=, , JoGV1`cuPY&=, JoGV1`cuPY&=], MultiKey[, JoGV1`cuPY&=, , JoGV1`cuPY&=, JoGV1`cuPY&=], MultiKey[, JoGV1`cuPY&=, , JoGV1`cuPY&=, JoGV1`cuPY&=]]", string0);
      
      multiKey1.hashCode();
      multiKey0.hashCode();
      Integer integer0 = new Integer(992);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, "MultiKey[MultiKey[, JoGV1`cuPY&=, , JoGV1`cuPY&=, JoGV1`cuPY&=], MultiKey[, JoGV1`cuPY&=, , JoGV1`cuPY&=, JoGV1`cuPY&=], MultiKey[, JoGV1`cuPY&=, , JoGV1`cuPY&=, JoGV1`cuPY&=], MultiKey[, JoGV1`cuPY&=, , JoGV1`cuPY&=, JoGV1`cuPY&=]]", (Object) null, "");
      boolean boolean0 = multiKey2.equals(multiKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-1017));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(5);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray0);
      boolean boolean0 = multiKey1.equals("MultiKey[-1017, 5]");
      assertFalse(boolean0);
      
      multiKey0.size();
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[-1017, 5]", "3{fo&0&UIgm`!.^-");
      multiKey2.size();
      multiKey1.getKeys();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 2);
      multiKeyArray0[0] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("3{fo&0&UIgm`!.^-", "MultiKey[-1017, 5]");
      multiKeyArray0[1] = multiKey3;
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[MultiKey[MultiKey[-1017, 5], 3{fo&0&UIgm`!.^-], MultiKey[3{fo&0&UIgm`!.^-, MultiKey[-1017, 5]]]", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      assertEquals(4, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("&9l", "", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "&9l");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-1580));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3945));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(587);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[1]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[3]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[3]);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-5138));
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(278);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer((int) integerArray0[0]);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      int int0 = multiKey2.size();
      assertEquals(9, int0);
  }
}
