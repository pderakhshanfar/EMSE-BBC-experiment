/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:43:31 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-247));
      Integer integer1 = new Integer((-247));
      Integer integer2 = new Integer((-247));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer2, integer0, integer2, integer1, integer2);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) multiKey0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) integer1;
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = (Object) integer0;
      objectArray0[6] = (Object) multiKey0;
      objectArray0[7] = (Object) integer1;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      boolean boolean0 = multiKey0.equals(objectArray0[6]);
      assertTrue(boolean0);
      
      Integer integer3 = new Integer((-1));
      Integer integer4 = new Integer(7);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer3, integer0, integer4, integer2);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[-247, -247, -247, -247, -247]", string0);
      assertFalse(multiKey0.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-1051));
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-247));
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer1, integer1);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0);
      Integer integer2 = new Integer(9);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "MultiKey[0, 0]";
      stringArray0[1] = "MultiKey[0, 0]";
      stringArray0[2] = "MultiKey[0, 0]";
      stringArray0[3] = "MultiKey[0, 0]";
      stringArray0[4] = "MultiKey[0, 0]";
      stringArray0[5] = "MultiKey[0, 0]";
      stringArray0[6] = "MultiKey[0, 0]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer1, integer2, "MultiKey[0, 0]", "");
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[0, 9, MultiKey[0, 0], ]", string0);
      
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey3, multiKey3, multiKey3);
      boolean boolean0 = multiKey4.equals(multiKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      int int0 = multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "8-%DB&%(", "", "", (String) null);
      multiKey1.toString();
      multiKey1.equals("");
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(234);
      Integer integer2 = new Integer(1);
      Integer integer3 = new Integer(3772);
      Integer integer4 = new Integer(1);
      Integer integer5 = new Integer((-17));
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer5;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      int int1 = multiKey2.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "");
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null, object0, (Object) null, (Object) null);
      multiKey1.getKey(0);
      multiKey1.toString();
      Integer integer0 = new Integer((-2276));
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, (Object) null, (Object) null, (Object) null, integer0);
      Integer integer1 = new Integer((-2276));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer1, integer1);
      multiKey3.toString();
      multiKey3.toString();
      multiKey2.toString();
      multiKey3.toString();
      multiKey2.toString();
      multiKey3.size();
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey(628);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 628
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "MAm-t^Jm>", "MAm-t^Jm>", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals((Object) null);
      multiKey0.toString();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey0.equals((Object) null);
      multiKey0.getKey(0);
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.toString();
      multiKey2.toString();
      multiKey2.toString();
      int int0 = multiKey2.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKey0.toString();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey1.equals(objectArray0[0]);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.equals("MultiKey[, ]");
      int int0 = multiKey0.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "a0h%._,{";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      Object object0 = new Object();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", object0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey0.getKeys();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer2, integer0);
      int int0 = multiKey2.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      int int0 = multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "MultiKey", (String) null, "@cyS");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1);
      int int1 = multiKey2.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = null;
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "", "MultiKey");
      int int0 = 1101;
      // Undeclared exception!
      try { 
        multiKey0.getKey(1101);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1101
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "F=#}[]/xb>\"([W", "F=#}[]/xb>\"([W", "", "F=#}[]/xb>\"([W");
      multiKey0.toString();
      multiKey0.toString();
      int int0 = 0;
      multiKey0.getKey(0);
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(666);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[2]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      int int1 = multiKey1.size();
      assertEquals(7, int1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(1015);
      String string0 = "";
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      // Undeclared exception!
      try { 
        multiKey0.getKey(1015);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1015
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(655);
      Integer integer1 = new Integer(655);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer1);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[655, 655, 655, 655, 655]", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      MultiKey<String> multiKey0 = new MultiKey<String>("bFt5%vB", "#}B?'G+x_|Cwg)PJ", "", "");
      multiKey0.getKey(1);
      objectArray0[0] = (Object) "#}B?'G+x_|Cwg)PJ";
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      Object object3 = new Object();
      objectArray0[4] = object3;
      Integer integer0 = new Integer(1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", integer0, "");
      multiKey1.getKey(0);
      objectArray0[5] = (Object) "";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      int int0 = multiKey2.size();
      assertEquals(6, int0);
  }
}
