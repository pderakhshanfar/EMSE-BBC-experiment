/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:43:20 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer((-4389));
      Integer integer1 = new Integer((-4389));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      Integer integer2 = new Integer((-2163));
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integer2);
      multiKey1.toString();
      boolean boolean0 = multiKey1.equals(integer2);
      assertFalse(boolean0);
      
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer1, (Integer) null);
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey2, multiKey0, multiKey2, multiKey0);
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.hashCode();
      Object object1 = new Object();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(object0, (Object) null, object1, "MultiKey[MultiKey[-4389, -4389, -4389, -4389], MultiKey[-4389, -4389, null], MultiKey[-4389, -4389, -4389, -4389], MultiKey[-4389, -4389, null], MultiKey[-4389, -4389, -4389, -4389]]");
      Object[] objectArray0 = new Object[0];
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[-4389, -4389, null]", string0);
      
      MultiKey<Object> multiKey5 = new MultiKey<Object>(objectArray0);
      MultiKey<String> multiKey6 = new MultiKey<String>("3 E&L", "MultiKey[-4389, -2163]", "MultiKey[MultiKey[-4389, -4389, -4389, -4389], MultiKey[-4389, -4389, null], MultiKey[-4389, -4389, -4389, -4389], MultiKey[-4389, -4389, null], MultiKey[-4389, -4389, -4389, -4389]]", "3 E&L", "MultiKey[MultiKey[-4389, -4389, -4389, -4389], MultiKey[-4389, -4389, null], MultiKey[-4389, -4389, -4389, -4389], MultiKey[-4389, -4389, null], MultiKey[-4389, -4389, -4389, -4389]]");
      multiKey5.size();
      assertFalse(multiKey5.equals((Object)multiKey4));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      String string0 = "";
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 7);
      String string1 = "t8cv{<N0";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "t8cv{<N0");
      multiKeyArray0[0] = multiKey0;
      String string2 = ":Z";
      MultiKey<String> multiKey1 = new MultiKey<String>(":Z", ":Z");
      multiKeyArray0[1] = multiKey1;
      String[] stringArray0 = null;
      multiKeyArray0[2] = multiKey1;
      MultiKey<String> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", object0, "");
      Integer integer0 = new Integer(1064);
      Integer integer1 = new Integer(1064);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer0);
      multiKey1.toString();
      multiKey0.equals(multiKey0);
      Object[] objectArray0 = multiKey0.getKeys();
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "x)]-n} A1fD+~W", "x)]-n} A1fD+~W", "W}~r`MHb", "C`1%u}Lf0n})[BQ*G");
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, x)]-n} A1fD+~W, x)]-n} A1fD+~W, W}~r`MHb, C`1%u}Lf0n})[BQ*G]", string0);
      
      Object object0 = multiKey0.getKey(0);
      assertEquals("", object0);
      
      Object object1 = new Object();
      Integer integer0 = new Integer((-1));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, integer0);
      Integer integer1 = new Integer((-1));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer1, (Integer) null, integer0, (Integer) null);
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "g";
      stringArray0[1] = "S }'4";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.toString();
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, "g", integer0, object0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("S }'4", multiKey1);
      multiKey2.hashCode();
      multiKey1.toString();
      multiKey2.toString();
      multiKey0.getKeys();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      boolean boolean0 = multiKey0.equals("MultiKey[g, S }'4]");
      assertFalse(boolean0);
      
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.hashCode();
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>((Integer) null, integer1, (Integer) null, integer2);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[null, 0, null, 0]", string0);
      
      Integer integer3 = multiKey3.getKey(0);
      assertNull(integer3);
      
      multiKey1.hashCode();
      multiKey1.getKeys();
      assertFalse(multiKey1.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>(".-i{a_5MQo>a", ".-i{a_5MQo>a", ".-i{a_5MQo>a", ".-i{a_5MQo>a");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      multiKey1.getKeys();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[.-i{a_5MQo>a, .-i{a_5MQo>a, .-i{a_5MQo>a, .-i{a_5MQo>a]", "MultiKey[.-i{a_5MQo>a, .-i{a_5MQo>a, .-i{a_5MQo>a, .-i{a_5MQo>a]");
      multiKey2.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey0, multiKey0);
      multiKey3.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      String string0 = "[a`9\"LiA ce;=6-r4j}";
      stringArray0[1] = "[a`9\"LiA ce;=6-r4j}";
      stringArray0[2] = "";
      stringArray0[3] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.toString();
      String string1 = "6C~";
      MultiKey<String> multiKey1 = new MultiKey<String>("", "MA)0q}T %A+Jrdb:!t", "c,'y", "");
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1317));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1317
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.hashCode();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "MultiKey[, ]";
      multiKey0.toString();
      objectArray0[1] = (Object) "MultiKey[, ]";
      objectArray0[2] = (Object) multiKey0;
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.hashCode();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      multiKey2.size();
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey2.equals("MultiKey[, ]");
      multiKey1.size();
      Object object0 = new Object();
      boolean boolean0 = multiKey1.equals(object0);
      assertFalse(boolean0);
      
      multiKey1.hashCode();
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(4);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0, false);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[5, 3, 4]", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null, (Integer) null, (Integer) null);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>(";T#'\"K&Y<dwsK2zP[Z_", "", "org.apache.commons.collections4.keyvalue.MultiKey", (String) null);
      multiKey1.hashCode();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[null, null, null, null, null]", multiKey1, integer1, (Object) null);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer0, multiKey2);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey3, (Object) null, "The array of keys must not be null", "/Cl2U_0N8WdGY", (Object) null);
      int int0 = multiKey4.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object2, "6e.", object0);
      Object object3 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("6e.", object0, object1, multiKey0, object3);
      multiKey1.toString();
      multiKey1.toString();
      Object object4 = multiKey1.getKey(1);
      assertSame(object4, object0);
      
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null);
      multiKey2.getKeys();
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>((Integer) null, integer0);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[null, 0]", string0);
  }
}
