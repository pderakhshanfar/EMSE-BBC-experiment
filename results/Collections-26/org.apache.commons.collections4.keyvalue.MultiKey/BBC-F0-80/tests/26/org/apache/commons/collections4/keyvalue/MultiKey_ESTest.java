/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:54:04 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.toString();
      multiKey0.equals(integer0);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1);
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1);
      multiKey4.getKeys();
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, multiKey0, object0, "");
      multiKey1.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, , , , ]", string0);
      
      Integer integer0 = new Integer(11);
      boolean boolean0 = multiKey1.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-1577));
      Integer integer1 = new Integer((-1577));
      Integer integer2 = new Integer((-1366));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer2, (Integer) null);
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.toString();
      multiKey0.equals(integer0);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      String[] stringArray1 = multiKey1.getKeys();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(stringArray1);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object) null, multiKey1, multiKey1);
      multiKey3.getKey(0);
      String[] stringArray2 = multiKey1.getKeys();
      assertEquals(0, stringArray2.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKey0.toString();
      multiKey0.size();
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(2);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1, integer2);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[, ]", (Object) null, multiKey1, integer1, "MultiKey[, ]");
      MultiKey<Object> multiKey3 = new MultiKey<Object>("MultiKey[, ]", multiKey2);
      multiKey3.toString();
      multiKey3.toString();
      multiKey1.toString();
      multiKey3.toString();
      multiKey3.getKeys();
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey2.getKey(0);
      multiKey3.toString();
      multiKey1.toString();
      multiKey1.getKey(0);
      multiKey3.size();
      multiKey3.hashCode();
      // Undeclared exception!
      try { 
        multiKey3.getKey(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-2012));
      Integer integer1 = new Integer((-147));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1);
      Object object0 = multiKey0.getKey(1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, integer1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, multiKey0);
      assertEquals(2, multiKey2.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(3007);
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", "", integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer1 = new Integer(1576);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1);
      multiKey1.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[3007, 3007, 1576]", string0);
      
      multiKey1.size();
      multiKey0.size();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.getKeys();
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object) null, (Object) null, object0, "MultiKey[, , , 3007, 3007]", "MultiKey[3007, 3007, 1576]");
      boolean boolean0 = multiKey0.equals(multiKey3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      MultiKey<String> multiKey0 = new MultiKey<String>("", "5sss-/wrG=>0", "");
      // Undeclared exception!
      try { 
        multiKey0.getKey(903);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 903
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 5);
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "9cWj>[");
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>(")&'Yl'y}<D]e,t", "v6>']_F,7", "v6>']_F,7", (String) null);
      multiKeyArray0[1] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("", "NEOK", "org.apache.commons.collections4.keyvalue.MultiKey", (String) null);
      multiKeyArray0[2] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("NEOK", (String) null);
      multiKeyArray0[3] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>((String) null, ")&'Yl'y}<D]e,t", (String) null, "");
      multiKeyArray0[4] = multiKey4;
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      String string0 = multiKey5.toString();
      assertEquals("MultiKey[MultiKey[null, 9cWj>[], MultiKey[)&'Yl'y}<D]e,t, v6>']_F,7, v6>']_F,7, null], MultiKey[, NEOK, org.apache.commons.collections4.keyvalue.MultiKey, null], MultiKey[NEOK, null], MultiKey[null, )&'Yl'y}<D]e,t, null, ]]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(2);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(2660);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((int) integerArray0[6]);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer((int) integerArray0[7]);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer7, integer8);
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "|T9a]mtZHd=MQy=pJj";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.hashCode();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) stringArray0, true);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.equals("");
      int int0 = 3517;
      // Undeclared exception!
      try { 
        multiKey2.getKey(3517);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3517
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      boolean boolean0 = multiKey0.equals("*,0Qdd)d=z;");
      assertFalse(boolean0);
  }
}
