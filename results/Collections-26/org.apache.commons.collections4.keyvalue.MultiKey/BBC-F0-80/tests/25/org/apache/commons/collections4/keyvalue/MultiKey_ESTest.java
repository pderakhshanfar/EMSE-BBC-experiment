/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:54:13 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("OfV}M./Mtb{xIBiPqn", "q^j(", "q^j(", "OfV}M./Mtb{xIBiPqn");
      Integer integer0 = new Integer(1456);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("q^j(", multiKey0, integer0, integer0, object0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, object0, "OfV}M./Mtb{xIBiPqn", multiKey0, "q^j(");
      Object object1 = multiKey2.getKey(3);
      boolean boolean0 = multiKey0.equals(object1);
      assertFalse(multiKey2.equals((Object)multiKey1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer integer0 = new Integer(1);
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", (String) null, (String) null, ";");
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null);
      multiKey1.getKey(1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, (Object) null);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey2, multiKey2);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[null, null], MultiKey[null, null], MultiKey[null, null], MultiKey[null, null]]", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("!w", "", "Wk&,");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.getKeys();
      MultiKey<String> multiKey2 = new MultiKey<String>("Wk&,", "", "", "");
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey2, multiKey2);
      multiKey3.toString();
      multiKey3.toString();
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "^hWRp,5";
      objectArray0[1] = (Object) "^hWRp,5";
      objectArray0[2] = (Object) "^hWRp,5";
      objectArray0[3] = (Object) "^hWRp,5";
      objectArray0[4] = (Object) "^hWRp,5";
      objectArray0[5] = (Object) "^hWRp,5";
      objectArray0[6] = (Object) "^hWRp,5";
      objectArray0[7] = (Object) "^hWRp,5";
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("^hWRp,5", multiKey0, "^hWRp,5");
      multiKey1.getKey(0);
      Object object0 = new Object();
      multiKey1.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1);
      Object object1 = multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("^hWRp,5", object0, object1);
      multiKey3.toString();
      multiKey0.size();
      Integer integer2 = new Integer(0);
      boolean boolean0 = multiKey0.equals(integer2);
      assertFalse(boolean0);
      
      multiKey0.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[0, 0]", string0);
      
      MultiKey<String> multiKey4 = new MultiKey<String>("", "v?]_VG?LcZ", "^hWRp,5");
      MultiKey<Object> multiKey5 = new MultiKey<Object>(objectArray0, false);
      boolean boolean1 = multiKey4.equals(multiKey5);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      boolean boolean0 = true;
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MultiKey<MultiKey<String>> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "^hWRp,5";
      objectArray0[1] = (Object) "^hWRp,5";
      objectArray0[2] = (Object) "^hWRp,5";
      objectArray0[3] = (Object) "^hWRp,5";
      objectArray0[4] = (Object) "^hWRp,5";
      objectArray0[5] = (Object) "^hWRp,5";
      objectArray0[6] = (Object) "^hWRp,5";
      objectArray0[7] = (Object) "^hWRp,5";
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("^hWRp,5", multiKey0, "^hWRp,5");
      multiKey1.getKey(0);
      Object object0 = new Object();
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1);
      Object object1 = multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("^hWRp,5", object0, object1);
      multiKey3.toString();
      multiKey0.size();
      Integer integer2 = new Integer(0);
      multiKey0.equals(integer2);
      multiKey2.toString();
      MultiKey<String> multiKey4 = new MultiKey<String>("MultiKey[^hWRp,5, ^hWRp,5, ^hWRp,5, ^hWRp,5, ^hWRp,5, ^hWRp,5, ^hWRp,5, ^hWRp,5]", "MultiKey[^hWRp,5, ^hWRp,5, ^hWRp,5, ^hWRp,5, ^hWRp,5, ^hWRp,5, ^hWRp,5, ^hWRp,5]", "", "");
      multiKey4.toString();
      multiKey4.equals(objectArray0[1]);
      multiKey1.size();
      MultiKey<MultiKey<Integer>> multiKey5 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey2, multiKey2, multiKey2);
      MultiKey<Integer> multiKey6 = multiKey5.getKey(0);
      assertEquals(2, multiKey6.size());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) multiKey1;
      objectArray0[3] = (Object) multiKey1;
      Object object0 = new Object();
      objectArray0[4] = object0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey2);
      int int0 = 1843;
      // Undeclared exception!
      try { 
        multiKey3.getKey(1843);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1843
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("xr~z0L", "xr~z0L");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      multiKey0.equals("xr~z0L");
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, "MultiKey[xr~z0L, xr~z0L]");
      multiKey0.toString();
      multiKey1.hashCode();
      multiKey0.toString();
      multiKey1.getKeys();
      multiKey0.toString();
      Integer integer0 = new Integer(2);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, (Integer) null);
      multiKey2.toString();
      multiKey2.hashCode();
      // Undeclared exception!
      try { 
        multiKey1.getKey(469);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 469
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(3695);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-218));
      integerArray0[1] = integer1;
      int int0 = 0;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(3695);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[4]);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-20));
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-1));
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      Integer[] integerArray1 = multiKey0.getKeys();
      assertNotSame(integerArray0, integerArray1);
  }
}
