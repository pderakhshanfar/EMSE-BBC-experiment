/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:44:11 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-1802));
      Integer integer1 = new Integer((-1802));
      Integer integer2 = new Integer((-1802));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer2);
      multiKey0.toString();
      Integer integer3 = new Integer(1621);
      boolean boolean0 = multiKey0.equals(integer3);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 5);
      MultiKey<String> multiKey1 = new MultiKey<String>("G&q/5}fBCfmjt(2@ZO", "", "");
      multiKeyArray0[0] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "", "", "");
      multiKeyArray0[1] = multiKey2;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "MultiKey[-1802, -1802, -1802, -1802]";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      multiKeyArray0[2] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("MultiKey[-1802, -1802, -1802, -1802]", "");
      multiKeyArray0[3] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>("", "dg1JW5~8F}0z|k\"tWW~", "");
      String string0 = multiKey5.toString();
      assertEquals("MultiKey[, dg1JW5~8F}0z|k\"tWW~, ]", string0);
      
      boolean boolean1 = multiKey4.equals(multiKey4);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(2734);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey0.getKeys();
      MultiKey<String> multiKey1 = new MultiKey<String>("o5:53wZg;", "R$", "The array of keys must not be null", "", "o5:53wZg;");
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer1, integer0, integer2);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, multiKey0, (Object) null, multiKey0);
      Object object0 = multiKey1.getKey(0);
      objectArray0[0] = object0;
      multiKey1.getKey(2);
      objectArray0[1] = null;
      Object object1 = multiKey1.getKey(3);
      objectArray0[2] = object1;
      Object object2 = multiKey1.getKey(0);
      objectArray0[3] = object2;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-720));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -720
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "D:]u", "Mn");
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, , D:]u, Mn]", string0);
      
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, "", object0, object0, "K+J\"-ys,s/{A7=");
      multiKey1.toString();
      multiKey1.getKey(0);
      multiKey1.toString();
      multiKey1.size();
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey1.toString();
      multiKey0.hashCode();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 7);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      multiKeyArray0[5] = multiKey0;
      multiKeyArray0[6] = multiKey0;
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      boolean boolean0 = multiKey2.equals(multiKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(1671);
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1181);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[4]);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0);
      Integer integer6 = new Integer((-262));
      Integer integer7 = new Integer(1181);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0[5], integer6, integer7, integerArray0[0], (Integer) int0);
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, object0, int0, object1);
      // Undeclared exception!
      try { 
        multiKey3.getKey(1905);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1905
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object1, object0, integer0);
      int int0 = multiKey0.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-1802));
      Integer integer1 = new Integer((-1802));
      Integer integer2 = new Integer((-1802));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer2);
      multiKey0.toString();
      Integer integer3 = new Integer(1621);
      multiKey0.equals(integer3);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 5);
      MultiKey<String> multiKey1 = new MultiKey<String>("G&q/5}fBCfmjt(2@ZO", "", "");
      multiKeyArray0[0] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "", "", "");
      multiKeyArray0[1] = multiKey2;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "MultiKey[-1802, -1802, -1802, -1802]";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      multiKeyArray0[2] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("MultiKey[-1802, -1802, -1802, -1802]", "");
      multiKeyArray0[3] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>("", "MultiKey[-1802, -1802, -1802, -1802]", "", "MultiKey[-1802, -1802, -1802, -1802]", "");
      multiKeyArray0[4] = multiKey5;
      MultiKey<MultiKey<String>> multiKey6 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      MultiKey<String>[] multiKeyArray1 = multiKey6.getKeys();
      assertEquals(5, multiKeyArray1.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(",%@E[N", (String) null, ",%@E[N", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<Integer> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 8);
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer1);
      multiKeyArray0[0] = multiKey0;
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, integer2);
      multiKeyArray0[1] = multiKey1;
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[1] = integer3;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      multiKeyArray0[2] = multiKey2;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0, false);
      multiKeyArray0[3] = multiKey3;
      Integer integer4 = new Integer(int0);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer4, integer1, integer4, integer0, integer4);
      multiKeyArray0[4] = multiKey4;
      Integer integer5 = new Integer((-160));
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer5, integer1);
      multiKeyArray0[5] = multiKey5;
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integer4, integer0, integer1);
      multiKeyArray0[6] = multiKey6;
      MultiKey<Integer> multiKey7 = new MultiKey<Integer>(integerArray0);
      multiKeyArray0[7] = multiKey7;
      MultiKey<MultiKey<Integer>> multiKey8 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      assertEquals(8, multiKey8.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null, integer0);
      Object object1 = multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(")g (T^2HB.}", object0, ")g (T^2HB.}", ")g (T^2HB.}", object1);
      assertEquals(5, multiKey1.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 1174;
      Integer integer0 = new Integer(1174);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      // Undeclared exception!
      try { 
        multiKey0.getKey(1174);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1174
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
