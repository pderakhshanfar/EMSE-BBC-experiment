/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:43:28 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("@g", "@g");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("8*</aO>YJ", "8*</aO>YJ", "8*</aO>YJ", "8*</aO>YJ");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      Object object0 = multiKey1.getKey(0);
      multiKey0.equals(object0);
      String string0 = multiKey0.getKey(0);
      assertEquals("8*</aO>YJ", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer((-889));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2);
      Object object0 = new Object();
      Integer integer3 = new Integer(1824);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, integer3, multiKey1);
      multiKey2.toString();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "MultiKey[java.lang.Object@7ff0de83, 1824, MultiKey[]]";
      stringArray0[1] = "MultiKey[java.lang.Object@7ff0de83, 1824, MultiKey[]]";
      stringArray0[2] = "MultiKey[java.lang.Object@7ff0de83, 1824, MultiKey[]]";
      stringArray0[3] = "MultiKey[java.lang.Object@7ff0de83, 1824, MultiKey[]]";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      multiKey3.toString();
      multiKey2.toString();
      multiKey3.toString();
      multiKey3.equals(multiKey1);
      multiKey3.toString();
      multiKey1.getKeys();
      // Undeclared exception!
      try { 
        multiKey3.getKey(1824);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1824
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("MultiKey", "KW{,R@P.", "MultiKey");
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey0.toString();
      MultiKey<Integer> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      multiKey0.toString();
      multiKey0.getKey(0);
      Integer integer1 = new Integer(0);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) integer1;
      objectArray0[2] = (Object) integer0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      Object object1 = multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object) null, object1);
      Object object2 = multiKey3.getKey(1);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(integer1, (Object) null, integer1, multiKey1, object2);
      multiKey4.getKey(1);
      multiKey4.toString();
      Object object3 = new Object();
      multiKey1.toString();
      Object object4 = new Object();
      MultiKey<Object> multiKey5 = new MultiKey<Object>((Object) null, object3, object4, "MultiKey[0, 0, 0, 0]");
      multiKey5.equals(multiKey1);
      multiKey3.toString();
      MultiKey<String> multiKey6 = null;
      try {
        multiKey6 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("%[@odh+S9>$m", "");
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[%[@odh+S9>$m, ]", string0);
      
      multiKey1.equals("%[@odh+S9>$m");
      multiKey0.hashCode();
      Integer[] integerArray0 = new Integer[8];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      int int1 = 5;
      Integer integer2 = new Integer(5);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int1);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(1);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      Integer integer8 = multiKey2.getKey(int0);
      boolean boolean0 = multiKey0.equals(integer8);
      assertFalse(boolean0);
      
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer3, "", "", (Object) null);
      int int2 = multiKey3.hashCode();
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("~D[dQ?opu`", "", "`mY$)7 [8", "X'ID|eH6b^PX1?V");
      multiKey0.hashCode();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("4+8tO8['4FCPa2bGc", "X'ID|eH6b^PX1?V", object0, "`mY$)7 [8", multiKey0);
      multiKey1.getKeys();
      multiKey1.toString();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 4);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey0.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.equals((Object) null);
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      multiKey3.hashCode();
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      multiKey4.hashCode();
      int int0 = multiKey1.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("KOxi|+~&(rJ", "UrTH", "ekS,CG");
      int int0 = multiKey0.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = (-236);
      Integer integer0 = new Integer((-236));
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "]>/gBWX09>3#~*";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = ".Bm9tQX]LbcH'4ZS*";
      stringArray0[5] = "K1[2g*,QuTT\"McdB.Z";
      stringArray0[6] = "~YhD k(O|pjCm5";
      stringArray0[7] = "";
      stringArray0[8] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      assertEquals(9, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      int int0 = 1754;
      Integer integer0 = new Integer(1754);
      Integer integer1 = new Integer(1754);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0);
      int int1 = 0;
      Integer integer2 = multiKey0.getKey(0);
      objectArray0[0] = (Object) integer2;
      String string0 = "";
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      // Undeclared exception!
      try { 
        multiKey1.getKey(1754);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1754
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
