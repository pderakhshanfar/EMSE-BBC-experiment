/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:44:04 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "{.`JG|[Bvdk8s]0DE", "{.`JG|[Bvdk8s]0DE", "L6?us1^:");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 3);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      Object object0 = multiKey1.getKey(0);
      boolean boolean0 = multiKey0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("2;aMO", "2;aMO", ";Ag0sETvOERN");
      MultiKey<String> multiKey1 = new MultiKey<String>("2;aMO", "The array of keys must not be null", "");
      MultiKey<String> multiKey2 = new MultiKey<String>(";Ag0sETvOERN", "/:-`aLD9a", (String) null, (String) null, "^OwW&VRbA");
      multiKey1.equals(multiKey2);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      MultiKey<Object>[] multiKeyArray1 = multiKey3.getKeys();
      assertEquals(0, multiKeyArray1.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "],>==|G}J@A+u");
      multiKey0.getKey(0);
      objectArray0[1] = (Object) null;
      objectArray0[2] = objectArray0[0];
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      assertEquals(9, multiKey1.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null, (Integer) null);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 1);
      MultiKey<String> multiKey2 = new MultiKey<String>((String) null, "", "", (String) null);
      multiKeyArray0[0] = multiKey2;
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKeyArray0);
      boolean boolean0 = multiKey3.equals(multiKey4);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "n!e;so9I:dk";
      stringArray0[1] = "n!e;so9I:dk";
      stringArray0[2] = "FA!<X[YV50";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      MultiKey<String> multiKey2 = new MultiKey<String>("n!e;so9I:dk", "vs)1WbnqLGZ1&|t[X", "", "vs)1WbnqLGZ1&|t[X");
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, true);
      MultiKey<String> multiKey4 = new MultiKey<String>("", "?JZ");
      MultiKey<String> multiKey5 = new MultiKey<String>("", "MultiKey");
      MultiKey<String> multiKey6 = new MultiKey<String>((String) null, "\"4(OO)XcSHH|@F{jNV");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 3);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey3;
      multiKeyArray0[2] = multiKey2;
      MultiKey<MultiKey<String>> multiKey7 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      MultiKey<MultiKey<String>> multiKey8 = new MultiKey<MultiKey<String>>(multiKey3, multiKey0);
      MultiKey<Object> multiKey9 = new MultiKey<Object>((Object[]) stringArray0, false);
      multiKey9.size();
      multiKey9.equals(multiKey3);
      assertFalse(multiKey3.equals((Object)multiKey2));
      
      Integer integer0 = new Integer(3);
      MultiKey<Integer> multiKey10 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer0);
      String string0 = multiKey10.toString();
      assertEquals("MultiKey[3, 3, 3, 3, 3]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-3869));
      Integer integer1 = new Integer((-3869));
      Integer integer2 = new Integer((-3869));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer2, integer1);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 7);
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, (String) null, (String) null);
      multiKeyArray0[0] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>((String) null, (String) null, "");
      multiKeyArray0[1] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null, (String) null);
      multiKey1.toString();
      multiKeyArray0[2] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("uEA%FVZ=Q", "9|P,", (String) null, (String) null);
      multiKeyArray0[3] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>("YHRTymC{", "NLB]m.Sy>TU.;");
      multiKeyArray0[4] = multiKey5;
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey6 = new MultiKey<String>(stringArray0);
      multiKeyArray0[5] = multiKey6;
      MultiKey<String> multiKey7 = new MultiKey<String>("9|P,", "8mW8");
      String string0 = multiKey7.toString();
      assertEquals("MultiKey[9|P,, 8mW8]", string0);
      
      multiKeyArray0[6] = multiKey7;
      MultiKey<MultiKey<String>> multiKey8 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      boolean boolean0 = multiKey8.equals(multiKey0);
      assertFalse(boolean0);
      
      multiKey6.size();
      MultiKey<Object> multiKey9 = new MultiKey<Object>((Object) null, multiKey7, (Object) null, multiKey5);
      multiKey9.size();
      assertFalse(multiKey7.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(";^hUw>7", "/)uf", "/)uf");
      Integer integer0 = new Integer(1340);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(1);
      Integer integer3 = new Integer(1);
      Integer integer4 = new Integer((-2169));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, integer2, integer0, integer3, integer4);
      MultiKey<Integer> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Integer>((Integer[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("H$Oo#Un", "H$Oo#Un", "H$Oo#Un");
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      multiKey0.getKeys();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "H$Oo#Un";
      stringArray0[1] = "H$Oo#Un";
      stringArray0[2] = "H$Oo#Un";
      stringArray0[3] = "H$Oo#Un";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-916));
      Integer integer1 = new Integer((-916));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1);
      multiKey0.toString();
      multiKey0.size();
      Integer integer2 = new Integer((-916));
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer2, (Object) null, "jqf_G<o;Ey8q<Q?l", "");
      // Undeclared exception!
      try { 
        multiKey1.getKey((-630));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -630
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0, ":^1@[1Ap4U!$#bC|xx", object0);
      multiKey0.getKey(3);
      String[] stringArray0 = new String[9];
      stringArray0[0] = ":^1@[1Ap4U!$#bC|xx";
      stringArray0[1] = ":^1@[1Ap4U!$#bC|xx";
      stringArray0[2] = "/<8ARJ(5<m\"4[&$HPk";
      stringArray0[3] = ":^1@[1Ap4U!$#bC|xx";
      stringArray0[4] = ":^1@[1Ap4U!$#bC|xx";
      stringArray0[5] = ":^1@[1Ap4U!$#bC|xx";
      stringArray0[6] = ":^1@[1Ap4U!$#bC|xx";
      stringArray0[7] = ":^1@[1Ap4U!$#bC|xx";
      stringArray0[8] = ":^1@[1Ap4U!$#bC|xx";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[:^1@[1Ap4U!$#bC|xx, :^1@[1Ap4U!$#bC|xx, /<8ARJ(5<m\"4[&$HPk, :^1@[1Ap4U!$#bC|xx, :^1@[1Ap4U!$#bC|xx, :^1@[1Ap4U!$#bC|xx, :^1@[1Ap4U!$#bC|xx, :^1@[1Ap4U!$#bC|xx, :^1@[1Ap4U!$#bC|xx]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0, (Integer) null);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 9);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "", "6E6qXM-;W{i8W");
      multiKeyArray0[0] = multiKey1;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "6E6qXM-;W{i8W";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "6E6qXM-;W{i8W";
      stringArray0[5] = "n!e;so9I:dk";
      stringArray0[6] = "6E6qXM-;W{i8W";
      stringArray0[7] = "";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      multiKeyArray0[1] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("G#YldeE2&,Qf", "6E6qXM-;W{i8W", "Z@tz?u5", "", "");
      multiKeyArray0[2] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0, true);
      multiKeyArray0[3] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>("Z@tz?u5", "The array of keys must not be null", "", "vs)1WbnqLGZ1&|t[X");
      multiKeyArray0[4] = multiKey5;
      MultiKey<String> multiKey6 = new MultiKey<String>(stringArray0, false);
      multiKeyArray0[5] = multiKey6;
      MultiKey<String> multiKey7 = new MultiKey<String>("", "B+4*0J>O4");
      multiKeyArray0[6] = multiKey7;
      MultiKey<String> multiKey8 = new MultiKey<String>("", "~$n/+cI$Mf{Hl+");
      multiKeyArray0[7] = multiKey8;
      MultiKey<String> multiKey9 = new MultiKey<String>("", "B+4*0J>O4");
      multiKeyArray0[8] = multiKey9;
      MultiKey<MultiKey<String>> multiKey10 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      boolean boolean0 = multiKey10.equals(multiKey9);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer((-355));
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer(5);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer2);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[-355, -355, -355, -1, 5]", string0);
      
      boolean boolean0 = multiKey0.equals(integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(";^hUw>7", "/)uf", "/)uf");
      Integer integer0 = new Integer(1340);
      Integer integer1 = new Integer((-1));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1);
      boolean boolean0 = multiKey1.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>("@[#%QBVLg", "MultiKey", "The array of keys must not be null");
      Integer integer0 = new Integer(1791);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integer0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, multiKey0, multiKey1);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) multiKey1;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, false);
      // Undeclared exception!
      try { 
        multiKey3.getKey(1791);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1791
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "MultiKey";
      MultiKey<Object> multiKey0 = new MultiKey<Object>("MultiKey", "MultiKey", "MultiKey", (Object) null);
      int int0 = 1736;
      // Undeclared exception!
      try { 
        multiKey0.getKey(1736);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1736
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 1890;
      Integer integer0 = new Integer(1890);
      Integer integer1 = new Integer(2);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer1);
      // Undeclared exception!
      try { 
        multiKey0.getKey(2218);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2218
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer((-2484));
      String string0 = "";
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-2484));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2484
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
