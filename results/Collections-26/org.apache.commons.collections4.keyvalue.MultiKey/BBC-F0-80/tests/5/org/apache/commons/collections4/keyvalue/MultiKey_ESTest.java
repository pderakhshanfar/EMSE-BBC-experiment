/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:43:27 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>("", "c(<wqG", "", "c(<wqG", "c(<wqG");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.equals(multiKey0);
      Integer integer0 = new Integer(1231);
      Integer integer1 = new Integer((-176));
      assertEquals((-176), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "-mqIf{X:W*v", "");
      multiKey0.getKey(0);
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2, integer2);
      Integer integer3 = multiKey1.getKey(0);
      objectArray0[2] = (Object) integer3;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.getKey(0);
      multiKey2.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.getKeys();
      multiKey0.toString();
      multiKey2.size();
      Object[] objectArray1 = multiKey2.getKeys();
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "lt)rCs@|6tw.bt1*<";
      stringArray0[4] = "";
      stringArray0[5] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.getKey(0);
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", "", multiKey1, multiKey0, "");
      String string0 = multiKey2.toString();
      Object object0 = multiKey2.getKey(0);
      assertFalse(object0.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(1716);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      int int0 = multiKey0.size();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "MultiKey[1716, 1716]";
      stringArray0[1] = "MultiKey[1716, 1716]";
      stringArray0[2] = "MultiKey[1716, 1716]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      int int1 = multiKey1.hashCode();
      //  // Unstable assertion: assertTrue(int1 == int0);
      
      multiKey1.toString();
      multiKey1.size();
      multiKey1.getKeys();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) stringArray0, false);
      String string0 = multiKey2.toString();
      //  // Unstable assertion: assertEquals("MultiKey[MultiKey[1716, 1716], MultiKey[1716, 1716], MultiKey[1716, 1716]]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKey0.equals("");
      multiKey0.toString();
      multiKey0.toString();
      String string0 = "+}=^cs3iZN$AT";
      MultiKey<String> multiKey1 = new MultiKey<String>("{=UG_Ek0P6o", "", "+}=^cs3iZN$AT");
      multiKey1.toString();
      multiKey0.equals(multiKey1);
      multiKey1.hashCode();
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKey2.getKeys();
      multiKey0.hashCode();
      multiKey0.hashCode();
      multiKey0.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey0.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[, ]", (String) null);
      multiKey3.toString();
      multiKey3.toString();
      // Undeclared exception!
      try { 
        multiKey3.getKey((-1981));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1981
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertFalse(boolean0);
      
      multiKey1.hashCode();
      assertFalse(multiKey0.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      int int0 = 0;
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, "", "", "");
      multiKey1.toString();
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(348);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKey2.toString();
      multiKey2.getKeys();
      int int1 = multiKey1.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null", "smG:sHJp7:]U,mr/");
      int int0 = multiKey0.size();
      assertEquals(3, int0);
  }
}
