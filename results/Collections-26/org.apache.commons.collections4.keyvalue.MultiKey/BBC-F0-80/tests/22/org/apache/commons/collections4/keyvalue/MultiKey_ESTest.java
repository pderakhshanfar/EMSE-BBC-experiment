/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:53:24 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, integer0);
      multiKey0.toString();
      multiKey0.hashCode();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "8AQ_#9+Uf/F{$ OFd";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "@&2C$fq(I!Rv:cosB#";
      stringArray0[5] = "Q>*MycM{c,:,qF";
      stringArray0[6] = "$6'I8sUa>)A";
      stringArray0[7] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      String string0 = multiKey1.getKey(4);
      assertEquals("@&2C$fq(I!Rv:cosB#", string0);
      
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      multiKey2.getKeys();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      String string1 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[8AQ_#9+Uf/F{$ OFd, , , , @&2C$fq(I!Rv:cosB#, Q>*MycM{c,:,qF, $6'I8sUa>)A, ], MultiKey[8AQ_#9+Uf/F{$ OFd, , , , @&2C$fq(I!Rv:cosB#, Q>*MycM{c,:,qF, $6'I8sUa>)A, ], MultiKey[8AQ_#9+Uf/F{$ OFd, , , , @&2C$fq(I!Rv:cosB#, Q>*MycM{c,:,qF, $6'I8sUa>)A, ], MultiKey[8AQ_#9+Uf/F{$ OFd, , , , @&2C$fq(I!Rv:cosB#, Q>*MycM{c,:,qF, $6'I8sUa>)A, ], MultiKey[8AQ_#9+Uf/F{$ OFd, , , , @&2C$fq(I!Rv:cosB#, Q>*MycM{c,:,qF, $6'I8sUa>)A, ]]", string1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      int int0 = multiKey0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer0);
      multiKey0.toString();
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[0, 0, 0, 0]", string0);
      
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "MultiKey[0, 0, 0, 0]", (String) null, "", "kv7P'Fx");
      Integer integer2 = new Integer(2);
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[0, 0, 0, 0]", "g1N+L`", "o6;:}5\"H");
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey2);
      Object object1 = multiKey3.getKey(2);
      boolean boolean0 = multiKey1.equals(object1);
      assertTrue(boolean0);
      
      Integer integer3 = new Integer(2);
      Object object2 = new Object();
      Object object3 = new Object();
      Integer integer4 = new Integer(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(object3, "Ts.CQj:hVq?PC", integer4, "k|2+m4$orP");
      multiKey4.size();
      MultiKey<String> multiKey5 = new MultiKey<String>("", "", "7JO[9L:QiI");
      MultiKey<Object> multiKey6 = new MultiKey<Object>(integer2, "");
      multiKey4.hashCode();
      String string1 = multiKey5.getKey(2);
      assertFalse(multiKey5.equals((Object)multiKey2));
      assertEquals("7JO[9L:QiI", string1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, (Object) null, "");
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "]<%0VXP]y[1Z\"POC$Q@");
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.equals(multiKey1);
      // Undeclared exception!
      try { 
        multiKey0.getKey(2995);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2995
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = null;
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-926));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null, (Integer) null);
      multiKey0.equals((Object) null);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 3);
      MultiKey<String> multiKey1 = new MultiKey<String>("", ")", "", "", "");
      multiKeyArray0[0] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("", "");
      multiKeyArray0[1] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("", "", "");
      multiKeyArray0[2] = multiKey3;
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      multiKey4.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      boolean boolean0 = false;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.getKey(1);
      objectArray0[0] = null;
      Integer[] integerArray0 = new Integer[3];
      int int0 = (-36);
      Integer integer0 = new Integer((-36));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      Integer integer3 = multiKey1.getKey(1);
      objectArray0[1] = (Object) integer3;
      multiKey0.getKey(0);
      objectArray0[2] = null;
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1027));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1027
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(5);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0);
      multiKey0.size();
      Integer[] integerArray0 = new Integer[5];
      Integer integer1 = new Integer(3);
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      Integer[] integerArray1 = multiKey1.getKeys();
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, (Integer) null);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[-1, -1, null]", "amM1Sd(h-EK,2wT");
      multiKey0.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer1, multiKey1, object0);
      multiKey2.size();
      multiKey2.size();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey3.toString();
      // Undeclared exception!
      try { 
        multiKey3.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "MultiKey", "", "");
      multiKey0.getKey(3);
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-230));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-894));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[-230, 3, -894, 1]", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(658);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(658);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer1, integer2, integer2, integer0);
      multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>("", (String) null, (String) null, (String) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = null;
      stringArray0[2] = "";
      stringArray0[3] = null;
      stringArray0[4] = "?";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey2);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[, null, null, null], MultiKey[, null, null, null], MultiKey[, null, null, null], MultiKey[, null, null, null], MultiKey[, null, , null, ?]]", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer((-2674));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, (Integer) null, (Integer) null);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) integer0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.hashCode();
  }
}
