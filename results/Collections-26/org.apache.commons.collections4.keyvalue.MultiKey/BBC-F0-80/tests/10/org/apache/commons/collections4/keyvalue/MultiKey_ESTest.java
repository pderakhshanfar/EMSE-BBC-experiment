/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:47:07 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "l9$<kR+)@z&yz");
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      Object object0 = new Object();
      Integer integer0 = new Integer(5);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, object0, multiKey0, "", integer0);
      Object object1 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, object0, object1, object1, (Object) null);
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertFalse(boolean0);
      
      Integer integer1 = new Integer(5);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer1, integer1, integer1);
      boolean boolean1 = multiKey3.equals(object0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey0.toString();
      int int0 = multiKey0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "M";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, true);
      multiKey1.size();
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, "n3St00yZJe(]Ta", (String) null);
      multiKey0.toString();
      String string0 = multiKey0.getKey(0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-3875));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer0, integer0, integer1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey0.getKeys();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[-3875, -3875]", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "|,Rs{Q$";
      stringArray0[1] = "i*";
      stringArray0[2] = "";
      stringArray0[3] = "z.e";
      stringArray0[4] = "~ 40B[JBK;^\"w_pnn";
      stringArray0[5] = "";
      stringArray0[6] = "rs";
      stringArray0[7] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      MultiKey<Object> multiKey3 = multiKey2.getKey(0);
      multiKey3.toString();
      int int0 = multiKey3.size();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((-61));
      integerArray0[0] = integer0;
      int int0 = 3;
      Integer integer1 = new Integer(3);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      int int1 = 0;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int1);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray0);
      multiKey1.equals(integer4);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "MultiKey[-61, 3, 3, 0, 0, 0, 0]";
      stringArray0[2] = "MultiKey[-61, 3, 3, 0, 0, 0, 0]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      String[] stringArray1 = multiKey2.getKeys();
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, (Object) null, integer0, (Object) null);
      Object object0 = multiKey0.getKey(0);
      objectArray0[0] = object0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Integer integer1 = new Integer(14);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(269);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer2, integer3, integer0, integer1);
      MultiKey<String> multiKey3 = new MultiKey<String>("Uf;^/+'Y|I", "");
      multiKey3.getKey(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey1, objectArray0[0], multiKey2, "Uf;^/+'Y|I", objectArray0[0]);
      assertFalse(multiKey4.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 9);
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, (Object) null, multiKey0);
      multiKeyArray0[0] = multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[1] = multiKey2;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[2] = multiKey3;
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object2;
      objectArray0[1] = object2;
      objectArray0[2] = (Object) multiKey3;
      objectArray0[3] = (Object) multiKey1;
      objectArray0[4] = object1;
      objectArray0[5] = object2;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0, false);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey3, object1, object2, object3, multiKey4);
      MultiKey<Object> multiKey6 = new MultiKey<Object>(multiKey1, multiKey5, multiKey1, multiKey3);
      multiKeyArray0[3] = multiKey6;
      MultiKey<String> multiKey7 = new MultiKey<String>(":U}E3>lR", "", ".T(Y{V&Xd", "", ".T(Y{V&Xd");
      MultiKey<Object> multiKey8 = new MultiKey<Object>(object2, object2, object2, multiKey3, multiKey7);
      multiKeyArray0[4] = multiKey8;
      MultiKey<Object> multiKey9 = new MultiKey<Object>(objectArray0, true);
      MultiKey<Object> multiKey10 = new MultiKey<Object>("KUI}5g_Q9>", "KUI}5g_Q9>", multiKey9, ":U}E3>lR", "");
      multiKeyArray0[5] = multiKey10;
      MultiKey<Object> multiKey11 = new MultiKey<Object>(objectArray0, true);
      // Undeclared exception!
      try { 
        multiKey11.getKey((-410));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -410
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "KLbf^aDt}@%Ta!#";
      stringArray0[1] = "}B7%}K";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "The array of keys must not be null", "");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey1);
      multiKey0.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[KLbf^aDt}@%Ta!#, }B7%}K], MultiKey[, The array of keys must not be null, ]]", string0);
      
      multiKey2.size();
      Object[] objectArray0 = multiKey2.getKeys();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, true);
      boolean boolean0 = multiKey1.equals(multiKey3);
      assertTrue(multiKey3.equals((Object)multiKey2));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "The array of keys must not be null";
      stringArray0[1] = "";
      stringArray0[2] = "!S=:!by-m";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "S`g8$3QcK^2%c=T<;6$";
      stringArray0[6] = "";
      stringArray0[7] = "I}}BC!(m2A5_xg";
      stringArray0[8] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      int int0 = multiKey0.size();
      assertEquals(9, int0);
  }
}
