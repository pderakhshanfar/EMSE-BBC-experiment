/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:53:51 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("VO!", "VO!", "VO!", "VO!");
      MultiKey<String> multiKey1 = new MultiKey<String>("VO!", "VO!", "VO!");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1);
      Object object0 = multiKey2.getKey(1);
      boolean boolean0 = multiKey1.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      Object[] objectArray1 = multiKey0.getKeys();
      assertNotSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("The arry of keys must not e null", "The arry of keys must not e null");
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 7);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      multiKeyArray0[5] = multiKey0;
      multiKeyArray0[6] = multiKey0;
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[The arry of keys must not e null, The arry of keys must not e null]", string0);
      
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertTrue(boolean0);
      assertFalse(multiKey2.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-802));
      Integer integer1 = new Integer((-2865));
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      Integer integer2 = new Integer((int) integerArray0[1]);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer2, integerArray0[2], integerArray0[0], integerArray0[0]);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey1, multiKey1, multiKey0, multiKey0);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[-802, -2865, -2865], MultiKey[-2865, -2865, -802, -802], MultiKey[-2865, -2865, -802, -802], MultiKey[-802, -2865, -2865], MultiKey[-802, -2865, -2865]]", string0);
      
      multiKey2.hashCode();
      Integer integer3 = new Integer((-213));
      Integer integer4 = new Integer((-802));
      Integer integer5 = new Integer((-213));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer4, integer5, integer5, integer4);
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object[]) integerArray0, true);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey3, multiKey4);
      Integer integer6 = new Integer((-802));
      multiKey4.equals(multiKey0);
      assertFalse(multiKey0.equals((Object)multiKey1));
      assertFalse(multiKey4.equals((Object)multiKey5));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("The array of keys must not be null", "The array of keys must not be null", object0);
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-1));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2);
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, true);
      int int0 = multiKey2.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0, object0);
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.getKey(5);
      objectArray0[0] = null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      MultiKey<String> multiKey1 = new MultiKey<String>("n.>Y!;1", "n.>Y!;1");
      int int0 = 2160;
      // Undeclared exception!
      try { 
        multiKey1.getKey(2160);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2160
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-3908));
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, integer0, integer1, integer2);
      MultiKey<String> multiKey1 = new MultiKey<String>("1-S#L*GJRt<Jt?G]'%?", (String) null, "", "", "0jEN`Kcd,}#P>E");
      Integer integer3 = new Integer(0);
      boolean boolean0 = multiKey1.equals(integer3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-1277));
      Integer integer1 = new Integer((-1277));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer1);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "?%";
      multiKey0.toString();
      stringArray0[1] = "&]F7n'5{Tl#";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.equals(multiKey1);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      multiKey3.getKeys();
      multiKey3.toString();
      multiKey3.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey3.toString();
      multiKey3.getKey(0);
      multiKey1.getKeys();
      // Undeclared exception!
      try { 
        multiKey1.getKey(2201);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2201
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("Vg~V/", "Vg~V/");
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer((-1));
      multiKey0.equals(integer0);
      boolean boolean0 = multiKey0.equals("MultiKey[Vg~V/, Vg~V/]");
      assertFalse(boolean0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[-1]", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "The array of keys must not be null";
      stringArray0[1] = "";
      stringArray0[2] = "The array of keys must not be null";
      stringArray0[3] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("The array of keys must not be null", "The array of keys must not be null", "The array of keys must not be null");
      multiKey1.getKey(0);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey2.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer((-1804));
      Integer integer1 = new Integer(439);
      Integer integer2 = new Integer(439);
      Integer integer3 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer2, integer3);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[-1804, -1804, 439, 439, -1]", string0);
      
      Integer integer4 = new Integer((-1));
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey[-1804, -1804, 439, 439, -1]", "MultiKey[-1804, -1804, 439, 439, -1]", "MultiKey[-1804, -1804, 439, 439, -1]", integer4);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.hashCode();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "MultiKey[-1804, -1804, 439, 439, -1]";
      stringArray0[1] = "MultiKey[-1804, -1804, 439, 439, -1]";
      stringArray0[2] = "MultiKey[-1804, -1804, 439, 439, -1]";
      stringArray0[3] = "MultiKey[-1804, -1804, 439, 439, -1]";
      stringArray0[4] = "MultiKey[-1804, -1804, 439, 439, -1]";
      stringArray0[5] = "MultiKey[-1804, -1804, 439, 439, -1]";
      stringArray0[6] = "MultiKey[-1804, -1804, 439, 439, -1]";
      stringArray0[7] = "MultiKey[-1804, -1804, 439, 439, -1]";
      stringArray0[8] = "MultiKey[-1804, -1804, 439, 439, -1]";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      multiKey3.getKeys();
      Object object0 = new Object();
      boolean boolean0 = multiKey3.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = true;
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Integer integer0 = new Integer(266);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, multiKey1, objectArray0[3], object0, integer0);
      multiKey2.hashCode();
      // Undeclared exception!
      try { 
        multiKey0.getKey(266);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 266
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "o{q{";
      stringArray0[1] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.size();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer0);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[0, 0, 0]", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object1, object1);
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-206));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -206
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
