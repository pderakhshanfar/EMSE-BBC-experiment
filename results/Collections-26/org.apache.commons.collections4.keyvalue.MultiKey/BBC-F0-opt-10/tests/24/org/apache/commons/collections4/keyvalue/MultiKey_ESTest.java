/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:39:22 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("+L8z", "+L8z");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 3);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      multiKey1.getKeys();
      MultiKey<Object>[] multiKeyArray1 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray1, true);
      int int0 = multiKey2.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("YUL\u00048Zv&$4@*l@o*[", "YUL\u00048Zv&$4@*l@o*[", "");
      multiKey0.equals(multiKey0);
      multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "", "");
      Integer integer0 = new Integer((-2454));
      Integer integer1 = new Integer((-2454));
      Integer integer2 = new Integer(3);
      Integer integer3 = new Integer((-2454));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer2, integer1, integer1, integer3);
      assertEquals(5, multiKey2.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals((Object) null);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = multiKey1.getKey(0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.getKey(1);
      multiKey1.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[null, null]", "MultiKey[null, null]", "MultiKey[null, null]", "", "");
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.toString();
      multiKey1.toString();
      boolean boolean0 = multiKey2.equals("MultiKey[MultiKey[null, null], MultiKey[null, null], MultiKey[null, null], , ]");
      assertFalse(boolean0);
      
      multiKey3.size();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null]", string0);
      
      Object[] objectArray0 = multiKey0.getKeys();
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-1478));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "MultiKey[-1478, -1478, -1478]";
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) "MultiKey[-1478, -1478, -1478]";
      objectArray0[4] = (Object) "MultiKey[-1478, -1478, -1478]";
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) multiKey0;
      objectArray0[7] = (Object) "MultiKey[-1478, -1478, -1478]";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.equals(objectArray0[3]);
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1);
      multiKey1.toString();
      multiKey2.toString();
      String string0 = multiKey2.toString();
      multiKey2.toString();
      multiKey1.size();
      multiKey1.hashCode();
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[MultiKey[MultiKey[-1478, -1478, -1478], -1478, -1478, MultiKey[-1478, -1478, -1478], MultiKey[-1478, -1478, -1478], java.lang.Object@423e8201, MultiKey[-1478, -1478, -1478], MultiKey[-1478, -1478, -1478]], MultiKey[MultiKey[-1478, -1478, -1478], -1478, -1478, MultiKey[-1478, -1478, -1478], MultiKey[-1478, -1478, -1478], java.lang.Object@423e8201, MultiKey[-1478, -1478, -1478], MultiKey[-1478, -1478, -1478]], MultiKey[MultiKey[-1478, -1478, -1478], -1478, -1478, MultiKey[-1478, -1478, -1478], MultiKey[-1478, -1478, -1478], java.lang.Object@423e8201, MultiKey[-1478, -1478, -1478], MultiKey[-1478, -1478, -1478]]]", "GDBYUxc", "");
      String string1 = multiKey3.toString();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      Integer integer0 = new Integer((-5576));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0);
      multiKey2.toString();
      multiKey0.getKeys();
      MultiKey<String> multiKey3 = new MultiKey<String>("/05Z3{Z\"TAv>;XyStMZ", "MultiKey[]", "The array of keys must not be null", "");
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[/05Z3{Z\"TAv>;XyStMZ, MultiKey[], The array of keys must not be null, ]", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("YUL\u00048Zv&$4@*l@o*[", "YUL\u00048Zv&$4@*l@o*[", "");
      MultiKey<String> multiKey1 = new MultiKey<String>("YUL\u00048Zv&$4@*l@o*[", "", "YUL\u00048Zv&$4@*l@o*[", "");
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", (String) null, (String) null, "K'OD:L3~r`=M=<l.%3");
      multiKey0.equals("");
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer((-2567));
      Integer integer1 = new Integer(2972);
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1);
      multiKey1.toString();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(2972);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2972
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", (String) null, "MultiKey", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      Integer integer0 = new Integer(4);
      Integer integer1 = new Integer((-2130));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer1);
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey", "MultiKey[, null, MultiKey, ]");
      Integer integer2 = new Integer((-2496));
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, "MultiKey[, null, MultiKey, ]", integer2, (Object) null);
      multiKey1.toString();
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer2;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      // Undeclared exception!
      try { 
        multiKey4.getKey((int) integerArray0[0]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2496
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0, "", multiKey0);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[], MultiKey[], , MultiKey[]]", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      MultiKey<String> multiKey0 = new MultiKey<String>("", "h#@H|Vy{6`PfZq(GM", "", "", "");
      multiKey0.getKey(0);
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      objectArray0[1] = object0;
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 6);
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, (Integer) null, integer2, integer2);
      multiKeyArray0[0] = multiKey1;
      Integer integer3 = new Integer((-359));
      Integer integer4 = new Integer((-359));
      Integer integer5 = new Integer(1);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer3, integer3, integer4, integer5);
      multiKeyArray0[1] = multiKey2;
      Integer integer6 = new Integer(803);
      Integer integer7 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer6, integer7);
      multiKeyArray0[2] = multiKey3;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer7, integer7);
      multiKeyArray0[3] = multiKey4;
      Integer integer8 = new Integer(1);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer8, integer1, integer8, integer4);
      multiKeyArray0[4] = multiKey5;
      Integer integer9 = new Integer((-1));
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integer9, integer2);
      multiKeyArray0[5] = multiKey6;
      MultiKey<MultiKey<Integer>> multiKey7 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      MultiKey<Integer> multiKey8 = multiKey7.getKey(0);
      objectArray0[2] = (Object) multiKey8;
      Object object1 = new Object();
      objectArray0[3] = object1;
      Object object2 = new Object();
      objectArray0[4] = object2;
      MultiKey<Object> multiKey9 = new MultiKey<Object>("s';<s@", multiKey6);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey10 = new MultiKey<Integer>(integerArray0);
      // Undeclared exception!
      try { 
        multiKey10.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "(hK`BK*-F\"";
      Object object0 = new Object();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 7);
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer0);
      multiKeyArray0[0] = multiKey0;
      Integer integer1 = new Integer((-1));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, integer1);
      multiKeyArray0[1] = multiKey1;
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, true);
      multiKeyArray0[2] = multiKey2;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0, true);
      multiKeyArray0[3] = multiKey3;
      Integer integer2 = new Integer((-2218));
      Integer integer3 = new Integer((-2218));
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer2, integer3);
      multiKeyArray0[4] = multiKey4;
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integerArray0, true);
      multiKeyArray0[5] = multiKey5;
      Integer integer4 = new Integer(int0);
      Integer integer5 = new Integer(int0);
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>((Integer) null, integer4, integer0, integer5);
      multiKeyArray0[6] = multiKey6;
      MultiKey<MultiKey<Integer>> multiKey7 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      // Undeclared exception!
      try { 
        multiKey7.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
