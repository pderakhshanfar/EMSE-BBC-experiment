/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:03:16 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("Xqs!ru58Ka", "[RRCt}#.4LNp.");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.getKeys();
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("\"QvtQ{?E{!ILJd;b", "\"QvtQ{?E{!ILJd;b", "&Guyi", "&Guyi", "JxdT-(m~I?eL3");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      multiKey1.toString();
      Integer[] integerArray1 = multiKey1.getKeys();
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "The array of keys must not be null";
      stringArray0[1] = "<xEG@=<|k,08";
      stringArray0[2] = "}CJBu$<Oj\"#^;l";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.hashCode();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, (Integer) null);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(1);
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, object0, (Object) null, multiKey2);
      Object object1 = new Object();
      multiKey3.equals(integer2);
      multiKey2.equals(multiKey2);
      // Undeclared exception!
      try { 
        multiKey1.getKey(695);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 695
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("m_p", "m_p", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      int int0 = multiKey0.size();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("m_p", multiKey0, multiKey0, "");
      multiKey1.toString();
      multiKey1.getKey(3);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      boolean boolean0 = multiKey0.equals("m_p");
      assertFalse(boolean0);
      
      int int1 = multiKey0.hashCode();
      assertFalse(int1 == int0);
      
      multiKey1.getKey(3);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[m_p, MultiKey[m_p, m_p, ], MultiKey[m_p, m_p, ], ]", string0);
      
      Object[] objectArray0 = multiKey1.getKeys();
      multiKey0.size();
      multiKey1.hashCode();
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey0, multiKey3, multiKey1);
      boolean boolean1 = multiKey2.equals(multiKey4);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>("The array of keys must not be null", "The array of keys must not be null", integer0, "The array of keys must not be null");
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "U>!L#rHx4]%", "i$|M", "/,I8{L @qreZI", "");
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey1.getKey(0);
      multiKey1.getKey(0);
      multiKey0.getKeys();
      Integer integer1 = new Integer(4704);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer1, integer0);
      multiKey2.toString();
      multiKey2.size();
      multiKey2.toString();
      multiKey1.toString();
      multiKey1.getKey(0);
      multiKey1.hashCode();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 1);
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object) null, object0);
      multiKeyArray0[0] = multiKey3;
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      int int0 = multiKey4.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String string0 = null;
      String string1 = "The array of keys must not be null";
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "The array of keys must not be null", "The array of keys must not be null");
      multiKey0.size();
      Object[] objectArray0 = new Object[3];
      MultiKey<Object> multiKey1 = null;
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) multiKey0;
      objectArray1[1] = (Object) null;
      objectArray1[2] = (Object) null;
      objectArray1[3] = (Object) null;
      objectArray1[4] = (Object) multiKey0;
      objectArray1[5] = (Object) null;
      objectArray1[6] = (Object) multiKey0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray1, false);
      Object[] objectArray2 = new Object[1];
      objectArray2[0] = (Object) "The array of keys must not be null";
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray2);
      MultiKey<String> multiKey4 = new MultiKey<String>("The array of keys must not be null", "nH089HC-oq/'urmP");
      // Undeclared exception!
      try { 
        multiKey4.getKey(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      MultiKey<String> multiKey0 = new MultiKey<String>("/Ll,W(d([$89S909", "/Ll,W(d([$89S909", "O0", "O0");
      multiKey0.getKey(1);
      objectArray0[0] = (Object) "/Ll,W(d([$89S909";
      Object object0 = new Object();
      objectArray0[1] = object0;
      int int0 = (-2846);
      Integer integer0 = new Integer((-2846));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer0);
      int int1 = 425;
      // Undeclared exception!
      try { 
        multiKey1.getKey(425);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 425
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "Mo PiCSi$fa", "The array of keys must not be null", "NcI6^Pt!*");
      int int0 = 5;
      Integer integer0 = new Integer(5);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, (Integer) null, (Integer) null, integer0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "The array of keys must not be null";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = (Object) "The array of keys must not be null";
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey2.hashCode();
      multiKey0.hashCode();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, true);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey3, multiKey3, multiKey2);
      multiKey3.toString();
      multiKey2.toString();
      multiKey2.toString();
      Object object1 = new Object();
      multiKey4.equals(object1);
      multiKey0.hashCode();
      MultiKey<Object> multiKey5 = new MultiKey<Object>("", object0, "");
      // Undeclared exception!
      try { 
        multiKey5.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "");
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
