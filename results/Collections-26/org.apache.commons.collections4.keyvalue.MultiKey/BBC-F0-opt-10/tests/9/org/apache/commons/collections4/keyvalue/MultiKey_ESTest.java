/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:04:56 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 3);
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "uj.dt![:x'V?5v}");
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("uj.dt![:x'V?5v}", "uj.dt![:x'V?5v}");
      multiKeyArray0[1] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("7|_pTH|v[v!Z.MwA;", "Y~MgP6ZA<]j56G", "", "7|_pTH|v[v!Z.MwA;");
      multiKeyArray0[2] = multiKey2;
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "uj.dt![:x'V?5v}";
      stringArray0[2] = "Y~MgP6ZA<]j56G";
      stringArray0[3] = "Y~MgP6ZA<]j56G";
      multiKey3.toString();
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "uj.dt![:x'V?5v}";
      stringArray0[7] = "";
      multiKey1.getKey(1);
      multiKey3.equals("uj.dt![:x'V?5v}");
      Integer integer0 = new Integer(14);
      MultiKey<Object> multiKey4 = new MultiKey<Object>("uj.dt![:x'V?5v}", "Y~MgP6ZA<]j56G", "", integer0);
      multiKey4.getKeys();
      multiKey2.equals(multiKey2);
      int int0 = multiKey3.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null, (String) null);
      Integer integer0 = new Integer(1);
      MultiKey<String> multiKey1 = new MultiKey<String>(">2sX*DF5!Eo?e2=u", ">2sX*DF5!Eo?e2=u", ">2sX*DF5!Eo?e2=u", "");
      multiKey1.getKey(3);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, (Object) null, integer0, ">2sX*DF5!Eo?e2=u", "");
      Object object0 = multiKey2.getKey(1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("~[8=:7RU?ow%A", "~[8=:7RU?ow%A", "~[8=:7RU?ow%A");
      multiKey0.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, multiKey0, object0);
      multiKey0.size();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      Integer[] integerArray1 = multiKey2.getKeys();
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MultiKey<MultiKey<Object>> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>("DZCZ%qx9\"RTKzX!qv5", object0, integer0, integer1, object0);
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "5IQx(SKc`*hq&r^?");
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.getKey(1);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0);
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey0.getKey(0);
      multiKey0.getKey(0);
      int int0 = multiKey0.size();
      Integer integer2 = new Integer(5);
      multiKey0.equals(integer2);
      multiKey1.toString();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, false);
      int int1 = multiKey3.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(4133);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-790));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(444);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, true);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[4133, -790, 444]", string0);
      
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
      
      MultiKey<String> multiKey2 = new MultiKey<String>("/Ls1tq", "org.apache.commons.collections4.keyvalue.MultiKey", "MultiKey[4133, -790, 444]");
      boolean boolean1 = multiKey2.equals(integerArray0[1]);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) integer1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1162));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1162
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", (String) null, "");
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(380);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 380
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null]", string0);
      
      int int0 = multiKey0.size();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(2);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-530));
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      int int1 = multiKey1.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Usn{y-8tE";
      stringArray0[1] = "\"lb";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.getKeys();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("\"lb", multiKey0, "\"lb");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKey(0);
      multiKey0.equals("\"lb");
      MultiKey<Integer> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
