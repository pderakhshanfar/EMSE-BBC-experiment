/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:49:25 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "%at@");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0);
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, multiKey0, multiKey1, integer0);
      Object object0 = multiKey2.getKey(0);
      boolean boolean0 = multiKey1.equals(object0);
      assertFalse(multiKey2.equals((Object)multiKey1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "rr3;#Z6\"kbw.4m6", "rr3;#Z6\"kbw.4m6");
      Integer[] integerArray0 = new Integer[3];
      int int0 = 2;
      Integer integer0 = new Integer(2);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      multiKey1.equals(int0);
      Integer integer3 = multiKey1.getKey(2);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) integerArray0, false);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.equals(multiKey2);
      multiKey2.size();
      boolean boolean0 = multiKey0.equals(integer3);
      assertFalse(boolean0);
      
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 2);
      multiKeyArray0[0] = multiKey1;
      multiKey2.toString();
      multiKeyArray0[1] = multiKey1;
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, false);
      multiKey3.toString();
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object[]) integerArray0, true);
      boolean boolean1 = multiKey3.equals(multiKey4);
      assertFalse(boolean1);
      
      multiKey2.toString();
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      MultiKey<String> multiKey6 = multiKey5.getKey(int0);
      String string0 = multiKey6.toString();
      assertEquals("MultiKey[, rr3;#Z6\"kbw.4m6, rr3;#Z6\"kbw.4m6]", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      MultiKey<String> multiKey1 = new MultiKey<String>("s53m$@(8", "s53m$@(8", "s53m$@(8");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKey(0);
      multiKey0.getKey(0);
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKey2.toString();
      multiKey0.toString();
      multiKey2.size();
      multiKey0.hashCode();
      multiKey0.getKeys();
      Integer[] integerArray1 = multiKey2.getKeys();
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-3866));
      Integer integer1 = new Integer((-3866));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null, (Integer) null, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals(integer1);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.size();
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[-3866, null, null, -3866]", object0, "MultiKey[-3866, null, null, -3866]");
      multiKey2.size();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-3866));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3866
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(3368);
      Integer integer1 = new Integer((-1373));
      Integer integer2 = new Integer(3368);
      Integer integer3 = new Integer((-1373));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer2, integer3);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      multiKey0.toString();
      Object object0 = new Object();
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-621));
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("The array of keys must not be null", object0, object0, "The array of keys must not be null", "The array of keys must not be null");
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0, multiKey0);
      multiKey0.equals(multiKey1);
      MultiKey<String> multiKey2 = new MultiKey<String>("", "(qPc", "", "'GDcH?~Mi#");
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[, (qPc, , 'GDcH?~Mi#]", string0);
      
      boolean boolean0 = multiKey2.equals((Object) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      boolean boolean1 = multiKey1.equals(multiKey3);
      assertFalse(boolean1);
      
      multiKey0.size();
      assertFalse(multiKey0.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      String string0 = multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer1 = new Integer((-1));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer1);
      multiKey1.toString();
      multiKey1.getKey(0);
      multiKey1.equals("MultiKey[, , null]");
      multiKey0.getKeys();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "MultiKey[0, -1, -1]";
      stringArray0[1] = "MultiKey[, , null]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      multiKey2.hashCode();
      multiKey2.getKeys();
      Object object0 = multiKey0.getKey(0);
      assertFalse(object0.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "(9d[yX;>&:(E ";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "MultiKey";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, (9d[yX;>&:(E , , , , , MultiKey]", string0);
      
      String string1 = multiKey0.getKey(0);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.getKey(0);
      objectArray0[0] = null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = multiKey0.getKey(0);
      assertNull(object2);
      
      objectArray0[3] = null;
      Object object3 = new Object();
      objectArray0[4] = object3;
      Object object4 = new Object();
      objectArray0[5] = object4;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Integer integer0 = new Integer(4);
      Object object5 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, integer0, object4, object5, multiKey1);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey1, multiKey1, multiKey0, multiKey2);
      assertTrue(multiKey1.equals((Object)multiKey0));
      assertTrue(multiKey0.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(216);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(216);
      integerArray0[1] = integer1;
      int int0 = (-1153);
      Integer integer2 = new Integer((-1153));
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((int) integerArray0[0]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 216
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "?]}C]zI0+", "?]}C]zI0+", "?]}C]zI0+");
      int int0 = multiKey0.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer((-862));
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(2645);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0, (Integer) null, integer1, integer2);
      Integer integer3 = new Integer(1);
      multiKey0.equals(integer3);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) integer3;
      objectArray0[2] = (Object) multiKey0;
      String string0 = null;
      Integer integer4 = new Integer((-862));
      int int0 = 421;
      Integer integer5 = new Integer(421);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer4, integer5, integer1, (Integer) null, integer0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, (Object) null, multiKey1);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-862));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -862
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = null;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = null;
      objectArray0[1] = null;
      objectArray0[2] = null;
      objectArray0[3] = null;
      Object object1 = new Object();
      objectArray0[4] = object1;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, multiKey0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, multiKey1);
      int int0 = 5;
      // Undeclared exception!
      try { 
        multiKey2.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(".]", ".]");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) ".]";
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) ".]";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      Integer integer0 = new Integer(1);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0);
      // Undeclared exception!
      try { 
        multiKey2.getKey(1193);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1193
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
