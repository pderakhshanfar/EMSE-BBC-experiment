/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:04:08 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, "V!^j*V #", (Object) null, (Object) null);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = null;
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      Integer integer1 = multiKey1.getKey(0);
      objectArray0[1] = (Object) integer1;
      objectArray0[2] = null;
      objectArray0[5] = (Object) multiKey0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) multiKey0;
      objectArray0[6] = (Object) null;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      Object object0 = multiKey2.getKey(0);
      assertNull(object0);
      
      boolean boolean0 = multiKey0.equals(objectArray0[5]);
      multiKey0.size();
      Object object1 = new Object();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 5);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = null;
      multiKeyArray0[2] = null;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey2;
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      multiKey3.equals("V!^j*V #");
      boolean boolean1 = multiKey3.equals("S3");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, object0, multiKey0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, object0, multiKey0);
      multiKey2.size();
      boolean boolean0 = multiKey2.equals(multiKey1);
      assertTrue(boolean0);
      
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) stringArray0, true);
      multiKey3.getKeys();
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey3, multiKey2, multiKey3);
      Integer integer0 = new Integer(742);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey4, multiKey1, (Object) null, multiKey0, integer0);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[]", string0);
      
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey3);
      assertFalse(multiKey6.equals((Object)multiKey4));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null);
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey1.equals(multiKey2);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) stringArray0, false);
      multiKey3.equals(multiKey2);
      // Undeclared exception!
      try { 
        multiKey3.getKey((-1348));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1348
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, multiKey0, object0, multiKey1);
      Object object1 = new Object();
      Integer integer0 = new Integer((-2076));
      MultiKey<String> multiKey3 = new MultiKey<String>("5;sQ;<}", "", "5?*NRV&~Xt");
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey2, object1, integer0, multiKey3, multiKey0);
      int int0 = multiKey4.size();
      multiKey1.getKeys();
      int int1 = multiKey4.size();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      Integer integer1 = new Integer(0);
      multiKey0.toString();
      Integer integer2 = new Integer((-791));
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer2, integer3);
      Object object1 = multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, (Object) null, object0, integer1, object1);
      multiKey0.toString();
      multiKey0.equals(multiKey2);
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, (MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null);
      multiKey0.toString();
      multiKey1.getKey(4);
      multiKey0.size();
      MultiKey<String> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "The array of keys must not be null", "", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "", "|&w9tG,l=(qEZk|>");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKey(0);
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.size();
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(1791);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-718));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKey2.hashCode();
      Object[] objectArray0 = multiKey1.getKeys();
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = null;
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("<Lzc+Q<Ud]/8l8lY/#", "<Lzc+Q<Ud]/8l8lY/#", "", "", "<Lzc+Q<Ud]/8l8lY/#");
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer((-1784));
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1, integer1);
      multiKey1.equals(integer0);
      Integer integer2 = new Integer((-5));
      String[] stringArray0 = new String[6];
      stringArray0[0] = "<Lzc+Q<Ud]/8l8lY/#";
      stringArray0[1] = "";
      stringArray0[2] = "MultiKey[<Lzc+Q<Ud]/8l8lY/#, <Lzc+Q<Ud]/8l8lY/#, , , <Lzc+Q<Ud]/8l8lY/#]";
      stringArray0[3] = "";
      stringArray0[4] = "<Lzc+Q<Ud]/8l8lY/#";
      stringArray0[5] = "<Lzc+Q<Ud]/8l8lY/#";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-5));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = ".uzb~ZZ ,yT";
      stringArray0[3] = "";
      stringArray0[4] = ".nIVl@u[}!u*>&`*@,";
      stringArray0[5] = "_20b";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey[, , .uzb~ZZ ,yT, , .nIVl@u[}!u*>&`*@,, _20b]", object0, "MultiKey[, , .uzb~ZZ ,yT, , .nIVl@u[}!u*>&`*@,, _20b]", object1);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, "");
      String string0 = multiKey2.toString();
      multiKey2.getKeys();
      String string1 = multiKey2.toString();
      assertTrue(string1.equals((Object)string0));
  }
}
