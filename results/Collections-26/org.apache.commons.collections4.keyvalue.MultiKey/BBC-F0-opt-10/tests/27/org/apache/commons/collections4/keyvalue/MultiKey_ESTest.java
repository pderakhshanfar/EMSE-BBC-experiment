/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:49:22 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      assertEquals(0, multiKey0.size());
      assertNotNull(multiKey0);
      assertEquals(0, objectArray0.length);
      
      int int0 = multiKey0.size();
      assertEquals(0, multiKey0.size());
      assertEquals(0, int0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      assertEquals(0, multiKey0.size());
      assertNotNull(multiKey0);
      assertEquals(0, objectArray0.length);
      
      Object[] objectArray1 = multiKey0.getKeys();
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(0, multiKey0.size());
      assertNotNull(objectArray1);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      assertEquals(3, multiKey0.size());
      assertNotNull(multiKey0);
      assertEquals(3, integerArray0.length);
      
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 1);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      assertEquals(1, multiKey0.size());
      assertNotNull(multiKey0);
      assertEquals(1, multiKeyArray0.length);
      
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      assertEquals(1, multiKey1.size());
      assertNotNull(multiKey1);
      assertEquals(1, multiKeyArray0.length);
      
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertEquals(1, multiKey0.size());
      assertEquals(1, multiKey1.size());
      assertTrue(boolean0);
      assertEquals(1, multiKeyArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, "<~C;V[w>K%<J", "<~C;V[w>K%<J");
      assertEquals(4, multiKey0.size());
      assertNotNull(multiKey0);
      
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 2);
      multiKeyArray0[1] = multiKey0;
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      assertEquals(2, multiKey1.size());
      assertNotNull(multiKey1);
      assertEquals(2, multiKeyArray0.length);
      
      MultiKey multiKey2 = (MultiKey)multiKey1.getKey(1);
      assertEquals(2, multiKey1.size());
      assertEquals(4, multiKey2.size());
      assertNotNull(multiKey2);
      assertEquals(2, multiKeyArray0.length);
      
      boolean boolean0 = multiKey0.equals(multiKey2);
      assertEquals(4, multiKey0.size());
      assertEquals(2, multiKey1.size());
      assertEquals(4, multiKey2.size());
      assertTrue(boolean0);
      assertEquals(2, multiKeyArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      assertEquals(5, multiKey0.size());
      assertNotNull(multiKey0);
      assertEquals(5, integerArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = multiKey0.equals(object0);
      assertEquals(5, multiKey0.size());
      assertFalse(boolean0);
      assertEquals(5, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("<~C;V[w>K%<J", "<~C;V[w>K%<J");
      assertEquals(2, multiKey0.size());
      assertNotNull(multiKey0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("YpRYSd", "YpRYSd", "YpRYSd", "YpRYSd", "YpRYSd");
      assertEquals(5, multiKey0.size());
      assertNotNull(multiKey0);
      
      int int0 = multiKey0.size();
      assertEquals(5, multiKey0.size());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 2);
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      assertEquals(2, multiKey0.size());
      assertNotNull(multiKey0);
      assertEquals(2, multiKeyArray0.length);
      
      Object object0 = multiKey0.getKey(1);
      assertEquals(2, multiKey0.size());
      assertNull(object0);
      assertEquals(2, multiKeyArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("YoRYd", "YoRYd", "f^\"Tkv#v:");
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 6);
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null, null, null, null, null]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 4);
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      MultiKey<String>[] multiKeyArray1 = multiKey0.getKeys();
      assertEquals(4, multiKeyArray1.length);
  }
}
