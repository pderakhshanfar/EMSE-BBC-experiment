/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:04:31 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null", "");
      multiKey0.toString();
      multiKey0.toString();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 6);
      Integer integer0 = new Integer((-1477));
      Integer integer1 = new Integer(804);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer1);
      multiKeyArray0[0] = multiKey2;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer1);
      multiKeyArray0[1] = multiKey3;
      Integer integer2 = new Integer(804);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer1, integer2, (Integer) null);
      multiKeyArray0[2] = multiKey4;
      Integer integer3 = new Integer(1455);
      Integer integer4 = new Integer(1455);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>((Integer) null, integer1, integer3, integer4);
      String string0 = multiKey5.toString();
      assertEquals("MultiKey[null, 804, 1455, 1455]", string0);
      
      multiKeyArray0[3] = multiKey5;
      boolean boolean0 = multiKey1.equals(integer3);
      boolean boolean1 = multiKey5.equals(multiKey5);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null", "");
      multiKey0.toString();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 6);
      Integer integer0 = new Integer(804);
      Integer integer1 = new Integer(804);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, (Integer) null);
      multiKeyArray0[2] = multiKey2;
      Integer integer2 = new Integer(804);
      Integer integer3 = new Integer(1455);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>((Integer) null, integer0, integer2, integer3);
      multiKeyArray0[3] = multiKey3;
      Integer integer4 = new Integer(804);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>((Integer) null, integer4);
      multiKeyArray0[4] = multiKey4;
      Integer integer5 = new Integer(0);
      Integer integer6 = new Integer(0);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer5, integer6, integer2);
      multiKeyArray0[5] = multiKey4;
      MultiKey<MultiKey<Integer>> multiKey6 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      MultiKey<Integer> multiKey7 = multiKey6.getKey(0);
      assertNull(multiKey7);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      MultiKey<String> multiKey1 = new MultiKey<String>("C1!WvJU:", "C1!WvJU:", "C1!WvJU:");
      multiKey0.toString();
      multiKey1.equals(multiKey0);
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<Integer> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = null;
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("zVr=2%|i4bWcZ\"Vky", "zVr=2%|i4bWcZ\"Vky", "zVr=2%|i4bWcZ\"Vky", "zVr=2%|i4bWcZ\"Vky");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey1.toString();
      MultiKey<MultiKey<Integer>> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("L+b!U", "3&|?zW^xNK{8end", "3&|?zW^xNK{8end", "", "");
      int int0 = 0;
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      multiKey0.equals("L+b!U");
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey1.toString();
      multiKey1.equals("");
      multiKey0.toString();
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer2);
      int int0 = multiKey2.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", "");
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-3097));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-504));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-3097));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(487);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(682);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[0]);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey1);
      multiKey2.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, false);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, object0, multiKey1, (Object) null);
      int int0 = multiKey2.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, false);
      multiKey1.size();
      // Undeclared exception!
      try { 
        multiKey0.getKey(2599);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2599
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "9NEdsDTD=3";
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[3] = "Stu$Zq&z~Dq";
      stringArray0[4] = "-bn(V;Zhi";
      stringArray0[5] = "The array of keys must not be null";
      stringArray0[6] = "Szyn4";
      stringArray0[7] = "";
      stringArray0[8] = "org.apache.commons.collections4.keyvalue.MultiKey";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      String string0 = multiKey0.toString();
      multiKey0.size();
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("The array of keys must not be null", object0, object1);
      String string1 = multiKey1.toString();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "++')ZF._\u0001/JmdM6Dg", "");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = (Object) multiKey0;
      objectArray0[6] = (Object) "++')ZF._\u0001/JmdM6Dg";
      objectArray0[7] = (Object) "";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      // Undeclared exception!
      try { 
        multiKey1.getKey(3155);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3155
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1594);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[0, 1594, 0]", string0);
      
      multiKey0.getKeys();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "MultiKey[0, 1594, 0]";
      stringArray0[1] = "MultiKey[0, 1594, 0]";
      stringArray0[2] = "MultiKey[0, 1594, 0]";
      stringArray0[3] = "MultiKey[0, 1594, 0]";
      stringArray0[4] = "MultiKey[0, 1594, 0]";
      stringArray0[5] = "MultiKey[0, 1594, 0]";
      stringArray0[6] = "MultiKey[0, 1594, 0]";
      stringArray0[7] = "MultiKey[0, 1594, 0]";
      stringArray0[8] = "MultiKey[0, 1594, 0]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      String string1 = multiKey1.getKey(int0);
      assertTrue(string1.equals((Object)string0));
  }
}
