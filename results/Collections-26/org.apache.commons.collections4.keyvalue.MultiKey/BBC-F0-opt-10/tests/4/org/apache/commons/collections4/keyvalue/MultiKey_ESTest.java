/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:03:53 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      Object object3 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, object2, object3, object1);
      multiKey0.getKey(0);
      objectArray0[2] = null;
      Object object4 = new Object();
      objectArray0[3] = object4;
      Object object5 = new Object();
      objectArray0[4] = object5;
      multiKey0.getKey(0);
      objectArray0[5] = null;
      Object object6 = new Object();
      objectArray0[6] = object6;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey0, multiKey1, multiKey2, multiKey1);
      Object object7 = multiKey3.getKey(0);
      boolean boolean0 = multiKey1.equals(object7);
      assertTrue(boolean0);
      assertFalse(multiKey0.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "#6j9IQ%Bq2XA&'8Zum%", "#6j9IQ%Bq2XA&'8Zum%");
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, #6j9IQ%Bq2XA&'8Zum%, #6j9IQ%Bq2XA&'8Zum%]", string0);
      
      multiKey0.hashCode();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "MultiKey[, #6j9IQ%Bq2XA&'8Zum%, #6j9IQ%Bq2XA&'8Zum%]", object0, "MultiKey[, #6j9IQ%Bq2XA&'8Zum%, #6j9IQ%Bq2XA&'8Zum%]", "~jIOv,b.b;Kqd!");
      multiKey1.getKeys();
      multiKey0.equals(object0);
      Integer integer0 = new Integer(5);
      Integer integer1 = new Integer(5);
      Integer integer2 = new Integer((-987));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer2);
      MultiKey<String> multiKey3 = new MultiKey<String>((String) null, "", "Y|:", "MultiKey[, #6j9IQ%Bq2XA&'8Zum%, #6j9IQ%Bq2XA&'8Zum%]", "Y|:");
      Integer integer3 = new Integer(3886);
      boolean boolean0 = multiKey2.equals(integer3);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0);
      multiKey4.getKeys();
      multiKey1.toString();
      assertFalse(multiKey0.equals((Object)multiKey3));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(623);
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, multiKey0, (Object) null, "", integerArray0[1]);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.getKey(3);
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.size();
      multiKey0.size();
      multiKey1.toString();
      multiKey1.size();
      multiKey2.toString();
      multiKey0.getKey(5);
      multiKey2.toString();
      multiKey1.size();
      Integer[] integerArray1 = multiKey0.getKeys();
      assertEquals(6, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("g!Tvn", "g!Tvn", "g!Tvn");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[g!Tvn, g!Tvn, g!Tvn]", string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "g!Tvn";
      stringArray0[1] = "";
      stringArray0[2] = "MultiKey[g!Tvn, g!Tvn, g!Tvn]";
      stringArray0[3] = "MultiKey[g!Tvn, g!Tvn, g!Tvn]";
      stringArray0[4] = "g!Tvn";
      stringArray0[5] = "g!Tvn";
      stringArray0[6] = "g!Tvn";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) stringArray0, false);
      multiKey1.equals(multiKey2);
      assertFalse(multiKey1.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "#6j9IQ%Bq2XA&'8Zum%", "#6j9IQ%Bq2XA&'8Zum%");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, #6j9IQ%Bq2XA&'8Zum%, #6j9IQ%Bq2XA&'8Zum%]", string0);
      
      int int0 = 3;
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(7);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, (Integer) null);
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = null;
      integerArray0[3] = integer0;
      integerArray0[4] = integer1;
      integerArray0[5] = null;
      integerArray0[6] = integer0;
      integerArray0[7] = null;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, true);
      Object object0 = multiKey2.getKey(5);
      assertNull(object0);
      
      boolean boolean0 = multiKey0.equals((Object) null);
      assertFalse(boolean0);
      
      Integer integer2 = new Integer(5);
      Integer integer3 = new Integer(int0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer2, integer3);
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKey3, multiKey1);
      assertFalse(multiKey3.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = null;
      String string1 = "";
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      int int0 = (-645);
      Integer integer0 = new Integer((-645));
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer((-2200));
      Integer integer2 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer2);
      MultiKey<String> multiKey1 = new MultiKey<String>("j}`-__,", "j}`-__,", "j}`-__,", "j}`-__,");
      multiKey1.toString();
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer1, integer1, multiKey0, integer1, "j}`-__,");
      Integer integer3 = new Integer(1);
      multiKey1.toString();
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer1, integer3);
      multiKey3.toString();
      multiKey3.toString();
      multiKey2.equals(multiKey3);
      multiKey0.hashCode();
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(2097);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2097
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "#6j9IQ%Bq2XA&'8Zum%", "#6j9IQ%Bq2XA&'8Zum%");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "MultiKey[, #6j9IQ%Bq2XA&'8Zum%, #6j9IQ%Bq2XA&'8Zum%]", object0, "MultiKey[, #6j9IQ%Bq2XA&'8Zum%, #6j9IQ%Bq2XA&'8Zum%]", "");
      multiKey1.getKeys();
      multiKey0.equals(object0);
      Integer integer0 = new Integer(5);
      Integer integer1 = new Integer((-1609));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer1, integer0, integer1);
      int int0 = multiKey2.size();
      int int1 = multiKey1.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("jU%SN48P>Y{U;", "");
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("jU%SN48P>Y{U;", "jU%SN48P>Y{U;", multiKey1, (Object) null, "");
      Integer[] integerArray0 = new Integer[9];
      int int0 = 2;
      Integer integer0 = new Integer(2);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      int int1 = (-1);
      Integer integer2 = new Integer((-1));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(383);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(1);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int1);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer((int) integerArray0[3]);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      Object object0 = multiKey3.getKey(5);
      assertEquals(0, object0);
      
      boolean boolean0 = multiKey2.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("The array of keys must not be null");
      Integer integer0 = new Integer(1882);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey1.toString();
      multiKey1.toString();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) multiKey1;
      objectArray0[1] = (Object) multiKey1;
      objectArray0[2] = (Object) multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      // Undeclared exception!
      try { 
        multiKey2.getKey(3369);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3369
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", (String) null, "", (String) null, "");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) multiKey0;
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1760));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1760
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", multiKey0, objectArray0[0], objectArray0[2]);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[, MultiKey[, , , java.lang.Object@311cc80d, , , ], , ]", "", "");
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey1.toString();
      multiKey2.toString();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("a6\"\"", (String) null, "org.apache.commons.collections4.keyvalue.MultiKey", "9jX>rlM20$U-Hfw@,<");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, (Object) null);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.toString();
      Integer integer0 = new Integer((-296));
      Integer integer1 = new Integer((-296));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>((Integer) null, integer0, integer1);
      multiKey3.toString();
      multiKey3.toString();
      // Undeclared exception!
      try { 
        multiKey3.getKey((-296));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -296
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
