/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:40:13 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(4516);
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integerArray0[3];
      integerArray0[5] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      MultiKey<String> multiKey1 = new MultiKey<String>("HgqJXE64", "MultiKey[4516, 4516, 4516, 4516, 4516, 4516]");
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "c";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.toString();
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1);
      multiKey3.toString();
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[HgqJXE64, MultiKey[4516, 4516, 4516, 4516, 4516, 4516]], MultiKey[HgqJXE64, MultiKey[4516, 4516, 4516, 4516, 4516, 4516]], MultiKey[HgqJXE64, MultiKey[4516, 4516, 4516, 4516, 4516, 4516]]]", string0);
      
      Integer integer1 = new Integer((int) integerArray0[3]);
      multiKey0.getKeys();
      int int0 = multiKey0.size();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(integerArray0);
      int int1 = multiKey4.hashCode();
      assertFalse(int1 == int0);
      
      int int2 = new Integer((int) integerArray0[3]);
      Integer integer2 = new Integer(4516);
      MultiKey<Object> multiKey5 = new MultiKey<Object>("MultiKey[HgqJXE64, MultiKey[4516, 4516, 4516, 4516, 4516, 4516]]", integer2);
      boolean boolean0 = multiKey5.equals(multiKey5);
      assertTrue(boolean0);
      assertFalse(multiKey5.equals((Object)multiKey4));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(4516);
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      MultiKey<String> multiKey1 = new MultiKey<String>("HgqJXE64", "MultiKey[4516, 4516, 4516, 4516, 4516, 4516]");
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "c";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.toString();
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1);
      multiKey3.toString();
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[HgqJXE64, MultiKey[4516, 4516, 4516, 4516, 4516, 4516]], MultiKey[HgqJXE64, MultiKey[4516, 4516, 4516, 4516, 4516, 4516]], MultiKey[HgqJXE64, MultiKey[4516, 4516, 4516, 4516, 4516, 4516]]]", string0);
      
      int int0 = new Integer((int) integerArray0[3]);
      multiKey0.getKeys();
      int int1 = multiKey0.size();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(integerArray0);
      multiKey4.hashCode();
      int int2 = multiKey4.hashCode();
      assertFalse(int2 == int1);
      
      Integer integer1 = new Integer(4516);
      MultiKey<Object> multiKey5 = new MultiKey<Object>("MultiKey[HgqJXE64, MultiKey[4516, 4516, 4516, 4516, 4516, 4516]]", integer1);
      boolean boolean0 = multiKey4.equals(multiKey5);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("RSLV=DJRNoCgFneHm", "RSLV=DJRNoCgFneHm", "", "$*h}?lLrUwZmx", "$*h}?lLrUwZmx");
      multiKey1.toString();
      multiKey1.size();
      Integer integer0 = new Integer(5);
      Integer integer1 = new Integer(5);
      multiKey1.toString();
      Integer integer2 = new Integer((-1));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer2);
      multiKey2.toString();
      multiKey2.getKey(2);
      multiKey1.equals(integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.getKeys();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = null;
      MultiKey<MultiKey<String>> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) stringArray0, false);
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey2.size();
      multiKey2.toString();
      multiKey0.size();
      multiKey2.size();
      int int0 = (-2843);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-2843));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2843
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null, (Integer) null);
      multiKey0.getKey(1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0, (Object) null, multiKey0, multiKey0);
      int int0 = 0;
      multiKey1.getKey(0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "h.ujy";
      stringArray0[2] = "I/Q9T30I'kLsx9~lEj2";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1767));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1767
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 6);
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer2);
      multiKeyArray0[0] = multiKey0;
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, integer2, integer3, integer1);
      multiKeyArray0[1] = multiKey1;
      Integer[] integerArray0 = null;
      MultiKey<Integer> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[0]", "MultiKey[0]");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "MultiKey[0]";
      multiKey0.toString();
      stringArray0[1] = "c";
      stringArray0[2] = "MultiKey[0]";
      multiKey1.toString();
      stringArray0[3] = "MultiKey[0]";
      stringArray0[4] = "MultiKey[0]";
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.toString();
      multiKey2.toString();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey1, multiKey2, multiKey2);
      multiKey3.toString();
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[MultiKey[0], MultiKey[0]], MultiKey[MultiKey[0], c, MultiKey[0], MultiKey[0], MultiKey[0]], MultiKey[MultiKey[0], c, MultiKey[0], MultiKey[0], MultiKey[0]]]", string0);
      
      multiKey3.hashCode();
      multiKey0.getKeys();
      multiKey0.size();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "MultiKey[0]";
      objectArray0[1] = (Object) "MultiKey[0]";
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0);
      multiKey4.hashCode();
      multiKey4.hashCode();
      boolean boolean0 = multiKey4.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("Ce", "Ce", "\"", "AqRS^R|q774;*^?>7`@", "AqRS^R|q774;*^?>7`@");
      multiKey0.toString();
      multiKey0.hashCode();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) multiKey0;
      multiKey0.toString();
      objectArray0[1] = (Object) "AqRS^R|q774;*^?>7`@";
      objectArray0[2] = (Object) "MultiKey[Ce, Ce, \", AqRS^R|q774;*^?>7`@, AqRS^R|q774;*^?>7`@]";
      objectArray0[3] = (Object) "Ce";
      Object object0 = new Object();
      objectArray0[4] = object0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      MultiKey<Object> multiKey3 = multiKey2.getKey(1);
      multiKey3.toString();
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey4.size();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[Ce, Ce, \", AqRS^R|q774;*^?>7`@, AqRS^R|q774;*^?>7`@]", string0);
      
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 9);
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(5);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer0, integer1, integer0);
      multiKeyArray0[0] = multiKey5;
      Integer integer2 = new Integer((-1));
      Integer integer3 = new Integer(1);
      Integer integer4 = new Integer((-1));
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integer1, integer2, integer3, integer4);
      multiKeyArray0[1] = multiKey6;
      Integer integer5 = new Integer(5);
      Integer integer6 = new Integer(395);
      MultiKey<Integer> multiKey7 = new MultiKey<Integer>(integer5, integer3, integer3, integer4, integer6);
      multiKeyArray0[2] = multiKey7;
      Integer integer7 = new Integer(0);
      Integer integer8 = new Integer((-460));
      Integer integer9 = new Integer(1);
      Integer integer10 = new Integer((-422));
      MultiKey<Integer> multiKey8 = new MultiKey<Integer>(integer7, integer8, integer9, integer10);
      multiKeyArray0[3] = multiKey8;
      Integer integer11 = new Integer(0);
      Integer integer12 = new Integer(1);
      MultiKey<Integer> multiKey9 = new MultiKey<Integer>(integer11, integer12);
      multiKeyArray0[4] = multiKey9;
      Integer integer13 = new Integer((-90));
      Integer integer14 = new Integer(395);
      Integer integer15 = new Integer(5);
      MultiKey<Integer> multiKey10 = new MultiKey<Integer>(integer13, integer10, integer4, integer14, integer15);
      multiKeyArray0[5] = multiKey10;
      Integer integer16 = new Integer((-460));
      Integer integer17 = new Integer(431);
      MultiKey<Integer> multiKey11 = new MultiKey<Integer>(integer16, integer17);
      multiKeyArray0[6] = multiKey11;
      Integer integer18 = new Integer((-422));
      Integer integer19 = new Integer((-460));
      MultiKey<Integer> multiKey12 = new MultiKey<Integer>(integer17, integer0, integer18, integer19, integer0);
      multiKeyArray0[7] = multiKey12;
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer9;
      MultiKey<Integer> multiKey13 = new MultiKey<Integer>(integerArray0, true);
      multiKeyArray0[8] = multiKey13;
      MultiKey<MultiKey<Integer>> multiKey14 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      boolean boolean0 = multiKey14.equals(integer14);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "!";
      objectArray0[1] = (Object) "!";
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("!", multiKey0, multiKey0);
      Object object0 = multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("!", (Object) null, (Object) null, "LG(wn");
      Object object1 = multiKey2.getKey(0);
      assertTrue(object1.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "MultiKey", "MultiKey", "MultiKey", "");
      Integer integer0 = new Integer(2561);
      Object object0 = new Object();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey", "", integer0, "MultiKey", object0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.hashCode();
      // Undeclared exception!
      try { 
        multiKey0.getKey(2561);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2561
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, "");
      Object object1 = multiKey0.getKey(0);
      objectArray0[0] = object1;
      Object object2 = new Object();
      objectArray0[1] = object2;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      int int0 = 4;
      Integer integer0 = new Integer(4);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(3709);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(4);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(3709);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[4, 4, 3709, 4, 3709, 4]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      Integer integer1 = multiKey0.getKey(int0);
      assertEquals(0, (int)integer1);
  }
}
