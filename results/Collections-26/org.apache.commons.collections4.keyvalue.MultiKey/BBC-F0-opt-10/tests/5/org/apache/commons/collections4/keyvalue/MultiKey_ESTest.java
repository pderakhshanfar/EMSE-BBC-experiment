/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:48:34 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "fKJr", "");
      Object object0 = new Object();
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "", "");
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1735);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) integerArray0, false);
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("h/&%p", "h/&%p", "", "h/&%p");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("org.apache.commons.collections4.keyvalue.MultiKey", "h/&%p");
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", "h/&%p", multiKey1);
      multiKey2.toString();
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey1, multiKey1, multiKey1);
      multiKey3.toString();
      MultiKey<Object> multiKey4 = multiKey3.getKey(1);
      multiKey4.toString();
      multiKey2.size();
      multiKey0.toString();
      multiKey2.equals("org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey0.size();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integerArray0);
      multiKey5.toString();
      Object object0 = new Object();
      multiKey5.toString();
      MultiKey<String> multiKey6 = new MultiKey<String>("MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, h/&%p]", "MultiKey[, h/&%p, MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, h/&%p]]", "MultiKey[h/&%p, h/&%p, , h/&%p]");
      multiKey1.equals("MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, h/&%p]");
      Integer[] integerArray1 = multiKey5.getKeys();
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.size();
      Integer[] integerArray0 = new Integer[4];
      int int0 = 11;
      Integer integer0 = new Integer(11);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.toString();
      Object object0 = new Object();
      Integer integer4 = new Integer(1);
      multiKey1.equals(integer4);
      Integer integer5 = new Integer(1);
      Integer integer6 = new Integer(6);
      Integer integer7 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer5, integer2, integer6, (Integer) null, integer7);
      // Undeclared exception!
      try { 
        multiKey2.getKey(11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2);
      Integer integer3 = new Integer((-1));
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, (String) null);
      Object[] objectArray0 = new Object[9];
      multiKey1.getKey(0);
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) integer3;
      objectArray0[5] = (Object) integer0;
      objectArray0[6] = (Object) integer1;
      objectArray0[7] = (Object) integer3;
      objectArray0[8] = (Object) multiKey0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      MultiKey<String> multiKey3 = new MultiKey<String>((String) null, (String) null, (String) null, "D!&!");
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey1, multiKey2, multiKey3, "D!&!");
      MultiKey<Object> multiKey5 = new MultiKey<Object>(integer3, integer0, integer3, integer1, multiKey4);
      Object[] objectArray1 = multiKey5.getKeys();
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 2;
      Integer integer0 = new Integer(2);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-1765));
      Integer integer1 = new Integer((-1765));
      Integer integer2 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[-1765, -1765, -1, -1765, -1765]", "{PQo,g/k|5*Qz");
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[-1765, -1765, -1, -1765, -1765]", "{PQo,g/k|5*Qz", "", "", "");
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey2);
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<String> multiKey4 = new MultiKey<String>("{PQo,g/k|5*Qz", "", "4BC-~Q0\"-@;3+OE", "", "");
      multiKey4.toString();
      multiKey3.toString();
      multiKey4.toString();
      multiKey3.equals(multiKey4);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 2);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[0] = multiKey5;
      Object object0 = new Object();
      MultiKey<Object> multiKey6 = new MultiKey<Object>("MultiKey[-1765, -1765, -1, -1765, -1765]", object0);
      multiKeyArray0[1] = multiKey6;
      MultiKey<MultiKey<Object>> multiKey7 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      multiKey7.size();
      multiKey3.getKeys();
      Integer integer3 = new Integer(1859);
      MultiKey<Integer> multiKey8 = new MultiKey<Integer>(integer0, integer1, integer3);
      // Undeclared exception!
      try { 
        multiKey8.getKey(287);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 287
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-640));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, object0, object1, object1);
      multiKey1.getKeys();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 3);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey1;
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey2.hashCode();
      multiKey0.size();
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[-640, java.lang.Object@476fefcc, java.lang.Object@646c3aea, java.lang.Object@646c3aea]", "", "MultiKey[-640, java.lang.Object@476fefcc, java.lang.Object@646c3aea, java.lang.Object@646c3aea]");
      multiKey3.equals((Object) null);
      String string0 = multiKey1.toString();
      String string1 = multiKey1.toString();
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "h/&%p");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("org.apache.commons.collections4.keyvalue.MultiKey", "h/&%p");
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", "h/&%p", multiKey1);
      multiKey2.toString();
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey1, multiKey1, multiKey1);
      multiKey3.getKey(1);
      int int0 = multiKey2.size();
      multiKey0.toString();
      multiKey2.equals("org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey0.size();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      multiKey4.toString();
      Object object0 = new Object();
      multiKey4.equals(object0);
      MultiKey<MultiKey<Integer>> multiKey5 = new MultiKey<MultiKey<Integer>>(multiKey4, multiKey4, multiKey4, multiKey4, multiKey4);
      int int1 = multiKey5.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, "", (String) null, "");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object0;
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) null;
      objectArray1[1] = object0;
      objectArray1[2] = (Object) "o<a;";
      objectArray1[3] = (Object) multiKey0;
      objectArray1[4] = (Object) "";
      objectArray1[5] = (Object) "";
      objectArray1[6] = (Object) null;
      objectArray1[7] = (Object) "";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray1, false);
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", "o<a;", multiKey1, integer0);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1538));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1538
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", (String) null, "", "");
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey[, , null, , ]", "");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      multiKey2.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey2, multiKey2, multiKey2);
      multiKey3.hashCode();
      multiKey2.size();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-1572));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1572));
      integerArray0[1] = integer1;
      int int0 = (-1);
      Integer integer2 = new Integer((-1));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      // Undeclared exception!
      try { 
        multiKey4.getKey(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
