/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:03:54 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null", "The array of keys must not be null");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      Object[] objectArray1 = multiKey1.getKeys();
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object1, object0);
      multiKey0.toString();
      multiKey0.getKeys();
      Object object2 = new Object();
      Object object3 = new Object();
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
      
      multiKey0.size();
      multiKey0.toString();
      Object object4 = new Object();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "MultiKey[java.lang.Object@2ac8ed71, java.lang.Object@2ac8ed71, java.lang.Object@44a03812, java.lang.Object@2ac8ed71]";
      stringArray0[1] = "MultiKey[java.lang.Object@2ac8ed71, java.lang.Object@2ac8ed71, java.lang.Object@44a03812, java.lang.Object@2ac8ed71]";
      stringArray0[2] = "MultiKey[java.lang.Object@2ac8ed71, java.lang.Object@2ac8ed71, java.lang.Object@44a03812, java.lang.Object@2ac8ed71]";
      stringArray0[3] = "MultiKey[java.lang.Object@2ac8ed71, java.lang.Object@2ac8ed71, java.lang.Object@44a03812, java.lang.Object@2ac8ed71]";
      stringArray0[4] = "MultiKey[java.lang.Object@2ac8ed71, java.lang.Object@2ac8ed71, java.lang.Object@44a03812, java.lang.Object@2ac8ed71]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey1);
      Integer integer0 = new Integer(30);
      Integer integer1 = new Integer(1691);
      multiKey0.toString();
      Object object5 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object4, "MultiKey[java.lang.Object@2ac8ed71, java.lang.Object@2ac8ed71, java.lang.Object@44a03812, java.lang.Object@2ac8ed71]", multiKey1, (Object) null);
      MultiKey<String> multiKey4 = new MultiKey<String>("MultiKey[java.lang.Object@2ac8ed71, java.lang.Object@2ac8ed71, java.lang.Object@44a03812, java.lang.Object@2ac8ed71]", "MultiKey[java.lang.Object@2ac8ed71, java.lang.Object@2ac8ed71, java.lang.Object@44a03812, java.lang.Object@2ac8ed71]", "MultiKey[java.lang.Object@2ac8ed71, java.lang.Object@2ac8ed71, java.lang.Object@44a03812, java.lang.Object@2ac8ed71]");
      assertFalse(multiKey4.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<MultiKey<String>> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "", (String) null, (String) null, "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey0.hashCode();
      String string0 = multiKey0.getKey(0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "", "3?<iw:&F>@#'Hl*3", "3?<iw:&F>@#'Hl*3");
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "", "");
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      boolean boolean0 = multiKey1.equals("MultiKey[MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, org.apache.commons.collections4.keyvalue.MultiKey, , 3?<iw:&F>@#'Hl*3, 3?<iw:&F>@#'Hl*3], , ]");
      assertFalse(boolean0);
      
      multiKey1.size();
      multiKey1.toString();
      Object object0 = new Object();
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, "MultiKey[MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, org.apache.commons.collections4.keyvalue.MultiKey, , 3?<iw:&F>@#'Hl*3, 3?<iw:&F>@#'Hl*3], , ]");
      boolean boolean1 = multiKey1.equals(multiKey2);
      assertFalse(boolean1);
      
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.size();
      multiKey2.size();
      multiKey0.toString();
      Integer integer0 = new Integer(2);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey3.toString();
      multiKey3.toString();
      multiKey2.toString();
      multiKey3.toString();
      multiKey1.getKeys();
      multiKey3.toString();
      multiKey1.toString();
      multiKey3.toString();
      multiKey3.getKey(2);
      multiKey3.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, org.apache.commons.collections4.keyvalue.MultiKey, , 3?<iw:&F>@#'Hl*3, 3?<iw:&F>@#'Hl*3], , ]", string0);
      
      String string1 = multiKey0.getKey(2);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, integer0, integer1);
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKey(0);
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[null, 0, 0]", "MultiKey[null, 0, 0]", "MultiKey[null, 0, 0]", (String) null);
      multiKey2.toString();
      multiKey2.getKey(0);
      multiKey2.equals((Object) null);
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(3997);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3997
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = null;
      Integer integer1 = new Integer((-694));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer1);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0);
      multiKey1.hashCode();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) multiKey1;
      objectArray0[1] = (Object) multiKey1;
      objectArray0[2] = (Object) multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("", "t$,O/", "l]6MIjIk]sM");
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey2, multiKey2, multiKey2, multiKey2);
      Object object0 = multiKey3.getKey(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(object0, "t$,O/", objectArray0[1], objectArray0[1], multiKey0);
      // Undeclared exception!
      try { 
        multiKey4.getKey((-694));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -694
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      Integer integer0 = new Integer((-3819));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, integer0, multiKey1, integer0, "");
      Object object1 = multiKey2.getKey(1);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, object1, object0, "");
      String string0 = multiKey3.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "org.apache.commons.collections4.keyvalue.MultiKey";
      String string1 = "m$#K(|f";
      String string2 = "xAqJ9Aehu:2";
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "m$#K(|f", "xAqJ9Aehu:2");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Object[] objectArray0 = new Object[7];
      int int0 = 1027;
      // Undeclared exception!
      try { 
        multiKey0.getKey(1027);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1027
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "&Y";
      stringArray0[1] = "";
      stringArray0[2] = ":(3^ce[M ePd)0F|";
      stringArray0[3] = "The array of keys must not be null";
      stringArray0[4] = "";
      stringArray0[5] = "\"a2s^&p%1/";
      stringArray0[6] = "The array of keys must not be null";
      stringArray0[7] = "P04_J/%lnD{D07";
      stringArray0[8] = ">wIZ8=L]NFq6G-";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer((-318));
      Integer integer1 = new Integer(3377);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0);
      Integer integer2 = new Integer(3377);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) integer2;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) integer1;
      objectArray0[3] = (Object) integer1;
      objectArray0[4] = (Object) integer1;
      objectArray0[5] = (Object) integer1;
      objectArray0[6] = (Object) integer1;
      objectArray0[7] = (Object) integer1;
      objectArray0[8] = (Object) integer2;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-318));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -318
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("GQTBn!C-h{k8Hhy", "");
      multiKey0.toString();
      Object object0 = new Object();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      int int0 = (-1989);
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1989));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1989
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("U(:=LOG;<mY\"G", (String) null, "U(:=LOG;<mY\"G", (String) null);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey1.getKeys();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 8);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      multiKeyArray0[5] = multiKey0;
      multiKeyArray0[6] = multiKey0;
      multiKeyArray0[7] = multiKey0;
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      int int0 = multiKey2.size();
      assertEquals(8, int0);
  }
}
