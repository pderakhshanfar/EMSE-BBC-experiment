/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:04:26 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      Object object0 = multiKey0.getKey(1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, object0);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 9);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKeyArray0[0] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("+o+Ll", "+o+Ll", "\"q 5/wKIMrL", "\"q 5/wKIMrL", "");
      multiKeyArray0[1] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("+o+Ll", "", (String) null);
      multiKeyArray0[2] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>("\"q 5/wKIMrL", (String) null);
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[+o+Ll, , null]", string0);
      
      multiKeyArray0[3] = multiKey5;
      MultiKey<String> multiKey6 = new MultiKey<String>("", "");
      multiKeyArray0[4] = multiKey6;
      boolean boolean0 = multiKey5.equals(multiKey5);
      assertFalse(multiKey5.equals((Object)multiKey2));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.size();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, , ]", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      int int0 = 0;
      multiKey0.getKey(0);
      objectArray0[0] = null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, (String) null, (String) null);
      multiKey0.toString();
      multiKey1.getKey(0);
      objectArray0[2] = (Object) null;
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey0);
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey3.getKey((-366));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -366
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<MultiKey<String>> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "3'EFa?t[EV'!w~l|`*p", "3'EFa?t[EV'!w~l|`*p", "3'EFa?t[EV'!w~l|`*p");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "3'EFa?t[EV'!w~l|`*p";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey1, multiKey0, multiKey1);
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey1.toString();
      Object object0 = new Object();
      multiKey1.toString();
      Object object1 = new Object();
      multiKey1.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(stringArray0);
      multiKey3.getKey(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(object0, "3'EFa?t[EV'!w~l|`*p", object1, "MultiKey[3'EFa?t[EV'!w~l|`*p]", "3'EFa?t[EV'!w~l|`*p");
      multiKey4.toString();
      multiKey4.toString();
      multiKey4.toString();
      multiKey3.size();
      multiKey0.toString();
      multiKey3.toString();
      multiKey3.hashCode();
      multiKey3.toString();
      multiKey4.getKey(0);
      multiKey4.getKeys();
      multiKey1.getKeys();
      multiKey0.size();
      MultiKey<Integer> multiKey5 = null;
      try {
        multiKey5 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("rN?10zg", "rN?10zg", "rN?10zg", (Object) null);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "");
      multiKey1.size();
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertFalse(boolean0);
      
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[rN?10zg, rN?10zg, rN?10zg, null]", string0);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(4);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-2812));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(344);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(344);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-2812));
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      boolean boolean1 = multiKey2.equals(integer2);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-310));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
      Object object0 = null;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "+R;0EuMbDqE/;rAS";
      stringArray0[2] = "";
      stringArray0[3] = "/dMENQZt!";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-310));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -310
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      int int0 = 0;
      // Undeclared exception!
      try { 
        multiKey0.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "zc";
      stringArray0[1] = "";
      stringArray0[2] = "MultiKey";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "zc", (String) null, "", "");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey1, multiKey0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      MultiKey<String> multiKey3 = multiKey2.getKey(0);
      multiKey3.toString();
      multiKey1.toString();
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[zc, , MultiKey, , , ]", string0);
      
      MultiKey<Object> multiKey4 = new MultiKey<Object>(stringArray0);
      multiKey4.toString();
      multiKey4.hashCode();
      multiKey4.getKeys();
      multiKey1.toString();
      multiKey4.getKeys();
      multiKey4.size();
      multiKey2.hashCode();
      assertSame(multiKey0, multiKey3);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(455);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 455
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "h)7RP=Q9$GAtL'";
      stringArray0[4] = "o?4V|DKqeOrLb^6Hy";
      stringArray0[5] = "";
      stringArray0[6] = "  tysbGJe`{\"w0Tf=1L";
      stringArray0[7] = "";
      stringArray0[8] = "The array of keys must not be null";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertFalse(boolean0);
  }
}
