/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:26:23 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, (Object) null);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, multiKey0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey0, multiKey1);
      multiKey2.hashCode();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 5);
      MultiKey<String> multiKey3 = new MultiKey<String>("", "", "", "");
      multiKeyArray0[0] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("", "", "", "", "MultiKey");
      MultiKey<String> multiKey5 = new MultiKey<String>("MultiKey", "");
      boolean boolean0 = multiKey3.equals(multiKey3);
      assertTrue(boolean0);
      assertFalse(multiKey3.equals((Object)multiKey5));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "", "^t6,yB X~g-LV)w2_ka", (String) null, (String) null);
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "_2]t\"Q", "", "");
      MultiKey<String> multiKey3 = new MultiKey<String>("-;^9]|Y{sXdyy4#e7", "_2]t\"Q", "TsX%S{/iSD10Qxk7Zx", "org.apache.commons.collections4.keyvalue.MultiKey", "^t6,yB X~g-LV)w2_ka");
      MultiKey<String> multiKey4 = new MultiKey<String>("MultiKey", "MultiKey", "6pGUD!H", "YjD*", "");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      MultiKey<String>[] multiKeyArray1 = multiKey5.getKeys();
      assertEquals(0, multiKeyArray1.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("(j", "~\"_rK;Q", "MultiKey", "MultiKey");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.hashCode();
      multiKey0.equals(integer0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) multiKey0;
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "xF#j";
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "xF#j";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "xF#j";
      objectArray0[3] = (Object) "xF#j";
      objectArray0[4] = (Object) "xF#j";
      objectArray0[5] = (Object) "xF#j";
      objectArray0[6] = (Object) "xF#j";
      objectArray0[7] = (Object) "xF#j";
      objectArray0[8] = (Object) "xF#j";
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.getKey(0);
      MultiKey<String> multiKey1 = new MultiKey<String>("xF#j", "xF#j", "", "", "");
      int int0 = 973;
      // Undeclared exception!
      try { 
        multiKey1.getKey(973);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 973
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(2);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "", (String) null, "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.equals("");
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", "");
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.getKeys();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 8);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      Integer integer1 = new Integer(2);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer1);
      multiKeyArray0[5] = multiKey3;
      multiKeyArray0[6] = multiKey0;
      multiKeyArray0[7] = multiKey0;
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      int int0 = multiKey4.size();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("$=LX}[\"QlM", "", "", "", "");
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", "", multiKey1);
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      boolean boolean0 = multiKey2.equals(multiKey1);
      assertFalse(boolean0);
      
      multiKey2.size();
      multiKey2.hashCode();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey0, multiKey1, multiKey1);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[], MultiKey[$=LX}[\"QlM, , , , ], MultiKey[$=LX}[\"QlM, , , , ]]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.getKey(3);
      multiKey0.toString();
      objectArray0[3] = null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey1.getKey(3);
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey2.toString();
      multiKey0.equals(multiKey2);
      multiKey1.getKeys();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.toString();
      int int0 = multiKey3.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      // Undeclared exception!
      try { 
        multiKey0.getKey(2145);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2145
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("%P?\u0000BE>X!Sn*A", "", "J6#", "", "J6#");
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "J6#", (Object) null, "", "");
      multiKey1.toString();
      Integer integer0 = new Integer((-2935));
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, (Integer) null);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.getKeys();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-602));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -602
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-543));
      Integer integer1 = new Integer(5);
      Integer integer2 = new Integer(5);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, integer2);
      assertEquals(4, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.toString();
      multiKey0.size();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.hashCode();
      multiKey1.size();
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(2);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      Integer integer1 = multiKey2.getKey(0);
      assertEquals(2, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "5uv`)ZbZ";
      String string1 = "/ `P3{";
      MultiKey<String> multiKey0 = new MultiKey<String>("5uv`)ZbZ", "/ `P3{", "5uv`)ZbZ");
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(755);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 755
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-3093));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1750);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      // Undeclared exception!
      try { 
        multiKey0.getKey(3496);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3496
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
