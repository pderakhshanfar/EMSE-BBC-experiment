/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:24:47 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "`D?Uw.8k!TV|3", "", "`D?Uw.8k!TV|3", "y}9^6X%");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 6);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKey0.toString();
      multiKeyArray0[4] = multiKey0;
      multiKeyArray0[5] = multiKey0;
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      multiKey1.equals(multiKey2);
      int int0 = multiKey0.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "6A~afk}<*N;<");
      multiKey1.toString();
      int int0 = multiKey1.size();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integerArray0);
      int int1 = multiKey2.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null, (String) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      multiKey0.equals((Object) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, multiKey0, (Object) null);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey1.toString();
      multiKey1.equals(multiKey0);
      multiKey1.toString();
      int int0 = multiKey1.size();
      int int1 = multiKey1.size();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "MultiKey[]";
      stringArray0[1] = "MultiKey[]";
      stringArray0[2] = "MultiKey[]";
      stringArray0[3] = "MultiKey[]";
      stringArray0[4] = "The array of keys must not be null";
      stringArray0[5] = "MultiKey[]";
      stringArray0[6] = "MultiKey[]";
      stringArray0[7] = "MultiKey[]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey2, multiKey2, multiKey2);
      multiKey1.toString();
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.getKeys();
      Integer integer0 = new Integer((-4201));
      Integer integer1 = new Integer((-4201));
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer0, integer1, integer1, (Integer) null);
      multiKey4.toString();
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[-4201, -4201, -4201, -4201, null]", string0);
      
      multiKey4.size();
      Integer integer2 = new Integer(0);
      boolean boolean0 = multiKey2.equals(integer2);
      assertFalse(boolean0);
      
      MultiKey<Object> multiKey5 = new MultiKey<Object>("MultiKey[-4201, -4201, -4201, -4201, null]", multiKey0, "The array of keys must not be null", "The array of keys must not be null", "MultiKey[-4201, -4201, -4201, -4201, null]");
      boolean boolean1 = multiKey0.equals(multiKey5);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(855);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, (Object) null, integer0, integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      String[] stringArray1 = multiKey1.getKeys();
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("_`{{qxw4", "");
      int int0 = (-101);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-101));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -101
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("G{j5.:Yr)_6i90IjG80", "3.5'Esv*Q@R Cn~Gp%", "G{j5.:Yr)_6i90IjG80", "G{j5.:Yr)_6i90IjG80");
      int int0 = multiKey0.size();
      multiKey0.toString();
      Integer integer0 = new Integer(4);
      Integer integer1 = new Integer(4);
      Integer integer2 = new Integer((-1635));
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, "3.5'Esv*Q@R Cn~Gp%", integer1, "", integer2);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey0.hashCode();
      multiKey0.toString();
      multiKey1.getKeys();
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      Integer integer3 = new Integer((-3294));
      integerArray0[2] = integer3;
      integerArray0[3] = integer2;
      Integer integer4 = new Integer((int) integerArray0[0]);
      integerArray0[4] = integer4;
      integerArray0[5] = integer2;
      integerArray0[6] = integer2;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, true);
      int int1 = multiKey2.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(3671);
      Integer integer3 = new Integer(4646);
      Integer integer4 = new Integer((-1));
      Integer integer5 = new Integer(3671);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer1, integer2, integer3, integer4, integer5);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, multiKey0, integer3, multiKey0);
      MultiKey<String> multiKey2 = new MultiKey<String>("@xu; '\"*vtgC9d,", "", "@xu; '\"*vtgC9d,", "", (String) null);
      multiKey2.toString();
      multiKey2.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, integer0, integer1);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[1, -1, -1, 1, -1], MultiKey[1, -1, -1, 1, -1], MultiKey[1, -1, -1, 1, -1], MultiKey[1, -1, -1, 1, -1]]", string0);
      
      multiKey0.getKey(0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "MultiKey[MultiKey[1, -1, -1, 1, -1], MultiKey[1, -1, -1, 1, -1], MultiKey[1, -1, -1, 1, -1], MultiKey[1, -1, -1, 1, -1]]";
      stringArray0[1] = "l6Gl|cuocXci";
      stringArray0[2] = "MultiKey[MultiKey[1, -1, -1, 1, -1], MultiKey[1, -1, -1, 1, -1], MultiKey[1, -1, -1, 1, -1], MultiKey[1, -1, -1, 1, -1]]";
      stringArray0[3] = "MultiKey[MultiKey[1, -1, -1, 1, -1], MultiKey[1, -1, -1, 1, -1], MultiKey[1, -1, -1, 1, -1], MultiKey[1, -1, -1, 1, -1]]";
      stringArray0[4] = "MultiKey[MultiKey[1, -1, -1, 1, -1], MultiKey[1, -1, -1, 1, -1], MultiKey[1, -1, -1, 1, -1], MultiKey[1, -1, -1, 1, -1]]";
      stringArray0[5] = "MultiKey[MultiKey[1, -1, -1, 1, -1], MultiKey[1, -1, -1, 1, -1], MultiKey[1, -1, -1, 1, -1], MultiKey[1, -1, -1, 1, -1]]";
      stringArray0[6] = "MultiKey[MultiKey[1, -1, -1, 1, -1], MultiKey[1, -1, -1, 1, -1], MultiKey[1, -1, -1, 1, -1], MultiKey[1, -1, -1, 1, -1]]";
      stringArray0[7] = "MultiKey[MultiKey[1, -1, -1, 1, -1], MultiKey[1, -1, -1, 1, -1], MultiKey[1, -1, -1, 1, -1], MultiKey[1, -1, -1, 1, -1]]";
      stringArray0[8] = "MultiKey[MultiKey[1, -1, -1, 1, -1], MultiKey[1, -1, -1, 1, -1], MultiKey[1, -1, -1, 1, -1], MultiKey[1, -1, -1, 1, -1]]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      Integer integer2 = new Integer(1867);
      multiKey2.equals(integer2);
      multiKey1.equals("MultiKey[MultiKey[1, -1, -1, 1, -1], MultiKey[1, -1, -1, 1, -1], MultiKey[1, -1, -1, 1, -1], MultiKey[1, -1, -1, 1, -1]]");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, false);
      Integer integer3 = new Integer((-1));
      MultiKey<Object> multiKey4 = new MultiKey<Object>("MultiKey[MultiKey[1, -1, -1, 1, -1], MultiKey[1, -1, -1, 1, -1], MultiKey[1, -1, -1, 1, -1], MultiKey[1, -1, -1, 1, -1]]", "MultiKey[MultiKey[1, -1, -1, 1, -1], MultiKey[1, -1, -1, 1, -1], MultiKey[1, -1, -1, 1, -1], MultiKey[1, -1, -1, 1, -1]]", integer3);
      Object object0 = multiKey4.getKey(1);
      assertEquals("MultiKey[MultiKey[1, -1, -1, 1, -1], MultiKey[1, -1, -1, 1, -1], MultiKey[1, -1, -1, 1, -1], MultiKey[1, -1, -1, 1, -1]]", object0);
      
      boolean boolean0 = multiKey3.equals("MultiKey[MultiKey[1, -1, -1, 1, -1], MultiKey[1, -1, -1, 1, -1], MultiKey[1, -1, -1, 1, -1], MultiKey[1, -1, -1, 1, -1]]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-1082));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1082));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1082));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[1]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[1]);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, (String) null, (String) null);
      multiKey1.toString();
      int int0 = multiKey1.size();
      assertEquals(3, int0);
  }
}
