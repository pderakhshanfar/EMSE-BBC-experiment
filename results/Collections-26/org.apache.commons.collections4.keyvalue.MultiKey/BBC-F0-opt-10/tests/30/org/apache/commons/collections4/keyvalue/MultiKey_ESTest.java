/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:54:10 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("39:3Qv3n[nRgs?n", "=FfM/V!rVsZMTQe\b~f", "39:3Qv3n[nRgs?n", "39:3Qv3n[nRgs?n");
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      int int0 = 5;
      multiKey0.getKey(5);
      objectArray0[0] = null;
      String string0 = "The array of keys must not be null";
      MultiKey<String> multiKey1 = new MultiKey<String>("", "The array of keys must not be null", "");
      int int1 = (-2417);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-2417));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2417
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<MultiKey<Object>> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.getKeys();
      Integer[] integerArray0 = new Integer[6];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      multiKey0.toString();
      Integer integer2 = new Integer((-3377));
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(1968);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) stringArray0, false);
      multiKey1.toString();
      multiKey2.toString();
      multiKey0.toString();
      multiKey2.getKeys();
      multiKey1.toString();
      multiKey0.size();
      multiKey1.size();
      multiKey2.equals(multiKey0);
      // Undeclared exception!
      try { 
        multiKey2.getKey((int) integerArray0[5]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1968
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1);
      multiKey0.toString();
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.getKeys();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "MultiKey[0, 0, 0]";
      stringArray0[1] = "MultiKey[0, 0, 0]";
      stringArray0[2] = "MultiKey[0, 0, 0]";
      stringArray0[3] = "MultiKey[0, 0, 0]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      String[] stringArray1 = multiKey2.getKeys();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 8);
      Integer integer2 = new Integer(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("MultiKey[0, 0, 0]", integer2);
      multiKeyArray0[0] = multiKey3;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey1, multiKey3);
      multiKeyArray0[1] = multiKey4;
      Object object0 = new Object();
      MultiKey<Object> multiKey5 = new MultiKey<Object>("", object0, (Object) null, integer2);
      multiKeyArray0[2] = multiKey5;
      Object object1 = new Object();
      MultiKey<Object> multiKey6 = new MultiKey<Object>(multiKey4, multiKey0, object1);
      multiKeyArray0[3] = multiKey6;
      MultiKey<String> multiKey7 = new MultiKey<String>("<D]h/Z/", "", "<D]h/Z/", "b", "b");
      multiKey7.getKey(0);
      MultiKey<Object> multiKey8 = new MultiKey<Object>(multiKey4, multiKey5, "<D]h/Z/");
      multiKeyArray0[4] = multiKey8;
      MultiKey<Object> multiKey9 = new MultiKey<Object>(stringArray1);
      multiKeyArray0[5] = multiKey9;
      MultiKey<Object> multiKey10 = new MultiKey<Object>(multiKey3, "<D]h/Z/");
      multiKeyArray0[6] = multiKey10;
      Object object2 = new Object();
      MultiKey<Object> multiKey11 = new MultiKey<Object>("", multiKey6, object2);
      Object object3 = new Object();
      MultiKey<Object> multiKey12 = new MultiKey<Object>(multiKey11, "b", multiKey8, object3, (Object) null);
      multiKeyArray0[7] = multiKey12;
      MultiKey<MultiKey<Object>> multiKey13 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      // Undeclared exception!
      try { 
        multiKey13.getKey((-65));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -65
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(314);
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("(", integer0, (Object) null, integer0, object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      int int0 = multiKey0.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("=", "=", "=", "");
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      Integer integer0 = new Integer(5418);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, "The array of keys must not be null");
      multiKey2.getKeys();
      Integer integer1 = new Integer(5418);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer1, integer0, integer1, integer1, integer2);
      int int0 = multiKey3.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "Tt0&$d?Y#]76h(KLl";
      stringArray0[2] = "";
      stringArray0[3] = "XFzqbP++eXdsH14}{";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "|";
      stringArray0[7] = "O u9AvJ`:j@9zWj";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      String string0 = multiKey0.getKey(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0, "4Qdy<`@l");
      multiKey0.hashCode();
      MultiKey<String> multiKey1 = new MultiKey<String>("4Qdy<`@l", "4Qdy<`@l", "4Qdy<`@l", "4Qdy<`@l");
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[4Qdy<`@l, 4Qdy<`@l, 4Qdy<`@l, 4Qdy<`@l]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, integer0, object0, "+");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("+", "MultiKey[java.lang.Object@7b945d37, 0, java.lang.Object@7b945d37, +]", "MultiKey[java.lang.Object@7b945d37, 0, java.lang.Object@7b945d37, +]");
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      Object object1 = new Object();
      multiKey0.equals(object1);
      multiKey0.toString();
      multiKey0.size();
      multiKey0.equals("MultiKey[java.lang.Object@7b945d37, 0, java.lang.Object@7b945d37, +]");
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey0.getKeys();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", ".+~~w");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1363);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.size();
      // Undeclared exception!
      try { 
        multiKey0.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
