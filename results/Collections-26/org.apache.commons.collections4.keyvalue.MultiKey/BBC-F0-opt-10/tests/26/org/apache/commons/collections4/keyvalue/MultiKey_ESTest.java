/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:41:59 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(")wr;z!aOG,=8", ")wr;z!aOG,=8");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 7);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      multiKeyArray0[5] = multiKey0;
      multiKeyArray0[6] = multiKey0;
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      Object object0 = multiKey1.getKey(1);
      boolean boolean0 = multiKey0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      int int0 = multiKey0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      Integer[] integerArray1 = multiKey0.getKeys();
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      String string0 = "MultiKey";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      int int0 = 0;
      multiKey0.getKey(0);
      objectArray0[0] = (Object) "";
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<String> multiKey1 = new MultiKey<String>("`zZcYB]|pQVRZ", (String) null, "`zZcYB]|pQVRZ", (String) null, (String) null);
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-227));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -227
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(941);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "z3t9Gg z]M(MvGB1";
      stringArray0[1] = "z3t9Gg z]M(MvGB1";
      stringArray0[2] = "z3t9Gg z]M(MvGB1";
      stringArray0[3] = "z3t9Gg z]M(MvGB1";
      stringArray0[4] = "_/xU Co";
      stringArray0[5] = "z3t9Gg z]M(MvGB1";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("z3t9Gg z]M(MvGB1", "z3t9Gg z]M(MvGB1", object0, multiKey0);
      multiKey1.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.toString();
      multiKey1.getKeys();
      multiKey1.getKey(0);
      multiKey2.equals("MultiKey[0, 0, 0]");
      multiKey1.size();
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, "", "");
      multiKey0.getKey(1);
      objectArray0[1] = (Object) null;
      multiKey0.getKey(1);
      objectArray0[2] = (Object) null;
      Object object1 = new Object();
      objectArray0[3] = object1;
      Object object2 = new Object();
      objectArray0[4] = object2;
      Object object3 = new Object();
      objectArray0[5] = object3;
      Object object4 = new Object();
      objectArray0[6] = object4;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.getKey(1);
      objectArray0[7] = null;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      assertTrue(multiKey2.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "SULFfPzyl]??FB0vSP", ")!");
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, "SULFfPzyl]??FB0vSP");
      multiKeyArray0[0] = multiKey1;
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      int int0 = 0;
      Object object0 = multiKey2.getKey(0);
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey0, "g!4=oM{v 'u-:@^qcr", object0, integer0);
      Object object1 = multiKey3.getKey(0);
      objectArray0[0] = object1;
      Object object2 = new Object();
      objectArray0[1] = object2;
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0, true);
      Integer integer1 = multiKey4.getKey(0);
      objectArray0[2] = (Object) integer1;
      multiKey0.getKey(0);
      objectArray0[3] = (Object) null;
      multiKey0.getKey(int0);
      objectArray0[4] = (Object) null;
      Integer integer2 = multiKey4.getKey(0);
      objectArray0[5] = (Object) integer2;
      MultiKey<Object> multiKey5 = new MultiKey<Object>((Object) null, "org.apache.commons.collections4.keyvalue.MultiKey", objectArray0[5]);
      // Undeclared exception!
      try { 
        multiKey5.getKey(961);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 961
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null", "'~G^gRV3C]$I9W");
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.equals(multiKey0);
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("' i+1N-ND^SL\"0j", "' i+1N-ND^SL\"0j", "Gm/X`(Iu`.E`", "@c0.B~+", "0=)whPG6_Z");
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey", "' i+1N-ND^SL\"0j", "MultiKey");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      int int0 = (-2798);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-2798));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2798
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
