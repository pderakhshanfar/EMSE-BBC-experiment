/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:52:44 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MD/}Tm", (String) null, (String) null);
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, "MD/}Tm", (Object) null, "MD/}Tm", multiKey1);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[MD/}Tm, null, null], MD/}Tm, null, MD/}Tm, MultiKey[0, 0, 0]]", string0);
      
      Object object0 = multiKey2.getKey(0);
      boolean boolean0 = multiKey0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 1);
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "3&5oWXcvWh", "3&5oWXcvWh");
      multiKeyArray0[0] = multiKey0;
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      multiKey1.toString();
      multiKey1.toString();
      Integer integer0 = new Integer(2605);
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("3&5oWXcvWh", integer0);
      multiKey2.getKeys();
      multiKey2.hashCode();
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKeyArray0);
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, org.apache.commons.collections4.keyvalue.MultiKey, org.apache.commons.collections4.keyvalue.MultiKey, 3&5oWXcvWh, 3&5oWXcvWh]]", string0);
      
      multiKey3.equals(multiKey4);
      multiKey2.getKeys();
      multiKey0.hashCode();
      multiKey3.getKeys();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "MultiKey[MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, org.apache.commons.collections4.keyvalue.MultiKey, org.apache.commons.collections4.keyvalue.MultiKey, 3&5oWXcvWh, 3&5oWXcvWh]]";
      stringArray0[1] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[2] = "MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, org.apache.commons.collections4.keyvalue.MultiKey, org.apache.commons.collections4.keyvalue.MultiKey, 3&5oWXcvWh, 3&5oWXcvWh]";
      stringArray0[3] = "cnV\"4Wh\"v5#9Mr_";
      stringArray0[4] = "MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, org.apache.commons.collections4.keyvalue.MultiKey, org.apache.commons.collections4.keyvalue.MultiKey, 3&5oWXcvWh, 3&5oWXcvWh]";
      stringArray0[5] = "MultiKey[MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, org.apache.commons.collections4.keyvalue.MultiKey, org.apache.commons.collections4.keyvalue.MultiKey, 3&5oWXcvWh, 3&5oWXcvWh]]";
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray0);
      boolean boolean0 = multiKey0.equals(multiKey5);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      multiKey0.toString();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 2);
      MultiKey<String> multiKey1 = new MultiKey<String>("c#Jl7#Hb-_5", (String) null, "MultiKey[java.lang.Object@66fdc801]", "");
      multiKeyArray0[0] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("c#Jl7#Hb-_5", "c#Jl7#Hb-_5", "MultiKey[java.lang.Object@66fdc801]");
      multiKeyArray0[1] = multiKey2;
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      int int0 = multiKey3.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      multiKey0.toString();
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) "";
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      MultiKey<Integer> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      multiKey0.toString();
      multiKey0.getKeys();
      Integer integer0 = new Integer((-732));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer0);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[-732, -732, -732, -732, -732]", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.toString();
      multiKey0.getKeys();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "mG@8_2%6kY:#jk";
      stringArray0[2] = "zf9czaK";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      multiKey1.toString();
      multiKey0.toString();
      Integer integer0 = new Integer((-3556));
      Integer integer1 = new Integer((-2511));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer1);
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey2, multiKey2, multiKey2);
      multiKey3.size();
      multiKey1.hashCode();
      multiKey0.size();
      MultiKey<String> multiKey4 = new MultiKey<String>("zf9czaK", "MultiKey[]", (String) null, "MultiKey[]");
      MultiKey<Object> multiKey5 = new MultiKey<Object>("zf9czaK", multiKey4, multiKey2);
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey5, multiKey0, multiKey5);
      int int0 = multiKey6.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "DF8bUF94EB8", "DF8bUF94EB8");
      int int0 = 0;
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      multiKey0.toString();
      multiKey0.toString();
      objectArray0[1] = (Object) null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.equals(object0);
      // Undeclared exception!
      try { 
        multiKey0.getKey(2141);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2141
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Integer integer0 = new Integer((-307));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer0);
      multiKey0.hashCode();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
