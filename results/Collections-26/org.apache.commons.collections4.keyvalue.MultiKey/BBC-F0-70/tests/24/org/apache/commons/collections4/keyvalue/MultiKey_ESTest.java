/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:53:55 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("8", "8", "8", "8");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "8";
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) "8";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[8, MultiKey[8, 8, 8, 8], 8]", string0);
      
      multiKey1.size();
      boolean boolean0 = multiKey0.equals(objectArray0[1]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "JoKaO", "JoKaO", "", "JoKaO");
      Object[] objectArray0 = new Object[1];
      multiKey0.toString();
      objectArray0[0] = (Object) multiKey0;
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.size();
      multiKey1.equals(multiKey0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      multiKey1.equals(multiKey2);
      multiKey1.size();
      Integer integer0 = new Integer((-1506));
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(7);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer2);
      multiKey3.toString();
      // Undeclared exception!
      try { 
        multiKey3.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, "N2f8;", object0);
      multiKey0.toString();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "MultiKey[java.lang.Object@212309c0, N2f8;, java.lang.Object@212309c0]";
      stringArray0[1] = "MultiKey[java.lang.Object@212309c0, N2f8;, java.lang.Object@212309c0]";
      stringArray0[2] = "MultiKey[java.lang.Object@212309c0, N2f8;, java.lang.Object@212309c0]";
      stringArray0[3] = "MultiKey[java.lang.Object@212309c0, N2f8;, java.lang.Object@212309c0]";
      stringArray0[4] = "N2f8;";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[java.lang.Object@212309c0, N2f8;, java.lang.Object@212309c0]", "I>5*", "MultiKey[java.lang.Object@212309c0, N2f8;, java.lang.Object@212309c0]");
      multiKey2.toString();
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer((-2294));
      Integer integer2 = new Integer(2);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer1, integer1, integer2, integer2);
      multiKey3.hashCode();
      multiKey0.equals(integer1);
      multiKey3.hashCode();
      MultiKey<String> multiKey4 = new MultiKey<String>("MultiKey[java.lang.Object@212309c0, N2f8;, java.lang.Object@212309c0]", "", "MultiKey[MultiKey[java.lang.Object@212309c0, N2f8;, java.lang.Object@212309c0], I>5*, MultiKey[java.lang.Object@212309c0, N2f8;, java.lang.Object@212309c0]]");
      MultiKey<Object> multiKey5 = new MultiKey<Object>((Object[]) stringArray0, true);
      multiKey1.equals(multiKey5);
      // Undeclared exception!
      try { 
        multiKey0.getKey(6123);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6123
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.getKeys();
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-3035));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(530);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.hashCode();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      Object object0 = multiKey0.getKey(0);
      Integer integer1 = new Integer(1);
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = null;
      stringArray0[8] = null;
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, integer1, (Object) null, (Object) null);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, stringArray0[8]);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[0, 1, null, null], null]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1789);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.toString();
      multiKey0.getKeys();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "MultiKey[1789]";
      multiKey0.toString();
      stringArray0[1] = "MultiKey[1789]";
      stringArray0[2] = "MultiKey[1789]";
      stringArray0[3] = "MultiKey[1789]";
      stringArray0[4] = "MultiKey[1789]";
      stringArray0[5] = "|C>QF";
      stringArray0[6] = "MultiKey[1789]";
      stringArray0[7] = "MultiKey[1789]";
      stringArray0[8] = "MultiKey[1789]";
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("|C>QF", "MultiKey[1789]", object0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.getKeys();
      multiKey2.toString();
      multiKey2.size();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, "MultiKey[1789]", "MultiKey[1789]");
      multiKey0.equals(multiKey3);
      multiKey2.size();
      // Undeclared exception!
      try { 
        multiKey3.getKey(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>("e;]2AP", "e;]2AP", integer0, "e;]2AP");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[e;]2AP, e;]2AP, 0, e;]2AP]", string0);
      
      multiKey0.hashCode();
      Integer[] integerArray0 = new Integer[1];
      Integer integer1 = new Integer(1586);
      integerArray0[0] = integer1;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      boolean boolean0 = multiKey1.equals(integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 4);
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("K~?=oXj::Dj\"8D", "", "K~?=oXj::Dj\"8D", "", "i*!P)K9");
      multiKeyArray0[1] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("Gs", "i*!P)K9", "K~?=oXj::Dj\"8D");
      multiKeyArray0[2] = multiKey2;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Gs";
      stringArray0[1] = "";
      stringArray0[2] = "i*!P)K9";
      stringArray0[3] = "i*!P)K9";
      stringArray0[4] = "Gs";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, true);
      multiKeyArray0[3] = multiKey3;
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey1, multiKey4, multiKey0);
      multiKey5.equals("i*!P)K9");
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>(multiKey5, multiKey5, multiKey5);
      // Undeclared exception!
      try { 
        multiKey6.getKey((-1570));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1570
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[0, null]", "The array of keys must not be null", "W&b1;nCd9CV5Uw", "The array of keys must not be null", "W&b1;nCd9CV5Uw");
      int int1 = (-23);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-23));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -23
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer1, integer2, integer1, (Integer) null);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, multiKey0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "S:E`6}y";
      stringArray0[1] = "org.apache.commons.collections4.keyvalue.MultiKey";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, (Object) null, "S:E`6}y", multiKey1, multiKey2);
      Integer integer3 = new Integer(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey3, integer3, integer0);
      assertFalse(multiKey4.equals((Object)multiKey3));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(3148);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = null;
      Integer[] integerArray0 = new Integer[8];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(2420);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(1);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-107));
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int0);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-4895));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4895
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "3?";
      String string1 = "";
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-626));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      int int0 = 1467;
      // Undeclared exception!
      try { 
        multiKey0.getKey(1467);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1467
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
