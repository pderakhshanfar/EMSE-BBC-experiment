/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:54:12 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer((-4418));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer2, (Integer) null, integer3, integer4);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.size();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(1);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, integer0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0, integer0, multiKey0);
      multiKey0.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("],:>(8a~WH~*Qr}k6#^", "],:>(8a~WH~*Qr}k6#^", "],:>(8a~WH~*Qr}k6#^", "", "");
      multiKey2.toString();
      multiKey2.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[],:>(8a~WH~*Qr}k6#^, ],:>(8a~WH~*Qr}k6#^, ],:>(8a~WH~*Qr}k6#^, , ]", string0);
      
      multiKey2.hashCode();
      multiKey1.toString();
      assertFalse(multiKey1.equals((Object)multiKey0));
      
      boolean boolean0 = multiKey2.equals(multiKey2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = null;
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(4165);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
      Integer integer1 = new Integer(4165);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, integer0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.equals(integer0);
      int int0 = multiKey0.size();
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.equals("MultiKey[4165, 4165]");
      MultiKey<String> multiKey2 = new MultiKey<String>("", "MultiKey[4165, 4165]", (String) null, "MultiKey[4165, 4165]", "");
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey0.size();
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>("MultiKey[4165, 4165]", object0, "MultiKey[4165, 4165]");
      multiKey0.equals(multiKey3);
      int int1 = multiKey1.size();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "W.", (String) null, "e-H<@b%R//XpT[rWq", (String) null);
      multiKey0.toString();
      Integer integer0 = new Integer(124);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer((-232));
      Integer integer4 = new Integer((-1));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer2, integer2, integer3, integer4);
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey2, multiKey1, multiKey1);
      Integer integer5 = new Integer((-1));
      multiKey3.equals(integer5);
      MultiKey<MultiKey<String>> multiKey4 = null;
      try {
        multiKey4 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object2);
      Object object3 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object1, (Object) null, multiKey0, object1, object3);
      multiKey1.getKey(1);
      objectArray0[3] = null;
      MultiKey<String> multiKey2 = new MultiKey<String>("u", "X,hmF0EE?.=aWwz#", "u", "", "u");
      // Undeclared exception!
      try { 
        multiKey2.getKey(700);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 700
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(1);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, integer0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0, integer0, multiKey0);
      multiKey0.toString();
      multiKey1.getKey(0);
      MultiKey<String> multiKey2 = new MultiKey<String>("],:>(8a~WH~*Qr}k6#^", "],:>(8a~WH~*Qr}k6#^", "],:>(8a~WH~*Qr}k6#^", "", "");
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey1.toString();
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      multiKey3.toString();
      multiKey3.getKeys();
      Object object1 = new Object();
      multiKey3.toString();
      multiKey0.equals(object1);
      int int0 = multiKey3.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "%nWW?b+$~q";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1);
      multiKey1.hashCode();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, "%nWW?b+$~q", "");
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.getKeys();
      multiKey2.size();
      int int0 = multiKey1.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      multiKey0.equals(integer0);
      multiKey0.toString();
      String[] stringArray1 = multiKey0.getKeys();
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray1, false);
      multiKey1.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, "MultiKey[]", integer1, multiKey1, object0);
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.hashCode();
      multiKey2.size();
      boolean boolean0 = multiKey1.equals("MultiKey[]");
      assertFalse(boolean0);
      
      multiKey1.hashCode();
      multiKey2.hashCode();
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer2, (Integer) null, (Integer) null);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[0, 0, null, null]", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<String> multiKey0 = new MultiKey<String>(":3|>lk", "The array of keys must not be null", "The array of keys must not be null", ":3|>lk");
      // Undeclared exception!
      try { 
        multiKey0.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-2294));
      Integer integer2 = new Integer(0);
      int int0 = 322;
      Integer integer3 = new Integer(322);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, integer2, integer3);
      Integer integer4 = multiKey0.getKey(0);
      objectArray0[1] = (Object) integer4;
      Object object1 = new Object();
      objectArray0[2] = object1;
      MultiKey<String> multiKey1 = new MultiKey<String>(" ", "y$5]!Oqd_W]>", (String) null);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-2294));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2294
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "?Nz~KN";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      assertEquals(3, multiKey0.size());
  }
}
