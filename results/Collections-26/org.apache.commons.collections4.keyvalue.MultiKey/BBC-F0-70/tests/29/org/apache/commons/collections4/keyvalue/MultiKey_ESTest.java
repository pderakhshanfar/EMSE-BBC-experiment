/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:55:01 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("^\"j``l$IR!s$MN[M", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "^\"j``l$IR!s$MN[M");
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      multiKey1.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[^\"j``l$IR!s$MN[M, org.apache.commons.collections4.keyvalue.MultiKey, org.apache.commons.collections4.keyvalue.MultiKey, ^\"j``l$IR!s$MN[M]", string0);
      
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[^\"j``l$IR!s$MN[M, org.apache.commons.collections4.keyvalue.MultiKey, org.apache.commons.collections4.keyvalue.MultiKey, ^\"j``l$IR!s$MN[M]", "");
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey0, multiKey2);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      multiKey4.getKeys();
      multiKey2.size();
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(2);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer0, integer0, integer1, integer1);
      multiKey5.size();
      Integer integer2 = new Integer(1425);
      boolean boolean0 = multiKey5.equals(integer2);
      assertFalse(boolean0);
      
      MultiKey<MultiKey<Integer>> multiKey6 = new MultiKey<MultiKey<Integer>>(multiKey5, multiKey5);
      multiKey6.getKeys();
      Integer integer3 = new Integer(2);
      Integer integer4 = new Integer(2);
      MultiKey<Integer> multiKey7 = new MultiKey<Integer>(integer3, integer0, integer4);
      assertFalse(multiKey7.equals((Object)multiKey5));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "<H),wj6.Xyp", "");
      MultiKey<String> multiKey1 = new MultiKey<String>("", "<H),wj6.Xyp", "", "");
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", multiKey1, "", "", "");
      Object object0 = multiKey2.getKey(1);
      boolean boolean0 = multiKey1.equals(object0);
      assertFalse(multiKey1.equals((Object)multiKey0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      Integer integer0 = new Integer((-1638));
      Integer integer1 = new Integer((-1638));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1);
      multiKey1.toString();
      multiKey0.equals(multiKey1);
      Object object0 = new Object();
      multiKey0.equals(object0);
      MultiKey<String> multiKey2 = new MultiKey<String>("", "MultiKey[-1638, -1638, -1638]", "MultiKey[-1638, -1638, -1638]", "^\"j``l$IR!s$MN[M");
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      multiKey3.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey2, multiKey3, multiKey3, multiKey3, multiKey2);
      multiKey4.getKeys();
      multiKey3.size();
      multiKey1.size();
      multiKey1.equals(object0);
      MultiKey<MultiKey<Integer>> multiKey5 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1);
      multiKey5.getKeys();
      MultiKey<Integer> multiKey6 = multiKey5.getKey(0);
      assertSame(multiKey1, multiKey6);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      int int0 = 772;
      Integer integer0 = new Integer(772);
      Integer integer1 = new Integer((-609));
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer2, (Integer) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, (String) null, (String) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.equals(multiKey1);
      MultiKey<Integer>[] multiKeyArray0 = null;
      MultiKey<MultiKey<Integer>> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("=>NkD>#\"(u6VGnY<*", "", "", "", "");
      multiKey0.hashCode();
      MultiKey<String>[] multiKeyArray0 = null;
      MultiKey<MultiKey<String>> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer1);
      multiKey0.toString();
      multiKey0.toString();
      int int0 = multiKey0.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(1397);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, false);
      multiKey1.toString();
      multiKey1.equals(multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.getKeys();
      multiKey1.equals(integer0);
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[1397, 0, -1, 1397]", "MultiKey[1397, 0, -1, 1397]", "MultiKey[1397, 0, -1, 1397]", "MultiKey[1397, 0, -1, 1397]", "Q5");
      multiKey2.hashCode();
      multiKey1.toString();
      multiKey2.size();
      Object object0 = new Object();
      multiKey1.equals(object0);
      Object object1 = multiKey1.getKey(0);
      assertFalse(object1.equals((Object)integer1));
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKey0.equals("");
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) multiKey0;
      String[] stringArray0 = new String[1];
      multiKey0.toString();
      multiKey0.toString();
      stringArray0[0] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey1.getKey(0);
      multiKey1.toString();
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) integer0;
      objectArray0[5] = (Object) "";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      multiKey2.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[, MultiKey[, ], , , 0, ]", string0);
      
      MultiKey<Object> multiKey3 = new MultiKey<Object>("", "", integer0, object0, multiKey2);
      multiKey3.toString();
      multiKey3.hashCode();
      multiKey3.hashCode();
      multiKey3.getKeys();
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0, false);
      multiKey4.getKey(0);
      multiKey2.equals("");
      multiKey3.size();
      Integer integer1 = new Integer(0);
      multiKey3.equals(integer1);
      Object object1 = new Object();
      boolean boolean0 = multiKey0.equals(object1);
      assertFalse(boolean0);
      
      multiKey2.getKey(0);
      assertFalse(multiKey2.equals((Object)multiKey3));
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.getKeys();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, (Integer) null, integer1, integer2);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "MultiKey[0, 0, null, 0, 0]";
      stringArray0[1] = "MultiKey[java.lang.Object@32f3fc05]";
      stringArray0[2] = "MultiKey[0, 0, null, 0, 0]";
      stringArray0[3] = "";
      stringArray0[4] = "MultiKey[0, 0, null, 0, 0]";
      stringArray0[5] = "MultiKey[0, 0, null, 0, 0]";
      stringArray0[6] = "MultiKey[java.lang.Object@32f3fc05]";
      stringArray0[7] = "MultiKey[0, 0, null, 0, 0]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.getKeys();
      Object object1 = new Object();
      boolean boolean0 = multiKey1.equals(object1);
      assertFalse(boolean0);
      
      multiKey0.getKey(0);
      multiKey0.hashCode();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[0, 0, null, 0, 0]", string0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "Wx)E}/1#~t)?", "QW;*)oq*5");
      multiKey0.getKey(0);
      objectArray0[0] = (Object) "MultiKey";
      Object object0 = new Object();
      objectArray0[1] = object0;
      Integer integer0 = new Integer((-1738));
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1, (Integer) null, integer1);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1738));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1738
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
