/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:53:23 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(19);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, integer0);
      multiKey0.toString();
      Integer integer1 = new Integer(120);
      Integer integer2 = new Integer(3);
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[java.lang.Object@25abc295, 19]", "");
      Object object1 = new Object();
      boolean boolean0 = multiKey1.equals(multiKey1);
      assertTrue(boolean0);
      
      Integer integer3 = new Integer((-3742));
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "MultiKey[java.lang.Object@25abc295, 19]");
      assertFalse(multiKey2.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(330);
      Integer integer1 = new Integer(10);
      Integer integer2 = new Integer(10);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer2);
      multiKey0.hashCode();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0, object0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "L Ix}*X,";
      stringArray0[1] = "L Ix}*X,";
      stringArray0[2] = "L Ix}*X,";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      multiKey2.equals(multiKey3);
      multiKey0.getKeys();
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[L Ix}*X,, L Ix}*X,, L Ix}*X,, null, null, null, null, null]", string0);
      
      multiKey0.toString();
      multiKey2.size();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(stringArray0);
      boolean boolean0 = multiKey4.equals("MultiKey[java.lang.Object@258d99c, java.lang.Object@258d99c, java.lang.Object@258d99c, java.lang.Object@258d99c]");
      assertFalse(boolean0);
      
      Object object1 = multiKey4.getKey(2);
      assertNotNull(object1);
      
      multiKey4.size();
      assertFalse(multiKey4.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("7?^Zj", "7?^Zj", "The array of keys must not be null");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "The array of keys must not be null";
      objectArray0[1] = (Object) "7?^Zj";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) "The array of keys must not be null";
      objectArray0[5] = (Object) "The array of keys must not be null";
      objectArray0[6] = (Object) "7?^Zj";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKey0.getKey(0);
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      objectArray0[1] = object0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, object0);
      multiKey1.getKey(0);
      objectArray0[2] = null;
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      // Undeclared exception!
      try { 
        multiKey2.getKey(3620);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3620
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, true);
      multiKey1.getKeys();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 4);
      multiKeyArray0[0] = multiKey0;
      multiKey0.toString();
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      multiKeyArray0[3] = multiKey2;
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      // Undeclared exception!
      try { 
        multiKey3.getKey((-3097));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3097
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", "");
      multiKey0.toString();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Dc&n!";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey1.size();
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer(310);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, (Integer) null, integer0, integer1, (Integer) null);
      multiKey2.toString();
      multiKey0.toString();
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey0.getKeys();
      multiKey0.equals("or&v)`zF$tIR6");
      // Undeclared exception!
      try { 
        multiKey0.getKey(310);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 310
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("6j+Zd}T/u4L[1JG", "6j+Zd}T/u4L[1JG", "6j+Zd}T/u4L[1JG");
      String[] stringArray0 = null;
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = "GR!";
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(3);
      Integer integer2 = new Integer(3);
      int int0 = 0;
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer3);
      int int1 = (-1533);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1533));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1533
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      multiKey0.size();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, (Object) null);
      multiKey1.toString();
      Object[] objectArray0 = multiKey1.getKeys();
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("$eGa@<HHqzd6awk", "$eGa@<HHqzd6awk", "5@0?", "B(~!`VlNZ8F", "f^/[t^s7mEBi");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("B(~!`VlNZ8F");
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-1));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1));
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("f^/[t^s7mEBi", multiKey1, "$eGa@<HHqzd6awk", object0);
      multiKey2.hashCode();
  }
}
