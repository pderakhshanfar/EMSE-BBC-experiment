/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:43:04 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      Object object0 = multiKey2.getKey(3);
      boolean boolean0 = multiKey1.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("7~/A", "7~/A", "", "");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) "7~/A";
      objectArray0[2] = (Object) "7~/A";
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "7~/A";
      objectArray0[8] = (Object) "";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      multiKey0.toString();
      Integer integer0 = new Integer(1374);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "a$>(e[wOQo';-=)F|E", "R)");
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.equals(multiKey0);
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null);
      MultiKey<String> multiKey4 = new MultiKey<String>("", "j1lHY6c4X&(-!>");
      MultiKey<Object> multiKey5 = new MultiKey<Object>(stringArray0);
      multiKey5.toString();
      Object[] objectArray0 = multiKey5.getKeys();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", (String) null, "");
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("%_N(Z%[6!'G$FI", (String) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "x<%OIU?de6_QLUKJ";
      stringArray0[1] = "";
      stringArray0[2] = "%_N(Z%[6!'G$FI";
      stringArray0[3] = "";
      stringArray0[4] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      Object object0 = multiKey1.getKey(0);
      assertEquals("x<%OIU?de6_QLUKJ", object0);
      
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, "x<%OIU?de6_QLUKJ");
      boolean boolean0 = multiKey2.equals(multiKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = "";
      stringArray0[0] = "";
      stringArray0[1] = "L3s):h>";
      stringArray0[2] = "";
      String string1 = "";
      stringArray0[3] = "";
      stringArray0[4] = "The array of keys must not be null";
      stringArray0[5] = "\b%<,H*,fA-'(wm|/p";
      stringArray0[6] = "";
      stringArray0[7] = "The array of keys must not be null";
      stringArray0[8] = "org.apache.commons.collections4.keyvalue.MultiKey";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      Integer[] integerArray0 = null;
      boolean boolean0 = false;
      MultiKey<Integer> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-624));
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2848);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(5);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(5);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(2848);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-624));
      integerArray0[7] = integer7;
      Integer integer8 = new Integer((int) integerArray0[0]);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.toString();
      int int1 = multiKey0.hashCode();
      assertFalse(int1 == int0);
      
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[-624, 0, 2848, 0, 5, 5, 2848, -624, -624]", string0);
      
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      MultiKey<String> multiKey2 = new MultiKey<String>("", "1BBT:#!g");
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, "1BBT:#!g", multiKey2);
      assertTrue(multiKey1.equals((Object)multiKey0));
      
      boolean boolean0 = multiKey3.equals(int0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null);
      multiKey0.toString();
      multiKey0.getKey(0);
      Object object0 = new Object();
      multiKey0.toString();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object2, multiKey0, object3);
      int int0 = 0;
      Object object4 = multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, multiKey0, object0, object1, object4);
      multiKey1.toString();
      multiKey2.hashCode();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.getKey(1);
      multiKey2.toString();
      int int1 = (-1);
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", "", "");
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.getKey(0);
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, integer0);
      multiKey2.toString();
      multiKey2.size();
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[null, 0]", "");
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey3, multiKey3, multiKey3, multiKey3, multiKey3);
      // Undeclared exception!
      try { 
        multiKey4.getKey(2767);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2767
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, multiKey0);
      multiKey1.toString();
      multiKey1.hashCode();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      multiKey2.toString();
      int int0 = multiKey2.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Integer integer0 = new Integer((-1));
      int int0 = (-1);
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer((-1));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1, integer2, integer0);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      multiKey3.toString();
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey3, multiKey3, multiKey3, multiKey3);
      multiKey4.toString();
      multiKey4.toString();
      multiKey4.toString();
      multiKey0.hashCode();
      MultiKey<Object> multiKey5 = new MultiKey<Object>(objectArray0, false);
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey5, multiKey5, multiKey5);
      multiKey6.getKeys();
      MultiKey<Integer> multiKey7 = new MultiKey<Integer>(integer2, integer1, integer2, integer2, integer1);
      // Undeclared exception!
      try { 
        multiKey7.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 2);
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "", "");
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("l", "x}#6", (String) null, "JW'n7!;", ".RF!ZYkF>");
      multiKeyArray0[1] = multiKey1;
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      int int0 = (-1395);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1395));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1395
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
