/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:54:01 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("xD", "xD", "xD", "xD");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      Object[] objectArray1 = multiKey1.getKeys();
      assertEquals(0, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("lcS.@aV[Had#i;}/H ", "lcS.@aV[Had#i;}/H ", "");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.hashCode();
      boolean boolean0 = multiKey0.equals("lcS.@aV[Had#i;}/H ");
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, "", object0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "MultiKey[MultiKey[lcS.@aV[Had#i;}/H , lcS.@aV[Had#i;}/H , ], MultiKey[lcS.@aV[Had#i;}/H , lcS.@aV[Had#i;}/H , ], MultiKey[lcS.@aV[Had#i;}/H , lcS.@aV[Had#i;}/H , ], MultiKey[lcS.@aV[Had#i;}/H , lcS.@aV[Had#i;}/H , ]]";
      objectArray0[1] = (Object) "MultiKey[MultiKey[lcS.@aV[Had#i;}/H , lcS.@aV[Had#i;}/H , ], MultiKey[lcS.@aV[Had#i;}/H , lcS.@aV[Had#i;}/H , ], MultiKey[lcS.@aV[Had#i;}/H , lcS.@aV[Had#i;}/H , ], MultiKey[lcS.@aV[Had#i;}/H , lcS.@aV[Had#i;}/H , ]]";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) multiKey2;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, true);
      multiKey3.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[lcS.@aV[Had#i;}/H , lcS.@aV[Had#i;}/H , ]", string0);
      
      multiKey3.toString();
      boolean boolean1 = multiKey2.equals(objectArray0[3]);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(3827);
      Integer integer1 = new Integer(3827);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, integer1, integer1);
      multiKey0.toString();
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(1516);
      Integer integer1 = new Integer(724);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0);
      multiKey0.toString();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer1;
      objectArray0[2] = (Object) integer1;
      objectArray0[3] = (Object) integer0;
      multiKey0.toString();
      objectArray0[4] = (Object) integer0;
      multiKey0.toString();
      objectArray0[5] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey1.toString();
      boolean boolean0 = multiKey1.equals(integer0);
      assertFalse(boolean0);
      
      multiKey0.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[1516, 724, 724, 1516, 1516, MultiKey[1516, 724, 1516]]", string0);
      
      MultiKey<String> multiKey2 = new MultiKey<String>("", "MultiKey[1516, 724, 724, 1516, 1516, MultiKey[1516, 724, 1516]]");
      multiKey2.hashCode();
      int int0 = multiKey0.size();
      int int1 = multiKey2.hashCode();
      assertTrue(int1 == int0);
      
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, true);
      boolean boolean1 = multiKey2.equals(multiKey3);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      multiKey0.toString();
      multiKey0.size();
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(2920);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.getKeys();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "MultiKey[]", "", "?6x^9B", "c'R&*[EU");
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey((int) integerArray0[0]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2920
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      Object object6 = multiKey0.getKey(0);
      Integer integer0 = new Integer(0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "~=D<E1u=Q.1j";
      stringArray0[3] = "*u;";
      stringArray0[4] = "&K^5tnGz?|?7";
      stringArray0[5] = "$X>#)@";
      stringArray0[6] = "";
      stringArray0[7] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      MultiKey<String> multiKey2 = new MultiKey<String>("", "&K^5tnGz?|?7");
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey1, multiKey2, multiKey2, multiKey2);
      MultiKey multiKey4 = (MultiKey)multiKey3.getKey(0);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(object6, multiKey0, integer0, multiKey4);
      assertEquals(8, multiKey4.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-401));
      Integer integer1 = new Integer(760);
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("lcS.@aV[Had#i;}/H ", "lcS.@aV[Had#i;}/H ", "");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[lcS.@aV[Had#i;}/H , lcS.@aV[Had#i;}/H , ], MultiKey[lcS.@aV[Had#i;}/H , lcS.@aV[Had#i;}/H , ]]", string0);
      
      multiKey0.hashCode();
      boolean boolean0 = multiKey0.equals("lcS.@aV[Had#i;}/H ");
      assertFalse(boolean0);
      
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, "", object0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) multiKey1;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "MultiKey[MultiKey[lcS.@aV[Had#i;}/H , lcS.@aV[Had#i;}/H , ], MultiKey[lcS.@aV[Had#i;}/H , lcS.@aV[Had#i;}/H , ]]";
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "MultiKey[MultiKey[lcS.@aV[Had#i;}/H , lcS.@aV[Had#i;}/H , ], MultiKey[lcS.@aV[Had#i;}/H , lcS.@aV[Had#i;}/H , ]]";
      objectArray0[5] = (Object) "MultiKey[MultiKey[lcS.@aV[Had#i;}/H , lcS.@aV[Had#i;}/H , ], MultiKey[lcS.@aV[Had#i;}/H , lcS.@aV[Had#i;}/H , ]]";
      objectArray0[6] = (Object) "MultiKey[MultiKey[lcS.@aV[Had#i;}/H , lcS.@aV[Had#i;}/H , ], MultiKey[lcS.@aV[Had#i;}/H , lcS.@aV[Had#i;}/H , ]]";
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, false);
      Object object1 = new Object();
      Object object2 = new Object();
      MultiKey<Object> multiKey4 = new MultiKey<Object>("lcS.@aV[Had#i;}/H ", object1, object2, object0, object0);
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey3, multiKey4);
      multiKey5.getKeys();
      assertFalse(multiKey3.equals((Object)multiKey4));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      Integer[] integerArray0 = new Integer[9];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(4);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-832));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[3]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[3]);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int0);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(int0);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      boolean boolean0 = multiKey1.equals(integer2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      Integer integer0 = new Integer(3005);
      Integer integer1 = new Integer(3005);
      Integer integer2 = new Integer(5);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer0, integer2);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-817));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -817
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals((Object) null);
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, (Object) null, integer0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey1.getKey(0);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 6);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      MultiKey<String> multiKey2 = new MultiKey<String>("", "6%+3?{9/;\"CAR${t", "MultiKey[0, null, 0]", "6%+3?{9/;\"CAR${t");
      multiKeyArray0[3] = multiKey2;
      multiKeyArray0[4] = multiKey0;
      multiKeyArray0[5] = multiKey0;
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      // Undeclared exception!
      try { 
        multiKey3.getKey(1601);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1601
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Integer integer0 = new Integer(2);
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, integer0, (Object) null, multiKey0);
      multiKey1.getKey(2);
      objectArray0[1] = null;
      multiKey1.getKey(0);
      objectArray0[2] = null;
      Object object1 = new Object();
      objectArray0[3] = object1;
      Object object2 = new Object();
      objectArray0[4] = object2;
      multiKey1.getKey(2);
      objectArray0[5] = null;
      Object object3 = new Object();
      objectArray0[6] = object3;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      assertEquals(7, multiKey2.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Integer integer0 = new Integer(4);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
