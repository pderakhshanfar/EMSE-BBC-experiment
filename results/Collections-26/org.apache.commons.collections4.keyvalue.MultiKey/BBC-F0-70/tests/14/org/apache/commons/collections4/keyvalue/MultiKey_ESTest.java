/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:51:10 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "uGG,v>VS0Eo:SV9", "");
      multiKey0.toString();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      MultiKey<Object>[] multiKeyArray1 = multiKey1.getKeys();
      assertEquals(0, multiKeyArray1.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("Q:", "Q:", "z", "Q:", "");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(368);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "");
      Integer integer1 = new Integer(368);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey0, multiKey1, integer1);
      multiKey2.getKeys();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[, , , ]", string0);
      
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 7);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      MultiKey<String> multiKey3 = new MultiKey<String>("", ";?OjQ", "");
      multiKeyArray0[2] = multiKey3;
      multiKeyArray0[3] = multiKey1;
      multiKeyArray0[4] = multiKey1;
      multiKeyArray0[5] = multiKey1;
      MultiKey<String> multiKey4 = new MultiKey<String>("", "", "6+q;*~");
      multiKeyArray0[6] = multiKey4;
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      MultiKey<String> multiKey6 = new MultiKey<String>((String) null, "9|h", "");
      boolean boolean0 = multiKey5.equals(multiKey6);
      boolean boolean1 = multiKey1.equals(multiKey1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("2R8TSR", "2R8TSR", "2R8TSR", "2R8TSR");
      multiKey0.toString();
      int int0 = 0;
      multiKey0.getKey(0);
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, integer1);
      multiKey1.getKey(0);
      Integer[] integerArray1 = new Integer[0];
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray1, false);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(int0, (Object) null, multiKey2);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey3);
      Integer integer3 = new Integer(int0);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey4, (Object) null, integer1);
      MultiKey<Object> multiKey6 = new MultiKey<Object>(integer3, "2R8TSR", int0, multiKey5);
      // Undeclared exception!
      try { 
        multiKey6.getKey((-1420));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1420
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(368);
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("r{Us}0@u0{`sG", "", "");
      multiKey0.toString();
      multiKey0.getKey(0);
      multiKey0.toString();
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-1604));
      Integer integer3 = new Integer(368);
      Integer integer4 = new Integer(368);
      Integer integer5 = new Integer(368);
      Integer integer6 = new Integer(0);
      Integer integer7 = new Integer(0);
      Integer[] integerArray0 = null;
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "JltVDC!CA";
      MultiKey<String> multiKey0 = new MultiKey<String>("{C:.aqYV># /=ikLI", "{C:.aqYV># /=ikLI", "JltVDC!CA", "{C:.aqYV># /=ikLI", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-827));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.equals(integer0);
      multiKey1.equals(integer0);
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[-827, -827]", "MultiKey[-827, -827]", "MultiKey[-827, -827]", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.getKey(0);
      multiKey2.size();
      multiKey2.equals(multiKey1);
      multiKey1.getKeys();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "MultiKey[MultiKey[-827, -827], MultiKey[-827, -827], MultiKey[-827, -827], org.apache.commons.collections4.keyvalue.MultiKey, org.apache.commons.collections4.keyvalue.MultiKey]";
      stringArray0[1] = "MultiKey[MultiKey[-827, -827], MultiKey[-827, -827], MultiKey[-827, -827], org.apache.commons.collections4.keyvalue.MultiKey, org.apache.commons.collections4.keyvalue.MultiKey]";
      stringArray0[2] = "org.apache.commons.collections4.keyvalue.MultiKey";
      multiKey1.toString();
      stringArray0[3] = "MultiKey[MultiKey[-827, -827], MultiKey[-827, -827], MultiKey[-827, -827]]";
      stringArray0[4] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[5] = "MultiKey[MultiKey[-827, -827], MultiKey[-827, -827], MultiKey[-827, -827]]";
      stringArray0[6] = "MultiKey[MultiKey[-827, -827], MultiKey[-827, -827], MultiKey[-827, -827]]";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey3, "MultiKey[MultiKey[-827, -827], MultiKey[-827, -827], MultiKey[-827, -827], org.apache.commons.collections4.keyvalue.MultiKey, org.apache.commons.collections4.keyvalue.MultiKey]");
      multiKey2.equals(multiKey4);
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKey2, multiKey2, multiKey2);
      multiKey5.hashCode();
      // Undeclared exception!
      try { 
        multiKey1.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, "Dw?Xv", "Dw?Xv");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0, "Dw?Xv");
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey0);
      Object object0 = multiKey2.getKey(0);
      boolean boolean0 = multiKey0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[7];
      int int0 = 2;
      Integer integer0 = new Integer(2);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(2);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(231);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(2);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-1177));
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[2, 2, 2, 2, 231, 2, -1177]", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "A48");
      Object object0 = new Object();
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, object0, multiKey0, "", integer0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.equals(object0);
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, org.apache.commons.collections4.keyvalue.MultiKey, org.apache.commons.collections4.keyvalue.MultiKey, org.apache.commons.collections4.keyvalue.MultiKey]", string0);
      
      Integer integer0 = new Integer(0);
      multiKey0.equals(integer0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer1);
      boolean boolean0 = multiKey1.equals(integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "The array of keys must not be null";
      MultiKey<String> multiKey0 = new MultiKey<String>(";^8z{Xo6", "The array of keys must not be null", (String) null, (String) null, (String) null);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(";^8z{Xo6", "The array of keys must not be null");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-3101));
      integerArray0[0] = integer0;
      multiKey0.toString();
      Integer integer1 = new Integer(3616);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      multiKey2.getKeys();
      Integer integer3 = new Integer((-347));
      multiKey0.equals(integer3);
      multiKey0.getKey(0);
      multiKey0.hashCode();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(1705);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1705
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "32@T5u$";
      stringArray0[1] = "";
      String string0 = "L5wIdc-Qs=\\u";
      stringArray0[2] = string0;
      stringArray0[3] = "";
      stringArray0[4] = "F^y|ZFe@PI";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.getKey(0);
      objectArray0[2] = (Object) "32@T5u$";
      multiKey0.getKey(0);
      objectArray0[3] = (Object) "32@T5u$";
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(623);
      integerArray0[0] = integer0;
      int int0 = (-2806);
      Integer integer1 = new Integer((-2806));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[1]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(2945);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(5049);
      integerArray0[7] = integer7;
      boolean boolean0 = true;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      // Undeclared exception!
      try { 
        multiKey1.getKey((int) integerArray0[0]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 623
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(".L6IEiW2fW", "$p", (String) null, "MultiKey", ".L6IEiW2fW");
      assertEquals(5, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "OUPvo";
      stringArray0[3] = "lp,S#%VK\"DkD]>";
      stringArray0[4] = "CePt?iyGyc`";
      stringArray0[5] = "Jbw{$R~U6'qrep]jaV3";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      // Undeclared exception!
      try { 
        multiKey0.getKey(3734);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3734
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "J)}?tcv*Mc,jn";
      stringArray0[2] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[3] = "";
      stringArray0[4] = "U,L45'P}&Zw";
      stringArray0[5] = "FC7:Yy%\"aR";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      String[] stringArray1 = multiKey0.getKeys();
      assertNotSame(stringArray0, stringArray1);
  }
}
