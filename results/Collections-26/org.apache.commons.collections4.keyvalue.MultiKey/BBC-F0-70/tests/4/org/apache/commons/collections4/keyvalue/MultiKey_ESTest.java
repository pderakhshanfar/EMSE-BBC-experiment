/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:43:23 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("h", "h", "h");
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[h, h, h]", string0);
      
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      String[] stringArray1 = multiKey0.getKeys();
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("j\"H", "j\"H", "j\"H");
      Integer integer0 = new Integer(1487);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer0, "j\"H", "j\"H");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) "j\"H";
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) "j\"H";
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = (Object) multiKey0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey2, multiKey1, multiKey1, multiKey2);
      multiKey3.toString();
      Object object0 = new Object();
      multiKey3.equals(object0);
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey5 = new MultiKey<Object>((Object[]) integerArray0, false);
      multiKey4.equals(multiKey5);
      multiKey5.hashCode();
      MultiKey<String> multiKey6 = new MultiKey<String>("z#b9=qmhwG", "T\\]B)", "", "");
      // Undeclared exception!
      try { 
        multiKey6.getKey((int) integerArray0[0]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1487
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Integer integer0 = new Integer(1);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, (Object) null, (Object) null, integer0, (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1);
      multiKey1.toString();
      multiKey1.equals(multiKey0);
      multiKey0.hashCode();
      MultiKey<String> multiKey2 = new MultiKey<String>((String) null, "nB06|US|qYBToOI@", (String) null, "");
      String string0 = multiKey2.getKey(0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      int int0 = 4;
      Integer integer0 = new Integer(4);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, "/M@nA[P@ otDJ[oA7ho", "", (Object) null, integer0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      multiKey1.toString();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "/M@nA[P@ otDJ[oA7ho";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.equals("");
      multiKey0.equals(multiKey2);
      multiKey0.getKey(4);
      multiKey2.toString();
      multiKey2.toString();
      MultiKey<Integer> multiKey3 = null;
      try {
        multiKey3 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("ft=D", "The array of keys must not be null", "ft=D", "The array of keys must not be null");
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "ft=D", "The array of keys must not be null");
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey0, multiKey1, multiKey2);
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object[]) stringArray0, false);
      multiKey4.toString();
      multiKey4.toString();
      multiKey4.toString();
      boolean boolean0 = multiKey2.equals("MultiKey[]");
      assertFalse(boolean0);
      
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[]", string0);
      
      multiKey4.size();
      String string1 = multiKey2.getKey(0);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-1));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(2177);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, (Integer) null);
      multiKey0.size();
      multiKey0.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer1, multiKey0, object0);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      Object[] objectArray0 = multiKey1.getKeys();
      multiKey0.equals(integer1);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey2, multiKey1, multiKey2);
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "org.apache.commons.collections4.keyvalue.MultiKey", "|X'SmqHIS?4o8vTx");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey0.toString();
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      multiKey2.getKeys();
      multiKey1.hashCode();
      // Undeclared exception!
      try { 
        multiKey0.getKey(3656);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3656
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
