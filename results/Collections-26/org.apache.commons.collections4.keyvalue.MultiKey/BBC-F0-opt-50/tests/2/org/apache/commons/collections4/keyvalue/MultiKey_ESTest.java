/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:47:07 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.size();
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("PT%2\"C;?\"w\"URqJq-", "PT%2\"C;?\"w\"URqJq-", "PT%2\"C;?\"w\"URqJq-", "PT%2\"C;?\"w\"URqJq-", "PT%2\"C;?\"w\"URqJq-");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      Integer[] integerArray1 = multiKey1.getKeys();
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 5);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer1, object0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, multiKey0);
      multiKeyArray0[0] = multiKey1;
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer2);
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null);
      multiKey3.getKey(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(object0, multiKey2, (Object) null, "");
      multiKeyArray0[1] = multiKey4;
      Object object1 = new Object();
      MultiKey<Object> multiKey5 = new MultiKey<Object>(object1, "", integer0, multiKey1, "The array of keys must not be null");
      multiKeyArray0[2] = multiKey5;
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integer1, integer1, integer1);
      MultiKey<String> multiKey7 = new MultiKey<String>("", "The array of keys must not be null", "", "?9T?B{4t", "YI[|lh3C<KS");
      boolean boolean0 = multiKey7.equals(multiKey0);
      boolean boolean1 = multiKey5.equals(multiKey5);
      assertFalse(boolean1 == boolean0);
      
      multiKey0.size();
      assertFalse(multiKey0.equals((Object)multiKey5));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<String> multiKey0 = new MultiKey<String>("", "!1SP", "L+x50rbAI 42Xc8", "", " fWtW`n#QEA9xKZF[[");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integer0, "", "");
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey2);
      multiKey3.toString();
      multiKey1.hashCode();
      multiKey2.hashCode();
      multiKey3.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[0]", string0);
      
      multiKey0.getKey(0);
      boolean boolean0 = multiKey1.equals(multiKey3);
      assertFalse(boolean0);
      
      multiKey1.hashCode();
      multiKey0.size();
      String string1 = multiKey0.getKey(0);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 5);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer1, object0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, multiKey0);
      multiKeyArray0[0] = multiKey1;
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer2);
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null);
      multiKey3.getKey(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(object0, multiKey2, (Object) null, "");
      multiKeyArray0[1] = multiKey4;
      Object object1 = new Object();
      MultiKey<Object> multiKey5 = new MultiKey<Object>(object1, "", integer0, multiKey1, "The array of keys must not be null");
      multiKeyArray0[2] = multiKey5;
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integer1, integer3, integer3);
      Object object2 = multiKey6.getKey(1);
      Object object3 = new Object();
      MultiKey<Object> multiKey7 = new MultiKey<Object>("", object3);
      multiKey7.getKey(0);
      MultiKey<Object> multiKey8 = new MultiKey<Object>(object2, integer0, object3, "");
      multiKeyArray0[3] = multiKey8;
      MultiKey<Object> multiKey9 = new MultiKey<Object>(multiKey1, object0);
      multiKeyArray0[4] = multiKey9;
      MultiKey<MultiKey<Object>> multiKey10 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      MultiKey<Object>[] multiKeyArray1 = multiKey10.getKeys();
      assertEquals(5, multiKeyArray1.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "", "MultiKey", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(3);
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("g5Wzpx7CA.B", "g5Wzpx7CA.B");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.equals("g5Wzpx7CA.B");
      multiKey0.hashCode();
      // Undeclared exception!
      try { 
        multiKey0.getKey(2353);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2353
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = ")8GM=Bq|OZLUQx";
      stringArray0[1] = "/w;cEf";
      String string0 = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "w?pGqQu#S#gV\"fq";
      stringArray0[5] = "MultiKey";
      String string1 = "Uo)Dz&$1!1%Xki)\"";
      stringArray0[6] = "Uo)Dz&$1!1%Xki)\"";
      stringArray0[7] = "The array of keys must not be null";
      stringArray0[8] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.getKeys();
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("\"SrUY.p", "org.apache.commons.collections4.keyvalue.MultiKey", "", "");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null, multiKey0);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[null, null, null, null, MultiKey[\"SrUY.p, org.apache.commons.collections4.keyvalue.MultiKey, , ]]", string0);
      
      multiKey1.hashCode();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "\"SrUY.p";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "org.apache.commons.collections4.keyvalue.MultiKey";
      objectArray0[5] = (Object) "\"SrUY.p";
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) multiKey0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, objectArray0[5]);
      multiKey3.toString();
      multiKey2.size();
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((-175));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-175));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      boolean boolean0 = multiKey4.equals("org.apache.commons.collections4.keyvalue.MultiKey");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "i%w>_q<{Dxp";
      stringArray0[3] = "5\bRIv;d:fP>JR";
      stringArray0[4] = "";
      stringArray0[5] = "kT|Zj~.";
      stringArray0[6] = "";
      stringArray0[7] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      String string0 = multiKey0.getKey(1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer[] integerArray0 = null;
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
