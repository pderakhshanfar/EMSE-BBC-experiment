/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:03:44 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("d0q", "d0q", "d0q");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[d0q, d0q, d0q]", string0);
      
      Object object0 = new Object();
      boolean boolean0 = multiKey0.equals(multiKey0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "d0q";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      boolean boolean1 = multiKey1.equals(object0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("0Czq", "0Czq", "0Czq", "0Czq");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey2, multiKey2);
      multiKey3.getKeys();
      Integer[] integerArray1 = multiKey1.getKeys();
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.size();
      multiKey1.toString();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 9);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey1;
      multiKeyArray0[3] = multiKey1;
      multiKeyArray0[4] = multiKey1;
      multiKeyArray0[5] = multiKey1;
      multiKeyArray0[6] = multiKey1;
      multiKeyArray0[7] = multiKey1;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, (Integer) null, integer0);
      Object object0 = multiKey2.getKey(3);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, multiKey1, multiKey0);
      multiKeyArray0[8] = multiKey3;
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      // Undeclared exception!
      try { 
        multiKey4.getKey(11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null);
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray0 = null;
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      Object object2 = multiKey0.getKey(0);
      objectArray0[2] = object2;
      Object object3 = multiKey0.getKey(0);
      assertNotSame(object3, object1);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[java.lang.Object@771b6bbe, java.lang.Object@691eabb3, java.lang.Object@771b6bbe, java.lang.Object@771b6bbe, java.lang.Object@762933c5]", "w?59{lR#Rr1)", "w?59{lR#Rr1)", "(WpWlEJ<o", "S%FX_uk");
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey2, multiKey2);
      multiKey3.getKeys();
      int int0 = multiKey2.size();
      int int1 = multiKey1.hashCode();
      assertFalse(int1 == int0);
      assertTrue(multiKey1.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Object object1 = new Object();
      Object object2 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0, object1, object2, object2);
      multiKey1.toString();
      multiKey0.equals(multiKey1);
      String string0 = multiKey0.toString();
      multiKey0.size();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "MultiKey[java.lang.Object@70a33f1f, java.lang.Object@70a33f1f, java.lang.Object@6a2236b0, java.lang.Object@4efe49c0, java.lang.Object@4efe49c0]";
      stringArray0[1] = "MultiKey[java.lang.Object@70a33f1f]";
      stringArray0[2] = "MultiKey[java.lang.Object@70a33f1f]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey2, multiKey2, multiKey2, multiKey2, multiKey2);
      String string1 = multiKey3.toString();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null");
      multiKey0.toString();
      Object object0 = new Object();
      multiKey0.toString();
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, multiKey0, object1, object1, object1);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey1.size();
      Integer integer0 = new Integer(5);
      multiKey0.toString();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, (Integer) null, integer0, integer0);
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.size();
      int int0 = 0;
      multiKey2.getKey(0);
      multiKey1.toString();
      multiKey2.hashCode();
      multiKey1.equals(object0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("MultiKey[java.lang.Object@5858b3d3, MultiKey[The array of keys must not be null, The array of keys must not be null], java.lang.Object@6bfb8fcb, java.lang.Object@6bfb8fcb, java.lang.Object@6bfb8fcb]", "MultiKey[java.lang.Object@5858b3d3, MultiKey[The array of keys must not be null, The array of keys must not be null], java.lang.Object@6bfb8fcb, java.lang.Object@6bfb8fcb, java.lang.Object@6bfb8fcb]", "org.apache.commons.collections4.keyvalue.MultiKey", object1);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey3, multiKey3);
      // Undeclared exception!
      try { 
        multiKey4.getKey(1223);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1223
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("Im.", "Im.", "Im.");
      int int0 = multiKey0.size();
      Integer integer0 = new Integer((-610));
      Integer integer1 = new Integer(3);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer0, integer1, (Integer) null);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[-610, 3, -610, 3, null]", string0);
      
      multiKey1.equals((Object) null);
      multiKey0.hashCode();
      boolean boolean0 = multiKey1.equals("MultiKey[-610, 3, -610, 3, null]");
      assertFalse(boolean0);
      
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[-610, 3, -610, 3, null]", (Object) null, "MultiKey[-610, 3, -610, 3, null]", integer0);
      int int1 = multiKey2.hashCode();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Z!|:";
      stringArray0[1] = "";
      stringArray0[2] = "M%j^-xc";
      stringArray0[3] = "KJ.mnz.6L";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "The array of keys must not be null";
      stringArray0[7] = "K&}w(\"T'n";
      stringArray0[8] = "s";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      // Undeclared exception!
      try { 
        multiKey0.getKey(219);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 219
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) multiKey0;
      objectArray0[7] = (Object) multiKey0;
      objectArray0[8] = (Object) "";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<String> multiKey2 = new MultiKey<String>("^`ql5>cD+r|jI!,b", "", "^`ql5>cD+r|jI!,b", "^`ql5>cD+r|jI!,b");
      // Undeclared exception!
      try { 
        multiKey2.getKey((-972));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -972
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
