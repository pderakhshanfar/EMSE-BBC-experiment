/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:49:33 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null);
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, integer0);
      Integer integer1 = new Integer(9);
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = null;
      integerArray0[1] = integer0;
      Integer integer2 = new Integer(9);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKey1.equals(multiKey2);
      Integer integer3 = new Integer(int0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) integerArray0, true);
      // Undeclared exception!
      try { 
        multiKey3.getKey(9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "MultiKey[java.lang.Object@3c48ed89]", "", "d");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      multiKey2.toString();
      int int0 = multiKey2.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 6);
      String string0 = "zKoWDybEK1jK";
      MultiKey<String> multiKey0 = new MultiKey<String>("zKoWDybEK1jK", "zKoWDybEK1jK", "zKoWDybEK1jK");
      multiKeyArray0[0] = multiKey0;
      String[] stringArray0 = null;
      boolean boolean0 = true;
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0, (Integer) null, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "MultiKey[]";
      stringArray0[1] = "MultiKey[null, 0, null, 0]";
      stringArray0[2] = "MultiKey[]";
      stringArray0[3] = "MultiKey[null, 0, null, 0]";
      stringArray0[4] = "MultiKey[]";
      stringArray0[5] = "MultiKey[]";
      stringArray0[6] = "MultiKey[null, 0, null, 0]";
      stringArray0[7] = "MultiKey[null, 0, null, 0]";
      stringArray0[8] = "MultiKey[]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      String[] stringArray1 = multiKey2.getKeys();
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(553);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "", "", "X@3,8V3V=ivqw@i:&", "");
      multiKey1.hashCode();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      multiKey2.toString();
      stringArray0[1] = "";
      stringArray0[2] = "X@3,8V3V=ivqw@i:&";
      stringArray0[3] = "X@3,8V3V=ivqw@i:&";
      stringArray0[4] = "X@3,8V3V=ivqw@i:&";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      multiKey3.toString();
      multiKey2.equals(multiKey3);
      MultiKey<String> multiKey4 = new MultiKey<String>((String) null, "", "0By:>'xHLs", "", "gvTI~F'G*s9*gh");
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey4, "X@3,8V3V=ivqw@i:&");
      boolean boolean0 = multiKey5.equals(multiKey4);
      assertFalse(boolean0);
      
      multiKey3.hashCode();
      multiKey5.toString();
      multiKey5.getKeys();
      assertFalse(multiKey4.equals((Object)multiKey3));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = false;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "MultiKey[]", "MultiKey[]", "MultiKey[]");
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, (MultiKey<String>) null, multiKey1);
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(3957);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0);
      multiKey0.equals(integer1);
      Object object0 = new Object();
      Object object1 = new Object();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object1, integer1, integer1, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, multiKey0, object1, multiKey2, (Object) null);
      multiKey3.size();
      multiKey1.hashCode();
      multiKey2.size();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 8);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey1;
      multiKeyArray0[3] = multiKey1;
      multiKeyArray0[4] = multiKey1;
      multiKeyArray0[5] = multiKey1;
      multiKeyArray0[6] = multiKey1;
      multiKeyArray0[7] = multiKey1;
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      MultiKey<String>[] multiKeyArray1 = multiKey4.getKeys();
      assertEquals(8, multiKeyArray1.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "+yq>dYon3YaVy<", "+yq>dYon3YaVy<", "+yq>dYon3YaVy<");
      String string0 = multiKey0.getKey(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("--0:P9LL", "", "--0:P9LL");
      // Undeclared exception!
      try { 
        multiKey0.getKey((-2758));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2758
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = null;
      MultiKey<String> multiKey0 = new MultiKey<String>("", (String) null, "", (String) null);
      // Undeclared exception!
      try { 
        multiKey0.getKey(1421);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1421
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0, integer0, object0);
      multiKey0.toString();
      multiKey0.equals("MultiKey[0, 0, 0, 0, java.lang.Object@728d98ae]");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "nF#|Of;b-%<cy&ue";
      stringArray0[1] = "MultiKey[0, 0, 0, 0, java.lang.Object@728d98ae]";
      stringArray0[2] = "MultiKey[0, 0, 0, 0, java.lang.Object@728d98ae]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      Integer integer1 = new Integer(0);
      boolean boolean0 = multiKey1.equals(integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      multiKey0.toString();
      int int0 = multiKey0.size();
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(2);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(325);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(325);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1471);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      int int1 = multiKey1.hashCode();
      assertFalse(int1 == int0);
  }
}
