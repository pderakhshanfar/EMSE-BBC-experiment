/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:52:57 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-4693));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "", integer0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) multiKey0;
      Integer integer1 = new Integer((-4693));
      Integer integer2 = new Integer(3998);
      int int0 = 0;
      Integer integer3 = new Integer(3998);
      Integer integer4 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer4, integer1, integer2, integer1, integer4);
      Integer[] integerArray0 = new Integer[7];
      Integer integer5 = new Integer((-1506));
      integerArray0[0] = integer5;
      Integer integer6 = new Integer((-1));
      integerArray0[1] = integer6;
      integerArray0[2] = integer0;
      integerArray0[3] = integer4;
      integerArray0[5] = integer2;
      integerArray0[6] = integer4;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      MultiKey<MultiKey<Integer>> multiKey5 = new MultiKey<MultiKey<Integer>>(multiKey3, multiKey0, multiKey4, multiKey2);
      multiKey5.getKey(1);
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey6 = new MultiKey<Object>(objectArray0, true);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[-4693, -4693]", string0);
      
      boolean boolean0 = multiKey1.equals("LO>dStB63pKS\"5RkO|W");
      MultiKey<MultiKey<Object>> multiKey7 = new MultiKey<MultiKey<Object>>(multiKey6, multiKey6, multiKey6, multiKey6, multiKey6);
      multiKey7.getKeys();
      MultiKey<String> multiKey8 = new MultiKey<String>("", "MultiKey", "v0ZXSP2|,wz[\"B", "LO>dStB63pKS\"5RkO|W", "");
      MultiKey<MultiKey<String>> multiKey9 = new MultiKey<MultiKey<String>>(multiKey8, multiKey8, multiKey8);
      Object object2 = multiKey9.getKey(int0);
      boolean boolean1 = multiKey8.equals(object2);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null);
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(3);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, (Object) null);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>((String) null, "");
      MultiKey<Object> multiKey3 = new MultiKey<Object>("", multiKey1, "`^zS?ZpEcQLAG", "`^zS?ZpEcQLAG");
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey3, multiKey0);
      multiKey3.toString();
      String[] stringArray1 = multiKey1.getKeys();
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = null;
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null);
      multiKey0.getKey(1);
      objectArray0[2] = (Object) null;
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(1);
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer0, integer2, integer3);
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer2;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>) null, multiKey1, multiKey2, (MultiKey<Integer>) null);
      multiKey3.getKey(0);
      objectArray0[3] = (Object) null;
      Object object2 = new Object();
      objectArray0[4] = object2;
      Object object3 = new Object();
      objectArray0[5] = object3;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0, true);
      boolean boolean0 = multiKey4.equals(multiKey2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, true);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", "", multiKey0, multiKey1);
      multiKey2.toString();
      multiKey1.toString();
      multiKey0.equals("MultiKey[]");
      boolean boolean0 = multiKey0.equals("6oo&tE`{9n46<,]");
      assertFalse(boolean0);
      
      multiKey0.size();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[, , MultiKey[], MultiKey[]]", string0);
      
      multiKey2.getKeys();
      assertFalse(multiKey2.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0, (Object) null, "", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      Integer integer0 = new Integer(5);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-464));
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, integer0, (Object) null, (Object) null);
      multiKey0.toString();
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(").*S::)xJ\u0003}", ").*S::)xJ\u0003}");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey((-3149));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3149
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer1);
      multiKey0.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, integer1);
      Object[] objectArray0 = multiKey1.getKeys();
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(355);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Object object1 = multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, object0, object1, multiKey0);
      multiKey1.getKey(1);
      multiKey0.size();
      int int0 = 0;
      Integer integer1 = new Integer(0);
      Object object2 = new Object();
      Object object3 = new Object();
      MultiKey<Integer> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-569));
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-1));
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((int) integerArray0[5]);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.size();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "|(}}DCkU";
      stringArray0[1] = "&wPW0>W";
      stringArray0[2] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[3] = "QL{!4";
      stringArray0[4] = "}*YJ/!k:s[>a7WYG";
      stringArray0[5] = "";
      stringArray0[6] = "p6yxK}Uu;k0gB?>8";
      stringArray0[7] = "";
      stringArray0[8] = "65";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.getKey(8);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("65", "zeU2+i(QY4[");
      Object[] objectArray0 = multiKey2.getKeys();
      assertEquals(2, objectArray0.length);
  }
}
