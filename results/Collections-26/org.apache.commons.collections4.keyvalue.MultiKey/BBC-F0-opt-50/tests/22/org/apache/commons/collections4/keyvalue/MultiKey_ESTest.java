/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:31:06 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(1247);
      assertNotNull(integer0);
      assertEquals(1247, (int)integer0);
      
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, (Object) null);
      assertEquals(3, multiKey0.size());
      assertNotNull(multiKey0);
      
      int int0 = multiKey0.size();
      assertEquals(3, multiKey0.size());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      assertEquals(0, multiKey0.size());
      assertEquals(0, multiKeyArray0.length);
      assertNotNull(multiKey0);
      
      MultiKey<Object>[] multiKeyArray1 = multiKey0.getKeys();
      assertEquals(0, multiKey0.size());
      assertNotSame(multiKeyArray0, multiKeyArray1);
      assertNotSame(multiKeyArray1, multiKeyArray0);
      assertEquals(0, multiKeyArray0.length);
      assertEquals(0, multiKeyArray1.length);
      assertNotNull(multiKeyArray1);
      assertFalse(multiKeyArray1.equals((Object)multiKeyArray0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      assertEquals(2, multiKey0.size());
      assertEquals(2, objectArray0.length);
      assertNotNull(multiKey0);
      
      Object object0 = multiKey0.getKey(0);
      assertEquals(2, multiKey0.size());
      assertEquals(2, objectArray0.length);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(4);
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null, integer0, integer0);
      assertEquals(4, multiKey0.size());
      assertNotNull(multiKey0);
      
      // Undeclared exception!
      try { 
        multiKey0.getKey(2292);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2292
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer(4);
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, integer0, object0, integer0, object0);
      assertEquals(5, multiKey0.size());
      assertNotNull(multiKey0);
      
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      assertEquals(5, multiKey0.size());
      assertEquals(5, multiKey1.size());
      assertNotNull(multiKey1);
      
      boolean boolean0 = multiKey1.equals("MultiKey[java.lang.Object@40f9ad26, 4, java.lang.Object@40f9ad26, -898, java.lang.Object@40f9ad26]");
      assertEquals(5, multiKey0.size());
      assertEquals(5, multiKey1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(3);
      assertNotNull(integer0);
      assertEquals(3, (int)integer0);
      
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      assertEquals(4, multiKey0.size());
      assertNotNull(multiKey0);
      
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertEquals(4, multiKey0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      assertEquals(4, multiKey0.size());
      assertNotNull(multiKey0);
      
      MultiKey<String> multiKey1 = new MultiKey<String>("'6=~$ct;]XH", (String) null, "i&X", "'6=~$ct;]XH");
      assertEquals(4, multiKey1.size());
      assertNotNull(multiKey1);
      
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1);
      assertEquals(4, multiKey1.size());
      assertEquals(2, multiKey2.size());
      assertNotNull(multiKey2);
      
      boolean boolean0 = multiKey2.equals(multiKey0);
      assertEquals(4, multiKey0.size());
      assertEquals(4, multiKey1.size());
      assertEquals(2, multiKey2.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      assertEquals(0, multiKey0.size());
      assertEquals(0, objectArray0.length);
      assertNotNull(multiKey0);
      
      int int0 = multiKey0.size();
      assertEquals(0, multiKey0.size());
      assertEquals(0, objectArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("'6=~$ct;]XH", (String) null, "i&X", "'6=~$ct;]XH");
      assertEquals(4, multiKey0.size());
      assertNotNull(multiKey0);
      
      String string0 = multiKey0.getKey(0);
      assertEquals(4, multiKey0.size());
      assertNotNull(string0);
      assertEquals("'6=~$ct;]XH", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 4);
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null, null, null]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      Object[] objectArray1 = multiKey0.getKeys();
      assertNotSame(objectArray1, objectArray0);
  }
}
