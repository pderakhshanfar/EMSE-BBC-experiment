/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:05:15 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey0, multiKey0, multiKey0, multiKey1);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("Lk^Yp_$", "Lk^Yp_$", (Object) null);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[Lk^Yp_$, Lk^Yp_$, null]", string0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = null;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) "Lk^Yp_$";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey0.equals(objectArray0[1]);
      assertFalse(multiKey0.equals((Object)multiKey1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(3343);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0, (Integer) null, integer0);
      multiKey0.equals("&C_juH$PJ:O3@Fs^");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[null, null, null, null, null, null, null, null, null]", string0);
      
      MultiKey<String> multiKey2 = new MultiKey<String>("2/q9Db", "-@t*$+)PsJ", "", (String) null, "))QX");
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey2, multiKey2);
      MultiKey<String> multiKey4 = new MultiKey<String>("MultiKey[null, 3343, null, 3343]", "n*_)M1", (String) null);
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKey2, (MultiKey<String>) null);
      boolean boolean0 = multiKey5.equals(multiKey3);
      assertFalse(multiKey3.equals((Object)multiKey5));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(3);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.toString();
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      Object object2 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, object1, multiKey0, (Object) null, object2);
      MultiKey<String> multiKey2 = new MultiKey<String>((String) null, (String) null);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, (Object) null, (Object) null);
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1068));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-486));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      multiKey4.toString();
      multiKey4.getKeys();
      multiKey4.toString();
      multiKey0.getKeys();
      multiKey4.toString();
      multiKey3.size();
      String string0 = multiKey2.getKey(0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("Tc", "Tc", "qa_b0t|A4");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "Tc";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      Object[] objectArray1 = multiKey1.getKeys();
      multiKey0.hashCode();
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray1);
      multiKey1.equals(multiKey2);
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey3.getKeys();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.size();
      multiKey0.toString();
      multiKey2.toString();
      multiKey1.equals((Object) null);
      multiKey1.equals("MultiKey[Tc, Tc, qa_b0t|A4]");
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer1);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integer0, multiKey0, integer1, integer0);
      multiKey1.getKeys();
      MultiKey<Integer> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[]", string0);
      
      multiKey0.getKeys();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[]", "MultiKey[]", "MultiKey[]", "n*_)M1", "n*_)M1");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1);
      boolean boolean0 = multiKey2.equals("n*_)M1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 9);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "#T:.0lb9DL_D_tc`o";
      stringArray0[2] = "VrL,[bI&!wI";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("VrL,[bI&!wI", "", "h$lX{3`4^)[p", "", ":~n%?@]ZXc,f70z");
      multiKeyArray0[1] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "", "#T:.0lb9DL_D_tc`o");
      multiKeyArray0[2] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("oJ|Z~5yH*", "", "w@jx", "");
      multiKeyArray0[3] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("", "l` C:g6]P~l>:u", ":~n%?@]ZXc,f70z", "OhN`#d[vz-^eO6$II_", "#T:.0lb9DL_D_tc`o");
      multiKeyArray0[4] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray0);
      multiKeyArray0[5] = multiKey5;
      MultiKey<String> multiKey6 = new MultiKey<String>(stringArray0);
      multiKeyArray0[6] = multiKey6;
      MultiKey<String> multiKey7 = new MultiKey<String>(">T>aC<\"aWyEdiwJ>.I", (String) null, ":Xq4!");
      multiKeyArray0[7] = multiKey7;
      MultiKey<String> multiKey8 = new MultiKey<String>("", (String) null);
      multiKeyArray0[8] = multiKey8;
      MultiKey<MultiKey<String>> multiKey9 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      int int0 = multiKey9.size();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer2);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, (Object) null, "cY==co");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      int int0 = multiKey1.size();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, false);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[]", string0);
      
      int int1 = multiKey0.hashCode();
      assertFalse(int1 == int0);
      
      Integer integer3 = new Integer(1);
      boolean boolean0 = multiKey1.equals(integer3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object1, (Object) null, "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey0.hashCode();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[1] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[2] = "b 4tC\"J#";
      stringArray0[3] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[4] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[5] = "*";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      Integer integer0 = new Integer(6);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer0, (Integer) null);
      multiKey2.toString();
      multiKey2.equals(object1);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      multiKey3.toString();
      multiKey3.equals("org.apache.commons.collections4.keyvalue.MultiKey");
      // Undeclared exception!
      try { 
        multiKey1.getKey(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
