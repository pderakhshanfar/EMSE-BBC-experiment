/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:39:42 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) multiKey0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      Object object3 = multiKey1.getKey(0);
      boolean boolean0 = multiKey0.equals(object3);
      assertFalse(multiKey1.equals((Object)multiKey0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0, object0, object0);
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      Integer[] integerArray1 = multiKey1.getKeys();
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(470);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0);
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, false);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "+39lS]hM9";
      stringArray0[3] = "+39lS]hM9";
      stringArray0[4] = "+39lS]hM9";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      boolean boolean0 = multiKey1.equals("");
      assertFalse(boolean0);
      
      MultiKey<String> multiKey2 = new MultiKey<String>((String) null, "g|h~T>>", "JX*dH");
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey1, multiKey2, multiKey2, multiKey1);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[, , +39lS]hM9, +39lS]hM9, +39lS]hM9], MultiKey[null, g|h~T>>, JX*dH], MultiKey[null, g|h~T>>, JX*dH], MultiKey[, , +39lS]hM9, +39lS]hM9, +39lS]hM9]]", string0);
      
      multiKey3.size();
      Integer integer0 = new Integer((-1056));
      Integer integer1 = new Integer((-1056));
      Integer integer2 = new Integer(4);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer2, integer0);
      multiKey4.hashCode();
      multiKey4.hashCode();
      MultiKey<Object> multiKey5 = new MultiKey<Object>(stringArray0);
      boolean boolean1 = multiKey5.equals(multiKey0);
      assertFalse(multiKey0.equals((Object)multiKey2));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Integer[] integerArray0 = new Integer[5];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      int int1 = 1;
      Integer integer3 = new Integer(1);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      Integer integer5 = multiKey0.getKey(0);
      objectArray0[3] = (Object) integer5;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object1, (Object) null);
      Object object3 = multiKey1.getKey(0);
      objectArray0[4] = object3;
      multiKey1.getKey(int1);
      objectArray0[5] = null;
      Object object4 = multiKey1.getKey(0);
      objectArray0[6] = object4;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      assertEquals(7, multiKey2.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer[] integerArray0 = null;
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(1111);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, ">1X#", ">1X#", "2jH2X$m;)", integer0);
      multiKey0.toString();
      multiKey0.size();
      multiKey0.toString();
      multiKey0.hashCode();
      Object[] objectArray0 = multiKey0.getKeys();
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "\">E";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.equals((Object) null);
      MultiKey<String> multiKey1 = new MultiKey<String>("j2$c&|625", "", "The array of keys must not be null");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey0, multiKey1, multiKey1);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[j2$c&|625, , The array of keys must not be null], MultiKey[, , \">E, , , ], MultiKey[j2$c&|625, , The array of keys must not be null], MultiKey[j2$c&|625, , The array of keys must not be null]]", string0);
      
      int int0 = multiKey2.size();
      Integer integer0 = new Integer(4);
      Integer integer1 = new Integer(4);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer1);
      multiKey3.hashCode();
      int int1 = multiKey3.hashCode();
      assertFalse(int1 == int0);
      
      MultiKey<Object> multiKey4 = new MultiKey<Object>(stringArray0);
      boolean boolean0 = multiKey4.equals("OC68],7iJbPL+Bb{AOo");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = "";
      stringArray0[0] = "";
      stringArray0[1] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "");
      multiKey1.toString();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(419);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 419
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 8);
      Integer integer0 = new Integer((-1));
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, object0);
      multiKeyArray0[0] = multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, (Object) null, (Object) null);
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", multiKey0);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-1025));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.hashCode();
      String string0 = "cB)}t?$UoMX";
      String string1 = "3+Oy,Eeq!K0Zri1:";
      MultiKey<String> multiKey1 = new MultiKey<String>("cB)}t?$UoMX", "3+Oy,Eeq!K0Zri1:", "", "3+Oy,Eeq!K0Zri1:", "cB)}t?$UoMX");
      multiKey1.size();
      multiKey1.size();
      MultiKey<String> multiKey2 = new MultiKey<String>("FaLQ,", "");
      // Undeclared exception!
      try { 
        multiKey2.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer((-3481));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey1.toString();
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey1);
      multiKey1.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>("b^#", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey3.size();
      MultiKey<Object> multiKey4 = new MultiKey<Object>("org.apache.commons.collections4.keyvalue.MultiKey", "MultiKey[-3481, -3481, -3481]", integerArray0[0], multiKey1, (Object) null);
      multiKey4.toString();
      multiKey3.toString();
      multiKey3.toString();
      // Undeclared exception!
      try { 
        multiKey3.getKey(1659);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1659
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-482));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -482
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
