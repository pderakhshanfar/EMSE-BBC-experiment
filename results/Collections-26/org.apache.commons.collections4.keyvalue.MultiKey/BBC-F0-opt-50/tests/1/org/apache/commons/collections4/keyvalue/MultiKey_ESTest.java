/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:03:23 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-960));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      boolean boolean0 = multiKey0.equals("MultiKey[-960, -960, -960]");
      multiKey0.hashCode();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 4);
      Integer integer1 = new Integer((-960));
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer1, multiKey0);
      multiKeyArray0[0] = multiKey1;
      Integer integer2 = new Integer((-960));
      MultiKey<String> multiKey2 = new MultiKey<String>("_!W,sfN7'Llr_y7", "MultiKey[-960, -960, -960]", "MultiKey[-960, -960, -960]", "MultiKey[-960, -960, -960]", "MultiKey[-960, -960, -960]");
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer1, integer2, multiKey0, multiKey2);
      multiKeyArray0[1] = multiKey3;
      Integer[] integerArray0 = new Integer[2];
      Integer integer3 = new Integer(0);
      integerArray0[0] = integer3;
      integerArray0[1] = integer2;
      multiKey1.toString();
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0, true);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey4, "MultiKey[-960, -960, -960]");
      multiKeyArray0[2] = multiKey5;
      MultiKey<String> multiKey6 = new MultiKey<String>("MultiKey[-960, -960, -960]", (String) null, "");
      Object object0 = new Object();
      MultiKey<MultiKey<Object>> multiKey7 = new MultiKey<MultiKey<Object>>(multiKey5, multiKey3, multiKey1, multiKey5);
      multiKey7.size();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[-960, MultiKey[-960, -960, -960]]", string0);
      
      Object object1 = new Object();
      MultiKey<Object> multiKey8 = new MultiKey<Object>(multiKey1, object1);
      boolean boolean1 = multiKey5.equals(multiKey5);
      assertFalse(boolean1 == boolean0);
      
      multiKey1.size();
      assertFalse(multiKey0.equals((Object)multiKey4));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "");
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 7);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey1;
      multiKeyArray0[3] = multiKey1;
      multiKeyArray0[4] = multiKey1;
      multiKeyArray0[5] = multiKey1;
      multiKeyArray0[6] = multiKey1;
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      multiKey2.size();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[, ]", string0);
      
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKeyArray0);
      boolean boolean0 = multiKey3.equals(multiKey2);
      assertTrue(boolean0);
      assertFalse(multiKey3.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 3);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "");
      multiKeyArray0[1] = multiKey1;
      multiKey0.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      multiKeyArray0[2] = multiKey2;
      multiKey2.toString();
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKeyArray0);
      multiKey0.toString();
      multiKey2.toString();
      multiKey4.size();
      multiKey0.equals(multiKey2);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[, , ]", string0);
      
      MultiKey<String> multiKey5 = new MultiKey<String>("jf%h..qV,", "kA.oGz!{");
      boolean boolean0 = multiKey0.equals(multiKey5);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("6x+lF@GMrg", "6x+lF@GMrg", "6x+lF@GMrg", ".*FUE+j^,]WPsw/g");
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, (Integer) null);
      multiKey1.toString();
      int int0 = multiKey1.size();
      assertEquals(2, int0);
      
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) ".*FUE+j^,]WPsw/g";
      objectArray0[1] = (Object) "MultiKey[6x+lF@GMrg, 6x+lF@GMrg, 6x+lF@GMrg, .*FUE+j^,]WPsw/g]";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      multiKey2.getKey(3);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object) null, "");
      MultiKey<Object> multiKey4 = new MultiKey<Object>(object0, object0, multiKey3, objectArray0[3], (Object) null);
      multiKey4.toString();
      Integer integer0 = new Integer((-1));
      MultiKey<Object> multiKey5 = new MultiKey<Object>((Object) null, multiKey2, integer0, ".*FUE+j^,]WPsw/g");
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>(multiKey4, multiKey5, multiKey4);
      // Undeclared exception!
      try { 
        multiKey6.getKey(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.equals("MultiKey[]");
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-565));
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1, integer1, integer3);
      multiKey1.hashCode();
      multiKey0.getKeys();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-565));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -565
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.hashCode();
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(1078);
      Integer integer2 = new Integer(1078);
      Integer integer3 = new Integer(1561);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer1, integer2, integer3);
      Integer integer4 = new Integer(1561);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, integer4);
      multiKey2.hashCode();
      int int0 = multiKey2.size();
      int int1 = multiKey0.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      multiKey0.toString();
      multiKey0.hashCode();
      Object object1 = new Object();
      multiKey0.equals(object1);
      multiKey0.getKey(0);
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[java.lang.Object@49fa67ad, java.lang.Object@49fa67ad]", "MultiKey[java.lang.Object@49fa67ad, java.lang.Object@49fa67ad]");
      multiKey1.toString();
      Integer integer0 = new Integer(0);
      multiKey1.toString();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, (Integer) null, integer0);
      multiKey2.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[null, null, 0]", string0);
      
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertFalse(boolean0);
      
      multiKey1.size();
      multiKey1.toString();
      multiKey0.hashCode();
      int int0 = multiKey2.size();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      multiKey3.equals(object0);
      boolean boolean1 = multiKey2.equals("");
      assertFalse(boolean1);
      
      int int1 = multiKey1.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "[! jmw1sj9c";
      stringArray0[1] = "Ai'>]g=R-|~TeC^";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "The array of keys must not be null";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "MultiKey[0, 0]", (Object) null, integer0, (Object) null);
      multiKey1.toString();
      multiKey1.size();
      multiKey1.hashCode();
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[0, 0]", "MultiKey[0, 0]", "", (String) null);
      multiKey2.toString();
      multiKey2.equals("");
      multiKey2.getKey(0);
      multiKey2.toString();
      multiKey2.equals((Object) null);
      multiKey0.getKey(int0);
      MultiKey<MultiKey<Integer>> multiKey3 = null;
      try {
        multiKey3 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey0.size();
      Integer integer0 = new Integer(2);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("org.apache.commons.collections4.keyvalue.MultiKey", object0, "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, multiKey0, multiKey1, "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey2.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey0.toString();
      multiKey2.toString();
      multiKey2.getKeys();
      multiKey2.getKeys();
      multiKey1.getKeys();
      multiKey0.toString();
      multiKey0.size();
      multiKey0.toString();
      MultiKey<Integer> multiKey3 = null;
      try {
        multiKey3 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null);
      multiKey0.toString();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "X:Ij:mRtlQ";
      stringArray0[1] = "<6p6|mH<2";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = ">2zJ.#b\".g!/7i";
      stringArray0[5] = "WwIUq&WqcvnK7Vz";
      stringArray0[6] = "aA1p#3[k({Pkh3Rf";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey1.getKeys();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null, null]", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("\"Y|G^?_G&,?Y/ibmZ[-", "\"Y|G^?_G&,?Y/ibmZ[-");
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("\"Y|G^?_G&,?Y/ibmZ[-", multiKey0, "\"Y|G^?_G&,?Y/ibmZ[-", multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("\"Y|G^?_G&,?Y/ibmZ[-", "\"Y|G^?_G&,?Y/ibmZ[-", multiKey1);
      multiKey2.toString();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      int int0 = (-87);
      // Undeclared exception!
      try { 
        multiKey3.getKey((-87));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -87
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "8Etj[Wtm0b#wW5";
      stringArray0[4] = ",X";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      int int0 = multiKey1.size();
      assertEquals(5, int0);
  }
}
