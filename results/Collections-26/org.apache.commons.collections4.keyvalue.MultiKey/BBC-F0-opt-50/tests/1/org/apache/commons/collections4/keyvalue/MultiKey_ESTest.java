/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:45:44 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      int int0 = multiKey0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(370);
      MultiKey<MultiKey<Integer>> multiKey0 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null);
      multiKey0.hashCode();
      MultiKey<MultiKey<Object>> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("vwn", "vwn", "vwn", "vwn");
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("vwn", object0);
      int int0 = 0;
      multiKey1.getKey(0);
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 22);
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[3] = integer1;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0, true);
      multiKeyArray0[0] = multiKey3;
      multiKeyArray0[1] = multiKey2;
      multiKeyArray0[2] = multiKey2;
      multiKeyArray0[3] = multiKey2;
      multiKeyArray0[4] = multiKey2;
      multiKeyArray0[5] = multiKey2;
      multiKeyArray0[6] = multiKey2;
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      Object object1 = multiKey4.getKey(3);
      multiKey2.equals(object1);
      Object[] objectArray0 = multiKey1.getKeys();
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(5671);
      Integer integer1 = new Integer(1458);
      Integer integer2 = new Integer(3);
      Integer integer3 = new Integer(3);
      Integer integer4 = new Integer(3);
      Integer integer5 = new Integer(1458);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer2, integer3, integer4, integer5);
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "MultiKey[5671, 3, 3, 3, 1458]", "_z\"LU:Lemn Lwv", "");
      Integer integer6 = new Integer((-2517));
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, multiKey1, integer5, integer6, (Object) null);
      multiKey2.getKey(0);
      // Undeclared exception!
      try { 
        multiKey2.getKey(1458);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1458
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      MultiKey<String> multiKey1 = new MultiKey<String>("44 V", "w", "|Ud[$6\"*B9", "|Ud[$6\"*B9");
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKey(1);
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      multiKey1.toString();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKey2.size();
      String string0 = multiKey1.getKey(1);
      assertEquals("w", string0);
      
      String string1 = multiKey0.toString();
      assertEquals("MultiKey[]", string1);
      
      boolean boolean0 = multiKey2.equals(multiKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(1710);
      MultiKey<Object> multiKey0 = new MultiKey<Object>("t`/Bt|;-", "t`/Bt|;-", integer0, integer0);
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      Integer integer1 = new Integer(1710);
      integerArray0[3] = integer1;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, multiKey0, "t`/Bt|;-", multiKey1);
      MultiKey<String> multiKey3 = new MultiKey<String>("XP^XZf]A6!}Y", (String) null, "XP^XZf]A6!}Y", "");
      multiKey3.hashCode();
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      multiKey3.toString();
      stringArray0[1] = null;
      stringArray0[2] = "t`/Bt|;-";
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0, false);
      multiKey3.equals(multiKey4);
      multiKey1.size();
      multiKey3.getKey(0);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 9);
      MultiKey<String> multiKey5 = new MultiKey<String>("XP^XZf]A6!}Y", "t`/Bt|;-", "MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "The array of keys must not be null");
      multiKeyArray0[0] = multiKey5;
      MultiKey<String> multiKey6 = new MultiKey<String>("t`/Bt|;-", "MultiKey", stringArray0[0], "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKeyArray0[1] = multiKey6;
      multiKeyArray0[2] = multiKey4;
      MultiKey<String> multiKey7 = new MultiKey<String>(stringArray0, false);
      multiKeyArray0[3] = multiKey7;
      multiKeyArray0[4] = multiKey4;
      multiKeyArray0[5] = multiKey4;
      multiKeyArray0[6] = multiKey3;
      multiKeyArray0[7] = multiKey3;
      multiKeyArray0[8] = multiKey4;
      MultiKey<MultiKey<String>> multiKey8 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      // Undeclared exception!
      try { 
        multiKey8.getKey((int) integerArray0[2]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1710
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[1] = "oSW^fAGrM";
      stringArray0[2] = "";
      stringArray0[3] = "p<F^x:";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      assertEquals(4, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(" He!+pK<}9';", (String) null);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      Integer integer0 = new Integer((-150));
      Integer integer1 = new Integer((-2671));
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, (Object) null);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer0, integer1, integer1, multiKey2);
      multiKey3.toString();
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey3.getKey(3076);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3076
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, "7x.SferiC", "7x.SferiC");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "S(Be\\";
      String string1 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("S(Be", "");
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      String string2 = "";
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) "S(Be";
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = object2;
      objectArray0[6] = (Object) "";
      objectArray0[7] = object1;
      objectArray0[8] = object1;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-612));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -612
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-3234));
      Integer integer1 = new Integer((-3234));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      Integer integer2 = new Integer(3108);
      Integer integer3 = new Integer((-3234));
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer2, integer2, integer3);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.equals(integer3);
      Integer integer4 = new Integer(3108);
      multiKey1.toString();
      multiKey1.equals(integer4);
      multiKey1.getKeys();
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[3108, 3108, -3234]", "78zR7|", "5^_K]Kgz%'N", "5^_K]Kgz%'N", "G)[$M]uZ[-");
      multiKey2.toString();
      multiKey2.getKey(1);
      multiKey0.getKey(1);
      multiKey2.hashCode();
      multiKey2.hashCode();
      multiKey2.equals(integer0);
      int int0 = multiKey1.size();
      assertEquals(3, int0);
  }
}
