/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:50:37 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-968));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      String[] stringArray1 = multiKey1.getKeys();
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, "Ku;@Fk^YM0twoFKU", (String) null, "V]");
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, (Object) null, "", integer0);
      multiKey1.toString();
      multiKey1.size();
      multiKey1.toString();
      int int0 = (-68);
      Integer integer1 = new Integer((-68));
      Integer integer2 = new Integer((-2444));
      Integer integer3 = new Integer((-68));
      Integer integer4 = new Integer(0);
      Integer integer5 = new Integer(0);
      Integer integer6 = new Integer(2);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer3, integer4, integer5, integer6);
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey(4169);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4169
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      multiKey0.hashCode();
      multiKey0.toString();
      Object[] objectArray0 = new Object[3];
      multiKey0.toString();
      objectArray0[0] = (Object) "";
      multiKey0.toString();
      objectArray0[1] = (Object) multiKey0;
      multiKey0.toString();
      objectArray0[2] = (Object) "";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.toString();
      multiKey0.toString();
      int int0 = multiKey1.size();
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey1.getKeys();
      multiKey0.equals(objectArray0[1]);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey2.equals("MultiKey[, , ]");
      int int1 = multiKey2.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      Integer integer0 = new Integer((-1));
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", integer0, "", "", "");
      multiKey0.toString();
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[]", string0);
      
      multiKey2.hashCode();
      multiKey0.hashCode();
      multiKey1.getKeys();
      Integer integer1 = new Integer(0);
      boolean boolean0 = multiKey0.equals(integer1);
      assertFalse(boolean0);
      
      multiKey1.hashCode();
      multiKey0.getKeys();
      Integer integer2 = new Integer(510);
      Integer integer3 = new Integer(1987);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer1, integer1, integer2, integer3);
      boolean boolean1 = multiKey1.equals(multiKey3);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey0.equals(integer0);
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.size();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.size();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.getKey(0);
      multiKey0.size();
      // Undeclared exception!
      try { 
        multiKey0.getKey(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "\u0001JHU/a";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, (Object) null, (Object) null);
      multiKey1.getKeys();
      multiKey0.toString();
      multiKey0.equals("");
      multiKey0.getKeys();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 9);
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[, , \u0001JHU/a]", "Sywnigt>N8amUv1c]*&", "MultiKey[, , \u0001JHU/a]");
      multiKeyArray0[0] = multiKey2;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      multiKeyArray0[5] = multiKey0;
      multiKeyArray0[6] = multiKey0;
      multiKeyArray0[7] = multiKey0;
      multiKeyArray0[8] = multiKey0;
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      int int0 = multiKey3.size();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("?$@~qyZ'!z{*!D^Ku_", "I5(_M`ZQ#R7j");
      int int0 = 1885;
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(1885);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1885
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", (String) null, "_EZO?#-bcc9?<V0Dj9");
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-1536));
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[-1536]", string0);
      
      multiKey1.size();
      multiKey0.size();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", (String) null, "_EZO?#-bcc9?<V0Dj9");
      Object object0 = multiKey2.getKey(1);
      assertTrue(multiKey2.equals((Object)multiKey0));
      assertNotNull(object0);
      
      boolean boolean0 = multiKey1.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "?5bt\"3p";
      stringArray0[1] = "";
      stringArray0[2] = "4Iy~Fr]{%!RojINp>";
      stringArray0[3] = "org.apache.commons.collections4.keyvalue.MultiKey";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 2);
      Object object0 = new Object();
      Integer integer0 = new Integer(5);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, multiKey0, "", integer0, "");
      multiKeyArray0[0] = multiKey1;
      Integer integer1 = new Integer(5);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("?5bt\"3p", integer1, multiKey1);
      multiKeyArray0[1] = multiKey2;
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      // Undeclared exception!
      try { 
        multiKey3.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = (-1359);
      Integer integer0 = new Integer((-1359));
      Integer integer1 = new Integer((-1359));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer1, integer1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", (Object) null, integer0);
      multiKey1.equals(integer1);
      MultiKey<String> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = false;
      MultiKey<MultiKey<Object>> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
