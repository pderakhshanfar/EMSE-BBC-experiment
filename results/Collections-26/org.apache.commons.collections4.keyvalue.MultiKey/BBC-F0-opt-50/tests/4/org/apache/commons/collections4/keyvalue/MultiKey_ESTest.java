/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:04:20 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey0.equals(objectArray0[2]);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean1 = multiKey0.equals(object1);
      assertFalse(boolean1 == boolean0);
      
      MultiKey<String> multiKey2 = new MultiKey<String>("{{ij}ZD@(AfT50", "", (String) null, "{{ij}ZD@(AfT50");
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey2, multiKey2, multiKey2);
      assertFalse(multiKey2.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 2);
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object1, object1, multiKey0, object0);
      multiKeyArray0[0] = multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      multiKeyArray0[1] = multiKey2;
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      boolean boolean0 = multiKey3.equals(multiKey2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(647);
      Integer integer1 = new Integer(647);
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[]", "", "", "@^");
      multiKey1.toString();
      multiKey0.hashCode();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[], , , @^]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      multiKey1.getKey(0);
      multiKey1.hashCode();
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0);
      multiKey2.size();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey3.toString();
      multiKey3.toString();
      multiKey0.size();
      Integer integer0 = new Integer(4);
      Integer integer1 = new Integer(4);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer1, integer1, integer0);
      int int0 = (-1319);
      // Undeclared exception!
      try { 
        multiKey4.getKey((-1319));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1319
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      Integer integer0 = new Integer(4);
      multiKey0.toString();
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      multiKey1.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[]", string0);
      
      multiKey1.size();
      Object object0 = new Object();
      Integer integer2 = new Integer(4);
      Object object1 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, "", "", integer2, object1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey2.toString();
      multiKey2.size();
      boolean boolean0 = multiKey0.equals(multiKey2);
      assertFalse(boolean0);
      
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2);
      multiKey3.toString();
      multiKey3.equals((Object) null);
      multiKey2.equals("l");
      multiKey1.hashCode();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(stringArray0);
      multiKey0.equals(multiKey4);
      Object object2 = new Object();
      multiKey0.equals(object2);
      boolean boolean1 = multiKey4.equals("");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer[] integerArray0 = null;
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "MultiKey", (String) null, "");
      String string0 = multiKey0.getKey(0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(1985);
      Integer integer1 = new Integer(1985);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) integer1;
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = (Object) multiKey0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) integer0;
      objectArray0[7] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey(1900);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1900
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "MultiKey";
      stringArray0[1] = "y*eL}WH*-Zs .";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "The array of keys must not be null";
      stringArray0[5] = "";
      stringArray0[6] = "68^:Men])lhJ44L<|'{";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey", "y*eL}WH*-Zs .");
      assertEquals(2, multiKey1.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-3112));
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, integer2);
      multiKey0.hashCode();
      Integer integer3 = new Integer(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer3, object0, object0, multiKey0);
      Object object1 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer2, (Object) null, multiKey0, object1, "");
      Object object2 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer2, multiKey0, object2, multiKey2, integer1);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0, true);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey3, multiKey4);
      MultiKey<Object> multiKey6 = new MultiKey<Object>(multiKey1, multiKey2, integer0, "", multiKey5);
      Integer integer4 = new Integer((-1606));
      MultiKey<Object> multiKey7 = new MultiKey<Object>(integer1, multiKey6, integer4, "", integer1);
      String string0 = multiKey7.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer2);
      int int0 = 419;
      // Undeclared exception!
      try { 
        multiKey2.getKey(419);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 419
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "BUwX@";
      stringArray0[1] = ".f2>v/BEbb(ed[/";
      stringArray0[2] = "jqQtJ^R=Jm9";
      stringArray0[3] = "";
      stringArray0[4] = " 7i6F(Q$V`#*F";
      stringArray0[5] = "MultiKey";
      stringArray0[6] = "\"-rD7d';Zly9$umI2";
      stringArray0[7] = "MultiKey";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      assertEquals(8, multiKey0.size());
  }
}
