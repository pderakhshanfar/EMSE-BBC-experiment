/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:47:46 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(":6HMC-u!_kZV6%", ":6HMC-u!_kZV6%", ":6HMC-u!_kZV6%");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 5);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey1.hashCode();
      MultiKey<String> multiKey2 = new MultiKey<String>("<", "EL;NI|W#xfLwMtK", ":;ny0`W|r", "_n`7@(x5S5{#FZX7_");
      Object object0 = new Object();
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
      assertFalse(multiKey0.equals((Object)multiKey2));
      
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[:6HMC-u!_kZV6%, :6HMC-u!_kZV6%, :6HMC-u!_kZV6%], MultiKey[:6HMC-u!_kZV6%, :6HMC-u!_kZV6%, :6HMC-u!_kZV6%], MultiKey[:6HMC-u!_kZV6%, :6HMC-u!_kZV6%, :6HMC-u!_kZV6%], MultiKey[:6HMC-u!_kZV6%, :6HMC-u!_kZV6%, :6HMC-u!_kZV6%], MultiKey[:6HMC-u!_kZV6%, :6HMC-u!_kZV6%, :6HMC-u!_kZV6%]]", string0);
      
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      multiKey4.getKey(0);
      assertTrue(multiKey4.equals((Object)multiKey3));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(" ", " ", " ");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) " ";
      objectArray0[1] = (Object) " ";
      objectArray0[2] = (Object) " ";
      objectArray0[3] = (Object) " ";
      objectArray0[4] = (Object) " ";
      objectArray0[5] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.toString();
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      Object[] objectArray1 = multiKey1.getKeys();
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.getKeys();
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0);
      Integer[] integerArray0 = new Integer[3];
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[-1, -1, -1]", string0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, true);
      multiKey1.equals(multiKey2);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integerArray0);
      multiKey3.size();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) int0;
      objectArray0[1] = (Object) multiKey2;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) int0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) int0;
      objectArray0[6] = (Object) "MultiKey[-1, -1, -1]";
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0, true);
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKey4, multiKey4);
      boolean boolean0 = multiKey5.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(multiKey4.equals((Object)multiKey3));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "=";
      MultiKey<String> multiKey0 = new MultiKey<String>("=", "=", "=");
      MultiKey<MultiKey<Integer>> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("mfY~KRYo;", "", (String) null, ",=f}ru<KB");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) "mfY~KRYo;";
      objectArray0[2] = (Object) ",=f}ru<KB";
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, integer0);
      MultiKey<String> multiKey2 = new MultiKey<String>((String) null, "", ",=f}ru<KB", (String) null, "mfY~KRYo;");
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("=", "=", "=");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      multiKey1.hashCode();
      MultiKey<String> multiKey2 = new MultiKey<String>((String) null, (String) null, "%:_7^:Bew");
      multiKey2.getKey(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, (Object) null, "=", (Object) null, object0);
      Object[] objectArray0 = multiKey3.getKeys();
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<MultiKey<Object>> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0, integer0);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(1);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, integer2, (Integer) null);
      multiKey0.toString();
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey1, multiKey1, multiKey0);
      multiKey2.toString();
      boolean boolean0 = multiKey2.equals(integer0);
      assertFalse(boolean0);
      
      multiKey0.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>("", "");
      multiKey3.toString();
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object) null, multiKey3, multiKey0);
      multiKey4.toString();
      multiKey4.size();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, 1, 1]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 5);
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, (String) null, "");
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(185);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, integer0, "", integer0, integer1);
      multiKeyArray0[1] = multiKey2;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      MultiKey<Object> multiKey4 = multiKey3.getKey(0);
      assertEquals(2, multiKey4.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "[C,W*";
      stringArray0[6] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.getKeys();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey0, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      Object[] objectArray0 = multiKey2.getKeys();
      multiKey0.getKeys();
      multiKey2.toString();
      Object[] objectArray1 = multiKey2.getKeys();
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(944);
      Integer integer1 = new Integer(944);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("y'>2_*[H]^&Lv8", (Object) null);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, multiKey0, integer1, object0, multiKey1);
      assertFalse(multiKey2.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("y", "y", "zWcoa{", "y");
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      Integer integer1 = multiKey1.getKey(0);
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("!SAO", "cd", "!SAO", "&>.Kq& h#i^R ");
      multiKey0.toString();
      Object object0 = new Object();
      multiKey0.equals(object0);
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.hashCode();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "MultiKey[!SAO, cd, !SAO, &>.Kq& h#i^R ]";
      objectArray0[1] = (Object) "!SAO";
      objectArray0[2] = (Object) "MultiKey[!SAO, cd, !SAO, &>.Kq& h#i^R ]";
      objectArray0[3] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Object object1 = new Object();
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, object1, "");
      // Undeclared exception!
      try { 
        multiKey2.getKey(1312);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1312
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "f,8rI_gAg";
      stringArray0[1] = "R1o_yG}Vm-";
      stringArray0[2] = "(2?'^%_eb[T";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
