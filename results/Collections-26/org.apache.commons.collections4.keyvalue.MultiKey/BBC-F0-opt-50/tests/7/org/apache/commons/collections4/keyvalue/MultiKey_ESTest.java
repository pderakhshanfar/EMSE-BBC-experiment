/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:49:13 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("|MG$@&QZ&C{mmt@9{_M", ".yDF!oJ`iK(1A", "|MG$@&QZ&C{mmt@9{_M", "", "");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 9);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      multiKeyArray0[5] = multiKey0;
      multiKeyArray0[6] = multiKey0;
      multiKeyArray0[7] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("", "The array of keys must not be null", "The array of keys must not be null", (String) null, "VV*Qli\"^}yI");
      multiKeyArray0[8] = multiKey1;
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      Object object0 = multiKey2.getKey(1);
      boolean boolean0 = multiKey0.equals(object0);
      assertFalse(multiKey0.equals((Object)multiKey1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(5);
      Integer integer1 = new Integer(2000);
      Integer integer2 = new Integer(2000);
      Integer integer3 = new Integer((-3309));
      Integer integer4 = new Integer(2000);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer3, integer4, integer1);
      Integer integer5 = new Integer(2171);
      Integer integer6 = new Integer((-3309));
      Integer integer7 = new Integer(5);
      Integer integer8 = new Integer((-2540));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer7, integer8, integer0);
      Integer integer9 = new Integer((-1));
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 4);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey1;
      multiKeyArray0[3] = multiKey0;
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      Integer integer10 = new Integer((-1));
      Integer integer11 = new Integer(21);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer6, integer2, integer11);
      assertFalse(multiKey3.equals((Object)multiKey1));
      
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKeyArray0);
      boolean boolean0 = multiKey2.equals(multiKey4);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("^LhuvS$ZeI6mfT+j", "");
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey1, multiKey1, multiKey0);
      multiKey2.getKeys();
      multiKey2.getKeys();
      MultiKey<Object> multiKey3 = new MultiKey<Object>("", "", multiKey0, multiKey0);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[, , MultiKey[], MultiKey[]]", string0);
      
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey3, multiKey3, multiKey3);
      multiKey4.getKey(0);
      Integer integer0 = new Integer(2);
      boolean boolean0 = multiKey0.equals(integer0);
      assertFalse(boolean0);
      
      multiKey0.getKeys();
      assertFalse(multiKey0.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-3239));
      Integer integer1 = new Integer((-3239));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[3] = "";
      stringArray0[3] = "tg#S'1l44B|MH [r";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) "";
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey0, multiKey2, multiKey2, multiKey2, multiKey2);
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.hashCode();
      multiKey1.size();
      multiKey0.toString();
      multiKey1.toString();
      String string0 = multiKey0.getKey(2);
      assertTrue(multiKey0.equals((Object)multiKey2));
      assertNull(string0);
      
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(2);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer1);
      String string1 = multiKey4.toString();
      assertEquals("MultiKey[2, 2]", string1);
      
      Object object0 = new Object();
      boolean boolean0 = multiKey2.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = ">j";
      stringArray0[1] = " )NOxl{iR[=@";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<String> multiKey1 = new MultiKey<String>(" )NOxl{iR[=@", (String) null, "", "");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey1);
      boolean boolean0 = multiKey2.equals(multiKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "tg#S'1l44B|MH [r";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) "";
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.size();
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey0, multiKey2, multiKey2, multiKey2, multiKey2);
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.hashCode();
      multiKey1.size();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.getKey(0);
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(2);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer1);
      multiKey4.toString();
      Object object0 = new Object();
      multiKey2.equals(object0);
      // Undeclared exception!
      try { 
        multiKey1.getKey(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0, object0);
      multiKey0.getKey(3);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("lNq- &H<%", "", (String) null);
      multiKey1.toString();
      multiKey1.toString();
      int int1 = 3;
      // Undeclared exception!
      try { 
        multiKey1.getKey(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 8);
      boolean boolean0 = true;
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      multiKeyArray0[0] = multiKey0;
      String string0 = "<DWX*S*5v";
      String string1 = "";
      MultiKey<String> multiKey1 = new MultiKey<String>("<DWX*S*5v", "", "");
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer0, integer2, integer3);
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey2);
      // Undeclared exception!
      try { 
        multiKey3.getKey((-162));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -162
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      MultiKey<String> multiKey0 = new MultiKey<String>("?Y9!hv$z*JtD567GaM4", "O_=krT]P>}6Z", "O_=krT]P>}6Z", "The array of keys must not be null", "O_=krT]P>}6Z");
      int int0 = 213;
      // Undeclared exception!
      try { 
        multiKey0.getKey(213);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 213
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "");
      int int0 = 3232;
      // Undeclared exception!
      try { 
        multiKey0.getKey(3232);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3232
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0, integer0);
      multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey", "MultiKey", "", "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey0.toString();
      Integer integer1 = new Integer(0);
      multiKey1.toString();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer0, integer1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.getKey(0);
      multiKey1.hashCode();
      multiKey0.toString();
      multiKey0.getKey(1);
      // Undeclared exception!
      try { 
        multiKey1.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-1));
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-843));
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int0);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(int0);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      Integer[] integerArray1 = multiKey0.getKeys();
      assertNotSame(integerArray0, integerArray1);
  }
}
