/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:16:29 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 5);
      Integer integer0 = new Integer(1072);
      Integer integer1 = new Integer((-2947));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0);
      multiKeyArray0[0] = multiKey0;
      Integer integer2 = new Integer(1072);
      Integer integer3 = new Integer(0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "[z]P<]e.S3b};";
      stringArray0[2] = "";
      stringArray0[3] = "{F0mGol";
      stringArray0[4] = ">L]RoCo\"Sla";
      stringArray0[5] = "^#Rtq.wC";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      boolean boolean0 = multiKey0.equals(multiKey0);
      String[] stringArray1 = multiKey1.getKeys();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(stringArray1);
      boolean boolean1 = multiKey3.equals(integer3);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("]#:U^H", "]#:U^H");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.toString();
      Object[] objectArray1 = multiKey1.getKeys();
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<String> multiKey0 = new MultiKey<String>(")DW%u", "Et)-#}mkrc6OXi?[vr", "27Z'MN)f");
      multiKey0.toString();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "27Z'MN)f";
      stringArray0[1] = "27Z'MN)f";
      stringArray0[2] = "27Z'MN)f";
      stringArray0[3] = ")DW%u";
      stringArray0[4] = "27Z'MN)f";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(stringArray0);
      multiKey1.equals(multiKey2);
      boolean boolean0 = multiKey1.equals("x`7,zC-UpsSFF geb4");
      assertFalse(boolean0);
      
      Integer integer1 = new Integer((-5369));
      Integer integer2 = new Integer(2);
      Integer integer3 = new Integer((-1353));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer2, integer3);
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer2;
      integerArray0[1] = integer2;
      integerArray0[2] = integer3;
      integerArray0[3] = integer2;
      integerArray0[4] = integer3;
      integerArray0[5] = integer0;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[2, 2, -1353, 2, -1353, 0]", string0);
      assertFalse(multiKey4.equals((Object)multiKey3));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "", "p!tI$sr<Ewyu");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0);
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey1.getKeys();
      multiKey1.toString();
      Integer integer0 = new Integer(2215);
      Integer integer1 = new Integer(2215);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer1);
      multiKey2.toString();
      multiKey2.size();
      String string0 = multiKey0.getKey(0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "org.apache.commons.collections4.keyvalue.MultiKey";
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[]", string0);
      
      multiKey0.size();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      Integer integer4 = new Integer(0);
      boolean boolean0 = multiKey1.equals(integer4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      int int0 = 1;
      Integer integer0 = new Integer(1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, "", integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKey(1);
      multiKey0.equals("");
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(3483);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3483
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(2);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1905);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, multiKey0);
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey1.getKeys();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      Integer[] integerArray1 = multiKey0.getKeys();
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("V<&P&P%#", "*Mzrt8<#HWwFDWOh", "*Mzrt8<#HWwFDWOh", "", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[V<&P&P%#, *Mzrt8<#HWwFDWOh, *Mzrt8<#HWwFDWOh, , org.apache.commons.collections4.keyvalue.MultiKey]", string0);
      
      MultiKey<Object> multiKey1 = new MultiKey<Object>("V<&P&P%#", "MultiKey[V<&P&P%#, *Mzrt8<#HWwFDWOh, *Mzrt8<#HWwFDWOh, , org.apache.commons.collections4.keyvalue.MultiKey]", multiKey0);
      int int0 = multiKey1.size();
      int int1 = multiKey1.hashCode();
      assertFalse(int1 == int0);
      
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer0);
      Object[] objectArray0 = new Object[6];
      String string1 = multiKey0.getKey(0);
      assertEquals("V<&P&P%#", string1);
      
      objectArray0[0] = (Object) "V<&P&P%#";
      objectArray0[1] = (Object) "MultiKey[V<&P&P%#, *Mzrt8<#HWwFDWOh, *Mzrt8<#HWwFDWOh, , org.apache.commons.collections4.keyvalue.MultiKey]";
      objectArray0[2] = (Object) multiKey1;
      objectArray0[3] = (Object) "org.apache.commons.collections4.keyvalue.MultiKey";
      objectArray0[4] = (Object) "V<&P&P%#";
      objectArray0[5] = (Object) multiKey0;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, true);
      boolean boolean0 = multiKey2.equals(multiKey3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Integer integer0 = new Integer((-1320));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      Integer integer1 = multiKey0.getKey(0);
      objectArray0[1] = (Object) integer1;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "@pL_r~00MuP";
      stringArray0[1] = "ry";
      stringArray0[2] = "";
      stringArray0[3] = "jF^Lx!,{K$YkaFgq";
      stringArray0[4] = "$;*%@5xb}m}&\"g5Q[1";
      stringArray0[5] = "40";
      stringArray0[6] = "";
      stringArray0[7] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.getKey(0);
      objectArray0[2] = (Object) "@pL_r~00MuP";
      multiKey1.getKey(0);
      objectArray0[3] = (Object) "@pL_r~00MuP";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      assertEquals(4, multiKey2.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 5);
      Integer integer0 = new Integer(1072);
      Integer integer1 = new Integer((-2954));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0);
      multiKeyArray0[0] = multiKey0;
      Integer integer2 = new Integer(1072);
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer2, integer0, integer3);
      multiKeyArray0[1] = multiKey1;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer2, integer0);
      multiKeyArray0[2] = multiKey2;
      Integer integer4 = new Integer((-2513));
      Integer integer5 = new Integer((-4241));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer4, integer1, integer5, integer2);
      multiKeyArray0[3] = multiKey3;
      Integer[] integerArray0 = new Integer[7];
      Integer integer6 = new Integer(3);
      integerArray0[0] = integer6;
      integerArray0[1] = integer4;
      integerArray0[2] = integer4;
      Integer integer7 = new Integer(0);
      integerArray0[3] = integer7;
      integerArray0[4] = integer3;
      integerArray0[5] = integer3;
      Integer integer8 = new Integer(4);
      integerArray0[6] = integer8;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      multiKeyArray0[4] = multiKey4;
      MultiKey<MultiKey<Integer>> multiKey5 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, true);
      multiKey5.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(1286);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, integer0);
      Integer integer1 = new Integer(1286);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 2);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "MYBP6}-{";
      stringArray0[3] = "0R%}5";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[7] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKeyArray0[0] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "");
      multiKeyArray0[1] = multiKey2;
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      // Undeclared exception!
      try { 
        multiKey3.getKey((-2586));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2586
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
