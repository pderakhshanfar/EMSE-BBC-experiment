/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:26:34 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null);
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "", "MultiKey", (String) null, "E");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.size();
      Integer integer0 = new Integer(4);
      int int0 = 5;
      Integer integer1 = new Integer(5);
      Integer integer2 = new Integer(5);
      Integer integer3 = new Integer(0);
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      Object object1 = new Object();
      Object object2 = new Object();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[MultiKey, , MultiKey, null, E], MultiKey[MultiKey, , MultiKey, null, E], MultiKey[MultiKey, , MultiKey, null, E], MultiKey[MultiKey, , MultiKey, null, E]]", string0);
      
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, object2, int0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object[]) integerArray0, true);
      multiKey2.equals(multiKey4);
      assertFalse(multiKey4.equals((Object)multiKey3));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-1230));
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer(351);
      Integer integer3 = new Integer(4);
      Integer integer4 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer3, integer1, integer4);
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[4, -1, -1]", string0);
      
      MultiKey<String> multiKey1 = new MultiKey<String>("mst6BK", "F[#_g,/#");
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.size();
      MultiKey<Object> multiKey3 = new MultiKey<Object>("MultiKey[4, -1, -1]", "F[#_g,/#", integer1, (Object) null, multiKey0);
      Integer integer5 = new Integer(1712);
      multiKey3.equals(integer2);
      boolean boolean0 = multiKey3.equals(integer5);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, (Object) null);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(5);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, integer1, integer2, integer1);
      Integer integer3 = new Integer(5);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, multiKey1, integer3, integer1);
      Object object0 = multiKey2.getKey(0);
      assertNull(object0);
      
      boolean boolean0 = multiKey0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(3770);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1);
      multiKey0.toString();
      String string0 = ")s";
      MultiKey<String> multiKey1 = new MultiKey<String>(")s", ")s");
      multiKey1.size();
      MultiKey<String> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      MultiKey<String> multiKey0 = new MultiKey<String>("1(.W'6)= ", "1(.W'6)= ", "1(.W'6)= ", "", "1(.W'6)= ");
      int int0 = 0;
      multiKey0.getKey(0);
      objectArray0[0] = (Object) "1(.W'6)= ";
      Object object0 = new Object();
      objectArray0[1] = object0;
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.getKeys();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.toString();
      multiKey0.toString();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "MultiKey[]";
      stringArray0[1] = "MultiKey[]";
      stringArray0[2] = "MultiKey[]";
      stringArray0[3] = "MultiKey[]";
      stringArray0[4] = "MultiKey[]";
      stringArray0[5] = "MultiKey[]";
      stringArray0[6] = "Ac,nD':@be";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.size();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(1087);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(7);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-809));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(3);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      // Undeclared exception!
      try { 
        multiKey2.getKey(469);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 469
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", (String) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "");
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer2, integer1);
      int int0 = multiKey2.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null);
      multiKey1.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[null, null]", string0);
      
      multiKey1.hashCode();
      multiKey0.size();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, (MultiKey<String>) null, multiKey0);
      multiKey2.size();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(4);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(4);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(5);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(object0, "MultiKey[, , , ]", object1);
      boolean boolean0 = multiKey3.equals(multiKey4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "@J(S24{f\"Lb*9";
      stringArray0[2] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", multiKey0, multiKey1, "");
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, "");
      multiKey3.toString();
      multiKey0.toString();
      multiKey3.toString();
      multiKey2.toString();
      int int0 = 1219;
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(1219);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1219
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 4);
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("]~or)~'6$SLE", "G", " ~yPTJCC+K2MRw>");
      multiKeyArray0[1] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("", "]~or)~'6$SLE", "v;dupx{`+7?WWeO=wC");
      multiKeyArray0[2] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("", "]~or)~'6$SLE", "", "]~or)~'6$SLE");
      multiKeyArray0[3] = multiKey3;
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      multiKey4.toString();
      multiKey4.size();
      // Undeclared exception!
      try { 
        multiKey4.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("");
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1214));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1214
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      String[] stringArray1 = multiKey0.getKeys();
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "";
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", object0);
      multiKey0.toString();
      Integer integer0 = new Integer((-1690));
      Integer integer1 = new Integer(1168);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(1168);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1168
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
