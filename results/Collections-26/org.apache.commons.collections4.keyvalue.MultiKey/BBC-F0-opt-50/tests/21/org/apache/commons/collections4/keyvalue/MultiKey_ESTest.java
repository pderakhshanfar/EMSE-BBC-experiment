/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:30:21 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>("(_.c))/HJ", "(_.c))/HJ", "", "(_.c))/HJ", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "(_.c))/HJ", "(_.c))/HJ", "", "");
      Object object1 = multiKey1.getKey(0);
      objectArray0[0] = object1;
      Object object2 = multiKey1.getKey(0);
      objectArray0[1] = object2;
      Object object3 = new Object();
      objectArray0[2] = object3;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1);
      Integer integer2 = multiKey2.getKey(0);
      objectArray0[3] = (Object) integer2;
      multiKey0.getKey(0);
      objectArray0[3] = (Object) "(_.c))/HJ";
      multiKey1.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      multiKey3.toString();
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer3, integer2, integer1);
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[0, 0, 0]", string0);
      
      boolean boolean0 = multiKey3.equals(multiKey4);
      assertFalse(boolean0);
      
      multiKey2.hashCode();
      boolean boolean1 = multiKey0.equals(objectArray0[0]);
      MultiKey<String> multiKey5 = new MultiKey<String>("MultiKey[MultiKey[(_.c))/HJ, (_.c))/HJ, , (_.c))/HJ, ], MultiKey[(_.c))/HJ, (_.c))/HJ, , (_.c))/HJ, ], java.lang.Object@4ccfc681, (_.c))/HJ, null]", "", "(_.c))/HJ");
      multiKey5.getKey(0);
      boolean boolean2 = multiKey0.equals("MultiKey[MultiKey[(_.c))/HJ, (_.c))/HJ, , (_.c))/HJ, ], MultiKey[(_.c))/HJ, (_.c))/HJ, , (_.c))/HJ, ], java.lang.Object@4ccfc681, (_.c))/HJ, null]");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(190);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, (Integer) null, integer1);
      multiKey0.toString();
      multiKey0.size();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      MultiKey<String> multiKey2 = new MultiKey<String>((String) null, "v,X2#\"%L}+", "v,X2#\"%L}+", (String) null);
      multiKey2.toString();
      boolean boolean0 = multiKey1.equals("");
      assertFalse(boolean0);
      
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[]", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      Object object1 = new Object();
      objectArray0[2] = object1;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      Integer integer2 = multiKey0.getKey(0);
      objectArray0[3] = (Object) integer2;
      multiKey0.toString();
      Object object2 = new Object();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[0, 0]", string0);
      
      MultiKey<Object> multiKey1 = new MultiKey<Object>(",Gky.7sn@6", (Object) null, integer2, integer1);
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.equals(object1);
      boolean boolean0 = multiKey1.equals(",Gky.7sn@6");
      assertFalse(boolean0);
      
      multiKey0.size();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      multiKey3.equals(multiKey4);
      assertFalse(multiKey4.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("}`*]8K'`J", (String) null);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = "}`*]8K'`J";
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey0, (Object) null, multiKey1, (Object) null, (Object) null);
      multiKey3.toString();
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      multiKey4.toString();
      multiKey4.getKeys();
      // Undeclared exception!
      try { 
        multiKey2.getKey(2483);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2483
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2894);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.toString();
      multiKey0.getKeys();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "MultiKey[0, 2894, 0, 0, 0, 0, 0]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      boolean boolean0 = multiKey1.equals(int0);
      assertFalse(boolean0);
      
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[0, 2894, 0, 0, 0, 0, 0]", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      assertEquals(1, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer((-573));
      Integer integer1 = new Integer((-573));
      Integer integer2 = new Integer((-573));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, (Integer) null, integer2);
      multiKey0.toString();
      multiKey0.equals((Object) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      multiKey0.toString();
      stringArray0[1] = "lg}3(";
      stringArray0[2] = "#E(#DH't";
      stringArray0[3] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.size();
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0);
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.size();
      MultiKey<Object> multiKey3 = new MultiKey<Object>("#E(#DH't", "");
      multiKey3.toString();
      // Undeclared exception!
      try { 
        multiKey3.getKey((-573));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -573
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "rA4l@>O(wDANq`= ufr", "", "Z*/'l)$BAL.E2d");
      int int0 = (-1);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>("(_.c))/HJ", "(_.c))/HJ", "", "(_.c))/HJ", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, multiKey0, "(_.c))/HJ", object0);
      Object object1 = multiKey1.getKey(0);
      objectArray0[0] = object1;
      Object object2 = multiKey1.getKey(0);
      objectArray0[1] = object2;
      Object object3 = new Object();
      objectArray0[2] = object3;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1);
      Integer integer2 = multiKey2.getKey(0);
      objectArray0[3] = (Object) integer2;
      multiKey0.getKey(0);
      objectArray0[4] = (Object) "(_.c))/HJ";
      multiKey1.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      multiKey3.toString();
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer3, integer2, integer1);
      boolean boolean0 = multiKey3.equals(multiKey4);
      assertFalse(boolean0);
      
      multiKey2.hashCode();
      multiKey0.hashCode();
      multiKey3.hashCode();
      assertFalse(multiKey3.equals((Object)multiKey1));
  }
}
