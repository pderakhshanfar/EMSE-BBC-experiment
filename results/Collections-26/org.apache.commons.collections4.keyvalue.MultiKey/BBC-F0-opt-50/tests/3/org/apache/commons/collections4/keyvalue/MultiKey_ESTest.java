/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:03:58 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(3);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer1);
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer1, integer0);
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "", "");
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object) null, multiKey0, integer0, multiKey0, multiKey2);
      multiKey3.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey3, multiKey3, multiKey3);
      multiKey4.toString();
      multiKey1.toString();
      multiKey4.toString();
      multiKey4.hashCode();
      multiKey1.toString();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) integer1;
      objectArray0[1] = (Object) "MultiKey[MultiKey[3, 0], MultiKey[null, MultiKey[0, 0, 3, 3], 0, MultiKey[0, 0, 3, 3], MultiKey[, , , ]], MultiKey[null, MultiKey[0, 0, 3, 3], 0, MultiKey[0, 0, 3, 3], MultiKey[, , , ]], MultiKey[null, MultiKey[0, 0, 3, 3], 0, MultiKey[0, 0, 3, 3], MultiKey[, , , ]]]";
      objectArray0[2] = (Object) multiKey1;
      multiKey2.getKey(3);
      multiKey3.toString();
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) multiKey2;
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[MultiKey[3, 0], MultiKey[null, MultiKey[0, 0, 3, 3], 0, MultiKey[0, 0, 3, 3], MultiKey[, , , ]], MultiKey[null, MultiKey[0, 0, 3, 3], 0, MultiKey[0, 0, 3, 3], MultiKey[, , , ]], MultiKey[null, MultiKey[0, 0, 3, 3], 0, MultiKey[0, 0, 3, 3], MultiKey[, , , ]]]", string0);
      assertFalse(multiKey3.equals((Object)multiKey1));
      
      boolean boolean0 = multiKey2.equals(objectArray0[4]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      int int0 = 2647;
      Integer integer0 = new Integer(2647);
      Object[] objectArray0 = null;
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.size();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "MultiKey[]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKey(0);
      multiKey1.getKeys();
      multiKey1.equals("MultiKey[]");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 7);
      multiKeyArray0[0] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>((String) null, "MultiKey[]", "", "The array of keys must not be null");
      multiKeyArray0[1] = multiKey2;
      multiKeyArray0[2] = multiKey1;
      multiKeyArray0[3] = multiKey1;
      multiKeyArray0[4] = multiKey1;
      multiKeyArray0[5] = multiKey1;
      multiKeyArray0[6] = multiKey1;
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      MultiKey<String>[] multiKeyArray1 = multiKey3.getKeys();
      assertNotSame(multiKeyArray0, multiKeyArray1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("");
      MultiKey<String> multiKey1 = new MultiKey<String>("YXD/j0V#=`r?J", "MultiKey[null, 0, 0]", "MultiKey[null, 0, 0]", "MultiKey[null, 0, 0]");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.equals(multiKey1);
      multiKey1.getKey(0);
      Integer[] integerArray0 = new Integer[1];
      Integer integer2 = new Integer(0);
      integerArray0[0] = integer2;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.equals(integer1);
      multiKey0.getKeys();
      multiKey1.hashCode();
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = (Object) integer0;
      objectArray0[5] = (Object) integer0;
      objectArray0[6] = (Object) integer0;
      objectArray0[7] = (Object) integer0;
      objectArray0[8] = (Object) integer0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Object object1 = multiKey0.getKey(0);
      Object object2 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, object1, object2, objectArray0[7], objectArray0[0]);
      // Undeclared exception!
      try { 
        multiKey1.getKey(636);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 636
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      Integer integer1 = multiKey0.getKey(0);
      objectArray0[0] = (Object) integer1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey0.toString();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "MultiKey[0, 0, 0, 0]";
      stringArray0[1] = "MultiKey[0, 0, 0, 0]";
      stringArray0[2] = "$)ZX[I";
      stringArray0[3] = "MultiKey[0, 0, 0, 0]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey2, multiKey2);
      multiKey3.toString();
      multiKey3.hashCode();
      multiKey1.size();
      multiKey2.getKey(0);
      String[] stringArray1 = multiKey2.getKeys();
      String[] stringArray2 = multiKey2.getKeys();
      assertNotSame(stringArray2, stringArray1);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null);
      multiKey0.getKey(0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "o*#<";
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.collections4.keyvalue.MultiKey";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      // Undeclared exception!
      try { 
        multiKey1.getKey(2316);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2316
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1768));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      boolean boolean0 = multiKey0.equals(integer3);
      assertFalse(boolean0);
      
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "j8o<'", "", "jASjOfJ[4p&='o7");
      multiKey1.size();
      multiKey1.hashCode();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[, , j8o<', , jASjOfJ[4p&='o7]", string0);
  }
}
