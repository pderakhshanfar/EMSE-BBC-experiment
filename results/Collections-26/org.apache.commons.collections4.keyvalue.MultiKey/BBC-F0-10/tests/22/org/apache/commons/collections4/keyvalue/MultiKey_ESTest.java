/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:52:26 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null, (String) null);
      String string0 = multiKey0.getKey(2);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray0);
      Object[] objectArray0 = multiKey1.getKeys();
      assertNotSame(integerArray0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integerArray0);
      int int0 = multiKey0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 4434;
      Integer integer0 = new Integer(4434);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 1);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKeyArray0[0] = multiKey1;
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      multiKey2.hashCode();
      multiKey1.equals(multiKey1);
      // Undeclared exception!
      try { 
        multiKey2.getKey(4434);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4434
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "Cw?PCDr:?#JkBM");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      int int0 = multiKey0.size();
      multiKey0.toString();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object1, multiKey0, object2, "");
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey1.toString();
      multiKey1.size();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey1.equals(multiKey0);
      int int1 = multiKey0.size();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-68));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals(integer0);
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.toString();
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "314?&3H");
      multiKey0.toString();
      multiKey0.equals("314?&3H");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) "MultiKey[, 314?&3H]";
      objectArray0[3] = (Object) "MultiKey[, 314?&3H]";
      objectArray0[4] = (Object) "MultiKey[, 314?&3H]";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = ".Byd2";
      stringArray0[1] = "314?&3H";
      stringArray0[2] = "";
      stringArray0[3] = "314?&3H";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, "314?&3H", integer0);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey3);
      boolean boolean0 = multiKey4.equals("314?&3H");
      assertFalse(boolean0);
      
      multiKey2.getKeys();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[, 314?&3H], MultiKey[, 314?&3H], MultiKey[, 314?&3H], MultiKey[, 314?&3H], MultiKey[, 314?&3H], , MultiKey[, 314?&3H]]", string0);
      
      multiKey1.hashCode();
      assertFalse(multiKey1.equals((Object)multiKey3));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = "V9QT|j";
      stringArray0[0] = "V9QT|j";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String string1 = "The array of keys must not be null";
      stringArray0[3] = "The array of keys must not be null";
      stringArray0[4] = "hR&7R(";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "@Si^R)rR9l;D|v";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      // Undeclared exception!
      try { 
        multiKey0.getKey(1697);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1697
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "erri`CYS5@D!`";
      stringArray0[5] = "?";
      stringArray0[6] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[7] = "ZF>";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(368);
      Integer integer1 = null;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null);
      // Undeclared exception!
      try { 
        multiKey0.getKey(368);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 368
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, (Object) null);
      Object object1 = multiKey0.getKey(0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2, integer1, integer1);
      Object object2 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object1, multiKey1, "(U>jo{.l[&", object2);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, integer2, multiKey2);
      assertFalse(multiKey3.equals((Object)multiKey0));
  }
}
