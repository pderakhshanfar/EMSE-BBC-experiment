/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:52:37 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, (Object) null);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0);
      Object object0 = multiKey1.getKey(0);
      boolean boolean0 = multiKey0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integerArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, true);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey1, multiKey0);
      multiKey2.toString();
      multiKey2.equals("MultiKey[MultiKey[], MultiKey[], MultiKey[], MultiKey[], MultiKey[]]");
      Integer integer0 = new Integer((-1354));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0);
      multiKey3.toString();
      Integer integer1 = new Integer(2);
      Integer integer2 = new Integer(2);
      boolean boolean0 = multiKey3.equals(integer2);
      assertFalse(boolean0);
      
      multiKey2.toString();
      multiKey0.toString();
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[-1354, -1354]", string0);
      
      boolean boolean1 = multiKey2.equals(multiKey3);
      assertFalse(boolean1);
      
      Integer integer3 = new Integer(2975);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer1, integer1, integer1);
      boolean boolean2 = multiKey1.equals(multiKey0);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      int int0 = multiKey0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null);
      multiKey0.toString();
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0, multiKey0);
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, object0, multiKey1, (Object) null);
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2);
      multiKey3.toString();
      multiKey3.equals(multiKey0);
      multiKey0.hashCode();
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null);
      multiKey4.toString();
      multiKey4.toString();
      multiKey2.hashCode();
      multiKey2.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      Integer integer1 = multiKey0.getKey(0);
      objectArray0[0] = (Object) integer1;
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "");
      multiKey1.getKey(0);
      objectArray0[1] = (Object) "";
      Object object0 = new Object();
      objectArray0[2] = object0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      assertEquals(3, multiKey2.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-1413));
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) integer0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      int int0 = (-2453);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-2453));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2453
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "");
      multiKey0.toString();
      multiKey0.equals((Object) null);
      Integer integer0 = new Integer(2157);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, "", object0, integer0);
      multiKey1.toString();
      multiKey1.toString();
      int int0 = multiKey1.size();
      int int1 = multiKey1.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.hashCode();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) "MultiKey[-1, -1]";
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) "MultiKey[-1, -1]";
      objectArray0[4] = (Object) integer1;
      objectArray0[5] = (Object) integer1;
      objectArray0[6] = (Object) integer0;
      objectArray0[7] = (Object) "MultiKey[-1, -1]";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      Integer integer2 = new Integer((-504));
      Integer integer3 = new Integer((-1004));
      Integer integer4 = new Integer(3);
      Integer integer5 = new Integer((-1));
      Integer integer6 = new Integer((-1226));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer2, integer3, integer4, integer5, integer6);
      // Undeclared exception!
      try { 
        multiKey3.getKey((-1004));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1004
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-3516));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      int int0 = multiKey0.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      multiKey1.getKeys();
      Integer[] integerArray0 = new Integer[2];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      Integer[] integerArray1 = multiKey2.getKeys();
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "y", (String) null);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-272));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -272
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = null;
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "(Jdc6-<OLJWT", "", "AzEFeP~{<L%=]N", "");
      multiKey0.getKey(0);
      Integer integer0 = new Integer(5);
      Integer integer1 = new Integer(1496);
      int int0 = (-1631);
      Integer integer2 = new Integer((-1631));
      Integer integer3 = new Integer((-2720));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2, integer2, integer3);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, multiKey1, integer0, "(Jdc6-<OLJWT");
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) integer1;
      objectArray0[2] = (Object) null;
      objectArray0[3] = null;
      objectArray0[4] = null;
      objectArray0[5] = (Object) "";
      objectArray0[6] = null;
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) "";
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      // Undeclared exception!
      try { 
        multiKey3.getKey((-1631));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1631
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1122));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1122
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
