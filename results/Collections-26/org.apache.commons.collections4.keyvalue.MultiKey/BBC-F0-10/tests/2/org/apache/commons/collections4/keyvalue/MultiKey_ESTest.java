/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:42:17 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, (Object) null, multiKey0);
      Object object0 = multiKey1.getKey(0);
      boolean boolean0 = multiKey0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-402));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      boolean boolean0 = multiKey0.equals(integer0);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) integer0;
      Integer integer1 = new Integer(3297);
      Integer integer2 = new Integer((-402));
      Integer integer3 = new Integer((-402));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer2, integer3, integer3);
      boolean boolean1 = multiKey0.equals(multiKey1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null");
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null", "", "", "AP^!VJE}1^S");
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 9);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[The array of keys must not be null, The array of keys must not be null]", multiKey1);
      Object object0 = multiKey2.getKey(1);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "MultiKey[The array of keys must not be null, The array of keys must not be null]";
      stringArray0[1] = "V'NYY]Px=z0J";
      stringArray0[2] = "";
      stringArray0[3] = "The array of keys must not be null";
      stringArray0[4] = "";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      multiKey3.getKey(1);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(object0, "V'NYY]Px=z0J", "MultiKey[The array of keys must not be null, The array of keys must not be null]", "MultiKey[The array of keys must not be null, The array of keys must not be null]", multiKey1);
      multiKeyArray0[0] = multiKey4;
      MultiKey<Object> multiKey5 = new MultiKey<Object>((Object) null, "", (Object) null, object0);
      multiKeyArray0[1] = multiKey5;
      MultiKey<Object> multiKey6 = new MultiKey<Object>(multiKey5, "", multiKey5);
      multiKeyArray0[2] = multiKey6;
      Object object1 = new Object();
      MultiKey<Object> multiKey7 = new MultiKey<Object>("V'NYY]Px=z0J", multiKey0, (Object) null, object1);
      multiKeyArray0[3] = multiKey7;
      Object object2 = new Object();
      MultiKey<String> multiKey8 = new MultiKey<String>("MultiKey[The array of keys must not be null, The array of keys must not be null]", "", "org.apache.commons.collections4.keyvalue.MultiKey", "MultiKey[The array of keys must not be null, The array of keys must not be null]");
      MultiKey<Object> multiKey9 = new MultiKey<Object>(object2, multiKey8, multiKey8);
      Object object3 = multiKey9.getKey(1);
      Integer integer0 = new Integer(1);
      MultiKey<Object> multiKey10 = new MultiKey<Object>(object3, integer0, "", "'b;! m_d<Ig)");
      multiKeyArray0[4] = multiKey10;
      Integer integer1 = new Integer(2);
      Object object4 = new Object();
      MultiKey<Object> multiKey11 = new MultiKey<Object>(multiKey6, multiKey6, integer1, object4);
      Object object5 = new Object();
      MultiKey<Object> multiKey12 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      Object object6 = multiKey12.getKey(2);
      Object object7 = new Object();
      MultiKey<Object> multiKey13 = new MultiKey<Object>("MultiKey[The array of keys must not be null, The array of keys must not be null]", multiKey11, object5, object6, object7);
      multiKeyArray0[5] = multiKey13;
      MultiKey<String> multiKey14 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "The array of keys must not be null", "AP^!VJE}1^S");
      multiKey14.getKey(2);
      MultiKey<Object> multiKey15 = new MultiKey<Object>(multiKey6, "AP^!VJE}1^S", multiKey5, integer1);
      multiKeyArray0[6] = multiKey15;
      MultiKey<Object> multiKey16 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      multiKeyArray0[7] = multiKey16;
      MultiKey<Object> multiKey17 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      assertTrue(multiKey17.equals((Object)multiKey12));
      
      multiKeyArray0[8] = multiKey17;
      MultiKey<MultiKey<Object>> multiKey18 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      boolean boolean0 = multiKey18.equals(multiKey17);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      String[] stringArray0 = new String[6];
      stringArray0[1] = "";
      stringArray0[2] = ":";
      stringArray0[3] = "";
      stringArray0[4] = "X";
      stringArray0[5] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.size();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      Integer[] integerArray1 = multiKey1.getKeys();
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Object object0 = new Object();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, multiKey0, "", object0);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      boolean boolean0 = multiKey1.equals("");
      assertFalse(boolean0);
      
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey0, multiKey1);
      multiKey2.toString();
      multiKey2.getKeys();
      Integer integer0 = new Integer(906);
      Integer integer1 = new Integer(906);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, (Integer) null, integer1, integer0, integer1);
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.toString();
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[906, null, 906, 906, 906]", string0);
      
      multiKey3.size();
      multiKey0.size();
      assertFalse(multiKey0.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer3);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("4q5", (String) null, "'E]N=5");
      multiKey1.toString();
      int int0 = multiKey1.size();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("'E]N=5", multiKey1);
      multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object) null, "4q5", "'E]N=5");
      multiKey3.hashCode();
      Integer integer4 = multiKey0.getKey(0);
      assertFalse(integer4.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      MultiKey<String> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.toString();
      multiKey0.size();
      int int0 = 0;
      Object object2 = multiKey0.getKey(0);
      assertSame(object2, object0);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-3352));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(2528);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int0);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer((-599));
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "MultiKey[java.lang.Object@40eed607, java.lang.Object@24488a3a]";
      stringArray0[1] = "MultiKey[java.lang.Object@40eed607, java.lang.Object@24488a3a]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.getKey(0);
      boolean boolean0 = multiKey1.equals("MultiKey[java.lang.Object@40eed607, java.lang.Object@24488a3a]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer((-545));
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, (Integer) null, (Integer) null, integer1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, multiKey0);
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKey(0);
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[null, MultiKey[-545, 0, null, null, 0]]", "MultiKey[null, MultiKey[-545, 0, null, null, 0]]");
      // Undeclared exception!
      try { 
        multiKey2.getKey((-675));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -675
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((-1651));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1651));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[3]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-2338));
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[3]);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.equals(object0);
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((-347));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[0]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-822));
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      multiKey1.toString();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "MultiKey[-347, 3, -347, -347, -347, -822, 0]";
      stringArray0[1] = "MultiKey[-347, 3, -347, -347, -347, -822, 0]";
      stringArray0[2] = "MultiKey[-347, 3, -347, -347, -347, -822, 0]";
      stringArray0[3] = "MultiKey[-347, 3, -347, -347, -347, -822, 0]";
      stringArray0[4] = "MultiKey[-347, 3, -347, -347, -347, -822, 0]";
      stringArray0[5] = "#ox6]Zec";
      stringArray0[6] = "MultiKey[-347, 3, -347, -347, -347, -822, 0]";
      stringArray0[7] = "MultiKey[-347, 3, -347, -347, -347, -822, 0]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      int int0 = multiKey2.size();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null);
      multiKey0.toString();
      multiKey0.toString();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey1.size();
      multiKey1.getKeys();
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      int int0 = 1;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>("org.apache.commons.collections4.keyvalue.MultiKey", int0, object0, "MultiKey[null, null, null, null, null]", object0);
      multiKey3.toString();
      multiKey2.equals(multiKey3);
      multiKey3.getKeys();
      multiKey1.size();
      int int1 = multiKey3.hashCode();
      assertFalse(int1 == int0);
  }
}
