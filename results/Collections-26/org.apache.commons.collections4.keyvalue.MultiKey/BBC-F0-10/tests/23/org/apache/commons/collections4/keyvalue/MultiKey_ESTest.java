/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:52:43 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null);
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null]", string0);
      
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[1];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      multiKey2.size();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(stringArray0);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[null]", string0);
      
      multiKey3.hashCode();
      multiKey3.getKey(0);
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(1171);
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer1;
      integerArray0[4] = integer1;
      integerArray0[5] = integer0;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      multiKey4.hashCode();
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKey3, multiKey3);
      MultiKey<Object> multiKey6 = new MultiKey<Object>("", "MultiKey[null]", multiKey3);
      Object object0 = new Object();
      boolean boolean0 = multiKey5.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MultiKey<MultiKey<String>> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "");
      String string0 = "xlOdYs\"8T9Bv%)/";
      MultiKey<String> multiKey1 = new MultiKey<String>("", "xlOdYs\"8T9Bv%)/");
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.equals(multiKey0);
      MultiKey<Integer> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", (String) null, "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      int int0 = 0;
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      multiKey0.equals(integer0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Object object0 = multiKey1.getKey(0);
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, "MultiKey[, , , null, ]", "MultiKey[, , , null, ]", integer1);
      // Undeclared exception!
      try { 
        multiKey2.getKey(453);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 453
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      String string0 = "u=";
      MultiKey<String> multiKey0 = new MultiKey<String>("4$HK[T", "4$HK[T", "u=");
      int int0 = 1430;
      // Undeclared exception!
      try { 
        multiKey0.getKey(1430);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1430
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      MultiKey<String> multiKey0 = new MultiKey<String>("", "4R31E SM0HDc5\"");
      int int0 = (-1515);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1515));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1515
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null);
      boolean boolean0 = multiKey0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, "ANbXAQyc2$");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 7);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      multiKeyArray0[0] = multiKey1;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, true);
      multiKeyArray0[1] = multiKey2;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0, true);
      multiKeyArray0[2] = multiKey3;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0, true);
      multiKeyArray0[3] = multiKey4;
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      multiKeyArray0[4] = multiKey5;
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(2);
      Integer integer4 = new Integer(0);
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integer0, integer2, integer3, integer4, integer2);
      multiKeyArray0[5] = multiKey6;
      Integer integer5 = new Integer(0);
      Integer integer6 = new Integer(0);
      Integer integer7 = new Integer(2056);
      MultiKey<Integer> multiKey7 = new MultiKey<Integer>(integer0, integer5, integer6, integer3, integer7);
      multiKeyArray0[6] = multiKey7;
      MultiKey<MultiKey<Integer>> multiKey8 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      String string0 = multiKey8.toString();
      assertEquals("MultiKey[MultiKey[], MultiKey[], MultiKey[], MultiKey[], MultiKey[2, 2, 2, 0], MultiKey[2, 0, 2, 0, 0], MultiKey[2, 0, 0, 2, 2056]]", string0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      multiKey0.getKeys();
      multiKey0.toString();
      String[] stringArray1 = multiKey0.getKeys();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray1, true);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.equals("MultiKey[]");
      multiKey0.hashCode();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-1012));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0, integer1, integer0);
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.size();
      multiKey1.size();
      multiKey0.equals("MultiKey[]");
      multiKey2.getKeys();
      multiKey0.hashCode();
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      MultiKey<MultiKey<Integer>> multiKey5 = new MultiKey<MultiKey<Integer>>(multiKey4, multiKey4, multiKey4, multiKey3);
      Integer integer2 = new Integer((-1632));
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integerArray0[0], integerArray0[0], integer2);
      // Undeclared exception!
      try { 
        multiKey6.getKey((int) integerArray0[0]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1012
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
