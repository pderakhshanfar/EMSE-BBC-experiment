/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:50:12 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null, (Integer) null);
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey", "MultiKey", "");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      Object object0 = multiKey2.getKey(4);
      multiKey1.equals(object0);
      int int0 = multiKey1.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = null;
      integerArray0[1] = null;
      integerArray0[2] = null;
      integerArray0[3] = null;
      integerArray0[4] = null;
      integerArray0[5] = null;
      integerArray0[6] = null;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.equals(multiKey1);
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integerArray0);
      multiKey2.getKey(4);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, (Object) null, integerArray0[1], integerArray0[5], (Object) null);
      multiKey3.getKeys();
      assertFalse(multiKey3.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>("", "UF_", "", "UF_", "UF_");
      MultiKey<String> multiKey1 = new MultiKey<String>("UF_", "UF_", "UF_", "UF_");
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "~eYq*", "F3", "", "F3");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      MultiKey<String>[] multiKeyArray1 = multiKey3.getKeys();
      assertNotSame(multiKeyArray1, multiKeyArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      String[] stringArray1 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray1, true);
      Integer integer0 = new Integer(7);
      Integer integer1 = new Integer((-182));
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      int int0 = 0;
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, multiKey0, (Object) null, multiKey0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "The array of keys must not be null";
      stringArray0[1] = "The array of keys must not be null";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      Integer integer0 = new Integer(0);
      multiKey1.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer0, (Object) null);
      multiKey0.toString();
      Object object0 = multiKey3.getKey(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey0, multiKey2, multiKey1, object0, (Object) null);
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey4, multiKey4);
      // Undeclared exception!
      try { 
        multiKey5.getKey(475);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 475
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("-ryEz%", "-ryEz%", "-ryEz%", "-ryEz%");
      Integer integer0 = new Integer(5);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("-ryEz%", multiKey0, integer0);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, object1, "-ryEz%");
      multiKey2.equals(multiKey3);
      MultiKey<String> multiKey4 = new MultiKey<String>("", (String) null, "");
      boolean boolean0 = multiKey1.equals(multiKey4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, integer0, "", integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.equals("");
      Integer integer1 = new Integer(0);
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer1, integer0, integer1);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.equals((Object) null);
      MultiKey<String> multiKey2 = new MultiKey<String>("The array of keys must not be null", "MultiKey[java.lang.Object@7f300fe1, 0, , 0, 0]", "MultiKey[0, 0, 0, 0, 0]");
      multiKey2.toString();
      multiKey0.toString();
      multiKey2.equals("The array of keys must not be null");
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey3 = null;
      try {
        multiKey3 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-551));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0, integer0, integer0, (Integer) null);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = (Object) multiKey0;
      multiKey0.toString();
      multiKey0.toString();
      objectArray0[5] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, integer0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.hashCode();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>("f{G8zSOr \"h[T`iG", "MultiKey[MultiKey[null, -551, -551, -551, null], -551, -551, -551, MultiKey[null, -551, -551, -551, null], MultiKey[null, -551, -551, -551, null]]", ".5>g(Nq8Au");
      int int0 = multiKey3.size();
      boolean boolean0 = multiKey2.equals("f{G8zSOr \"h[T`iG");
      assertFalse(boolean0);
      
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[null, -551, -551, -551, null], -551, -551, -551, MultiKey[null, -551, -551, -551, null], MultiKey[null, -551, -551, -551, null]]", string0);
      
      multiKey1.getKeys();
      int int1 = multiKey3.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[1];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKey(int0);
      Integer integer1 = new Integer(1);
      multiKey0.equals(integer1);
      // Undeclared exception!
      try { 
        multiKey0.getKey(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = (-168);
      Integer integer0 = new Integer((-168));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0);
      multiKey0.toString();
      Integer integer1 = new Integer((-168));
      Integer integer2 = new Integer((-168));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, integer0, integer1, (Integer) null, integer2);
      MultiKey<Object> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, (Object) null);
      multiKey0.toString();
      multiKey0.size();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 9);
      MultiKey<String> multiKey1 = new MultiKey<String>("2CV+]&p$Oq*I/87|,d", "", "The array of keys must not be null", "The array of keys must not be null");
      multiKeyArray0[0] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("", "org.apache.commons.collections4.keyvalue.MultiKey", "", "cl&1<E", "");
      multiKeyArray0[1] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("The array of keys must not be null", "MultiKey", "");
      multiKeyArray0[2] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("", (String) null, "cl&1<E");
      multiKeyArray0[3] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>("The array of keys must not be null", "`V");
      multiKeyArray0[4] = multiKey5;
      MultiKey<String> multiKey6 = new MultiKey<String>("{HsN|7]3(:kQ~GdHn", "MultiKey", "UurD5I0C", "_md-T.4>'2VVY}$]IX", (String) null);
      multiKeyArray0[5] = multiKey6;
      MultiKey<String> multiKey7 = new MultiKey<String>("", "", "", "", "MultiKey");
      multiKeyArray0[6] = multiKey7;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "The array of keys must not be null";
      stringArray0[5] = "";
      MultiKey<String> multiKey8 = new MultiKey<String>(stringArray0, true);
      multiKeyArray0[7] = multiKey8;
      MultiKey<String> multiKey9 = new MultiKey<String>("uGH` ^9Vv", "");
      multiKeyArray0[8] = multiKey9;
      MultiKey<MultiKey<String>> multiKey10 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      String string0 = multiKey10.toString();
      assertEquals("MultiKey[MultiKey[2CV+]&p$Oq*I/87|,d, , The array of keys must not be null, The array of keys must not be null], MultiKey[, org.apache.commons.collections4.keyvalue.MultiKey, , cl&1<E, ], MultiKey[The array of keys must not be null, MultiKey, ], MultiKey[, null, cl&1<E], MultiKey[The array of keys must not be null, `V], MultiKey[{HsN|7]3(:kQ~GdHn, MultiKey, UurD5I0C, _md-T.4>'2VVY}$]IX, null], MultiKey[, , , , MultiKey], MultiKey[, , , , The array of keys must not be null, ], MultiKey[uGH` ^9Vv, ]]", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(1928);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      // Undeclared exception!
      try { 
        multiKey0.getKey(524);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 524
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      MultiKey<String> multiKey0 = new MultiKey<String>("O[oC!}lH!4vm8Ym}F", "O[oC!}lH!4vm8Ym}F");
      multiKey0.getKey(1);
      objectArray0[0] = (Object) "O[oC!}lH!4vm8Ym}F";
      Integer integer0 = new Integer(1912);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(979);
      Integer integer3 = new Integer(671);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer1, integer2, integer3);
      Integer integer4 = multiKey1.getKey(1);
      objectArray0[1] = (Object) integer4;
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      Object object2 = new Object();
      objectArray0[4] = object2;
      Object object3 = new Object();
      objectArray0[5] = object3;
      Object object4 = new Object();
      objectArray0[6] = object4;
      multiKey0.getKey(1);
      objectArray0[7] = (Object) "O[oC!}lH!4vm8Ym}F";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      assertEquals(8, multiKey2.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(2);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1));
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "7$R";
      stringArray0[1] = "I`mI";
      stringArray0[2] = "";
      stringArray0[3] = "hG&8Zm$,Pt<]rpaiq";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      int int0 = multiKey1.size();
      assertEquals(4, int0);
  }
}
