/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:53:06 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null, (String) null);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey", "MultiKey");
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, object4, multiKey1);
      multiKey2.toString();
      multiKey2.getKeys();
      multiKey2.toString();
      multiKey2.equals(multiKey2);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-103));
      MultiKey<Integer> multiKey3 = null;
      try {
        multiKey3 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null, (String) null);
      Integer integer0 = new Integer(1891);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey", "MultiKey");
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object) null, object4, multiKey2);
      multiKey3.toString();
      Object[] objectArray0 = multiKey3.getKeys();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0, true);
      multiKey4.toString();
      multiKey3.equals(multiKey4);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-103));
      MultiKey<Integer> multiKey5 = null;
      try {
        multiKey5 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("WDpRVpLJv7Mp:G;D<P", "WDpRVpLJv7Mp:G;D<P", "", "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKey(0);
      multiKey0.getKeys();
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, object0, "MultiKey[]", object0);
      multiKey2.toString();
      multiKey2.getKeys();
      boolean boolean0 = multiKey0.equals(integer0);
      assertFalse(boolean0);
      
      multiKey2.hashCode();
      multiKey2.getKeys();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 9);
      multiKeyArray0[0] = multiKey1;
      MultiKey<String> multiKey3 = new MultiKey<String>((String) null, "MultiKey[]", "MultiKey[]");
      multiKeyArray0[1] = multiKey3;
      multiKeyArray0[2] = multiKey1;
      multiKeyArray0[3] = multiKey1;
      multiKeyArray0[4] = multiKey1;
      multiKeyArray0[5] = multiKey1;
      multiKeyArray0[6] = multiKey1;
      multiKeyArray0[7] = multiKey1;
      multiKeyArray0[8] = multiKey1;
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[MultiKey[WDpRVpLJv7Mp:G;D<P, WDpRVpLJv7Mp:G;D<P, , ], MultiKey[null, MultiKey[], MultiKey[]], MultiKey[WDpRVpLJv7Mp:G;D<P, WDpRVpLJv7Mp:G;D<P, , ], MultiKey[WDpRVpLJv7Mp:G;D<P, WDpRVpLJv7Mp:G;D<P, , ], MultiKey[WDpRVpLJv7Mp:G;D<P, WDpRVpLJv7Mp:G;D<P, , ], MultiKey[WDpRVpLJv7Mp:G;D<P, WDpRVpLJv7Mp:G;D<P, , ], MultiKey[WDpRVpLJv7Mp:G;D<P, WDpRVpLJv7Mp:G;D<P, , ], MultiKey[WDpRVpLJv7Mp:G;D<P, WDpRVpLJv7Mp:G;D<P, , ], MultiKey[WDpRVpLJv7Mp:G;D<P, WDpRVpLJv7Mp:G;D<P, , ]]", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "#Z6??^aR) w@3gib6;+", "a&|5mf5by^Ei.WU", "#Z6??^aR) w@3gib6;+");
      multiKey0.hashCode();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "#Z6??^aR) w@3gib6;+";
      objectArray0[1] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.equals("a&|5mf5by^Ei.WU");
      multiKey1.size();
      Integer[] integerArray0 = new Integer[3];
      multiKey1.toString();
      Integer integer0 = new Integer(2);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-308));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2597));
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      Integer[] integerArray1 = multiKey2.getKeys();
      assertEquals(3, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, true);
      multiKey1.toString();
      multiKey1.equals(multiKey0);
      MultiKey<String> multiKey2 = new MultiKey<String>("K Yg5<iTR^", "The array of keys must not be null");
      multiKey0.toString();
      multiKey2.toString();
      multiKey0.equals("K Yg5<iTR^");
      multiKey1.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      boolean boolean0 = false;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, object1, multiKey0);
      multiKey1.getKey(0);
      objectArray0[2] = null;
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-193));
      integerArray0[0] = integer0;
      int int0 = (-1);
      Integer integer1 = new Integer((-1));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-193));
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey3, multiKey2, multiKey2);
      MultiKey<Integer> multiKey5 = multiKey4.getKey(0);
      objectArray0[3] = (Object) multiKey5;
      Object object2 = new Object();
      objectArray0[4] = object2;
      MultiKey<String> multiKey6 = new MultiKey<String>("|H9.ea/x<+", "MultiKey", "HmXDk7Tgl7}06Q!");
      // Undeclared exception!
      try { 
        multiKey6.getKey(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Object object8 = multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object8, object1, object7, "");
      Integer integer0 = new Integer(0);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object2, object5, object5, object0, integer0);
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey2);
      Object object9 = new Object();
      multiKey3.equals(object9);
      assertNotSame(object1, object8);
      
      MultiKey<String> multiKey4 = new MultiKey<String>("MultiKey[java.lang.Object@36cf85aa, java.lang.Object@641358c, java.lang.Object@5c5e3de9, ]", "MultiKey[java.lang.Object@36cf85aa, java.lang.Object@641358c, java.lang.Object@3f4871d9, java.lang.Object@643cb5eb, java.lang.Object@2e149e13, java.lang.Object@21f62308, java.lang.Object@5dcc5856, java.lang.Object@5c5e3de9]", "", "");
      Integer integer1 = new Integer(0);
      boolean boolean0 = multiKey4.equals(integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "MultiKey", "p`=b#4' l?<AkI4PQt");
      multiKey0.toString();
      Integer integer0 = new Integer((-3240));
      Integer integer1 = new Integer((-3240));
      Integer integer2 = new Integer(3410);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer2);
      multiKey1.hashCode();
      MultiKey<Object> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("'", "u{J1'z`7s4+=Ltki+pG", "'", "zknHKHP^+Fu;JX$=' ", "DE942aZP9hSzYP6Tj2");
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-625));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -625
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = null;
      objectArray0[3] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      Object object1 = multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, integer0, object0, object1, object0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, (Object) null, multiKey1, integer0);
      assertFalse(multiKey2.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "F)0![+'H8!3z", "", "", "");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.size();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-2570));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer1);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "F)0![+'H8!3z";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "X*";
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0);
      // Undeclared exception!
      try { 
        multiKey4.getKey(3558);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3558
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
