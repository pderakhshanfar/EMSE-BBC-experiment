/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:52:43 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("org.apache.commons.collections4.keyvalue.MultiKey", object0, "Pf&d{eK>:v8zw", multiKey0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[1] = "Pf&d{eK>:v8zw";
      stringArray0[3] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[4] = "#h}Hy(AUI(";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      MultiKey<String> multiKey3 = new MultiKey<String>("", "The array of keys must not be null");
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey2, multiKey3, multiKey3);
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, Pf&d{eK>:v8zw, null, org.apache.commons.collections4.keyvalue.MultiKey, #h}Hy(AUI(], MultiKey[, The array of keys must not be null], MultiKey[, The array of keys must not be null]]", string0);
      
      multiKey4.getKey(1);
      assertFalse(multiKey3.equals((Object)multiKey2));
      
      Integer integer0 = new Integer(5);
      Integer integer1 = new Integer((-1168));
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer1, integer0);
      Integer integer2 = new Integer(5);
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integer1, integer2);
      boolean boolean0 = multiKey5.equals(multiKey5);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("org.apache.commons.collections4.keyvalue.MultiKey", object0, "Pf&d{eK>:v8zw", multiKey0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[1] = "Pf&d{eK>:v8zw";
      stringArray0[3] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[4] = "#h}Hy(AUI(";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      MultiKey<String> multiKey3 = new MultiKey<String>("", "The array of keys must not be null");
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey2, multiKey3, multiKey3);
      multiKey4.toString();
      multiKey4.getKey(1);
      Integer integer0 = new Integer(5);
      Integer integer1 = new Integer((-1168));
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer1, integer0);
      Integer integer2 = new Integer(5);
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integer1, integer2);
      boolean boolean0 = multiKey5.equals(multiKey6);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = false;
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      Integer integer0 = new Integer(4);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Integer integer0 = new Integer((-1));
      multiKey0.toString();
      Integer integer1 = new Integer((-1));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.getKeys();
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("KS)JC", "", "", (String) null);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 9);
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null);
      multiKeyArray0[0] = multiKey0;
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      multiKeyArray0[1] = multiKey1;
      String string0 = "P?j+3$00ct4)o5iv";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0[0], "", stringArray0[3], "", "P?j+3$00ct4)o5iv");
      multiKeyArray0[2] = multiKey2;
      MultiKey<String> multiKey3 = null;
      try {
        multiKey3 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.getKey(4);
      objectArray0[0] = null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      multiKey0.toString();
      objectArray0[2] = object1;
      multiKey0.toString();
      Object object2 = new Object();
      objectArray0[3] = object2;
      Object object3 = new Object();
      objectArray0[4] = object3;
      Object object4 = new Object();
      objectArray0[5] = object4;
      Object object5 = new Object();
      objectArray0[6] = object5;
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null, null, null, null, null, null]", string0);
      
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.toString();
      multiKey1.getKey(4);
      Object object6 = multiKey1.getKey(4);
      assertFalse(multiKey1.equals((Object)multiKey0));
      assertNotSame(object6, object4);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = null;
      MultiKey<String> multiKey0 = new MultiKey<String>(";UQo-qyGkLU9.ak7", ";UQo-qyGkLU9.ak7", (String) null, ";UQo-qyGkLU9.ak7", "");
      Integer integer0 = new Integer((-475));
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-475));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, (Integer) null, integer1, integer2, integer1);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKey(3);
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, "MultiKey[-475, null, 0, -475, 0]");
      multiKey2.toString();
      multiKey2.getKeys();
      multiKey2.toString();
      multiKey0.size();
      MultiKey<String> multiKey3 = null;
      try {
        multiKey3 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer1, integer1);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 5);
      MultiKey<String> multiKey1 = new MultiKey<String>("The array of keys must not be null", "", "V-Qq\"8>4% !", "V-Qq\"8>4% !", "The array of keys must not be null");
      multiKeyArray0[0] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "", (String) null);
      multiKeyArray0[1] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("V-Qq\"8>4% !", "1+(0KY+SUY?O");
      multiKeyArray0[2] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("", "The array of keys must not be null");
      multiKeyArray0[3] = multiKey4;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = null;
      stringArray0[2] = "V-Qq\"8>4% !";
      stringArray0[3] = "";
      stringArray0[4] = "1+(0KY+SUY?O";
      stringArray0[5] = "V-Qq\"8>4% !";
      stringArray0[6] = null;
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray0, false);
      multiKeyArray0[4] = multiKey5;
      MultiKey<MultiKey<String>> multiKey6 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      MultiKey<String>[] multiKeyArray1 = multiKey6.getKeys();
      assertEquals(5, multiKeyArray1.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(2035);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, multiKey0, multiKey0, "MultiKey[0, 2035]");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKey(0);
      multiKey1.size();
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[java.lang.Object@36b9a87e, MultiKey[0, 2035], MultiKey[0, 2035], MultiKey[0, 2035]]", "", "MultiKey[java.lang.Object@36b9a87e, MultiKey[0, 2035], MultiKey[0, 2035], MultiKey[0, 2035]]");
      multiKey2.hashCode();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "MultiKey[0, 2035]";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "MultiKey[java.lang.Object@36b9a87e, MultiKey[0, 2035], MultiKey[0, 2035], MultiKey[0, 2035]]";
      stringArray0[4] = "MultiKey[java.lang.Object@36b9a87e, MultiKey[0, 2035], MultiKey[0, 2035], MultiKey[0, 2035]]";
      stringArray0[5] = "K4ls`F$D9";
      stringArray0[6] = "MultiKey[java.lang.Object@36b9a87e, MultiKey[0, 2035], MultiKey[0, 2035], MultiKey[0, 2035]]";
      stringArray0[7] = "oc8jXv+Sr h";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey3, multiKey3);
      multiKey4.hashCode();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 4);
      Integer integer2 = new Integer(4);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer2, integer0, integer1);
      multiKeyArray0[0] = multiKey5;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      MultiKey<MultiKey<Integer>> multiKey6 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, true);
      MultiKey<Integer> multiKey7 = multiKey6.getKey(2);
      assertSame(multiKey7, multiKey0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      multiKey0.hashCode();
      multiKey0.hashCode();
      String string1 = "";
      Integer integer0 = new Integer(781);
      Integer integer1 = new Integer((-3439));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-2461));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2461
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("org.apache.commons.collections4.keyvalue.MultiKey", object0, "Pf&d{eK>:v8zw", multiKey0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[1] = "Pf&d{eK>:v8zw";
      stringArray0[2] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[3] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[4] = "#h}Hy(AUI(";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      MultiKey<String> multiKey3 = new MultiKey<String>("", "The array of keys must not be null");
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey2, multiKey3, multiKey3);
      MultiKey multiKey5 = (MultiKey)multiKey4.getKey(1);
      boolean boolean0 = multiKey1.equals(multiKey5);
      assertFalse(boolean0);
      assertEquals(2, multiKey5.size());
      
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey0, multiKey1, multiKey0);
      boolean boolean1 = multiKey6.equals("org.apache.commons.collections4.keyvalue.MultiKey");
      assertFalse(boolean1);
      
      multiKey1.toString();
      multiKey1.getKey(1);
      assertFalse(multiKey0.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 8);
      MultiKey<String> multiKey0 = new MultiKey<String>("", ",<8X<-q8", ",<8X<-q8");
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "");
      multiKeyArray0[1] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("", "");
      multiKeyArray0[2] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("", (String) null, "", "geYwfU0Fxg`Y", "g18YRSI^^kVbK0 &");
      multiKeyArray0[3] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("X3m{apf?*O", "");
      multiKeyArray0[4] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>("g18YRSI^^kVbK0 &", "EF", "]\"PGo!K");
      multiKeyArray0[5] = multiKey5;
      MultiKey<String> multiKey6 = new MultiKey<String>("", "geYwfU0Fxg`Y", (String) null);
      multiKeyArray0[6] = multiKey6;
      MultiKey<String> multiKey7 = new MultiKey<String>("g18YRSI^^kVbK0 &", "", "=0Fhmun(", "", "]\"PGo!K");
      multiKeyArray0[7] = multiKey7;
      MultiKey<MultiKey<String>> multiKey8 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      // Undeclared exception!
      try { 
        multiKey8.getKey(585);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 585
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
