/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:54:26 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey1.getKeys();
      String[] stringArray0 = new String[8];
      stringArray0[0] = ">v3j/DU";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = null;
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.toString();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey0, multiKey2, multiKey0, multiKey0);
      int int0 = multiKey3.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("<09$wfRa0l*", "<09$wfRa0l*");
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey", "A?h>8`E99$OZ)#9", "on6/,Q*QE:fS=n");
      Integer integer0 = new Integer(2677);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, "on6/,Q*QE:fS=n");
      multiKey2.getKey(1);
      multiKey0.toString();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      int int0 = multiKey3.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 1);
      String string0 = "sd9B";
      String string1 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("sd9B", "");
      multiKeyArray0[0] = multiKey0;
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey0.equals(multiKey1);
      MultiKey<Object>[] multiKeyArray1 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 7);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey1, "sd9B");
      multiKeyArray1[0] = multiKey2;
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) multiKeyArray1, true);
      multiKeyArray1[1] = multiKey3;
      Integer integer0 = new Integer(2);
      Object object0 = new Object();
      Object object1 = new Object();
      Integer integer1 = new Integer(2);
      Object object2 = null;
      Object object3 = new Object();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(integer1, (Object) null, (Object) null, object3, "");
      multiKey4.getKey(2);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(object0, object1, (Object) null);
      // Undeclared exception!
      try { 
        multiKey5.getKey(13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "MultiKey", "");
      Integer integer0 = new Integer(0);
      MultiKey<String> multiKey1 = new MultiKey<String>("ETg3oZkRq;]3", "ETg3oZkRq;]3", "M%~GB|LdHr/6O%");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey1, multiKey1);
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>("M%~GB|LdHr/6O%", object0, "ETg3oZkRq;]3", multiKey1, "ETg3oZkRq;]3");
      multiKey3.toString();
      multiKey3.getKey(0);
      Object object1 = new Object();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(object1, (Object) null, "");
      int int0 = 2;
      Integer integer1 = new Integer(2);
      Integer integer2 = new Integer(2);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer0, integer2, integer1);
      MultiKey<Object> multiKey6 = new MultiKey<Object>(integer0, "m3]U", multiKey4, integer1, multiKey5);
      MultiKey<Object> multiKey7 = null;
      try {
        multiKey7 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("ETg3oZkRq;]3", "ETg3oZkRq;]3", "");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "ETg3oZkRq;]3";
      stringArray0[1] = "ETg3oZkRq;]3";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey0, multiKey1, multiKey0, multiKey1);
      boolean boolean0 = multiKey2.equals("ETg3oZkRq;]3");
      multiKey1.hashCode();
      MultiKey<String> multiKey3 = new MultiKey<String>("h1(Sjt:'\"uaO/9", stringArray0[2], (String) null);
      MultiKey<String> multiKey4 = new MultiKey<String>("ETg3oZkRq;]3", "ETg3oZkRq;]3", "ETg3oZkRq;]3", "h1(Sjt:'\"uaO/9", "ETg3oZkRq;]3");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 26);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey3;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey1;
      multiKeyArray0[5] = multiKey0;
      multiKeyArray0[6] = multiKey3;
      MultiKey<String> multiKey5 = new MultiKey<String>("h1(Sjt:'\"uaO/9", "ETg3oZkRq;]3", (String) null);
      multiKeyArray0[7] = multiKey5;
      MultiKey<MultiKey<String>> multiKey6 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      multiKey2.hashCode();
      assertFalse(multiKey2.equals((Object)multiKey6));
      
      MultiKey<Object> multiKey7 = new MultiKey<Object>(multiKeyArray0);
      MultiKey<Object> multiKey8 = new MultiKey<Object>(multiKeyArray0);
      boolean boolean1 = multiKey7.equals(multiKey8);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 1);
      Integer integer0 = new Integer(0);
      MultiKey<String> multiKey0 = new MultiKey<String>("FL x#4~KPjc%bU/*P$E", "org.apache.commons.collections4.keyvalue.MultiKey");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "FL x#4~KPjc%bU/*P$E";
      stringArray0[1] = "FL x#4~KPjc%bU/*P$E";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, integer0, multiKey0, "FL x#4~KPjc%bU/*P$E");
      multiKeyArray0[0] = multiKey2;
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      assertEquals(1, multiKey3.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      int int0 = 669;
      // Undeclared exception!
      try { 
        multiKey0.getKey(669);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 669
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object1, object0, object0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0, multiKey0, object0);
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-174));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -174
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("WM>?diAL.", "WM>?diAL.", "WM>?diAL.", "WM>?diAL.");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[WM>?diAL., WM>?diAL., WM>?diAL., WM>?diAL.]", string0);
      
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, object0, multiKey0, (Object) null);
      multiKey1.toString();
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertFalse(boolean0);
  }
}
