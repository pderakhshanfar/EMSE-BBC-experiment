/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:54:19 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("\".= ,u#~RRiU2dPT", "\".= ,u#~RRiU2dPT");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "\".= ,u#~RRiU2dPT";
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) multiKey0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "\".= ,u#~RRiU2dPT";
      objectArray0[6] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1);
      Object object1 = multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey0, object1);
      Object object2 = multiKey3.getKey(0);
      boolean boolean0 = multiKey0.equals(object2);
      boolean boolean1 = multiKey1.equals("\".= ,u#~RRiU2dPT");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(2113);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, integer0);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, integer0, object0, (Object) null);
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, integer0, multiKey1, integer0, (Object) null);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey2, multiKey1);
      assertEquals(3, multiKey3.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray0);
      multiKey1.getKeys();
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0, multiKey0, (Object) null);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.getKey(0);
      multiKey0.hashCode();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[]", string0);
      
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-77));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, (Integer) null, integer0, integer1, (Integer) null);
      multiKey2.size();
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, integer0);
      boolean boolean0 = multiKey1.equals(multiKey3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey0.size();
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "U}odv'/#k_#G.=n\\";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "U}odv'/#k_#G.=n", (String) null, (String) null);
      int int0 = 0;
      Integer integer0 = new Integer(0);
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      multiKey1.toString();
      Object object0 = multiKey1.getKey(0);
      multiKey0.equals(object0);
      multiKey0.hashCode();
      // Undeclared exception!
      try { 
        multiKey0.getKey(1235);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1235
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0, integer0);
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      multiKey1.hashCode();
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKey2.toString();
      multiKey2.getKeys();
      int int0 = multiKey2.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 8);
      MultiKey<String> multiKey0 = new MultiKey<String>("<M.OK/W$PTTFwI`R", "", "<M.OK/W$PTTFwI`R");
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("<M.OK/W$PTTFwI`R", "rAmGoBm1IK=");
      multiKeyArray0[1] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "rAmGoBm1IK=", "<M.OK/W$PTTFwI`R");
      multiKeyArray0[2] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>((String) null, "2DDt^v2}a8O2A&gN1q", "rmVsVtdMhE_", "");
      multiKeyArray0[3] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>(".}<^)qIA~[MDCs@", "rmVsVtdMhE_");
      multiKeyArray0[4] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>("", "", "");
      multiKeyArray0[5] = multiKey5;
      MultiKey<String> multiKey6 = new MultiKey<String>("", ".}<^)qIA~[MDCs@", ":xk", "");
      multiKeyArray0[6] = multiKey6;
      MultiKey<String> multiKey7 = new MultiKey<String>("Z+", "");
      multiKeyArray0[7] = multiKey7;
      MultiKey<MultiKey<String>> multiKey8 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      assertEquals(8, multiKey8.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", (String) null, "MultiKey", "", "");
      multiKey0.hashCode();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      String string0 = multiKey0.getKey(0);
      assertNotNull(string0);
      
      objectArray0[1] = (Object) "MultiKey";
      objectArray0[2] = (Object) "MultiKey";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "MultiKey";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      Integer integer0 = new Integer(0);
      boolean boolean0 = multiKey1.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-894));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1);
      multiKey1.hashCode();
      multiKey0.toString();
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "`M_tjE4&", "MultiKey[java.lang.Object@729072fd, java.lang.Object@729072fd]", "");
      Integer integer2 = new Integer(0);
      multiKey2.equals(integer2);
      multiKey1.size();
      multiKey2.hashCode();
      int int0 = multiKey0.size();
      assertEquals(2, int0);
  }
}
