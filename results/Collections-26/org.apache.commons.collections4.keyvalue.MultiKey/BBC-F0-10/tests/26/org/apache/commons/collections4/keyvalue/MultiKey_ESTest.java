/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:52:54 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(8);
      Integer integer1 = new Integer(12);
      Integer integer2 = new Integer(12);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer2, integer2);
      Integer integer3 = new Integer(12);
      Integer integer4 = new Integer(3575);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer4, integer1, (Integer) null, integer4);
      boolean boolean0 = multiKey0.equals(integer4);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "4Ay%7%Tkl5.RXh;qIP";
      stringArray0[1] = "lQ+8Slf/oB!";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "bw`l3\n2;GX~`A";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey2, multiKey2, multiKey2, multiKey2, multiKey2);
      Object object0 = multiKey3.getKey(1);
      boolean boolean1 = multiKey2.equals(object0);
      assertFalse(boolean1 == boolean0);
      
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[3575, 12, null, 3575]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.toString();
      String[] stringArray0 = new String[6];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.equals("MultiKey[null, null]");
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[null, null, null, null, null, null]", string0);
      
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1);
      multiKey2.equals((Object) null);
      Integer integer0 = new Integer((-5));
      Integer integer1 = new Integer(2753);
      Integer integer2 = new Integer((-1));
      Integer integer3 = new Integer(2753);
      Integer integer4 = new Integer(0);
      Integer integer5 = new Integer(2753);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer3, integer0, integer4, integer5, integer3);
      Integer integer6 = new Integer((-1));
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer2, integer2, integer6, integer3);
      boolean boolean0 = multiKey4.equals(integer5);
      assertFalse(boolean0);
      
      MultiKey<Object> multiKey5 = new MultiKey<Object>((Object[]) stringArray0, true);
      MultiKey<String> multiKey6 = new MultiKey<String>(stringArray0, false);
      multiKey5.equals(multiKey6);
      assertFalse(multiKey5.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer1, integer0, integer0, (Integer) null, integer0);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      String[] stringArray1 = multiKey1.getKeys();
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.getKey(0);
      objectArray0[0] = null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "js0nj!");
      multiKey2.size();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 3);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>((Integer) null, (Integer) null, integer0, integer1);
      multiKeyArray0[0] = multiKey3;
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(2);
      Integer integer4 = new Integer((-5268));
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>((Integer) null, integer2, integer3, (Integer) null, integer4);
      multiKeyArray0[1] = multiKey4;
      Integer integer5 = new Integer(696);
      Integer integer6 = new Integer(1550);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer5, integer6, (Integer) null);
      multiKeyArray0[2] = multiKey5;
      MultiKey<MultiKey<Integer>> multiKey6 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      MultiKey<Integer> multiKey7 = multiKey6.getKey(0);
      assertNotSame(multiKey7, multiKey5);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[]", "MultiKey[]", "MultiKey[]", "MultiKey[]");
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.equals(multiKey0);
      int int0 = multiKey0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      multiKey1.toString();
      multiKey1.size();
      multiKey1.toString();
      multiKey0.getKeys();
      int int0 = (-1227);
      Integer integer0 = new Integer((-1227));
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, integer0, integer1, (Integer) null, integer1);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey0.size();
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "MSBb3:", "");
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, "MSBb3:");
      multiKey2.getKeys();
      int int0 = (-2121);
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey((-2121));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2121
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.toString();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "MultiKey[null, null]";
      stringArray0[1] = "MultiKey[null, null]";
      stringArray0[2] = "MultiKey[null, null]";
      stringArray0[3] = "MultiKey[null, null]";
      stringArray0[4] = "MultiKey[null, null]";
      stringArray0[5] = "MultiKey[null, null]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKey(0);
      multiKey1.size();
      multiKey0.equals("MultiKey[null, null]");
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer1, integer1, integer1);
      boolean boolean0 = multiKey2.equals("MultiKey[null, null]");
      assertFalse(boolean0);
      
      multiKey2.size();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[0, 0, 0, 0, 0]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(3);
      int int0 = (-1610);
      Integer integer1 = new Integer((-1610));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "The array of keys must not be null", "MultiKey[3, -1610]", "", "The array of keys must not be null");
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1610));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1610
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "MultiKey";
      stringArray0[1] = "<E";
      stringArray0[2] = "\u0005U#}\"yEE9]Vph";
      stringArray0[3] = "MultiKey";
      String string0 = "";
      stringArray0[4] = "";
      stringArray0[5] = "MultiKey";
      stringArray0[6] = "Yy[t~w_";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.getKeys();
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("Yy[t~w_", object1, "MultiKey", "\u0005U#}\"yEE9]Vph", "MultiKey");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, "\u0005U#}\"yEE9]Vph", multiKey1, "<E");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0, false);
      multiKey3.toString();
      // Undeclared exception!
      try { 
        multiKey3.getKey(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(1929);
      Integer integer1 = new Integer(1417);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer1, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(1417);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1417
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "BJ\"Kq((&mu";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.hashCode();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-1));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1493));
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1493));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1493
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-2914));
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      boolean boolean0 = multiKey0.equals(int0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1537));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1537
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "MultiKey";
      stringArray0[1] = "JPj";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      String[] stringArray1 = multiKey0.getKeys();
      assertNotSame(stringArray0, stringArray1);
  }
}
