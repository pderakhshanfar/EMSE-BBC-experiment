/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:45:22 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "e)i7d_", "The array of keys must not be null");
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", multiKey0, multiKey1, object0, "");
      Object object1 = multiKey2.getKey(2);
      boolean boolean0 = multiKey1.equals(object1);
      boolean boolean1 = multiKey1.equals("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("<F+8/F`NTnxDbGj", "<F+8/F`NTnxDbGj");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey1, multiKey1);
      multiKey2.getKeys();
      multiKey2.equals(multiKey1);
      multiKey0.toString();
      multiKey0.hashCode();
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer1);
      multiKey3.size();
      Integer integer2 = new Integer(269);
      Integer integer3 = new Integer(269);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer2, integer3);
      multiKey3.size();
      Integer integer4 = new Integer(269);
      int int0 = (-1036);
      Integer integer5 = new Integer((-1036));
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer4, integer4, integer5, integer5, integer3);
      MultiKey<MultiKey<Integer>> multiKey6 = new MultiKey<MultiKey<Integer>>(multiKey5, multiKey5, multiKey4, multiKey4);
      MultiKey<String> multiKey7 = null;
      try {
        multiKey7 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.toString();
      multiKey0.equals("MultiKey[]");
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[]", "", (String) null);
      multiKey1.toString();
      multiKey1.size();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(3);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      int int0 = multiKey2.size();
      assertEquals(4, int0);
      
      int int1 = multiKey0.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, object1, object1);
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, (Object) null);
      Object object2 = multiKey1.getKey(0);
      objectArray0[0] = object2;
      Object object3 = multiKey1.getKey(0);
      objectArray0[1] = object3;
      Object object4 = multiKey1.getKey(0);
      objectArray0[2] = object4;
      Object object5 = new Object();
      objectArray0[3] = object5;
      Object object6 = new Object();
      objectArray0[4] = object6;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey2.hashCode();
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Integer integer0 = new Integer((-3104));
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, integer0, object0, object1);
      multiKey0.hashCode();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 1);
      MultiKey<String> multiKey1 = new MultiKey<String>("kh?V0OzlEqlw3 >", "", "maWa", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKeyArray0[0] = multiKey1;
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      boolean boolean0 = multiKey2.equals("gLMgnX");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("w5w}l<=_kQ", "w5w}l<=_kQ", object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      boolean boolean0 = multiKey1.equals("MultiKey[w5w}l<=_kQ, w5w}l<=_kQ, java.lang.Object@b21b03b]");
      assertFalse(boolean0);
      
      multiKey0.toString();
      multiKey0.hashCode();
      Integer integer0 = new Integer(1);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0);
      multiKey2.size();
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey2, multiKey2, multiKey2);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "MultiKey[MultiKey[w5w}l<=_kQ, w5w}l<=_kQ, java.lang.Object@b21b03b], MultiKey[w5w}l<=_kQ, w5w}l<=_kQ, java.lang.Object@b21b03b], MultiKey[w5w}l<=_kQ, w5w}l<=_kQ, java.lang.Object@b21b03b], MultiKey[w5w}l<=_kQ, w5w}l<=_kQ, java.lang.Object@b21b03b]]";
      stringArray0[1] = "MultiKey[MultiKey[w5w}l<=_kQ, w5w}l<=_kQ, java.lang.Object@b21b03b], MultiKey[w5w}l<=_kQ, w5w}l<=_kQ, java.lang.Object@b21b03b], MultiKey[w5w}l<=_kQ, w5w}l<=_kQ, java.lang.Object@b21b03b], MultiKey[w5w}l<=_kQ, w5w}l<=_kQ, java.lang.Object@b21b03b]]";
      stringArray0[2] = "MultiKey[MultiKey[w5w}l<=_kQ, w5w}l<=_kQ, java.lang.Object@b21b03b], MultiKey[w5w}l<=_kQ, w5w}l<=_kQ, java.lang.Object@b21b03b], MultiKey[w5w}l<=_kQ, w5w}l<=_kQ, java.lang.Object@b21b03b], MultiKey[w5w}l<=_kQ, w5w}l<=_kQ, java.lang.Object@b21b03b]]";
      stringArray0[3] = "MultiKey[MultiKey[w5w}l<=_kQ, w5w}l<=_kQ, java.lang.Object@b21b03b], MultiKey[w5w}l<=_kQ, w5w}l<=_kQ, java.lang.Object@b21b03b], MultiKey[w5w}l<=_kQ, w5w}l<=_kQ, java.lang.Object@b21b03b], MultiKey[w5w}l<=_kQ, w5w}l<=_kQ, java.lang.Object@b21b03b]]";
      stringArray0[4] = "MultiKey[MultiKey[w5w}l<=_kQ, w5w}l<=_kQ, java.lang.Object@b21b03b], MultiKey[w5w}l<=_kQ, w5w}l<=_kQ, java.lang.Object@b21b03b], MultiKey[w5w}l<=_kQ, w5w}l<=_kQ, java.lang.Object@b21b03b], MultiKey[w5w}l<=_kQ, w5w}l<=_kQ, java.lang.Object@b21b03b]]";
      stringArray0[5] = "MultiKey[w5w}l<=_kQ, w5w}l<=_kQ, java.lang.Object@b21b03b]";
      stringArray0[6] = "MultiKey[w5w}l<=_kQ, w5w}l<=_kQ, java.lang.Object@b21b03b]";
      stringArray0[7] = "MultiKey[MultiKey[w5w}l<=_kQ, w5w}l<=_kQ, java.lang.Object@b21b03b], MultiKey[w5w}l<=_kQ, w5w}l<=_kQ, java.lang.Object@b21b03b], MultiKey[w5w}l<=_kQ, w5w}l<=_kQ, java.lang.Object@b21b03b], MultiKey[w5w}l<=_kQ, w5w}l<=_kQ, java.lang.Object@b21b03b]]";
      stringArray0[8] = "MultiKey[MultiKey[w5w}l<=_kQ, w5w}l<=_kQ, java.lang.Object@b21b03b], MultiKey[w5w}l<=_kQ, w5w}l<=_kQ, java.lang.Object@b21b03b], MultiKey[w5w}l<=_kQ, w5w}l<=_kQ, java.lang.Object@b21b03b], MultiKey[w5w}l<=_kQ, w5w}l<=_kQ, java.lang.Object@b21b03b]]";
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0, false);
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKey4, multiKey4, multiKey4, multiKey4, multiKey4);
      Object object1 = multiKey5.getKey(0);
      boolean boolean1 = multiKey3.equals(object1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      Object object0 = multiKey0.getKey(0);
      objectArray0[0] = null;
      boolean boolean0 = false;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      Object object1 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object1, object1, object0);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey2, multiKey1, multiKey0, multiKey2);
      int int0 = 2;
      MultiKey<Object> multiKey4 = multiKey3.getKey(2);
      objectArray0[1] = (Object) multiKey4;
      Object object2 = new Object();
      objectArray0[2] = object2;
      // Undeclared exception!
      try { 
        multiKey2.getKey(174);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 174
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MultiKey<MultiKey<Object>> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
