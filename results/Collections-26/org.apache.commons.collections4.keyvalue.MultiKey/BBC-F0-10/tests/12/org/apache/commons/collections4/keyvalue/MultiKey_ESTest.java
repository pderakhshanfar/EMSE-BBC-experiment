/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:49:25 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      assertEquals(0, multiKey0.size());
      
      String[] stringArray1 = multiKey0.getKeys();
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      int int0 = multiKey0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object1);
      MultiKey<String> multiKey1 = new MultiKey<String>("bN r$`!(p&ojwp}", "dSrM", "8+j6>E_X", "dSrM", "dSrM");
      Object object2 = new Object();
      multiKey0.equals(multiKey0);
      // Undeclared exception!
      try { 
        multiKey1.getKey(2489);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2489
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "MultiKey";
      String string1 = "";
      Object[] objectArray0 = null;
      boolean boolean0 = false;
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals((Object) null);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "MultiKey[null, java.lang.Object@e51b3f9]", "MultiKey[null, java.lang.Object@e51b3f9]", "'IKg{#q#x366G-h3V", "p;xh@");
      multiKey1.equals(multiKey0);
      multiKey0.hashCode();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.size();
      // Undeclared exception!
      try { 
        multiKey0.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "MultiKey";
      stringArray0[1] = "M),:Fy4!9F^'icV;";
      stringArray0[2] = "lktFmKjd#rVGJTTlTB";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      Integer integer0 = new Integer((-336));
      Integer integer1 = new Integer((-2111));
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object1, multiKey0, (Object) null, multiKey1);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, object0, object1, object0, multiKey2);
      assertEquals(5, multiKey3.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      String string0 = multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      Integer[] integerArray0 = new Integer[2];
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer((-1));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1));
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey1.toString();
      multiKey0.size();
      multiKey1.toString();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "MultiKey[null, null]";
      stringArray0[1] = "MultiKey[null, null]";
      stringArray0[2] = "MultiKey[null, null]";
      stringArray0[3] = "MultiKey[null, null]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      String string1 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[null, null], MultiKey[null, null], MultiKey[null, null], MultiKey[null, null]]", string1);
      
      String string2 = multiKey2.getKey(0);
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(":+)w%7<", "f1-N6)*?D`E_", "", "QG\"u.W'.9.@myfUz.", "@");
      multiKey0.toString();
      Integer integer0 = new Integer(770);
      Integer integer1 = new Integer((-998));
      Integer integer2 = new Integer((-998));
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[770, -998, -998]", "");
      multiKey0.toString();
      multiKey2.size();
      multiKey0.getKey(2);
      multiKey2.hashCode();
      int int0 = multiKey1.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "MultiKey";
      stringArray0[1] = "";
      stringArray0[2] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey", "MultiKey", "", "", "");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey1, multiKey0, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>((String) null, "");
      int int0 = 0;
      multiKey0.toString();
      multiKey3.getKey(0);
      multiKey0.equals((Object) null);
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer0);
      // Undeclared exception!
      try { 
        multiKey4.getKey(90);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 90
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "d~1QxbWmqsyG";
      stringArray0[2] = "lMowAcs]N";
      stringArray0[3] = "=";
      stringArray0[4] = "&[{hkW*1[q$ZFr6Ar)r";
      stringArray0[5] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "", object0);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-819));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -819
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      // Undeclared exception!
      try { 
        multiKey0.getKey(2031);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2031
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
