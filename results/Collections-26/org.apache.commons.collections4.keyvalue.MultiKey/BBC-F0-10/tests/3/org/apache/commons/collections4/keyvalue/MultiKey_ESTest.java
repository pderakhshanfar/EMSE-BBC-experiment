/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:42:03 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "%@KL*U");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      Integer[] integerArray1 = multiKey1.getKeys();
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "]ug&w;}^,Xmv", (String) null, (String) null, "]ug&w;}^,Xmv");
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      multiKey0.getKey(2);
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) "]ug&w;}^,Xmv";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      int int0 = multiKey1.size();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "JdR~oqD1";
      stringArray0[2] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      Integer integer0 = new Integer(4162);
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      Object object0 = multiKey1.getKey(0);
      assertEquals("", object0);
      
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", multiKey0, "", "");
      Object object1 = new Object();
      boolean boolean0 = multiKey2.equals(multiKey1);
      assertFalse(boolean0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0, false);
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.hashCode();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[, MultiKey[, JdR~oqD1, ], , ]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("bto", "bto", "bto", ".Ctm'jd", ".Ctm'jd");
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      Object object0 = multiKey1.getKey(0);
      Object object1 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, object0, multiKey0, (Object) null, object1);
      Object object2 = multiKey2.getKey(0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.equals(object2);
      multiKey2.getKeys();
      multiKey0.size();
      multiKey2.toString();
      multiKey2.getKey(0);
      // Undeclared exception!
      try { 
        multiKey2.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      int int0 = multiKey0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "A#P}T9Iyl", "k`kIF_{W{3", ">^a");
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, ">^a");
      multiKey1.toString();
      multiKey1.getKeys();
      Integer integer0 = new Integer(4);
      Integer integer1 = new Integer((-2298));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer1);
      multiKey2.hashCode();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      multiKey0.getKey(0);
      multiKey0.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "", "", (Object) null, object0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer0);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[0, 0, 0]", string0);
      
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 5);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      Object object1 = multiKey3.getKey(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(object1, multiKey1, multiKey1);
      multiKeyArray0[2] = multiKey4;
      multiKeyArray0[3] = multiKey1;
      multiKeyArray0[4] = multiKey1;
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      multiKey5.size();
      assertFalse(multiKey5.equals((Object)multiKey3));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = null;
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", (String) null, (String) null);
      int int0 = 0;
      multiKey0.getKey(0);
      Object object0 = null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", (Object) null, multiKey0);
      // Undeclared exception!
      try { 
        multiKey1.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("U2[+~DTX:]ukv", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, (Object) null);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 1);
      multiKeyArray0[0] = multiKey1;
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      int int0 = 5;
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-2184));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(2);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-2184));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(2);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(5);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(2);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      Integer integer8 = multiKey0.getKey(1);
      objectArray0[0] = (Object) integer8;
      Object object0 = new Object();
      objectArray0[1] = object0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer7, "MMnBn[7VWKte<%A6=6", multiKey0);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-2184));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2184
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(1245);
      Integer integer1 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      String string0 = null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, (Object) null, (Object) null);
      MultiKey<Object> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer((-3472));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("RZ+", "RZ+");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "", "");
      multiKey3.toString();
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, , ]", string0);
      
      Object object0 = new Object();
      boolean boolean0 = multiKey0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(2797);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      int int1 = multiKey0.size();
      assertFalse(int1 == int0);
  }
}
