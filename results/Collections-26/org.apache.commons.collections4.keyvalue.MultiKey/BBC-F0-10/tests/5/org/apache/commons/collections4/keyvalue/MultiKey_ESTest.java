/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:42:39 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2);
      multiKey0.toString();
      multiKey0.equals(integer2);
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[0, 0, 0]", "", "MultiKey[0, 0, 0]", "MultiKey[0, 0, 0]");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer2, multiKey1, integer0);
      multiKey1.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer1, multiKey2, multiKey0, integer2, multiKey2);
      Object object0 = multiKey3.getKey(0);
      Integer integer3 = new Integer(584);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer3);
      multiKey4.toString();
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey2, multiKey1, object0, multiKey4);
      String string0 = multiKey5.toString();
      assertEquals("MultiKey[MultiKey[0, MultiKey[MultiKey[0, 0, 0], , MultiKey[0, 0, 0], MultiKey[0, 0, 0]], 0], MultiKey[MultiKey[0, 0, 0], , MultiKey[0, 0, 0], MultiKey[0, 0, 0]], 0, MultiKey[0, 584]]", string0);
      
      multiKey5.getKeys();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 5);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "MultiKey[0, 0, 0]";
      multiKey1.toString();
      stringArray0[1] = "MultiKey[MultiKey[0, 0, 0], , MultiKey[0, 0, 0], MultiKey[0, 0, 0]]";
      boolean boolean0 = multiKey1.equals(multiKey1);
      Integer integer4 = new Integer(3298);
      boolean boolean1 = multiKey4.equals(integer4);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.toString();
      Integer[] integerArray1 = multiKey0.getKeys();
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, object0);
      Integer integer0 = new Integer(7);
      multiKey0.equals(integer0);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, "\";,Rk6Wy!*B}K", (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      multiKey0.equals((Object) null);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, (Integer) null);
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "", " qHV`Q+", "})?tF^Km");
      int int0 = multiKey2.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("#3l3T}D>k,", "", "lh2=kr bs:OA( ", "lh2=kr bs:OA( ");
      multiKey0.hashCode();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 6);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKeyArray0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      Object object0 = multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("#3l3T}D>k,", "lh2=kr bs:OA( ", object0);
      multiKeyArray0[0] = multiKey3;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[1] = multiKey4;
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[2] = multiKey5;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "lh2=kr bs:OA( ";
      stringArray0[1] = "#3l3T}D>k,";
      stringArray0[2] = "lh2=kr bs:OA( ";
      stringArray0[3] = "#3l3T}D>k,";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "#3l3T}D>k,";
      stringArray0[7] = "lh2=kr bs:OA( ";
      MultiKey<String> multiKey6 = new MultiKey<String>(stringArray0);
      Object object1 = multiKey6.getKey(0);
      assertEquals("lh2=kr bs:OA( ", object1);
      
      MultiKey<Object> multiKey7 = new MultiKey<Object>(object0, "lh2=kr bs:OA( ", "lh2=kr bs:OA( ");
      assertFalse(multiKey1.equals((Object)multiKey4));
      
      multiKeyArray0[3] = multiKey7;
      MultiKey<Object> multiKey8 = new MultiKey<Object>(stringArray0);
      multiKeyArray0[4] = multiKey8;
      MultiKey<Object> multiKey9 = new MultiKey<Object>(stringArray0);
      multiKeyArray0[5] = multiKey9;
      MultiKey<MultiKey<Object>> multiKey10 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      boolean boolean0 = multiKey10.equals(multiKey8);
      assertTrue(multiKey8.equals((Object)multiKey9));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "&~MNcI";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "HNN.GN$B";
      stringArray0[6] = "F";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.equals("HNN.GN$B");
      Integer integer0 = new Integer((-1461));
      Integer integer1 = new Integer((-1461));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1);
      multiKey1.hashCode();
      multiKey1.hashCode();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 2);
      multiKeyArray0[0] = multiKey1;
      Integer integer2 = new Integer((-568));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer1, integer1, integer1, integer2);
      multiKeyArray0[1] = multiKey2;
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      multiKey3.equals(integer1);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1461));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1461
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "'px";
      String string1 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("{|&lZ", "", "wq<mbq><*4Vz0u", "'px");
      int int0 = (-2910);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-2910));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2910
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "The array of keys must not be null";
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[3] = "=DuL6";
      stringArray0[4] = "";
      stringArray0[5] = "MultiKey";
      stringArray0[6] = "";
      stringArray0[7] = "MultiKey";
      stringArray0[8] = "k=*VWHymxcwrl(";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.size();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      multiKey1.getKeys();
      // Undeclared exception!
      try { 
        multiKey1.getKey(9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "{/xd%Z";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "j@VLVg vK";
      stringArray0[6] = "8Q2X3~FCs71";
      stringArray0[7] = "D8(QR72XJY#";
      stringArray0[8] = "u0";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      String[] stringArray1 = multiKey0.getKeys();
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", object0, object1, "");
      multiKey0.hashCode();
      Integer integer0 = null;
      Integer integer1 = new Integer((-3730));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, integer1);
      multiKey1.toString();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-3730));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3730
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
