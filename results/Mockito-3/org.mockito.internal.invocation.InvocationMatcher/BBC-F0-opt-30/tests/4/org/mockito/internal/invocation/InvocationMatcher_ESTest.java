/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 00:30:14 GMT 2021
 */

package org.mockito.internal.invocation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.hamcrest.Matcher;
import org.hamcrest.core.IsInstanceOf;
import org.hamcrest.core.IsNull;
import org.hamcrest.core.StringContains;
import org.hamcrest.core.StringEndsWith;
import org.hamcrest.core.StringStartsWith;
import org.hamcrest.number.IsCloseTo;
import org.hamcrest.text.IsEqualIgnoringCase;
import org.junit.runner.RunWith;
import org.mockito.internal.creation.util.MockitoMethodProxy;
import org.mockito.internal.invocation.InvocationImpl;
import org.mockito.internal.invocation.InvocationMatcher;
import org.mockito.internal.invocation.MockitoMethod;
import org.mockito.internal.invocation.realmethod.CleanTraceRealMethod;
import org.mockito.internal.invocation.realmethod.DefaultRealMethod;
import org.mockito.internal.invocation.realmethod.RealMethod;
import org.mockito.internal.matchers.LocalizedMatcher;
import org.mockito.internal.stubbing.StubbedInvocationMatcher;
import org.mockito.invocation.Invocation;
import org.mockito.invocation.Location;
import org.mockito.stubbing.Answer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class InvocationMatcher_ESTest extends InvocationMatcher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockitoMethodProxy mockitoMethodProxy0 = mock(MockitoMethodProxy.class, new ViolatedAssumptionAnswer());
      CleanTraceRealMethod cleanTraceRealMethod0 = new CleanTraceRealMethod(mockitoMethodProxy0);
      assertNotNull(cleanTraceRealMethod0);
      
      MockitoMethod mockitoMethod0 = mock(MockitoMethod.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(mockitoMethod0).isVarArgs();
      Answer<IsInstanceOf> answer0 = (Answer<IsInstanceOf>) mock(Answer.class, new ViolatedAssumptionAnswer());
      StringContains stringContains0 = new StringContains("uckH$m");
      assertNotNull(stringContains0);
      
      InvocationImpl invocationImpl0 = new InvocationImpl(stringContains0, mockitoMethod0, (Object[]) null, 38, cleanTraceRealMethod0);
      assertNotNull(invocationImpl0);
      assertEquals(38, invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isVerified());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      
      InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocationImpl0);
      assertNotNull(invocationMatcher0);
      assertEquals(38, invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isVerified());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      
      StubbedInvocationMatcher stubbedInvocationMatcher0 = new StubbedInvocationMatcher(invocationMatcher0, answer0);
      assertNotNull(stubbedInvocationMatcher0);
      assertEquals(38, invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isVerified());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(stubbedInvocationMatcher0.wasUsed());
      
      List<Matcher> list0 = (List<Matcher>)stubbedInvocationMatcher0.getMatchers();
      assertNotNull(list0);
      assertEquals(38, invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isVerified());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(stubbedInvocationMatcher0.wasUsed());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockitoMethodProxy mockitoMethodProxy0 = mock(MockitoMethodProxy.class, new ViolatedAssumptionAnswer());
      Invocation invocation0 = mock(Invocation.class, new ViolatedAssumptionAnswer());
      doReturn((Location) null).when(invocation0).getLocation();
      MockitoMethod mockitoMethod0 = mock(MockitoMethod.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(mockitoMethod0).isVarArgs();
      DefaultRealMethod defaultRealMethod0 = new DefaultRealMethod(mockitoMethodProxy0);
      assertNotNull(defaultRealMethod0);
      
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      InvocationImpl invocationImpl0 = new InvocationImpl(object0, mockitoMethod0, objectArray0, (-2174), defaultRealMethod0);
      assertEquals(1, objectArray0.length);
      assertNotNull(invocationImpl0);
      assertFalse(invocationImpl0.isVerified());
      assertEquals((-2174), invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      
      InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocationImpl0);
      assertEquals(1, objectArray0.length);
      assertNotNull(invocationMatcher0);
      assertFalse(invocationImpl0.isVerified());
      assertEquals((-2174), invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      
      Answer<StringEndsWith> answer0 = (Answer<StringEndsWith>) mock(Answer.class, new ViolatedAssumptionAnswer());
      StubbedInvocationMatcher stubbedInvocationMatcher0 = new StubbedInvocationMatcher(invocationMatcher0, answer0);
      assertEquals(1, objectArray0.length);
      assertNotNull(stubbedInvocationMatcher0);
      assertFalse(invocationImpl0.isVerified());
      assertEquals((-2174), invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(stubbedInvocationMatcher0.wasUsed());
      
      List<Matcher> list0 = (List<Matcher>)stubbedInvocationMatcher0.getMatchers();
      assertEquals(1, objectArray0.length);
      assertNotNull(list0);
      assertFalse(invocationImpl0.isVerified());
      assertEquals((-2174), invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(stubbedInvocationMatcher0.wasUsed());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      InvocationMatcher invocationMatcher1 = new InvocationMatcher(invocation0, list0);
      assertEquals(1, objectArray0.length);
      assertNotNull(invocationMatcher1);
      assertFalse(invocationImpl0.isVerified());
      assertEquals((-2174), invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(stubbedInvocationMatcher0.wasUsed());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(invocationMatcher1.equals((Object)invocationMatcher0));
      
      Location location0 = invocationMatcher1.getLocation();
      assertNotSame(invocationMatcher0, invocationMatcher1);
      assertNotSame(invocationMatcher1, invocationMatcher0);
      assertEquals(1, objectArray0.length);
      assertNull(location0);
      assertFalse(invocationImpl0.isVerified());
      assertEquals((-2174), invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(stubbedInvocationMatcher0.wasUsed());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(invocationMatcher0.equals((Object)invocationMatcher1));
      assertFalse(invocationMatcher1.equals((Object)invocationMatcher0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockitoMethodProxy mockitoMethodProxy0 = mock(MockitoMethodProxy.class, new ViolatedAssumptionAnswer());
      CleanTraceRealMethod cleanTraceRealMethod0 = new CleanTraceRealMethod(mockitoMethodProxy0);
      assertNotNull(cleanTraceRealMethod0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      MockitoMethod mockitoMethod0 = mock(MockitoMethod.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(mockitoMethod0).isVarArgs();
      Object[] objectArray0 = new Object[9];
      InvocationImpl invocationImpl0 = new InvocationImpl(object0, mockitoMethod0, objectArray0, 1, cleanTraceRealMethod0);
      assertEquals(9, objectArray0.length);
      assertNotNull(invocationImpl0);
      assertEquals(1, invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      
      InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocationImpl0);
      assertEquals(9, objectArray0.length);
      assertNotNull(invocationMatcher0);
      assertEquals(1, invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      
      Answer<String> answer0 = (Answer<String>) mock(Answer.class, new ViolatedAssumptionAnswer());
      invocationImpl0.ignoreForVerification();
      assertEquals(9, objectArray0.length);
      assertEquals(1, invocationImpl0.getSequenceNumber());
      assertTrue(invocationImpl0.isVerified());
      assertTrue(invocationImpl0.isIgnoredForVerification());
      
      StubbedInvocationMatcher stubbedInvocationMatcher0 = new StubbedInvocationMatcher(invocationMatcher0, answer0);
      assertEquals(9, objectArray0.length);
      assertNotNull(stubbedInvocationMatcher0);
      assertEquals(1, invocationImpl0.getSequenceNumber());
      assertTrue(invocationImpl0.isVerified());
      assertTrue(invocationImpl0.isIgnoredForVerification());
      assertFalse(stubbedInvocationMatcher0.wasUsed());
      
      Invocation invocation0 = stubbedInvocationMatcher0.getInvocation();
      assertSame(invocationImpl0, invocation0);
      assertSame(invocation0, invocationImpl0);
      assertEquals(9, objectArray0.length);
      assertNotNull(invocation0);
      assertEquals(1, invocationImpl0.getSequenceNumber());
      assertTrue(invocationImpl0.isVerified());
      assertTrue(invocationImpl0.isIgnoredForVerification());
      assertFalse(stubbedInvocationMatcher0.wasUsed());
      assertTrue(invocation0.isIgnoredForVerification());
      assertEquals(1, invocation0.getSequenceNumber());
      assertTrue(invocation0.isVerified());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockitoMethodProxy mockitoMethodProxy0 = mock(MockitoMethodProxy.class, new ViolatedAssumptionAnswer());
      CleanTraceRealMethod cleanTraceRealMethod0 = new CleanTraceRealMethod(mockitoMethodProxy0);
      assertNotNull(cleanTraceRealMethod0);
      
      MockitoMethod mockitoMethod0 = mock(MockitoMethod.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(mockitoMethod0).isVarArgs();
      StringContains stringContains0 = new StringContains((String) null);
      assertNotNull(stringContains0);
      
      Object[] objectArray0 = new Object[3];
      InvocationImpl invocationImpl0 = new InvocationImpl(stringContains0, mockitoMethod0, objectArray0, 0, cleanTraceRealMethod0);
      assertEquals(3, objectArray0.length);
      assertNotNull(invocationImpl0);
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      assertEquals(0, invocationImpl0.getSequenceNumber());
      
      InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocationImpl0);
      assertEquals(3, objectArray0.length);
      assertNotNull(invocationMatcher0);
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      assertEquals(0, invocationImpl0.getSequenceNumber());
      
      Answer<StringStartsWith> answer0 = (Answer<StringStartsWith>) mock(Answer.class, new ViolatedAssumptionAnswer());
      StubbedInvocationMatcher stubbedInvocationMatcher0 = new StubbedInvocationMatcher(invocationMatcher0, answer0);
      assertEquals(3, objectArray0.length);
      assertNotNull(stubbedInvocationMatcher0);
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      assertEquals(0, invocationImpl0.getSequenceNumber());
      assertFalse(stubbedInvocationMatcher0.wasUsed());
      
      Invocation invocation0 = stubbedInvocationMatcher0.getInvocation();
      assertSame(invocationImpl0, invocation0);
      assertSame(invocation0, invocationImpl0);
      assertEquals(3, objectArray0.length);
      assertNotNull(invocation0);
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      assertEquals(0, invocationImpl0.getSequenceNumber());
      assertFalse(stubbedInvocationMatcher0.wasUsed());
      assertEquals(0, invocation0.getSequenceNumber());
      assertFalse(invocation0.isVerified());
      assertFalse(invocation0.isIgnoredForVerification());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockitoMethodProxy mockitoMethodProxy0 = mock(MockitoMethodProxy.class, new ViolatedAssumptionAnswer());
      CleanTraceRealMethod cleanTraceRealMethod0 = new CleanTraceRealMethod(mockitoMethodProxy0);
      assertNotNull(cleanTraceRealMethod0);
      
      MockitoMethod mockitoMethod0 = mock(MockitoMethod.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(mockitoMethod0).isVarArgs();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      InvocationImpl invocationImpl0 = new InvocationImpl(bigDecimal0, mockitoMethod0, (Object[]) null, (-8), cleanTraceRealMethod0);
      assertNotNull(invocationImpl0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(invocationImpl0.isVerified());
      assertEquals((-8), invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      
      InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocationImpl0);
      assertNotNull(invocationMatcher0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(invocationImpl0.isVerified());
      assertEquals((-8), invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      
      Invocation invocation0 = invocationMatcher0.getInvocation();
      assertSame(invocationImpl0, invocation0);
      assertSame(invocation0, invocationImpl0);
      assertNotNull(invocation0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(invocationImpl0.isVerified());
      assertEquals((-8), invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertEquals((-8), invocation0.getSequenceNumber());
      assertFalse(invocation0.isVerified());
      assertFalse(invocation0.isIgnoredForVerification());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockitoMethodProxy mockitoMethodProxy0 = mock(MockitoMethodProxy.class, new ViolatedAssumptionAnswer());
      MockitoMethod mockitoMethod0 = mock(MockitoMethod.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(mockitoMethod0).isVarArgs();
      DefaultRealMethod defaultRealMethod0 = new DefaultRealMethod(mockitoMethodProxy0);
      assertNotNull(defaultRealMethod0);
      
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      InvocationImpl invocationImpl0 = new InvocationImpl(object0, mockitoMethod0, objectArray0, (-2174), defaultRealMethod0);
      assertEquals(1, objectArray0.length);
      assertNotNull(invocationImpl0);
      assertEquals((-2174), invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isVerified());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      
      InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocationImpl0);
      assertEquals(1, objectArray0.length);
      assertNotNull(invocationMatcher0);
      assertEquals((-2174), invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isVerified());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      
      Answer<StringEndsWith> answer0 = (Answer<StringEndsWith>) mock(Answer.class, new ViolatedAssumptionAnswer());
      StubbedInvocationMatcher stubbedInvocationMatcher0 = new StubbedInvocationMatcher(invocationMatcher0, answer0);
      assertEquals(1, objectArray0.length);
      assertNotNull(stubbedInvocationMatcher0);
      assertEquals((-2174), invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isVerified());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(stubbedInvocationMatcher0.wasUsed());
      
      List<Matcher> list0 = (List<Matcher>)stubbedInvocationMatcher0.getMatchers();
      assertEquals(1, objectArray0.length);
      assertNotNull(list0);
      assertEquals((-2174), invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isVerified());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(stubbedInvocationMatcher0.wasUsed());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      InvocationMatcher invocationMatcher1 = new InvocationMatcher((Invocation) null, list0);
      assertEquals(1, objectArray0.length);
      assertNotNull(invocationMatcher1);
      assertEquals((-2174), invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isVerified());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(stubbedInvocationMatcher0.wasUsed());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(invocationMatcher1.equals((Object)invocationMatcher0));
      
      // Undeclared exception!
      try { 
        invocationMatcher1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.internal.reporting.PrintSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockitoMethodProxy mockitoMethodProxy0 = mock(MockitoMethodProxy.class, new ViolatedAssumptionAnswer());
      MockitoMethod mockitoMethod0 = mock(MockitoMethod.class, new ViolatedAssumptionAnswer());
      doReturn((Method) null).when(mockitoMethod0).getJavaMethod();
      doReturn(false).when(mockitoMethod0).isVarArgs();
      DefaultRealMethod defaultRealMethod0 = new DefaultRealMethod(mockitoMethodProxy0);
      assertNotNull(defaultRealMethod0);
      
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      InvocationImpl invocationImpl0 = new InvocationImpl(object0, mockitoMethod0, objectArray0, (-2174), defaultRealMethod0);
      assertEquals(1, objectArray0.length);
      assertNotNull(invocationImpl0);
      assertEquals((-2174), invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      
      InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocationImpl0);
      assertEquals(1, objectArray0.length);
      assertNotNull(invocationMatcher0);
      assertEquals((-2174), invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      
      Answer<StringEndsWith> answer0 = (Answer<StringEndsWith>) mock(Answer.class, new ViolatedAssumptionAnswer());
      StubbedInvocationMatcher stubbedInvocationMatcher0 = new StubbedInvocationMatcher(invocationMatcher0, answer0);
      assertEquals(1, objectArray0.length);
      assertNotNull(stubbedInvocationMatcher0);
      assertEquals((-2174), invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      assertFalse(stubbedInvocationMatcher0.wasUsed());
      
      // Undeclared exception!
      try { 
        stubbedInvocationMatcher0.hasSimilarMethod(invocationImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.internal.invocation.InvocationMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockitoMethodProxy mockitoMethodProxy0 = mock(MockitoMethodProxy.class, new ViolatedAssumptionAnswer());
      CleanTraceRealMethod cleanTraceRealMethod0 = new CleanTraceRealMethod(mockitoMethodProxy0);
      assertNotNull(cleanTraceRealMethod0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      MockitoMethod mockitoMethod0 = mock(MockitoMethod.class, new ViolatedAssumptionAnswer());
      doReturn((Method) null, (Method) null).when(mockitoMethod0).getJavaMethod();
      doReturn(false).when(mockitoMethod0).isVarArgs();
      Object[] objectArray0 = new Object[9];
      InvocationImpl invocationImpl0 = new InvocationImpl(object0, mockitoMethod0, objectArray0, 1, cleanTraceRealMethod0);
      assertEquals(9, objectArray0.length);
      assertNotNull(invocationImpl0);
      assertFalse(invocationImpl0.isVerified());
      assertEquals(1, invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      
      InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocationImpl0);
      assertEquals(9, objectArray0.length);
      assertNotNull(invocationMatcher0);
      assertFalse(invocationImpl0.isVerified());
      assertEquals(1, invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      
      // Undeclared exception!
      try { 
        invocationMatcher0.hasSameMethod(invocationImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.internal.invocation.InvocationMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockitoMethod mockitoMethod0 = mock(MockitoMethod.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(mockitoMethod0).isVarArgs();
      Object[] objectArray0 = new Object[1];
      IsNull<IsEqualIgnoringCase> isNull0 = new IsNull<IsEqualIgnoringCase>();
      assertNotNull(isNull0);
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(isNull0);
      assertNotNull(localizedMatcher0);
      
      InvocationImpl invocationImpl0 = new InvocationImpl(localizedMatcher0, mockitoMethod0, objectArray0, (-342), (RealMethod) null);
      assertEquals(1, objectArray0.length);
      assertNotNull(invocationImpl0);
      assertFalse(invocationImpl0.isVerified());
      assertEquals((-342), invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      
      InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocationImpl0);
      assertEquals(1, objectArray0.length);
      assertNotNull(invocationMatcher0);
      assertFalse(invocationImpl0.isVerified());
      assertEquals((-342), invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      
      List<Matcher> list0 = (List<Matcher>)invocationMatcher0.getMatchers();
      assertEquals(1, objectArray0.length);
      assertNotNull(list0);
      assertFalse(invocationImpl0.isVerified());
      assertEquals((-342), invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      InvocationMatcher invocationMatcher1 = new InvocationMatcher((Invocation) null, list0);
      assertEquals(1, objectArray0.length);
      assertNotNull(invocationMatcher1);
      assertFalse(invocationImpl0.isVerified());
      assertEquals((-342), invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(invocationMatcher1.equals((Object)invocationMatcher0));
      
      // Undeclared exception!
      try { 
        invocationMatcher1.getMethod();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.internal.invocation.InvocationMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Stack<Invocation> stack0 = new Stack<Invocation>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      boolean boolean0 = stack0.add((Invocation) null);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[null]", stack0.toString());
      
      // Undeclared exception!
      try { 
        InvocationMatcher.createFrom(stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.internal.invocation.InvocationMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockitoMethodProxy mockitoMethodProxy0 = mock(MockitoMethodProxy.class, new ViolatedAssumptionAnswer());
      CleanTraceRealMethod cleanTraceRealMethod0 = new CleanTraceRealMethod(mockitoMethodProxy0);
      assertNotNull(cleanTraceRealMethod0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      MockitoMethod mockitoMethod0 = mock(MockitoMethod.class, new ViolatedAssumptionAnswer());
      doReturn((Method) null).when(mockitoMethod0).getJavaMethod();
      doReturn(false).when(mockitoMethod0).isVarArgs();
      InvocationImpl invocationImpl0 = new InvocationImpl(object0, mockitoMethod0, (Object[]) null, (-354), cleanTraceRealMethod0);
      assertNotNull(invocationImpl0);
      assertEquals((-354), invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      
      InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocationImpl0);
      assertNotNull(invocationMatcher0);
      assertEquals((-354), invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      
      Answer<IsInstanceOf> answer0 = (Answer<IsInstanceOf>) mock(Answer.class, new ViolatedAssumptionAnswer());
      StubbedInvocationMatcher stubbedInvocationMatcher0 = new StubbedInvocationMatcher(invocationMatcher0, answer0);
      assertNotNull(stubbedInvocationMatcher0);
      assertEquals((-354), invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      assertFalse(stubbedInvocationMatcher0.wasUsed());
      
      // Undeclared exception!
      try { 
        stubbedInvocationMatcher0.captureArgumentsFrom(invocationImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.internal.invocation.InvocationMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InvocationMatcher invocationMatcher0 = null;
      try {
        invocationMatcher0 = new InvocationMatcher((Invocation) null, (List<Matcher>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InvocationMatcher invocationMatcher0 = null;
      try {
        invocationMatcher0 = new InvocationMatcher((Invocation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.internal.invocation.InvocationMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Stack<Invocation> stack0 = new Stack<Invocation>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      
      MockitoMethodProxy mockitoMethodProxy0 = mock(MockitoMethodProxy.class, new ViolatedAssumptionAnswer());
      CleanTraceRealMethod cleanTraceRealMethod0 = new CleanTraceRealMethod(mockitoMethodProxy0);
      assertNotNull(cleanTraceRealMethod0);
      
      MockitoMethod mockitoMethod0 = mock(MockitoMethod.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(mockitoMethod0).isVarArgs();
      IsCloseTo isCloseTo0 = new IsCloseTo((-5494.78583790229), 0.0);
      assertNotNull(isCloseTo0);
      
      Object[] objectArray0 = new Object[1];
      InvocationImpl invocationImpl0 = new InvocationImpl(isCloseTo0, mockitoMethod0, objectArray0, (-2150), cleanTraceRealMethod0);
      assertEquals(1, objectArray0.length);
      assertNotNull(invocationImpl0);
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertEquals((-2150), invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isVerified());
      
      boolean boolean0 = stack0.add((Invocation) invocationImpl0);
      assertEquals(1, objectArray0.length);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertEquals((-2150), invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isVerified());
      
      List<InvocationMatcher> list0 = InvocationMatcher.createFrom(stack0);
      assertNotNull(list0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Stack<Invocation> stack0 = new Stack<Invocation>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      List<InvocationMatcher> list0 = InvocationMatcher.createFrom(stack0);
      assertNotNull(list0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockitoMethodProxy mockitoMethodProxy0 = mock(MockitoMethodProxy.class, new ViolatedAssumptionAnswer());
      CleanTraceRealMethod cleanTraceRealMethod0 = new CleanTraceRealMethod(mockitoMethodProxy0);
      assertNotNull(cleanTraceRealMethod0);
      
      MockitoMethod mockitoMethod0 = mock(MockitoMethod.class, new ViolatedAssumptionAnswer());
      doReturn((Method) null, (Method) null).when(mockitoMethod0).getJavaMethod();
      doReturn(false).when(mockitoMethod0).isVarArgs();
      IsCloseTo isCloseTo0 = new IsCloseTo((-5494.78583790229), 0.0);
      assertNotNull(isCloseTo0);
      
      Object[] objectArray0 = new Object[1];
      InvocationImpl invocationImpl0 = new InvocationImpl(isCloseTo0, mockitoMethod0, objectArray0, (-2150), cleanTraceRealMethod0);
      assertEquals(1, objectArray0.length);
      assertNotNull(invocationImpl0);
      assertFalse(invocationImpl0.isVerified());
      assertEquals((-2150), invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      
      InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocationImpl0);
      assertEquals(1, objectArray0.length);
      assertNotNull(invocationMatcher0);
      assertFalse(invocationImpl0.isVerified());
      assertEquals((-2150), invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      
      Answer<String> answer0 = (Answer<String>) mock(Answer.class, new ViolatedAssumptionAnswer());
      StubbedInvocationMatcher stubbedInvocationMatcher0 = new StubbedInvocationMatcher(invocationMatcher0, answer0);
      assertEquals(1, objectArray0.length);
      assertNotNull(stubbedInvocationMatcher0);
      assertFalse(invocationImpl0.isVerified());
      assertEquals((-2150), invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(stubbedInvocationMatcher0.wasUsed());
      
      // Undeclared exception!
      try { 
        stubbedInvocationMatcher0.matches(invocationImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.internal.invocation.InvocationMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockitoMethodProxy mockitoMethodProxy0 = mock(MockitoMethodProxy.class, new ViolatedAssumptionAnswer());
      Invocation invocation0 = mock(Invocation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(invocation0).getMock();
      MockitoMethod mockitoMethod0 = mock(MockitoMethod.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(mockitoMethod0).isVarArgs();
      DefaultRealMethod defaultRealMethod0 = new DefaultRealMethod(mockitoMethodProxy0);
      assertNotNull(defaultRealMethod0);
      
      StringEndsWith stringEndsWith0 = new StringEndsWith("VEH&q");
      assertNotNull(stringEndsWith0);
      
      InvocationImpl invocationImpl0 = new InvocationImpl(stringEndsWith0, mockitoMethod0, (Object[]) null, 584, defaultRealMethod0);
      assertNotNull(invocationImpl0);
      assertEquals(584, invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      
      InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocationImpl0);
      assertNotNull(invocationMatcher0);
      assertEquals(584, invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      
      boolean boolean0 = invocationMatcher0.matches(invocation0);
      assertFalse(boolean0);
      assertEquals(584, invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockitoMethodProxy mockitoMethodProxy0 = mock(MockitoMethodProxy.class, new ViolatedAssumptionAnswer());
      MockitoMethod mockitoMethod0 = mock(MockitoMethod.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(mockitoMethod0).isVarArgs();
      DefaultRealMethod defaultRealMethod0 = new DefaultRealMethod(mockitoMethodProxy0);
      assertNotNull(defaultRealMethod0);
      
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      InvocationImpl invocationImpl0 = new InvocationImpl(object0, mockitoMethod0, objectArray0, (-2174), defaultRealMethod0);
      assertEquals(1, objectArray0.length);
      assertNotNull(invocationImpl0);
      assertEquals((-2174), invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      
      InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocationImpl0);
      assertEquals(1, objectArray0.length);
      assertNotNull(invocationMatcher0);
      assertEquals((-2174), invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      
      // Undeclared exception!
      try { 
        invocationMatcher0.toString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockitoMethodProxy mockitoMethodProxy0 = mock(MockitoMethodProxy.class, new ViolatedAssumptionAnswer());
      MockitoMethod mockitoMethod0 = mock(MockitoMethod.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(mockitoMethod0).isVarArgs();
      DefaultRealMethod defaultRealMethod0 = new DefaultRealMethod(mockitoMethodProxy0);
      assertNotNull(defaultRealMethod0);
      
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      InvocationImpl invocationImpl0 = new InvocationImpl(object0, mockitoMethod0, objectArray0, (-2174), defaultRealMethod0);
      assertEquals(1, objectArray0.length);
      assertNotNull(invocationImpl0);
      assertFalse(invocationImpl0.isVerified());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertEquals((-2174), invocationImpl0.getSequenceNumber());
      
      InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocationImpl0);
      assertEquals(1, objectArray0.length);
      assertNotNull(invocationMatcher0);
      assertFalse(invocationImpl0.isVerified());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertEquals((-2174), invocationImpl0.getSequenceNumber());
      
      Location location0 = invocationMatcher0.getLocation();
      assertEquals(1, objectArray0.length);
      assertNotNull(location0);
      assertFalse(invocationImpl0.isVerified());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertEquals((-2174), invocationImpl0.getSequenceNumber());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockitoMethodProxy mockitoMethodProxy0 = mock(MockitoMethodProxy.class, new ViolatedAssumptionAnswer());
      MockitoMethod mockitoMethod0 = mock(MockitoMethod.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(mockitoMethod0).isVarArgs();
      DefaultRealMethod defaultRealMethod0 = new DefaultRealMethod(mockitoMethodProxy0);
      assertNotNull(defaultRealMethod0);
      
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      InvocationImpl invocationImpl0 = new InvocationImpl(object0, mockitoMethod0, objectArray0, (-2174), defaultRealMethod0);
      assertEquals(1, objectArray0.length);
      assertNotNull(invocationImpl0);
      assertEquals((-2174), invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      
      InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocationImpl0);
      assertEquals(1, objectArray0.length);
      assertNotNull(invocationMatcher0);
      assertEquals((-2174), invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      
      Answer<StringEndsWith> answer0 = (Answer<StringEndsWith>) mock(Answer.class, new ViolatedAssumptionAnswer());
      StubbedInvocationMatcher stubbedInvocationMatcher0 = new StubbedInvocationMatcher(invocationMatcher0, answer0);
      assertEquals(1, objectArray0.length);
      assertNotNull(stubbedInvocationMatcher0);
      assertEquals((-2174), invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      assertFalse(stubbedInvocationMatcher0.wasUsed());
      
      List<Matcher> list0 = (List<Matcher>)stubbedInvocationMatcher0.getMatchers();
      assertEquals(1, objectArray0.length);
      assertNotNull(list0);
      assertEquals((-2174), invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      assertFalse(stubbedInvocationMatcher0.wasUsed());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      InvocationMatcher invocationMatcher1 = new InvocationMatcher((Invocation) null, list0);
      assertEquals(1, objectArray0.length);
      assertNotNull(invocationMatcher1);
      assertEquals((-2174), invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      assertFalse(stubbedInvocationMatcher0.wasUsed());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(invocationMatcher1.equals((Object)invocationMatcher0));
      
      // Undeclared exception!
      try { 
        invocationMatcher1.getLocation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.internal.invocation.InvocationMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockitoMethodProxy mockitoMethodProxy0 = mock(MockitoMethodProxy.class, new ViolatedAssumptionAnswer());
      MockitoMethod mockitoMethod0 = mock(MockitoMethod.class, new ViolatedAssumptionAnswer());
      doReturn((Method) null).when(mockitoMethod0).getJavaMethod();
      doReturn(false).when(mockitoMethod0).isVarArgs();
      DefaultRealMethod defaultRealMethod0 = new DefaultRealMethod(mockitoMethodProxy0);
      assertNotNull(defaultRealMethod0);
      
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      InvocationImpl invocationImpl0 = new InvocationImpl(object0, mockitoMethod0, objectArray0, (-2174), defaultRealMethod0);
      assertEquals(1, objectArray0.length);
      assertNotNull(invocationImpl0);
      assertEquals((-2174), invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isVerified());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      
      InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocationImpl0);
      assertEquals(1, objectArray0.length);
      assertNotNull(invocationMatcher0);
      assertEquals((-2174), invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isVerified());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      
      Method method0 = invocationMatcher0.getMethod();
      assertEquals(1, objectArray0.length);
      assertNull(method0);
      assertEquals((-2174), invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isVerified());
      assertFalse(invocationImpl0.isIgnoredForVerification());
  }
}
