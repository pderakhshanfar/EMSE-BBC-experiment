/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:52:16 GMT 2021
 */

package org.apache.commons.math3.analysis.differentiation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.math3.analysis.differentiation.DSCompiler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DSCompiler_ESTest extends DSCompiler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[5];
      dSCompiler0.asinh(doubleArray0, 0, doubleArray0, 0);
      // Undeclared exception!
      try { 
        dSCompiler0.multiply(doubleArray0, (-2226), doubleArray0, 1139, doubleArray0, 1139);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2226
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      double[] doubleArray0 = new double[8];
      dSCompiler0.taylor(doubleArray0, 1, doubleArray0);
      dSCompiler0.compose(doubleArray0, 0, doubleArray0, doubleArray0, 0);
      // Undeclared exception!
      try { 
        dSCompiler0.acos(doubleArray0, 52, doubleArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 52
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      double[] doubleArray0 = new double[8];
      dSCompiler0.taylor(doubleArray0, 1, doubleArray0);
      dSCompiler0.rootN(doubleArray0, 3, 3, doubleArray0, 0);
      int int0 = (-172);
      // Undeclared exception!
      try { 
        dSCompiler0.exp(doubleArray0, (-172), doubleArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -172
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 0;
      int int1 = 1486;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 1486);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1486;
      // Undeclared exception!
      dSCompiler0.atanh(doubleArray0, 0, doubleArray0, 1486);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      double[] doubleArray0 = new double[8];
      dSCompiler0.taylor(doubleArray0, 1, doubleArray0);
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(1, 1);
      dSCompiler1.log(doubleArray0, 1, doubleArray0, 1);
      DSCompiler.getCompiler(0, 0);
      // Undeclared exception!
      try { 
        dSCompiler1.acos(doubleArray0, 1, doubleArray0, (-2796));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2796
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[5];
      dSCompiler0.atan2(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      doubleArray0[0] = (double) 0;
      doubleArray0[3] = (double) 0;
      dSCompiler0.cosh(doubleArray0, 0, doubleArray0, 0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) 0;
      dSCompiler0.remainder(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      dSCompiler0.sinh(doubleArray0, 0, doubleArray0, 0);
      dSCompiler0.cosh(doubleArray0, 0, doubleArray0, 0);
      dSCompiler0.cos(doubleArray0, 0, doubleArray0, 0);
      dSCompiler0.getFreeParameters();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      int int1 = 0;
      DSCompiler.getCompiler(0, 3);
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (double) 3;
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        dSCompiler0.log(doubleArray0, 0, doubleArray1, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 0;
      DSCompiler.getCompiler(0, 0);
      int int1 = 2493;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 2493);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 2493;
      // Undeclared exception!
      dSCompiler0.asinh(doubleArray0, 0, doubleArray0, 0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[5];
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      dSCompiler1.acosh(doubleArray0, 0, doubleArray0, 0);
      DSCompiler.getCompiler(0, 3);
      dSCompiler0.getPartialDerivativeOrders(0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 30;
      doubleArray1[1] = (double) 3;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 3;
      doubleArray1[4] = (double) 3;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 3;
      doubleArray1[7] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.atan2(doubleArray0, 30, doubleArray1, 614, doubleArray0, 17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 614
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      double[] doubleArray2 = new double[18];
      doubleArray2[0] = (double) (-551);
      dSCompiler0.pow(doubleArray1, (-551), 0, doubleArray2, 1);
      dSCompiler0.sin(doubleArray2, 7, doubleArray1, 0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      // Undeclared exception!
      try { 
        dSCompiler0.checkCompatibility((DSCompiler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) 0;
      dSCompiler0.remainder(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 492);
      // Undeclared exception!
      dSCompiler1.tan(doubleArray0, 0, doubleArray0, 0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DSCompiler.getCompiler(0, 0);
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 1667);
      DSCompiler.getCompiler(0, 520);
      // Undeclared exception!
      try { 
        dSCompiler0.log10((double[]) null, 520, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[2] = (double) 0;
      int int1 = 1;
      // Undeclared exception!
      try { 
        dSCompiler0.atan2(doubleArray0, 0, doubleArray0, 3, doubleArray0, (-1879));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1879
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) 0;
      dSCompiler0.remainder(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      dSCompiler0.sinh(doubleArray0, 0, doubleArray0, 0);
      dSCompiler0.atan2(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 3);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (-289.425887);
      doubleArray0[5] = (double) 3;
      doubleArray0[6] = (-289.425887);
      doubleArray0[7] = (double) 3;
      dSCompiler1.acosh(doubleArray0, 0, doubleArray0, 3);
      dSCompiler1.atanh(doubleArray0, 3, doubleArray0, 3);
      DSCompiler dSCompiler2 = DSCompiler.getCompiler(0, 0);
      dSCompiler2.pow(doubleArray0, 3, doubleArray0, 0, doubleArray0, 0);
      int int0 = 3;
      // Undeclared exception!
      try { 
        dSCompiler0.atan(doubleArray0, 3, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      int int2 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        DSCompiler.getCompiler(Integer.MAX_VALUE, 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 0;
      DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[4];
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 4);
      // Undeclared exception!
      try { 
        dSCompiler0.atanh(doubleArray0, 0, doubleArray0, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) 0;
      dSCompiler0.log1p(doubleArray0, 0, doubleArray0, 2);
      dSCompiler0.remainder(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      dSCompiler0.sinh(doubleArray0, 0, doubleArray0, 0);
      dSCompiler0.tanh(doubleArray0, 0, doubleArray0, 0);
      dSCompiler0.expm1(doubleArray0, 0, doubleArray0, 0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      dSCompiler0.multiply(doubleArray0, 0, doubleArray0, 0, doubleArray1, 0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-2573.5291678708);
      doubleArray0[2] = 474.6556071;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (-2.3574653182047758E-7);
      doubleArray0[5] = (-2.321064927632431E-160);
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 1;
      dSCompiler0.asinh(doubleArray0, 0, doubleArray0, 1);
      DSCompiler.getCompiler(0, 0);
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 0, 1491, doubleArray0, (-510));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -510
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      double[] doubleArray0 = new double[5];
      dSCompiler0.taylor(doubleArray0, 1, doubleArray0);
      dSCompiler0.pow(doubleArray0, 1, 1, doubleArray0, 1);
      dSCompiler0.remainder(doubleArray0, 1, doubleArray0, 1, doubleArray0, 1);
      dSCompiler0.exp(doubleArray0, 1, doubleArray0, 1);
      // Undeclared exception!
      try { 
        dSCompiler0.atan(doubleArray0, 1, doubleArray0, 518);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 518
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[4];
      dSCompiler0.atanh(doubleArray0, 0, doubleArray0, 0);
      doubleArray0[0] = (double) 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(1, 9);
      double double0 = 0.6043586730957031;
      int int1 = 6157;
      // Undeclared exception!
      try { 
        dSCompiler1.pow(doubleArray0, 0, 0.6043586730957031, doubleArray0, 6157);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6157
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = 0;
      int int1 = 5;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 5);
      int int2 = 1;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 32;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 32;
      doubleArray0[5] = (double) 22;
      doubleArray0[6] = (double) 22;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 1;
      int int3 = 0;
      int int4 = (-1702);
      // Undeclared exception!
      try { 
        dSCompiler0.asinh(doubleArray0, 0, doubleArray0, (-1702));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1702
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 4437;
      // Undeclared exception!
      try { 
        DSCompiler.getCompiler(4437, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      double[] doubleArray0 = new double[5];
      dSCompiler0.taylor(doubleArray0, 1, doubleArray0);
      doubleArray0[1] = (double) 1;
      dSCompiler0.pow(doubleArray0, 1, 1115, doubleArray0, 1);
      dSCompiler0.remainder(doubleArray0, 1, doubleArray0, 1, doubleArray0, 1);
      // Undeclared exception!
      try { 
        dSCompiler0.exp(doubleArray0, 1115, doubleArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1115
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[4];
      dSCompiler0.atanh(doubleArray0, 0, doubleArray0, 0);
      double[] doubleArray1 = null;
      int int1 = 2616;
      // Undeclared exception!
      try { 
        dSCompiler0.cosh((double[]) null, 2616, doubleArray0, 681);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      dSCompiler1.checkCompatibility(dSCompiler0);
      // Undeclared exception!
      try { 
        dSCompiler1.pow(doubleArray0, 1247, 0.0, doubleArray0, 1247);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1247
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      dSCompiler0.log1p(doubleArray0, 0, doubleArray0, 0);
      dSCompiler0.subtract(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      dSCompiler0.log1p(doubleArray0, 0, doubleArray0, 0);
      dSCompiler0.linearCombination((double) 0, doubleArray0, 0, (double) 0, doubleArray0, 0, doubleArray0, 0);
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(28, 0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 28;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 28;
      doubleArray1[5] = (double) 28;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 0;
      dSCompiler1.pow(doubleArray1, 0, (-2251), doubleArray1, 2);
      // Undeclared exception!
      try { 
        DSCompiler.getCompiler((-1), (-645));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      dSCompiler0.getOrder();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      int int0 = (-2449);
      double[] doubleArray1 = null;
      int int1 = 77;
      // Undeclared exception!
      try { 
        dSCompiler0.tan(doubleArray0, 2, (double[]) null, 782);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 22;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 22;
      doubleArray0[3] = (double) 0;
      int int0 = 1;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 22;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 1;
      int int1 = 32;
      // Undeclared exception!
      try { 
        dSCompiler0.asinh(doubleArray0, 1, doubleArray1, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      dSCompiler0.getFreeParameters();
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        dSCompiler0.sinh(doubleArray0, 2, doubleArray0, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      dSCompiler0.exp(doubleArray0, 0, doubleArray0, 0);
      dSCompiler0.taylor(doubleArray0, 0, doubleArray0);
      doubleArray0[0] = (double) 0;
      dSCompiler0.asin(doubleArray0, 0, doubleArray0, 0);
      // Undeclared exception!
      try { 
        dSCompiler0.atan2((double[]) null, 2028, (double[]) null, 2028, (double[]) null, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) 0;
      dSCompiler0.remainder(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      dSCompiler0.sinh(doubleArray0, 0, doubleArray0, 0);
      // Undeclared exception!
      try { 
        dSCompiler0.atan2(doubleArray0, 0, doubleArray0, 0, doubleArray0, 4392);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4392
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      dSCompiler0.cos(doubleArray0, 0, doubleArray0, 0);
      dSCompiler0.log1p(doubleArray0, 0, doubleArray0, 0);
      dSCompiler0.subtract(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      dSCompiler0.log1p(doubleArray0, 0, doubleArray0, 0);
      int int0 = 747;
      dSCompiler0.acos(doubleArray0, 0, doubleArray0, 0);
      // Undeclared exception!
      try { 
        dSCompiler0.log10(doubleArray0, 747, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 747
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 0);
      double[] doubleArray0 = null;
      int int1 = 4124;
      // Undeclared exception!
      try { 
        dSCompiler0.subtract((double[]) null, 61, (double[]) null, 61, (double[]) null, 4124);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      dSCompiler0.exp(doubleArray0, 0, doubleArray0, 0);
      dSCompiler0.taylor(doubleArray0, 0, doubleArray0);
      doubleArray0[0] = (double) 0;
      dSCompiler0.asin(doubleArray0, 0, doubleArray0, 0);
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.rootN((double[]) null, 54, 3, (double[]) null, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DSCompiler.getCompiler(3, 3);
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[4] = (-289.425887);
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (-289.425887);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 3;
      doubleArray0[6] = (-289.425887);
      doubleArray0[7] = (double) 3;
      dSCompiler0.acosh(doubleArray0, 0, doubleArray0, 3);
      dSCompiler0.atanh(doubleArray0, 3, doubleArray0, 3);
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      dSCompiler1.sinh(doubleArray0, 0, doubleArray0, 0);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0;
      dSCompiler0.compose(doubleArray1, 0, doubleArray0, doubleArray0, 1);
      dSCompiler0.asin(doubleArray0, 1, doubleArray1, 0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          int int0 = 0;
          int int1 = 1292;
          DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 1292);
          double[] doubleArray0 = new double[5];
          doubleArray0[0] = (double) 0;
          doubleArray0[1] = (double) 0;
          doubleArray0[2] = (double) 1292;
          doubleArray0[3] = (double) 0;
          doubleArray0[4] = (double) 1292;
          int int2 = 3;
          // Undeclared exception!
          dSCompiler0.asin(doubleArray0, 3, doubleArray0, 3);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      dSCompiler0.rootN(doubleArray0, 0, 0, doubleArray0, 0);
      dSCompiler0.pow(doubleArray0, 0, 0.0, doubleArray0, 1);
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(3, 1);
      int int0 = 1247;
      try { 
        dSCompiler1.checkCompatibility(dSCompiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      double[] doubleArray1 = new double[4];
      dSCompiler0.atanh(doubleArray1, 0, doubleArray1, 0);
      doubleArray1[0] = (double) 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(1, 5);
      // Undeclared exception!
      try { 
        dSCompiler1.rootN(doubleArray1, 1, 1, doubleArray1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      dSCompiler0.cos(doubleArray0, 0, doubleArray0, 0);
      doubleArray0[1] = (double) 0;
      dSCompiler0.asin(doubleArray0, 0, doubleArray0, 0);
      dSCompiler0.tanh(doubleArray0, 0, doubleArray0, 0);
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.pow((double[]) null, 0, (double) 0, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      dSCompiler0.log1p(doubleArray0, 0, doubleArray0, 0);
      dSCompiler0.subtract(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      dSCompiler0.log1p(doubleArray0, 0, doubleArray0, 0);
      dSCompiler0.linearCombination((double) 0, doubleArray0, 0, (double) 0, doubleArray0, 0, doubleArray0, 0);
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(863, 0);
      dSCompiler1.remainder(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      // Undeclared exception!
      try { 
        dSCompiler1.cosh(doubleArray0, (-1808), doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1808
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 3;
      DSCompiler.getCompiler(3, 3);
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[4] = (-289.425887);
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (-289.425887);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 3;
      doubleArray0[6] = (-289.425887);
      doubleArray0[7] = (double) 3;
      dSCompiler0.acosh(doubleArray0, 0, doubleArray0, 3);
      dSCompiler0.atanh(doubleArray0, 3, doubleArray0, 3);
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      dSCompiler1.sinh(doubleArray0, 0, doubleArray0, 0);
      // Undeclared exception!
      try { 
        dSCompiler1.rootN(doubleArray0, 3, 0, doubleArray0, 228);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 228
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      dSCompiler0.exp(doubleArray0, 0, doubleArray0, 0);
      dSCompiler0.taylor(doubleArray0, 0, doubleArray0);
      doubleArray0[0] = (double) 0;
      dSCompiler0.asin(doubleArray0, 0, doubleArray0, 0);
      dSCompiler0.tan(doubleArray0, 0, doubleArray0, 0);
      int int1 = 0;
      DSCompiler.getCompiler(601, 0);
      int int2 = (-1160);
      // Undeclared exception!
      try { 
        dSCompiler0.tanh((double[]) null, (-1160), (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 3;
      DSCompiler.getCompiler(3, 3);
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[4] = (-289.425887);
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (-289.425887);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 3;
      doubleArray0[6] = (-289.425887);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-289.425887);
      doubleArray1[1] = (-289.425887);
      doubleArray1[2] = (-289.425887);
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 3;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 0;
      doubleArray1[8] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.tanh(doubleArray1, 3, doubleArray1, 136);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 136
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = 0;
      DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[2];
      int int1 = 17;
      int int2 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(17, 2);
      // Undeclared exception!
      try { 
        dSCompiler0.log1p(doubleArray0, 0, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DSCompiler.getCompiler(0, 0);
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      int int0 = 1752;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 1752);
      try { 
        dSCompiler0.checkCompatibility(dSCompiler1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 1,752
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      double[] doubleArray0 = new double[5];
      int int1 = 0;
      dSCompiler0.log1p(doubleArray0, 2, doubleArray0, 2);
      int int2 = 3616;
      // Undeclared exception!
      try { 
        dSCompiler0.subtract(doubleArray0, 1, doubleArray0, (-404), doubleArray0, 3616);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -404
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DSCompiler.getCompiler(3, 3);
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[4] = (-289.425887);
      doubleArray0[2] = (double) 3;
      double[] doubleArray1 = null;
      int int1 = 1618;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 1618;
      doubleArray2[2] = (double) 3;
      doubleArray2[3] = (double) 1618;
      doubleArray2[4] = (double) 3;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) 3;
      doubleArray2[7] = 1312.37350415738;
      doubleArray2[8] = (double) 0;
      int int2 = 60;
      // Undeclared exception!
      try { 
        dSCompiler0.cos(doubleArray2, 0, (double[]) null, 60);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 0;
      DSCompiler.getCompiler(0, 0);
      double double0 = 0.0;
      int int1 = 1;
      int int2 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 0, doubleArray0, 3, doubleArray0, 67);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 67
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 3;
      DSCompiler.getCompiler(3, 3);
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[4] = (-289.425887);
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (-289.425887);
      doubleArray0[4] = (double) 3;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 3, (-1539), doubleArray0, (-1539));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1539
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      DSCompiler.getCompiler(0, 27);
      doubleArray0[5] = (double) 0;
      int int0 = (-1);
      int int1 = 1;
      int int2 = 1659;
      // Undeclared exception!
      try { 
        dSCompiler0.atan2(doubleArray0, 1, doubleArray0, 0, doubleArray0, 33);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      int int1 = 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 3);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[4] = (-289.425887);
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (-289.425887);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 3;
      doubleArray0[6] = (-289.425887);
      doubleArray0[7] = (double) 3;
      dSCompiler1.acosh(doubleArray0, 0, doubleArray0, 3);
      dSCompiler1.atanh(doubleArray0, 3, doubleArray0, 3);
      DSCompiler dSCompiler2 = DSCompiler.getCompiler(0, 0);
      dSCompiler2.pow(doubleArray0, 3, doubleArray0, 0, doubleArray0, 0);
      int int2 = 3;
      // Undeclared exception!
      try { 
        dSCompiler0.tan(doubleArray0, 3, doubleArray0, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 2;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 0);
      // Undeclared exception!
      try { 
        dSCompiler0.expm1((double[]) null, 729, (double[]) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = null;
      int int1 = 1618;
      int int2 = (-322);
      // Undeclared exception!
      try { 
        dSCompiler0.sin((double[]) null, (-322), doubleArray0, (-322));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      // Undeclared exception!
      try { 
        dSCompiler0.getPartialDerivativeIndex((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 1);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.acosh((double[]) null, 0, (double[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      DSCompiler.getCompiler(0, 0);
      int[] intArray0 = new int[0];
      dSCompiler0.getPartialDerivativeIndex(intArray0);
      dSCompiler0.getPartialDerivativeIndex(intArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      dSCompiler0.asin(doubleArray0, 0, doubleArray0, 0);
      dSCompiler0.tanh(doubleArray0, 0, doubleArray0, 0);
      int int1 = 323;
      double[] doubleArray1 = null;
      int int2 = 1618;
      // Undeclared exception!
      try { 
        dSCompiler0.cos((double[]) null, 0, doubleArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.taylor((double[]) null, 0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 0;
      int int1 = 1013;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 1013);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.exp((double[]) null, 0, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 3;
      // Undeclared exception!
      try { 
        dSCompiler0.asinh(doubleArray0, 3, doubleArray0, 22);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 22
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 12);
      dSCompiler1.log10(doubleArray0, 0, doubleArray0, 0);
      try { 
        dSCompiler1.checkCompatibility(dSCompiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 12 != 0
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[8];
      dSCompiler0.expm1(doubleArray0, 1, doubleArray0, 0);
      int int0 = 4432;
      // Undeclared exception!
      try { 
        dSCompiler0.atanh(doubleArray0, 0, doubleArray0, 4432);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4432
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-967);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 69;
      doubleArray0[5] = (double) (-967);
      doubleArray0[6] = 2319.72;
      doubleArray0[7] = (double) 0;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 69;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 550;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = 4499.9604963951;
      dSCompiler0.add(doubleArray0, 0, doubleArray1, 0, doubleArray0, 2);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      int int1 = 858;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 858;
      doubleArray0[3] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.expm1(doubleArray0, 0, doubleArray0, 858);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 858
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 0;
      DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 1650);
      // Undeclared exception!
      try { 
        dSCompiler0.sinh(doubleArray0, 0, doubleArray0, 1650);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1650
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[2];
      int int0 = 3276;
      // Undeclared exception!
      try { 
        dSCompiler0.taylor(doubleArray0, 3276, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3276
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertEquals(20, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      int int1 = 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 3);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(3, dSCompiler1.getOrder());
      assertNotNull(dSCompiler1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[4] = (-289.425887);
      DSCompiler dSCompiler2 = DSCompiler.getCompiler(3, 0);
      assertFalse(dSCompiler2.equals((Object)dSCompiler0));
      assertFalse(dSCompiler2.equals((Object)dSCompiler1));
      assertNotSame(dSCompiler2, dSCompiler0);
      assertNotSame(dSCompiler2, dSCompiler1);
      assertEquals(1, dSCompiler2.getSize());
      assertEquals(3, dSCompiler2.getFreeParameters());
      assertEquals(0, dSCompiler2.getOrder());
      assertNotNull(dSCompiler2);
      
      int int2 = (-1561);
      // Undeclared exception!
      try { 
        dSCompiler0.sin(doubleArray0, 0, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      dSCompiler0.log1p(doubleArray0, 0, doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      dSCompiler0.subtract(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      dSCompiler0.log1p(doubleArray0, 0, doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 0, doubleArray0, (-1517), doubleArray0, 349);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1517
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 5);
      assertEquals(5, dSCompiler0.getOrder());
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.cosh(doubleArray0, 1, doubleArray1, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[6];
      double double0 = 0.5;
      doubleArray0[0] = 0.5;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      int int2 = 1;
      dSCompiler0.log(doubleArray0, 1, doubleArray0, 1);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.5, Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      int int3 = 3;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(3, 0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(3, dSCompiler1.getFreeParameters());
      assertNotNull(dSCompiler1);
      
      // Undeclared exception!
      try { 
        dSCompiler1.getPartialDerivativeOrders(2127);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2127
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      dSCompiler0.acosh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      dSCompiler0.atanh(doubleArray1, 0, doubleArray1, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      doubleArray1[0] = (double) 0;
      dSCompiler0.sinh(doubleArray1, 0, doubleArray1, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(1, 5);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(1, dSCompiler1.getFreeParameters());
      assertEquals(5, dSCompiler1.getOrder());
      assertEquals(6, dSCompiler1.getSize());
      assertNotNull(dSCompiler1);
      
      // Undeclared exception!
      try { 
        dSCompiler0.tan(doubleArray1, 0, doubleArray0, (-4471));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4471
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = null;
      int int0 = (-361);
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination(47.78203, (double[]) null, 1281, 0.0, (double[]) null, 1281, (-2407.98619), (double[]) null, 2275, (double[]) null, (-361));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      dSCompiler0.exp(doubleArray0, 0, doubleArray0, 0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      int int0 = (-2638);
      double[] doubleArray1 = null;
      int int1 = 45;
      // Undeclared exception!
      try { 
        dSCompiler0.pow((double[]) null, 45, 45, (double[]) null, 45);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      dSCompiler0.pow(doubleArray0, 0, 0.0, doubleArray0, 1);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      dSCompiler0.acosh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      dSCompiler0.atanh(doubleArray1, 0, doubleArray1, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      int int1 = (-2638);
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 1330, (double) 0, doubleArray0, 1330);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1330
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertEquals(20, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3;
      double[] doubleArray1 = null;
      int int0 = (-157);
      int int1 = 33;
      // Undeclared exception!
      DSCompiler.getCompiler(33, 3655);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = null;
      int int0 = 1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 1618;
      doubleArray2[1] = (double) 1618;
      doubleArray2[2] = (double) 1618;
      dSCompiler0.divide(doubleArray0, 1, doubleArray0, 1214, doubleArray2, 0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1618.0, 1618.0}, doubleArray2, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      int int1 = (-750);
      int int2 = 28;
      // Undeclared exception!
      try { 
        dSCompiler0.divide(doubleArray2, 1214, doubleArray2, 10, doubleArray0, 28);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1214
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(1650, 0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(1650, dSCompiler1.getFreeParameters());
      assertEquals(0, dSCompiler1.getOrder());
      assertNotNull(dSCompiler1);
      
      doubleArray0[1] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler1.sinh(doubleArray0, 0, doubleArray0, 1650);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1650
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      double double0 = dSCompiler0.taylor(doubleArray0, 1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      
      doubleArray0[1] = (double) 1;
      double[] doubleArray1 = null;
      int int1 = 780;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 3533, 1115, (double[]) null, 3533);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3533
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      // Undeclared exception!
      try { 
        dSCompiler0.exp(doubleArray0, 2, doubleArray0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      int int2 = 977;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 977);
      assertEquals(977, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 977;
      // Undeclared exception!
      dSCompiler0.acosh(doubleArray0, 0, doubleArray0, 0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      int int1 = 472;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 472);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(472, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertNotNull(dSCompiler1);
      
      double double0 = (-289.425887);
      int int2 = 3596;
      // Undeclared exception!
      try { 
        dSCompiler1.asinh((double[]) null, (-2589), (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      int int1 = 12;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 12);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(12, dSCompiler1.getOrder());
      assertNotNull(dSCompiler1);
      
      try { 
        dSCompiler1.checkCompatibility(dSCompiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 12 != 0
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      dSCompiler0.exp(doubleArray0, 0, doubleArray0, 0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      doubleArray0[1] = (double) 0;
      dSCompiler0.asin(doubleArray0, 0, doubleArray0, 0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1.5707963267948966, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray1 = null;
      int int1 = 282;
      double double0 = (-2987.427451752337);
      int int2 = 156;
      // Undeclared exception!
      try { 
        dSCompiler0.log1p((double[]) null, 282, (double[]) null, 282);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      dSCompiler0.log1p(doubleArray0, 0, doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      int int0 = (-3743);
      int int1 = 390;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 487, 0.0, doubleArray0, 487);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 487
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      dSCompiler0.exp(doubleArray0, 0, doubleArray0, 0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      doubleArray0[1] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 0, 0, doubleArray0, (-2638));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2638
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(20, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 3);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(3, dSCompiler1.getOrder());
      assertNotNull(dSCompiler1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-289.425887);
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (-289.425887);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 3;
      doubleArray0[6] = (-289.425887);
      doubleArray0[7] = (double) 3;
      doubleArray0[8] = (double) 3;
      dSCompiler1.acosh(doubleArray0, 0, doubleArray0, 3);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-289.425887), 3.0, Double.NaN, 0.0, 3.0, (-289.425887), 3.0, 3.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(3, dSCompiler1.getOrder());
      
      dSCompiler1.atanh(doubleArray0, 3, doubleArray0, 3);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-289.425887), 3.0, Double.NaN, 0.0, 3.0, (-289.425887), 3.0, 3.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(3, dSCompiler1.getOrder());
      
      int int0 = 3714;
      // Undeclared exception!
      DSCompiler.getCompiler(3714, 1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      // Undeclared exception!
      try { 
        dSCompiler0.expm1(doubleArray0, 858, doubleArray0, 858);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 858
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      int int0 = 27;
      // Undeclared exception!
      try { 
        dSCompiler0.subtract(doubleArray0, 0, doubleArray0, 613, doubleArray0, 613);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 613
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.pow((double[]) null, 3016, (double) (-3743), (double[]) null, 390);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.acos((double[]) null, 0, doubleArray0, (-157));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 3441.428857735403;
      dSCompiler0.exp(doubleArray0, 0, doubleArray0, 0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 3441.428857735403}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double double0 = dSCompiler0.taylor(doubleArray0, 0, doubleArray0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 3441.428857735403}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      int int1 = 1;
      dSCompiler0.asin(doubleArray0, 1, doubleArray0, 0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 3441.428857735403}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      int int2 = 3;
      int int3 = 282;
      // Undeclared exception!
      try { 
        dSCompiler0.sinh((double[]) null, 3, doubleArray0, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = null;
      int int1 = 228;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 228;
      doubleArray1[1] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.pow((double[]) null, 0, (double[]) null, 228, doubleArray1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      int int0 = dSCompiler0.getOrder();
      assertEquals(0, int0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      int int1 = (-2449);
      double[] doubleArray1 = null;
      int int2 = 89;
      // Undeclared exception!
      try { 
        dSCompiler0.tan(doubleArray0, 0, (double[]) null, 782);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = 965.02919868712;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      dSCompiler0.compose(doubleArray0, 0, doubleArray0, doubleArray1, 0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 965.02919868712, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      // Undeclared exception!
      try { 
        dSCompiler0.asin(doubleArray1, 1800, doubleArray0, 1800);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1800
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      int int0 = dSCompiler0.getSize();
      assertEquals(1, int0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = new double[10];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-2449);
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) (-2449);
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (-2046.724);
      doubleArray1[5] = (double) (-2449);
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (-47.119305348535);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-2449);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-2449);
      try { 
        dSCompiler0.getPartialDerivativeIndex(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 0
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      dSCompiler0.acosh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      dSCompiler0.atanh(doubleArray1, 0, doubleArray1, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      doubleArray1[0] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.compose(doubleArray1, 0, doubleArray1, doubleArray1, (-1435));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1435
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      dSCompiler0.log1p(doubleArray0, 0, doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      dSCompiler0.subtract(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      dSCompiler0.log1p(doubleArray0, 0, doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      dSCompiler0.linearCombination((double) 0, doubleArray0, 0, (double) 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      // Undeclared exception!
      try { 
        dSCompiler0.remainder(doubleArray0, (-1808), doubleArray0, 0, doubleArray0, (-1808));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1808
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      dSCompiler0.exp(doubleArray0, 0, doubleArray0, 0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double double0 = dSCompiler0.taylor(doubleArray0, 0, doubleArray0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      doubleArray0[1] = (double) 0;
      dSCompiler0.asin(doubleArray0, 0, doubleArray0, 0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1.5707963267948966, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      int int0 = 1503;
      // Undeclared exception!
      try { 
        dSCompiler0.compose((double[]) null, 1503, doubleArray0, (double[]) null, 791);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      dSCompiler0.acosh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      dSCompiler0.atanh(doubleArray1, 0, doubleArray1, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      doubleArray1[0] = (double) 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(1, 5);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(1, dSCompiler1.getFreeParameters());
      assertEquals(5, dSCompiler1.getOrder());
      assertEquals(6, dSCompiler1.getSize());
      assertNotNull(dSCompiler1);
      
      // Undeclared exception!
      try { 
        dSCompiler0.tan(doubleArray1, 0, doubleArray0, (-4471));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4471
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      dSCompiler0.exp(doubleArray0, 0, doubleArray0, 0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double double0 = dSCompiler0.taylor(doubleArray0, 0, doubleArray0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      doubleArray0[1] = (double) 0;
      dSCompiler0.asin(doubleArray0, 0, doubleArray0, 0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1.5707963267948966, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray1 = null;
      int int0 = 650;
      int int1 = 537;
      int int2 = 3;
      // Undeclared exception!
      try { 
        dSCompiler0.sinh(doubleArray0, 282, (double[]) null, 282);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 282
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      dSCompiler0.exp(doubleArray0, 0, doubleArray0, 0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double double0 = dSCompiler0.taylor(doubleArray0, 0, doubleArray0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      doubleArray0[1] = (double) 0;
      dSCompiler0.asin(doubleArray0, 0, doubleArray0, 0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1.5707963267948966, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray1 = null;
      int int0 = 2;
      int int1 = 650;
      int int2 = 537;
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination(1.5707963267948966, (double[]) null, 0, 1.0, (double[]) null, 0, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      int int0 = dSCompiler0.getOrder();
      assertEquals(0, int0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      int int1 = (-2449);
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      int int2 = 1071;
      double double0 = (-1399.0);
      // Undeclared exception!
      try { 
        dSCompiler0.asinh(doubleArray0, 155, (double[]) null, (-4555));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 155
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      dSCompiler0.atanh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      doubleArray0[0] = (double) 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(1, 5);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(5, dSCompiler1.getOrder());
      assertEquals(6, dSCompiler1.getSize());
      assertEquals(1, dSCompiler1.getFreeParameters());
      assertNotNull(dSCompiler1);
      
      dSCompiler0.cosh(doubleArray0, 0, doubleArray0, 0);
      assertFalse(dSCompiler0.equals((Object)dSCompiler1));
      assertNotSame(dSCompiler0, dSCompiler1);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      dSCompiler0.acosh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      dSCompiler0.atanh(doubleArray1, 0, doubleArray1, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      doubleArray1[0] = (double) 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(1, 5);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(6, dSCompiler1.getSize());
      assertEquals(1, dSCompiler1.getFreeParameters());
      assertEquals(5, dSCompiler1.getOrder());
      assertNotNull(dSCompiler1);
      
      // Undeclared exception!
      try { 
        dSCompiler0.getPartialDerivativeOrders((-473));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -473
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      dSCompiler0.exp(doubleArray0, 0, doubleArray0, 0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double double0 = dSCompiler0.taylor(doubleArray0, 0, doubleArray0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      doubleArray0[1] = (double) 0;
      dSCompiler0.asin(doubleArray0, 0, doubleArray0, 0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1.5707963267948966, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray1 = null;
      int int0 = 537;
      // Undeclared exception!
      try { 
        dSCompiler0.add((double[]) null, 2, (double[]) null, 650, doubleArray0, 537);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.asin((double[]) null, 2, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      int int1 = (-1);
      // Undeclared exception!
      try { 
        dSCompiler0.atanh((double[]) null, (-37), (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(537, 0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(537, dSCompiler1.getFreeParameters());
      assertNotNull(dSCompiler1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 537;
      intArray0[3] = 537;
      try { 
        dSCompiler1.getPartialDerivativeIndex(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 537
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertEquals(20, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[7];
      int int1 = (-2449);
      int int2 = 0;
      int int3 = 747;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination((double) 0, doubleArray0, (-221), (-1122.9973), doubleArray0, 3, (double) 0, doubleArray1, 747, doubleArray1, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -221
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      int int1 = 27;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 27);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(27, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertNotNull(dSCompiler1);
      
      doubleArray0[5] = (double) 0;
      double double0 = 0.0;
      int int2 = (-1561);
      // Undeclared exception!
      try { 
        dSCompiler1.rootN(doubleArray0, 12, 3179, doubleArray0, (-1561));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination((double) 0, (double[]) null, 0, (double) 0, (double[]) null, 0, (double) 0, (double[]) null, 0, 730.8871609356111, (double[]) null, 0, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[7];
      dSCompiler0.atan(doubleArray0, 0, doubleArray0, 0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      doubleArray0[0] = (double) 0;
      double double0 = 0.0;
      doubleArray0[1] = 0.0;
      int int1 = 113;
      int int2 = (-1642);
      // Undeclared exception!
      try { 
        DSCompiler.getCompiler((-1642), 113);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      int int1 = 3;
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        dSCompiler0.add(doubleArray0, (-1), doubleArray0, 3859, doubleArray0, 3859);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      int int0 = dSCompiler0.getOrder();
      assertEquals(0, int0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-2449);
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) (-2449);
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (-2046.724);
      int int1 = 3596;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 0, (-3018), doubleArray1, (-2449));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2449
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.remainder((double[]) null, (-789), (double[]) null, 45, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(20, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (-289.425887);
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination((-289.425887), doubleArray0, (-1), (double) (-1), doubleArray0, (-2347), doubleArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      int int0 = 537;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(537, 0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(537, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getOrder());
      assertNotNull(dSCompiler1);
      
      int int1 = 1659;
      // Undeclared exception!
      try { 
        dSCompiler1.atan2(doubleArray0, (-1), doubleArray0, 1, doubleArray0, 1659);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      dSCompiler0.atanh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      doubleArray0[0] = (double) 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(1, 5);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(6, dSCompiler1.getSize());
      assertEquals(1, dSCompiler1.getFreeParameters());
      assertEquals(5, dSCompiler1.getOrder());
      assertNotNull(dSCompiler1);
      
      // Undeclared exception!
      try { 
        dSCompiler0.cosh(doubleArray0, 0, doubleArray0, (-378));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -378
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(20, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (-289.425887);
      int int1 = 3596;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 3596);
      try { 
        dSCompiler0.checkCompatibility(dSCompiler1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      double double0 = dSCompiler0.taylor(doubleArray0, 0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      doubleArray0[1] = (double) 0;
      dSCompiler0.asin(doubleArray0, 0, doubleArray0, 0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      int int1 = 323;
      double[] doubleArray1 = null;
      int int2 = 1618;
      // Undeclared exception!
      try { 
        dSCompiler0.exp(doubleArray0, 2074, (double[]) null, 1618);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2074
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      int int1 = dSCompiler0.getOrder();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-2449);
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) (-2449);
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (-2046.724);
      doubleArray1[5] = (double) (-2449);
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (-47.119305348535);
      // Undeclared exception!
      try { 
        dSCompiler0.acos(doubleArray0, 0, doubleArray1, 747);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 747
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      int int0 = dSCompiler0.getOrder();
      assertEquals(0, int0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      int int1 = (-2449);
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) (-2449);
      doubleArray1[3] = (double) 0;
      int int2 = (-2467);
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray1, (-5028), (-490), doubleArray1, (-2467));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5028
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = 2;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 0);
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      // Undeclared exception!
      try { 
        dSCompiler0.exp(doubleArray0, 0, doubleArray0, (-4017));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4017
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      try { 
        dSCompiler0.getPartialDerivativeIndex(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 1;
      // Undeclared exception!
      try { 
        dSCompiler0.cosh(doubleArray0, 2, doubleArray0, 726);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 726
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[7];
      // Undeclared exception!
      try { 
        dSCompiler0.atan(doubleArray0, 0, doubleArray0, 3039);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3039
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      int int0 = 45;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (-1597.312);
      doubleArray0[3] = (double) 45;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (-1735.2818317759);
      doubleArray0[6] = (double) 0;
      int int1 = 537;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(99, 0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(99, dSCompiler1.getFreeParameters());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertNotNull(dSCompiler1);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (-1597.312);
      doubleArray1[2] = (-1735.2818317759);
      // Undeclared exception!
      try { 
        dSCompiler1.atan2(doubleArray0, 1652, doubleArray1, (-2235), doubleArray1, 45);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2235
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      // Undeclared exception!
      try { 
        dSCompiler0.log10(doubleArray0, 0, doubleArray0, 2175);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2175
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) (-1);
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination((double) 0, doubleArray0, (-1), 0.0, doubleArray1, (-1), (double) (-1), doubleArray0, 14, 0.0, doubleArray1, (-1), doubleArray0, (-3016));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double double0 = (-1597.312);
      int int1 = 45;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-1597.312);
      doubleArray0[3] = (double) 45;
      doubleArray0[4] = (double) 0;
      double double1 = (-1735.2818317759);
      doubleArray0[5] = (-1735.2818317759);
      doubleArray0[6] = (double) 0;
      int int2 = 1652;
      // Undeclared exception!
      try { 
        dSCompiler0.acosh(doubleArray0, 1652, doubleArray0, 1652);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1652
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(1, 2);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(1, dSCompiler1.getFreeParameters());
      assertEquals(2, dSCompiler1.getOrder());
      assertEquals(3, dSCompiler1.getSize());
      assertNotNull(dSCompiler1);
      
      // Undeclared exception!
      try { 
        dSCompiler1.cosh(doubleArray1, 683, doubleArray1, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 683
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = 2;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      int int2 = 0;
      int[] intArray0 = dSCompiler0.getPartialDerivativeOrders(0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertNotNull(intArray0);
      
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        dSCompiler0.asin(doubleArray0, (-1774), doubleArray0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1774
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      int int0 = 0;
      dSCompiler0.sin(doubleArray0, 0, doubleArray0, 0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
      try { 
        dSCompiler0.divide(doubleArray0, 2031, doubleArray0, 3174, doubleArray0, 3174);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2031
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      int int1 = dSCompiler0.getOrder();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      int[] intArray0 = new int[4];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      int int2 = (-2449);
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) (-2449);
      int int3 = 80;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, (-2449), doubleArray0, 80, doubleArray0, (-2449));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2449
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      int int0 = 323;
      double[] doubleArray1 = null;
      int int1 = 1618;
      // Undeclared exception!
      try { 
        dSCompiler0.divide((double[]) null, 0, doubleArray0, 0, (double[]) null, 1618);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(1091, 0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(1091, dSCompiler1.getFreeParameters());
      assertNotNull(dSCompiler1);
      
      // Undeclared exception!
      try { 
        dSCompiler1.tanh((double[]) null, 0, (double[]) null, (-789));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = null;
      int int1 = 802;
      int int2 = (-684);
      int int3 = 0;
      int int4 = 1650;
      // Undeclared exception!
      try { 
        dSCompiler0.log((double[]) null, 0, (double[]) null, 1650);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      int int1 = 0;
      dSCompiler0.log1p(doubleArray0, 0, doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      dSCompiler0.subtract(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      int int2 = 892;
      int int3 = 0;
      int int4 = 2;
      // Undeclared exception!
      try { 
        dSCompiler0.acos(doubleArray0, 2, doubleArray0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      int int1 = 129;
      // Undeclared exception!
      try { 
        dSCompiler0.atanh(doubleArray0, 0, doubleArray0, 129);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 129
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(1650, 0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(1650, dSCompiler1.getFreeParameters());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertNotNull(dSCompiler1);
      
      try { 
        dSCompiler0.checkCompatibility(dSCompiler1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 1,650
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = 1209;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1209, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1209, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double double0 = (-1772.961786);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1209;
      doubleArray0[1] = (double) 1209;
      doubleArray0[2] = (-1772.961786);
      doubleArray0[3] = (double) 1209;
      doubleArray0[4] = 1550.1;
      doubleArray0[5] = (-1772.961786);
      int int2 = 538;
      // Undeclared exception!
      try { 
        dSCompiler0.tanh(doubleArray0, 538, doubleArray0, 2542);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 538
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      dSCompiler0.log1p(doubleArray0, 0, doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      dSCompiler0.subtract(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      // Undeclared exception!
      try { 
        dSCompiler0.log1p(doubleArray0, 892, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 892
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(6, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.atanh(doubleArray0, 2, doubleArray0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.add((double[]) null, 0, (double[]) null, (-1916), (double[]) null, (-789));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      dSCompiler0.sin(doubleArray0, 0, doubleArray0, 0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int int0 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      // Undeclared exception!
      try { 
        dSCompiler0.tan(doubleArray0, 0, doubleArray0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(20, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3;
      double double0 = (-289.425887);
      doubleArray0[1] = (-289.425887);
      int int1 = 3596;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 3, 3, doubleArray0, 3596);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3596
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      int int1 = 709;
      double[] doubleArray0 = new double[0];
      int int2 = 1;
      double double0 = (-2.0);
      int int3 = 0;
      // Undeclared exception!
      try { 
        dSCompiler0.atan(doubleArray0, 0, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      int int1 = dSCompiler0.getOrder();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      int[] intArray0 = new int[4];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) (-2449);
      doubleArray1[3] = (double) (-2449);
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) (-2449);
      // Undeclared exception!
      try { 
        dSCompiler0.cos(doubleArray0, (-2449), doubleArray1, 1071);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2449
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = 2;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      int int2 = 0;
      int[] intArray0 = dSCompiler0.getPartialDerivativeOrders(0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertNotNull(intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      int int3 = (-684);
      int int4 = 1767;
      // Undeclared exception!
      try { 
        dSCompiler0.log(doubleArray0, (-684), doubleArray0, 1767);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -684
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = null;
      int int2 = 802;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 802;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = 0.0;
      double double0 = dSCompiler0.taylor(doubleArray1, 0, (double[]) null);
      assertEquals(802.0, double0, 0.01);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {802.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      // Undeclared exception!
      try { 
        dSCompiler0.atan((double[]) null, 802, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.remainder(doubleArray0, 0, doubleArray1, 683, doubleArray1, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 683
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = 283;
      // Undeclared exception!
      DSCompiler.getCompiler(283, 283);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
      try { 
        DSCompiler.getCompiler(114, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      int int1 = 27;
      DSCompiler.getCompiler(0, 27);
      doubleArray0[5] = (double) 0;
      double double0 = 0.0;
      int int2 = (-1561);
      // Undeclared exception!
      try { 
        dSCompiler0.sin(doubleArray0, 0, doubleArray0, (-1561));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1561
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }
}
