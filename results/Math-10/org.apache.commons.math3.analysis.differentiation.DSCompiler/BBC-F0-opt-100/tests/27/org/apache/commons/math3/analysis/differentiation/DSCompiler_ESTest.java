/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 19:13:18 GMT 2021
 */

package org.apache.commons.math3.analysis.differentiation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.differentiation.DSCompiler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DSCompiler_ESTest extends DSCompiler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[1];
      dSCompiler0.atanh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int int0 = dSCompiler0.getOrder();
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.multiply((double[]) null, 23, doubleArray0, 0, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = (double) 0;
      dSCompiler0.atan2(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-2.356194490192345), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), 0.0, (-1.0), 0.0}, doubleArray0, 0.01);
      
      dSCompiler0.linearCombination((-1.0), doubleArray0, 0, (-1.0), doubleArray0, 0, (-1.0), doubleArray0, 1, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {5.71238898038469, (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), 0.0, (-1.0), 0.0}, doubleArray0, 0.01);
      
      dSCompiler0.asinh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {2.443359262657506, (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), 0.0, (-1.0), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[6];
      dSCompiler0.linearCombination((double) 0, doubleArray0, 0, (double) 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      dSCompiler0.remainder(doubleArray0, 3, doubleArray0, 3, doubleArray0, 3);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      
      dSCompiler0.sinh(doubleArray0, 3, doubleArray0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      
      dSCompiler0.linearCombination((double) 3, doubleArray0, 3, (-834.140034007), doubleArray0, 3, (-1932.2998194105983), doubleArray0, 0, 0.0, doubleArray0, 3, doubleArray0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      dSCompiler0.tanh(doubleArray0, 1, doubleArray0, 1);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = dSCompiler0.taylor(doubleArray0, 1, doubleArray0);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = dSCompiler0.getPartialDerivativeOrders(1);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1}, intArray0);
      
      // Undeclared exception!
      try { 
        DSCompiler.getCompiler((-59), (-2705));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(20, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 1343;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = 0.15693697333335876;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 3;
      doubleArray0[6] = (double) 1343;
      doubleArray0[7] = (double) 3;
      doubleArray0[8] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.asin(doubleArray0, 0, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[14];
      dSCompiler0.add(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(14, doubleArray0.length);
      
      int int0 = dSCompiler0.getOrder();
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      dSCompiler0.remainder(doubleArray0, 1, doubleArray0, 1, doubleArray0, 1);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      
      dSCompiler0.log10(doubleArray0, 0, doubleArray0, 0);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      
      double double0 = dSCompiler0.taylor(doubleArray0, 1, doubleArray0);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 1;
      doubleArray1[0] = (double) 1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 1;
      doubleArray2[2] = (double) 1;
      dSCompiler0.compose(doubleArray0, 1, doubleArray1, doubleArray2, 1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      int int0 = dSCompiler0.getOrder();
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[14];
      double[] doubleArray1 = null;
      int int1 = (-1);
      // Undeclared exception!
      try { 
        dSCompiler0.rootN((double[]) null, 0, (-1), doubleArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[16];
      dSCompiler0.pow(doubleArray0, 0, 3, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(16, doubleArray0.length);
      
      dSCompiler0.multiply(doubleArray0, 0, doubleArray0, 3, doubleArray0, 3);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(16, doubleArray0.length);
      
      int int0 = dSCompiler0.getOrder();
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int int0 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 1;
      // Undeclared exception!
      try { 
        dSCompiler0.asin(doubleArray0, 1, doubleArray1, 1332);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 10);
      assertEquals(10, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1057.0;
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) 10;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 133.2549466689301;
      doubleArray0[7] = (double) 10;
      doubleArray0[8] = (-1.0);
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.atan2(doubleArray0, 0, doubleArray0, 2, (double[]) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      int int0 = dSCompiler0.getPartialDerivativeIndex(intArray0);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1}, intArray0);
      assertEquals(1, int0);
      
      double double0 = dSCompiler0.taylor(doubleArray0, 1, doubleArray0);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      int int1 = dSCompiler0.getSize();
      assertFalse(int1 == int0);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(6, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 2;
      dSCompiler0.asinh(doubleArray0, 2, doubleArray0, 2);
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, 2.0, 1.4436354751788103, 0.8944271909999159, 0.7513188404399294, 0.8944271909999159, 0.7513188404399294, 0.7513188404399294}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (-252.65);
      doubleArray1[3] = (double) 2;
      doubleArray1[4] = (double) 2;
      doubleArray1[5] = (double) 2;
      doubleArray1[6] = 2.0;
      doubleArray1[7] = (double) 2;
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination(0.8944271909999159, doubleArray1, 23, (-96.389), doubleArray1, 89, doubleArray1, 23);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 23
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.divide((double[]) null, 0, (double[]) null, 0, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      // Undeclared exception!
      DSCompiler.getCompiler(4554, 4887);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = 0;
      int int1 = 1327;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 1327);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(1327, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1327;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1327;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1327;
      int int2 = (-982);
      // Undeclared exception!
      try { 
        dSCompiler0.sin(doubleArray0, 0, doubleArray0, (-982));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double double0 = dSCompiler0.taylor(doubleArray0, 1, doubleArray0);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 1057;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1057, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1057, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      int int1 = 1245;
      int int2 = 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(1245, 0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1245, dSCompiler1.getFreeParameters());
      assertNotNull(dSCompiler1);
      
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[2];
      double double0 = 0.0;
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) 1245;
      int int3 = (-386);
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 1245;
      doubleArray2[2] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.add((double[]) null, 886, doubleArray1, (-386), doubleArray2, 81);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(20, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 3;
      intArray0[2] = 3;
      try { 
        dSCompiler0.getPartialDerivativeIndex(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 is larger than the maximum (3)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.remainder((double[]) null, 0, (double[]) null, 0, (double[]) null, (-2902));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 0;
      int int1 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(20, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = null;
      int int2 = (-1753);
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination((double) 3, (double[]) null, 3, (double) 3, (double[]) null, (-1753), (double[]) null, (-1753));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      dSCompiler0.sin(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) (-1076);
      doubleArray2[3] = (double) (-1076);
      doubleArray2[4] = 1057.0;
      doubleArray2[5] = (double) (-1076);
      doubleArray2[6] = (double) 0;
      doubleArray2[7] = (double) (-1076);
      doubleArray2[8] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray1, 0, (-1076), doubleArray2, 2592);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 33);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(33, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 33;
      doubleArray0[1] = (-2.1706266226554237E-7);
      dSCompiler0.acos(doubleArray0, 0, doubleArray0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(33, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, (-2.1706266226554237E-7)}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        dSCompiler0.log1p(doubleArray0, 31, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 31
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      int int1 = 9;
      // Undeclared exception!
      try { 
        dSCompiler0.getPartialDerivativeOrders(9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1079, 0);
      assertEquals(1079, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = null;
      int int1 = 444;
      // Undeclared exception!
      try { 
        dSCompiler0.tan((double[]) null, 444, (double[]) null, 431);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      doubleArray0[3] = (double) 0;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[3] = (double) 0;
      dSCompiler0.cosh(doubleArray0, 0, doubleArray0, 0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {3.7621956910836314, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      dSCompiler0.tanh(doubleArray1, 0, doubleArray1, 2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      int int0 = dSCompiler0.getFreeParameters();
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, int0);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 6;
      doubleArray2[2] = (double) 2;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 2;
      doubleArray2[6] = (double) 6;
      dSCompiler0.pow(doubleArray0, 6, doubleArray2, 0, doubleArray2, 0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(9, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertArrayEquals(new double[] {3.7621956910836314, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 6.0, 2.0, 0.0, 0.0, 2.0, 6.0}, doubleArray2, 0.01);
      
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray1, 1429, 0, doubleArray1, 1429);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1429
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[1];
      dSCompiler0.subtract(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      dSCompiler0.asin(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1079, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1079, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        dSCompiler0.sin(doubleArray0, 0, doubleArray0, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      double double0 = 0.1994270384311676;
      doubleArray0[2] = 0.1994270384311676;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      double[] doubleArray1 = null;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        dSCompiler0.tanh((double[]) null, 39, doubleArray2, 14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[1];
      double double0 = dSCompiler0.taylor(doubleArray0, 0, doubleArray0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      int int0 = 1245;
      // Undeclared exception!
      try { 
        dSCompiler0.rootN(doubleArray0, 0, 3, doubleArray0, 198);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1057, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(1057, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = null;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 660;
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = 2603.7668;
      doubleArray2[4] = (double) 1057;
      doubleArray2[5] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.compose(doubleArray2, 660, doubleArray0, (double[]) null, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      dSCompiler0.asinh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      dSCompiler0.cosh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertNotNull(dSCompiler1);
      
      dSCompiler1.atan2(doubleArray0, 0, doubleArray0, 0, doubleArray0, 1);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.7853981633974484, 0.0}, doubleArray0, 0.01);
      
      dSCompiler0.log(doubleArray0, 0, doubleArray0, 0);
      assertSame(dSCompiler0, dSCompiler1);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.7853981633974484, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 0, (-1519), doubleArray0, (-1972));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1057, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1057, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      dSCompiler0.atan2(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1057, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-2.356194490192345), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = dSCompiler0.getFreeParameters();
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1057, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(1057, int0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.subtract(doubleArray0, (-410), doubleArray0, (-369), doubleArray0, 28);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -410
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[0];
      int int0 = dSCompiler0.getPartialDerivativeIndex(intArray0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 5;
      int int1 = (-164);
      // Undeclared exception!
      try { 
        dSCompiler0.taylor(doubleArray1, (-164), doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -164
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.cos((double[]) null, 3361, (double[]) null, 69);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (-1.1748423022293739E-44);
      doubleArray0[5] = (-2.1706266226554237E-7);
      doubleArray0[6] = (double) 1;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2.1706266226554237E-7);
      // Undeclared exception!
      try { 
        dSCompiler0.acos(doubleArray0, 1, doubleArray1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 2157);
      assertEquals(2157, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      int int1 = 1126;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2157;
      doubleArray0[2] = (double) 1126;
      doubleArray0[3] = (double) 1126;
      doubleArray0[4] = (double) 2157;
      doubleArray0[5] = (double) 1126;
      doubleArray0[6] = (double) 2157;
      int int2 = 18;
      // Undeclared exception!
      dSCompiler0.asinh(doubleArray0, 0, doubleArray0, 18);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.subtract((double[]) null, 0, (double[]) null, 5, (double[]) null, 331);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 0;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 2;
      dSCompiler0.cosh(doubleArray0, 0, doubleArray0, 0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {3.7621956910836314, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      dSCompiler0.tanh(doubleArray1, 2, doubleArray1, 2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      dSCompiler0.exp(doubleArray1, 2, doubleArray0, 0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 568);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(568, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.add(doubleArray0, 0, doubleArray0, 1245, doubleArray0, 886);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1245
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[1];
      int int1 = 26;
      // Undeclared exception!
      try { 
        dSCompiler0.atan2(doubleArray0, 0, doubleArray0, 0, doubleArray0, 26);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 26
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 1457);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1457, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(0, dSCompiler1.getOrder());
      assertNotNull(dSCompiler1);
      
      try { 
        dSCompiler0.checkCompatibility(dSCompiler1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1,457 != 0
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      int int0 = 2743;
      // Undeclared exception!
      DSCompiler.getCompiler(2743, 2743);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = null;
      int int1 = 36;
      // Undeclared exception!
      try { 
        dSCompiler0.taylor((double[]) null, 36, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 0;
      int int1 = 2157;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 2157);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(2157, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2157;
      doubleArray0[2] = 0.0;
      // Undeclared exception!
      dSCompiler0.acos(doubleArray0, 0, doubleArray0, 2157);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = 0;
      int int1 = 568;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 568);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(568, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      int int2 = 2582;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      dSCompiler0.tanh(doubleArray0, 0, doubleArray1, 568);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 568);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(568, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[5];
      dSCompiler0.log10(doubleArray0, 0, doubleArray0, 1);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(568, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      doubleArray0[0] = (double) 568;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 568;
      doubleArray0[3] = (double) 568;
      doubleArray0[4] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.sinh(doubleArray0, 568, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 568
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1057, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(1057, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      double double0 = dSCompiler0.taylor(doubleArray0, 0, doubleArray0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(1057, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals((-1.0), double0, 0.01);
      
      // Undeclared exception!
      try { 
        dSCompiler0.atan2(doubleArray0, 660, doubleArray0, 733, doubleArray0, 2174);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 733
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 568);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(568, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      double double0 = dSCompiler0.taylor(doubleArray0, 0, doubleArray0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(568, dSCompiler0.getOrder());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        dSCompiler0.cosh(doubleArray0, 0, doubleArray0, 1182);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      dSCompiler0.cosh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertNotNull(dSCompiler1);
      
      dSCompiler1.atan2(doubleArray0, 0, doubleArray0, 0, doubleArray0, 1);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.7853981633974484, 0.0}, doubleArray0, 0.01);
      
      dSCompiler0.log(doubleArray0, 0, doubleArray0, 0);
      assertSame(dSCompiler0, dSCompiler1);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.7853981633974484, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 1527, (-537), doubleArray0, 1527);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1527
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      dSCompiler0.sinh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      dSCompiler0.acos(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1.5707963267948966, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 25;
      int int1 = (-1128);
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.pow((double[]) null, (-1128), (double[]) null, 3585, doubleArray0, 25);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      dSCompiler0.pow(doubleArray0, 0, (double) 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        dSCompiler0.acosh(doubleArray0, 0, doubleArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      dSCompiler0.sinh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      dSCompiler0.acos(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1.5707963267948966, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertNotNull(dSCompiler1);
      
      int[] intArray0 = dSCompiler0.getPartialDerivativeOrders(0);
      assertSame(dSCompiler0, dSCompiler1);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1447);
      // Undeclared exception!
      try { 
        dSCompiler1.asinh(doubleArray0, (-1447), doubleArray1, 235);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1447
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 0;
      int int1 = 2157;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 2157);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(2157, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2157;
      double double0 = 0.0;
      doubleArray0[2] = 0.0;
      // Undeclared exception!
      try { 
        dSCompiler0.log1p(doubleArray0, 0, doubleArray0, 2157);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 255);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(255, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2.9275804461593914E217);
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 255;
      doubleArray1[4] = 1677.5526628;
      int int0 = 19;
      // Undeclared exception!
      dSCompiler0.atan2(doubleArray0, 0, doubleArray1, 0, doubleArray1, 19);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      dSCompiler0.sinh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      dSCompiler0.tanh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 0, doubleArray0, 0, doubleArray0, (-1285));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1057, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(1057, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1057;
      dSCompiler0.compose(doubleArray0, 0, doubleArray0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(1057, dSCompiler0.getFreeParameters());
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1057.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 290;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 25;
      doubleArray1[4] = (double) 761;
      doubleArray1[5] = (double) 1057;
      doubleArray1[6] = (double) 761;
      doubleArray1[7] = (double) 1057;
      doubleArray1[8] = (double) 25;
      // Undeclared exception!
      try { 
        dSCompiler0.exp(doubleArray0, 1057, doubleArray1, (-2127));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1057
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertNotNull(dSCompiler1);
      
      dSCompiler0.log(doubleArray0, 0, doubleArray0, 0);
      assertSame(dSCompiler0, dSCompiler1);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 1527, (-537), doubleArray0, 1527);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1527
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 568;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 568);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(568, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      int int1 = 403;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 403;
      // Undeclared exception!
      dSCompiler0.asin(doubleArray0, 0, doubleArray0, 263);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 568);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(568, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 403;
      doubleArray0[1] = (double) 403;
      doubleArray0[2] = (double) 403;
      doubleArray0[3] = (double) 568;
      doubleArray0[4] = (double) 568;
      doubleArray0[6] = (double) 403;
      doubleArray0[7] = (double) 403;
      doubleArray0[8] = (double) 568;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 403;
      doubleArray1[1] = (double) 568;
      doubleArray1[2] = (double) 2;
      doubleArray1[3] = (double) 403;
      doubleArray1[4] = (double) 2;
      doubleArray1[5] = (double) 568;
      // Undeclared exception!
      try { 
        dSCompiler0.multiply(doubleArray0, 0, doubleArray1, 2, doubleArray0, 403);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 403
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      int int1 = 2;
      dSCompiler0.atan(doubleArray0, 0, doubleArray0, 2);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2;
      doubleArray1[2] = (double) 0;
      double double0 = 1653.0;
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 1120;
      intArray0[2] = 0;
      intArray0[3] = 2;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 2;
      // Undeclared exception!
      try { 
        dSCompiler0.subtract(doubleArray0, 0, doubleArray1, (-1104), doubleArray0, (-1104));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1104
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 1057;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1057, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(1057, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      int int2 = (-1);
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 372);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(372, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertNotNull(dSCompiler1);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        dSCompiler1.cosh((double[]) null, 372, (double[]) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 255);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(255, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[5];
      dSCompiler0.linearCombination(1677.5526628, doubleArray0, 0, (double) 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(255, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      doubleArray0[0] = (double) 255;
      doubleArray0[1] = (double) 255;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      // Undeclared exception!
      dSCompiler0.acosh(doubleArray0, 3, doubleArray0, (-175));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 1;
      // Undeclared exception!
      try { 
        dSCompiler0.sinh((double[]) null, 1, doubleArray1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      int int1 = 2;
      dSCompiler0.atan(doubleArray0, 0, doubleArray0, 2);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = null;
      int int2 = 29;
      // Undeclared exception!
      try { 
        dSCompiler0.sin((double[]) null, 29, (double[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 1057;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1057, 0);
      assertEquals(1057, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = null;
      int int2 = 58;
      // Undeclared exception!
      try { 
        dSCompiler0.expm1((double[]) null, 1057, (double[]) null, 58);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 21;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(21, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(21, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertNotNull(dSCompiler1);
      
      try { 
        dSCompiler0.checkCompatibility(dSCompiler1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 21 != 0
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 2);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(2, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertNotNull(dSCompiler1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) 68;
      doubleArray0[2] = (double) (-4385);
      doubleArray0[3] = (double) (-4385);
      doubleArray0[4] = (double) (-911);
      // Undeclared exception!
      try { 
        dSCompiler1.pow(doubleArray0, 0, 1934.646343, (double[]) null, 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      dSCompiler0.sinh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      dSCompiler0.tan(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = dSCompiler0.taylor(doubleArray0, 0, doubleArray0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 40;
      doubleArray1[1] = (double) 24;
      doubleArray1[2] = (double) 2;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (-1552.10244);
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (-2.0);
      doubleArray1[8] = (-1.0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 568);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(568, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      int int0 = 2815;
      int int1 = 1245;
      // Undeclared exception!
      try { 
        dSCompiler0.rootN(doubleArray0, 1245, 3, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1245
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = 0;
      int int1 = 238;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 238);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(238, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[5];
      dSCompiler0.linearCombination(1677.5526628, doubleArray0, 0, 3.861525553653117E-227, doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(238, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      doubleArray0[0] = (double) 238;
      doubleArray0[1] = (double) 238;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.log(doubleArray0, 0, doubleArray0, 238);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1057, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(1057, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      dSCompiler0.atan2(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(1057, dSCompiler0.getFreeParameters());
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-2.356194490192345), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = (-165);
      int int1 = 2384;
      // Undeclared exception!
      try { 
        dSCompiler0.rootN(doubleArray0, (-1800), (-165), doubleArray0, 2384);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1800
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      dSCompiler0.sinh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      doubleArray0[0] = (double) 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 13);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(13, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertNotNull(dSCompiler1);
      
      int int0 = 359;
      dSCompiler1.atanh(doubleArray0, 0, doubleArray0, 0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(13, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int1 = 136;
      int int2 = 34;
      // Undeclared exception!
      try { 
        dSCompiler1.rootN(doubleArray0, (-402), 34, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -402
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 1057;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1057, 0);
      assertEquals(1057, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double double0 = (-1.0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = null;
      int int1 = 326;
      // Undeclared exception!
      try { 
        dSCompiler0.asinh((double[]) null, 1057, doubleArray0, 326);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      int int0 = 2;
      dSCompiler0.atan(doubleArray0, 0, doubleArray0, 2);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = 1653.0;
      // Undeclared exception!
      try { 
        dSCompiler0.rootN(doubleArray1, 34, 2, doubleArray1, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 34
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 568);
      assertEquals(568, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 0, 0.0, doubleArray0, 568);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 568);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(568, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 350;
      doubleArray0[1] = (double) 350;
      doubleArray0[2] = (double) 350;
      doubleArray0[3] = (double) 568;
      doubleArray0[4] = (double) 350;
      doubleArray0[4] = (double) 568;
      doubleArray0[6] = (double) 350;
      doubleArray0[7] = (double) 350;
      doubleArray0[8] = (double) 568;
      double double0 = dSCompiler0.taylor(doubleArray0, 2, doubleArray0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(568, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {350.0, 350.0, 350.0, 568.0, 568.0, 0.0, 350.0, 350.0, 568.0}, doubleArray0, 0.01);
      assertEquals(350.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        dSCompiler0.compose(doubleArray0, 40, doubleArray0, doubleArray0, 24);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 238);
      assertEquals(238, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 238;
      doubleArray0[1] = (double) 29;
      doubleArray0[2] = (double) 238;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (double) 238;
      doubleArray0[6] = (double) 29;
      doubleArray0[7] = (-1.0);
      dSCompiler0.cos(doubleArray0, 1, doubleArray0, 0);
      assertEquals(238, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-0.7480575296890003), 29.0, 238.0, (-1.0), (-1.0), 238.0, 29.0, (-1.0)}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 4, 211, (double[]) null, 29);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      int int0 = 2;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(2, 0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(2, dSCompiler1.getFreeParameters());
      assertNotNull(dSCompiler1);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        dSCompiler1.acosh((double[]) null, 2, (double[]) null, 2237);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      dSCompiler0.sinh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      doubleArray0[0] = (double) 0;
      int int1 = 1211;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 0, 0.5, doubleArray0, 1211);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      int int0 = 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(0, dSCompiler1.getOrder());
      assertNotNull(dSCompiler1);
      
      int int1 = 197;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 197;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 197;
      doubleArray0[3] = (double) 0;
      int int2 = (-1546);
      // Undeclared exception!
      try { 
        dSCompiler1.pow(doubleArray0, 0, doubleArray0, 0, doubleArray0, 2042);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      dSCompiler0.sinh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      int int1 = 280;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 791);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(791, dSCompiler1.getOrder());
      assertNotNull(dSCompiler1);
      
      try { 
        dSCompiler0.checkCompatibility(dSCompiler1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 791
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      dSCompiler0.sinh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      dSCompiler0.acos(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1.5707963267948966, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      doubleArray0[0] = (double) 0;
      int int1 = 999;
      int int2 = 1211;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 999, 0.5, doubleArray0, 1211);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 999
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      int int1 = 2;
      int int2 = 2;
      double[] doubleArray0 = null;
      int int3 = (-1169);
      // Undeclared exception!
      try { 
        dSCompiler0.atan((double[]) null, (-1169), (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      dSCompiler0.pow(doubleArray0, 0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 2;
      int int1 = 803;
      // Undeclared exception!
      try { 
        dSCompiler0.remainder(doubleArray0, 64, doubleArray0, 803, doubleArray0, 803);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 64
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 0;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 2;
      dSCompiler0.cosh(doubleArray0, 0, doubleArray0, 0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {3.7621956910836314, 0.0, (-1.0), 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        dSCompiler0.tanh(doubleArray1, 2, doubleArray1, (-1292));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 0;
      int int1 = 568;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 568);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(568, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = null;
      int int2 = (-562);
      int int3 = 0;
      int int4 = 2995;
      // Undeclared exception!
      dSCompiler0.atanh(doubleArray0, 0, (double[]) null, 2995);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(2, 0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(2, dSCompiler1.getFreeParameters());
      assertNotNull(dSCompiler1);
      
      double[] doubleArray0 = null;
      int int0 = 69;
      // Undeclared exception!
      try { 
        dSCompiler1.log((double[]) null, 69, (double[]) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      dSCompiler0.atan(doubleArray0, 0, doubleArray0, 2);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 0;
      doubleArray1[3] = (double) 2;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 2;
      dSCompiler0.asinh(doubleArray0, 0, doubleArray0, 2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 180.7059544779484;
      doubleArray2[1] = (double) 1044;
      doubleArray2[2] = (double) 3967;
      doubleArray2[3] = (double) 3967;
      doubleArray2[4] = 2240.682;
      doubleArray2[5] = (double) 3967;
      doubleArray2[6] = (double) 3967;
      doubleArray2[7] = (double) 3967;
      doubleArray2[8] = (double) 0;
      dSCompiler0.asin(doubleArray1, 0, doubleArray2, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(7, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 2.0, 0.0, 2.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1044.0, 3967.0, 3967.0, 2240.682, 3967.0, 3967.0, 3967.0, 0.0}, doubleArray2, 0.01);
      
      int int0 = dSCompiler0.getFreeParameters();
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      int int1 = (-1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 0;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) (-1);
      doubleArray1[3] = (double) 2;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 2;
      // Undeclared exception!
      try { 
        dSCompiler0.checkCompatibility((DSCompiler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 2;
      doubleArray1[3] = (double) 2;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 2;
      doubleArray1[6] = (double) 0;
      dSCompiler0.rootN(doubleArray0, 2, 0, doubleArray1, 2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2.0, 0.0, 2.0, 0.0, 2.0, 0.0}, doubleArray1, 0.01);
      
      int int1 = 542;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        dSCompiler0.sinh(doubleArray2, 2, doubleArray1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 2);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-3.141592653589793);
      doubleArray1[2] = (double) 568;
      dSCompiler0.atan(doubleArray0, 0, doubleArray1, 2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-3.141592653589793), 1.1071487177940904}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        dSCompiler0.log1p(doubleArray0, 27, doubleArray1, 389);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 27
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      int int0 = 114;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 9.352382323649647E257;
      doubleArray0[1] = 9.352382323649647E257;
      doubleArray0[2] = 9.352382323649647E257;
      doubleArray0[3] = (double) 114;
      doubleArray0[4] = (double) 2;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 9.352382323649647E257;
      doubleArray1[1] = 9.352382323649647E257;
      doubleArray1[2] = (double) 114;
      doubleArray1[3] = 9.352382323649647E257;
      doubleArray1[4] = (double) 114;
      doubleArray1[5] = (double) 2;
      doubleArray1[6] = 9.352382323649647E257;
      doubleArray1[7] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.cos(doubleArray0, 0, doubleArray1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      int int0 = dSCompiler0.getSize();
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 1057;
      int int1 = 778;
      int int2 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        DSCompiler.getCompiler(778, Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      int int1 = 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertNotNull(dSCompiler1);
      
      int int2 = 197;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 197;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 197;
      dSCompiler0.checkCompatibility(dSCompiler1);
      assertSame(dSCompiler0, dSCompiler1);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getFreeParameters());
      
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 197;
      dSCompiler0.pow(doubleArray0, 0, 869, doubleArray0, 0);
      assertSame(dSCompiler0, dSCompiler1);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 197.0, 0.0, 0.0, 0.0, 197.0, 0.0}, doubleArray0, 0.01);
      
      int int3 = 2323;
      // Undeclared exception!
      try { 
        dSCompiler0.asin(doubleArray0, 0, doubleArray0, 2323);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      int int0 = 2;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(2, 0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(2, dSCompiler1.getFreeParameters());
      assertNotNull(dSCompiler1);
      
      double[] doubleArray0 = null;
      int int1 = 3143;
      // Undeclared exception!
      try { 
        dSCompiler1.exp((double[]) null, 3143, (double[]) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 3;
      int int1 = 10;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 10;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 3;
      doubleArray0[7] = (double) 3;
      doubleArray0[8] = (double) 3;
      int int2 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(10, 0);
      assertEquals(10, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      dSCompiler0.log10(doubleArray1, 0, doubleArray0, 3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(10, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(9, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {3.141592653589793, 0.0, 3.0, Double.NEGATIVE_INFINITY, 0.0, 0.0, 3.0, 3.0, 3.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        dSCompiler0.acosh(doubleArray1, 35, doubleArray1, 35);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 35
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      int int1 = 2;
      // Undeclared exception!
      try { 
        dSCompiler0.exp(doubleArray0, 0, doubleArray0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 238;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 238);
      assertEquals(238, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 238;
      doubleArray0[1] = (double) 238;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      int int1 = 69;
      // Undeclared exception!
      try { 
        dSCompiler0.log(doubleArray0, 0, doubleArray0, 238);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      dSCompiler0.atan(doubleArray0, 0, doubleArray0, 2);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = 1653.0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 2;
      doubleArray1[6] = (double) 2;
      dSCompiler0.acosh(doubleArray0, 0, doubleArray1, 2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(3, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 0.0, Double.NaN, 1653.0, 0.0, 2.0, 2.0}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        dSCompiler0.expm1(doubleArray1, 3460, doubleArray1, 1475);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3460
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 2157);
      assertEquals(2157, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2157;
      int int1 = 69;
      int int2 = 3;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 69;
      doubleArray1[1] = 3.141592653589793;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 3, doubleArray0, 280, doubleArray1, 791);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1057, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(1057, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      // Undeclared exception!
      try { 
        dSCompiler0.cos(doubleArray0, 0, doubleArray0, 29);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 238);
      assertEquals(238, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 238;
      doubleArray0[1] = (double) 238;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 3214, 12, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3214
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = 0;
      int int1 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[6];
      double double0 = 9.352382323649647E257;
      doubleArray0[0] = 9.352382323649647E257;
      doubleArray0[1] = (double) 0;
      dSCompiler0.tan(doubleArray0, 0, doubleArray0, 3);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {9.352382323649647E257, 0.0, 0.0, (-3.2345852979696876), 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        dSCompiler0.acosh(doubleArray0, 945, doubleArray0, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 945
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 2157);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(2157, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.log1p((double[]) null, (-335), (double[]) null, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 568);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(568, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 0;
      int int0 = (-332);
      // Undeclared exception!
      try { 
        dSCompiler0.getPartialDerivativeIndex((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertNotNull(dSCompiler1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 197;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 197;
      doubleArray0[3] = (double) 0;
      dSCompiler0.checkCompatibility(dSCompiler1);
      assertSame(dSCompiler0, dSCompiler1);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getFreeParameters());
      
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 197;
      doubleArray0[7] = (double) 0;
      double[] doubleArray1 = null;
      int int0 = (-361);
      // Undeclared exception!
      try { 
        dSCompiler0.asin(doubleArray0, 0, (double[]) null, (-361));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1057, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(1057, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      // Undeclared exception!
      try { 
        dSCompiler0.pow((double[]) null, 4, 0, (double[]) null, 29);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      dSCompiler0.divide(doubleArray0, 0, doubleArray0, (-2924), doubleArray0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, (-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = dSCompiler0.getOrder();
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, int0);
      
      dSCompiler0.log1p(doubleArray0, 0, doubleArray0, 3);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, (-1.0), 0.0, Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      int int0 = 3;
      int int1 = 10;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 10;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 3;
      doubleArray0[7] = (double) 3;
      doubleArray0[8] = (double) 3;
      dSCompiler0.acosh(doubleArray0, 3, doubleArray0, 3);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {3.141592653589793, 3.0, 3.0, 2.993222846126381, 0.0, 0.0, 3.0, 3.0, 3.0}, doubleArray0, 0.01);
      
      int int2 = 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(10, 0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(10, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertNotNull(dSCompiler1);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        dSCompiler1.log10(doubleArray1, 0, (double[]) null, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = 0;
      int int1 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 9.352382323649647E257;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-4623);
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (-1556.466763);
      doubleArray1[3] = 9.352382323649647E257;
      doubleArray1[4] = (double) 3;
      doubleArray1[5] = (double) (-4623);
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, (-4623), (double) 3, doubleArray1, (-4623));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4623
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      int int1 = 3;
      int int2 = 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(21, 0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(21, dSCompiler1.getFreeParameters());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertNotNull(dSCompiler1);
      
      double[] doubleArray0 = new double[1];
      double double0 = 0.0;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 3;
      // Undeclared exception!
      try { 
        dSCompiler1.sin(doubleArray0, 3, doubleArray1, (-2804));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 568;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 568);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(568, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      int int1 = 31;
      // Undeclared exception!
      dSCompiler0.atan(doubleArray0, 0, doubleArray0, 0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 568);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(568, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 403;
      doubleArray0[1] = (double) 403;
      doubleArray0[2] = (double) 403;
      doubleArray0[3] = (double) 568;
      doubleArray0[4] = (double) 403;
      doubleArray0[4] = (double) 568;
      doubleArray0[6] = (double) 403;
      doubleArray0[7] = (double) 403;
      doubleArray0[8] = (double) 568;
      double double0 = dSCompiler0.taylor(doubleArray0, 2, doubleArray0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(568, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {403.0, 403.0, 403.0, 568.0, 568.0, 0.0, 403.0, 403.0, 568.0}, doubleArray0, 0.01);
      assertEquals(403.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        dSCompiler0.log1p(doubleArray0, 403, doubleArray0, 740);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 403
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(52, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(52, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        dSCompiler0.atan2(doubleArray0, 29, doubleArray1, 29, doubleArray1, 1331);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 29
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = 0;
      int int1 = 568;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 568);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(568, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 568;
      doubleArray0[1] = (double) 0;
      int int2 = 432;
      // Undeclared exception!
      try { 
        dSCompiler0.rootN(doubleArray0, 0, 432, doubleArray0, 568);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try { 
        dSCompiler0.log(doubleArray0, 2593, doubleArray0, 2593);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2593
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = 0;
      int int1 = 238;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 238);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(238, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-921);
      intArray0[2] = 238;
      intArray0[3] = 238;
      intArray0[4] = 238;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-921);
      doubleArray0[1] = (double) 238;
      doubleArray0[2] = 2.0;
      doubleArray0[3] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.tan(doubleArray0, (-921), doubleArray0, 238);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -921
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 9.352382323649647E257;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      dSCompiler0.cos(doubleArray0, 3, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = (-861);
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-861);
      doubleArray1[1] = (double) (-861);
      int int1 = 1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 3;
      doubleArray2[1] = (double) 114;
      doubleArray2[2] = 9.352382323649647E257;
      // Undeclared exception!
      try { 
        dSCompiler0.cosh(doubleArray2, 114, doubleArray1, (-2456));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 114
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = 21;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(21, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(21, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int2 = 359;
      // Undeclared exception!
      try { 
        dSCompiler0.atanh(doubleArray0, 0, doubleArray1, 359);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(20, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 9.352382323649647E257;
      doubleArray0[1] = 9.352382323649647E257;
      doubleArray0[2] = (double) 114;
      doubleArray0[3] = (double) 114;
      doubleArray0[4] = (double) 3;
      // Undeclared exception!
      try { 
        dSCompiler0.cos(doubleArray0, 3, doubleArray0, 2659);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      dSCompiler0.divide(doubleArray0, 0, doubleArray0, (-2924), doubleArray0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, (-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        dSCompiler0.atan2((double[]) null, 0, doubleArray0, 0, doubleArray0, 863);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 1949;
      doubleArray1[2] = (double) 1949;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = 0.0;
      dSCompiler0.expm1(doubleArray1, 0, doubleArray1, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 1949.0, 1949.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination((double) 1949, doubleArray0, 3, 1.3006683896462346E-8, doubleArray0, 0, 1.3006683896462346E-8, doubleArray0, (-449), doubleArray0, 11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -449
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      int int0 = 3;
      int int1 = 21;
      int int2 = 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(21, 0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(21, dSCompiler1.getFreeParameters());
      assertNotNull(dSCompiler1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        dSCompiler1.log10(doubleArray0, 0, (double[]) null, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      dSCompiler0.atan(doubleArray0, 0, doubleArray0, 2);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.log1p(doubleArray1, 0, doubleArray1, (-14));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int1 = 403;
      // Undeclared exception!
      try { 
        dSCompiler0.acosh(doubleArray1, 1272, doubleArray0, (-850));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1272
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      dSCompiler0.asin(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(891, 0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(891, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getOrder());
      assertNotNull(dSCompiler1);
      
      try { 
        dSCompiler0.checkCompatibility(dSCompiler1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 891
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = 0;
      int int1 = 238;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 238);
      assertEquals(238, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 238;
      // Undeclared exception!
      try { 
        dSCompiler0.expm1(doubleArray0, 182, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 182
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      int int1 = 2;
      int int2 = (-1);
      // Undeclared exception!
      try { 
        dSCompiler0.atan(doubleArray0, 779, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 779
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      dSCompiler0.sinh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      dSCompiler0.tan(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.atanh((double[]) null, 0, (double[]) null, (-562));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 521);
      assertEquals(521, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 521;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      int int0 = 660;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 660;
      doubleArray1[3] = 0.0;
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination(0.0, (double[]) null, 0, (double) 4, doubleArray0, 660, 0.0, doubleArray1, 521, (-25.659373837184294), doubleArray0, 1374, doubleArray0, 78);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      int int1 = 32;
      int int2 = 64;
      // Undeclared exception!
      try { 
        dSCompiler0.asin(doubleArray0, 32, doubleArray0, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = 0;
      int int1 = 238;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 238);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(238, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 238;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 238;
      doubleArray0[7] = (double) 0;
      // Undeclared exception!
      dSCompiler0.tan(doubleArray0, 0, doubleArray0, 152);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double double0 = 0.0;
      double[] doubleArray0 = null;
      int int1 = 789;
      int int2 = (-1023);
      int int3 = (-1801);
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination(1.676081191364984E71, (double[]) null, 0, (double) 0, (double[]) null, 789, (double) 789, (double[]) null, (-1023), (double[]) null, (-1801));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        dSCompiler0.taylor(doubleArray0, 403, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 403
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = 1057;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1057, 0);
      assertEquals(1057, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1057;
      try { 
        dSCompiler0.getPartialDerivativeIndex(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 1,057
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      int int0 = dSCompiler0.getFreeParameters();
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = 0;
      int int1 = 568;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 568);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(568, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 568;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      int int2 = (-1658);
      int[] intArray0 = new int[2];
      intArray0[0] = (-332);
      intArray0[1] = 1483;
      try { 
        dSCompiler0.getPartialDerivativeIndex(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.rootN(doubleArray0, 2, 41, doubleArray0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      int int0 = dSCompiler0.getOrder();
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 9.352382323649647E257;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      dSCompiler0.cos(doubleArray0, 3, doubleArray0, 0);
      int int0 = (-861);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (-861);
      doubleArray1[1] = (double) (-861);
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 3;
      doubleArray2[1] = (double) 114;
      doubleArray2[2] = 9.352382323649647E257;
      // Undeclared exception!
      try { 
        dSCompiler0.tanh(doubleArray1, 1, doubleArray2, (-861));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 0);
      double[] doubleArray0 = new double[0];
      int int2 = 4778;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 5.421372463189529E-151;
      doubleArray1[3] = (double) 4778;
      doubleArray1[4] = (double) 4778;
      doubleArray1[5] = (double) 1;
      // Undeclared exception!
      try { 
        dSCompiler0.atanh(doubleArray1, 4778, doubleArray1, 1283);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4778
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 9.352382323649647E257;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 3;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 3;
      int int1 = 0;
      dSCompiler0.sinh(doubleArray0, 0, doubleArray1, 0);
      // Undeclared exception!
      try { 
        dSCompiler0.asinh(doubleArray0, (-2785), doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2785
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 2.0896888605749563E-8;
      DSCompiler.getCompiler(3, 3);
      // Undeclared exception!
      try { 
        dSCompiler0.log10(doubleArray1, (-749), doubleArray0, (-749));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -749
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      // Undeclared exception!
      try { 
        dSCompiler0.pow((double[]) null, (-1231), (-1231), (double[]) null, 1048);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 9.352382323649647E257;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 3;
      // Undeclared exception!
      try { 
        dSCompiler0.multiply(doubleArray0, 317, doubleArray0, 0, doubleArray0, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 317
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      int int1 = 954;
      // Undeclared exception!
      try { 
        dSCompiler0.asinh(doubleArray0, (-2808), doubleArray0, 954);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2808
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = 0;
      int int1 = 883;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 883);
      int[] intArray0 = new int[8];
      intArray0[0] = 883;
      intArray0[1] = 883;
      intArray0[2] = 0;
      intArray0[3] = 883;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 7.749348772180658E175;
      doubleArray0[1] = (double) 883;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 883;
      int int2 = 477;
      // Undeclared exception!
      try { 
        dSCompiler0.divide(doubleArray0, 883, doubleArray0, 883, doubleArray0, 477);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 883
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 238);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 238;
      doubleArray0[1] = (double) 238;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.acos(doubleArray0, 238, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 238
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = 2157;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 2157);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2157;
      doubleArray0[2] = 0.0;
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination(2157.0, doubleArray0, 3377, (-542.566061351816), doubleArray0, 3377, (double) 0, doubleArray0, 2157, doubleArray0, 1949);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3377
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = 472;
      // Undeclared exception!
      DSCompiler.getCompiler(472, 472);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      dSCompiler0.asin(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 568);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 568;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      int int1 = (-1658);
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination((double) 568, doubleArray0, 0, (double) 568, doubleArray0, (-1658), doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1658
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 0);
      double[] doubleArray0 = new double[0];
      int int2 = 4778;
      // Undeclared exception!
      try { 
        dSCompiler0.remainder(doubleArray0, 4778, doubleArray0, 0, doubleArray0, 4778);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4778
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int int0 = 1016;
      // Undeclared exception!
      DSCompiler.getCompiler(1016, 1016);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      int int0 = 0;
      dSCompiler0.divide(doubleArray0, 0, doubleArray0, (-2924), doubleArray0, 0);
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.asin((double[]) null, 0, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 2.0896888605749563E-8;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.log1p(doubleArray0, 0, doubleArray1, (-335));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.rootN(doubleArray0, 2, (-1), doubleArray0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1057, 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination((-1.0), doubleArray0, 0, (double) 0, doubleArray0, 0, (double) 0, doubleArray0, 660, (-1.1821586412088555E-114), doubleArray0, 1057, (double[]) null, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 660
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int int0 = 938;
      // Undeclared exception!
      DSCompiler.getCompiler(938, 938);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int int0 = (-968);
      int int1 = 1105;
      // Undeclared exception!
      try { 
        DSCompiler.getCompiler((-968), 1105);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[4];
      dSCompiler0.sinh(doubleArray0, 0, doubleArray0, 0);
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.atanh((double[]) null, 0, (double[]) null, (-562));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int int0 = 0;
      int int1 = 582;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 582);
      // Undeclared exception!
      try { 
        dSCompiler0.acos((double[]) null, 582, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }
}
