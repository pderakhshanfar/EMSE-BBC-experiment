/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 18:59:41 GMT 2021
 */

package org.apache.commons.math3.analysis.differentiation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.differentiation.DSCompiler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DSCompiler_ESTest extends DSCompiler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.5505265226075022);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.atan2(doubleArray0, 0, doubleArray0, 0, doubleArray0, 725);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 725
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 351);
      assertNotNull(dSCompiler0);
      assertEquals(351, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 351;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 351;
      doubleArray0[4] = (double) 0;
      // Undeclared exception!
      dSCompiler0.tan(doubleArray0, 0, doubleArray0, 0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3283);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(3283, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3283;
      doubleArray0[1] = (double) 3283;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-260.57137628575265);
      doubleArray0[4] = (double) 3283;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      // Undeclared exception!
      dSCompiler0.tanh(doubleArray0, 2, doubleArray0, 0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertNotNull(dSCompiler0);
      assertEquals(20, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = 1.2490457723982544;
      doubleArray0[3] = 1.0;
      doubleArray0[5] = 2078.3;
      doubleArray0[6] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.compose(doubleArray0, 675, (double[]) null, doubleArray0, 4786);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 26);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(26, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = (double) 0;
      dSCompiler0.atan(doubleArray0, 0, doubleArray0, 2);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(26, dSCompiler0.getOrder());
      assertEquals(17, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        dSCompiler0.log1p(doubleArray0, (-3139), doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3139
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertNotNull(dSCompiler0);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(6, dSCompiler0.getSize());
      
      int int1 = dSCompiler0.getFreeParameters();
      assertEquals(2, int1);
      assertTrue(int1 == int0);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(6, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      int int2 = (-1609);
      int int3 = (-1);
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, (-1609), 2.0, doubleArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1609
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      int int1 = 982;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 982);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(982, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 982;
      doubleArray0[2] = (double) 982;
      doubleArray0[3] = (double) 982;
      // Undeclared exception!
      dSCompiler1.atanh(doubleArray0, 0, doubleArray0, 982);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 1496);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1496, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1496;
      doubleArray0[4] = (double) 1496;
      // Undeclared exception!
      dSCompiler0.acos(doubleArray0, 0, doubleArray0, 2);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 3;
      double[] doubleArray0 = new double[8];
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertNotNull(dSCompiler0);
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(20, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
      try { 
        dSCompiler0.acosh(doubleArray0, 3, doubleArray0, 238);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = 3;
      int int1 = 4662;
      // Undeclared exception!
      DSCompiler.getCompiler(3, 4662);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 977);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(977, dSCompiler1.getOrder());
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (-573.0684430635);
      // Undeclared exception!
      dSCompiler1.atan2(doubleArray0, 0, doubleArray1, 0, doubleArray1, 977);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[6];
      dSCompiler0.remainder(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 1429);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(1429, dSCompiler1.getOrder());
      
      // Undeclared exception!
      dSCompiler1.acosh(doubleArray0, 0, doubleArray0, 1015);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 5);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(5, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[16];
      dSCompiler0.asinh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(5, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(16, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      dSCompiler0.linearCombination((double) 0, doubleArray0, 0, (double) 0, doubleArray1, 0, doubleArray0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int int1 = 0;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) 0;
      doubleArray2[7] = (double) 0;
      dSCompiler0.pow(doubleArray2, 1, doubleArray2, 1, doubleArray2, 0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(8, doubleArray2.length);
      
      int int2 = 57;
      // Undeclared exception!
      try { 
        DSCompiler.getCompiler((-254), 57);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 1349);
      assertNotNull(dSCompiler0);
      assertEquals(1349, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1349;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-6626.0);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 1349;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 1349;
      int int0 = (-1438);
      // Undeclared exception!
      dSCompiler0.asin(doubleArray0, 0, doubleArray0, (-1438));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[8];
      dSCompiler0.cos(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 89);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(89, dSCompiler1.getOrder());
      
      dSCompiler1.asin(doubleArray0, 0, doubleArray0, 0);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(89, dSCompiler1.getOrder());
      assertArrayEquals(new double[] {1.5707963267948966, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 54);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(54, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      
      // Undeclared exception!
      try { 
        dSCompiler1.taylor((double[]) null, 0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(23, 1);
      assertNotNull(dSCompiler0);
      assertEquals(23, dSCompiler0.getFreeParameters());
      assertEquals(24, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 23;
      doubleArray0[5] = (double) 23;
      doubleArray0[6] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.acosh(doubleArray0, 0, doubleArray0, 29);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertNotNull(dSCompiler0);
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(20, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[27];
      dSCompiler0.acos(doubleArray0, 3, doubleArray0, 3);
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(20, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(27, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 366, doubleArray0, 28, doubleArray0, 28);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 366
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertNotNull(dSCompiler0);
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(20, dSCompiler0.getSize());
      
      // Undeclared exception!
      try { 
        dSCompiler0.rootN((double[]) null, 3, 1455, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertNotNull(dSCompiler0);
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(20, dSCompiler0.getSize());
      
      int int0 = 26;
      double[] doubleArray0 = null;
      int int1 = 914;
      // Undeclared exception!
      try { 
        dSCompiler0.asinh((double[]) null, 914, (double[]) null, (-723));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertNotNull(dSCompiler0);
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(20, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getOrder());
      
      // Undeclared exception!
      try { 
        dSCompiler0.pow((double[]) null, (-2023), (-1325.57322), (double[]) null, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2578.9987;
      dSCompiler0.atan2(doubleArray1, 0, doubleArray0, 0, doubleArray1, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.5707963267948966}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2578.9987;
      doubleArray2[1] = 2578.9987;
      doubleArray2[2] = 1.5707963267948966;
      doubleArray2[3] = 2578.9987;
      doubleArray2[4] = (double) 0;
      dSCompiler0.multiply(doubleArray2, 0, doubleArray1, 0, doubleArray1, 0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertArrayEquals(new double[] {4051.0816847688134}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2578.9987, 2578.9987, 1.5707963267948966, 2578.9987, 0.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[6];
      dSCompiler0.remainder(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      dSCompiler0.tanh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      dSCompiler0.atan2(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertNotNull(dSCompiler0);
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(20, dSCompiler0.getSize());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(3, 3);
      assertSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertEquals(20, dSCompiler1.getSize());
      assertEquals(3, dSCompiler1.getFreeParameters());
      assertEquals(3, dSCompiler1.getOrder());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3;
      double double0 = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 3;
      doubleArray0[6] = (double) 3;
      doubleArray0[7] = (double) 3;
      doubleArray0[8] = (double) 3;
      int int1 = 42;
      // Undeclared exception!
      try { 
        dSCompiler1.pow(doubleArray0, 3, 42, doubleArray0, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertNotNull(dSCompiler0);
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(20, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[10];
      int int0 = 26;
      int int1 = (-723);
      // Undeclared exception!
      try { 
        dSCompiler0.asinh(doubleArray0, 3, doubleArray0, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2465, 0);
      assertNotNull(dSCompiler0);
      assertEquals(2465, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      // Undeclared exception!
      try { 
        dSCompiler0.multiply(doubleArray0, 897, (double[]) null, 272, (double[]) null, (-2361));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 897
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 0;
      dSCompiler0.remainder(doubleArray0, 0, doubleArray0, 0, doubleArray0, 1);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertArrayEquals(new double[] {0.0, Double.NaN, Double.NaN, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 2);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(2, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      
      // Undeclared exception!
      try { 
        dSCompiler1.sin(doubleArray0, 1593, doubleArray0, (-2276));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1593
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      int int2 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.asinh(doubleArray0, 1, doubleArray0, (-471));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertNotNull(dSCompiler0);
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(20, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getFreeParameters());
      
      int int1 = 45;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      // Undeclared exception!
      try { 
        dSCompiler0.atan(doubleArray0, 3, doubleArray0, (-2936));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertNotNull(dSCompiler0);
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(20, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[8];
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(3, 3);
      assertSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertEquals(3, dSCompiler1.getOrder());
      assertEquals(20, dSCompiler1.getSize());
      assertEquals(3, dSCompiler1.getFreeParameters());
      
      // Undeclared exception!
      try { 
        dSCompiler1.compose(doubleArray0, 3, doubleArray0, doubleArray0, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 1460;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 1460;
      doubleArray1[4] = (double) 1460;
      doubleArray1[5] = (double) 1460;
      doubleArray1[6] = (double) 1460;
      doubleArray1[7] = (double) 1460;
      dSCompiler0.sin(doubleArray0, 0, doubleArray1, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1460.0, 0.0, 1460.0, 1460.0, 1460.0, 1460.0, 1460.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        dSCompiler0.add((double[]) null, 1460, (double[]) null, 408, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertNotNull(dSCompiler0);
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(20, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[8];
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(3, 3);
      assertSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertEquals(3, dSCompiler1.getFreeParameters());
      assertEquals(20, dSCompiler1.getSize());
      assertEquals(3, dSCompiler1.getOrder());
      
      // Undeclared exception!
      try { 
        dSCompiler1.atanh(doubleArray0, 3, doubleArray0, 31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 1);
      assertNotNull(dSCompiler0);
      assertEquals(3, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 68;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = 1.0189624503698769E-162;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = 1.0189624503698769E-162;
      doubleArray1[2] = (double) 68;
      doubleArray1[3] = 1549.927840014;
      doubleArray1[4] = (double) 1;
      double double0 = dSCompiler0.taylor(doubleArray0, 1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(70.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertArrayEquals(new double[] {1.0, 2.0, 68.0, 1.0, 1.0189624503698769E-162}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0189624503698769E-162, 68.0, 1549.927840014, 1.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertNotNull(dSCompiler0);
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(20, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[8];
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(3, 3);
      assertSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertEquals(20, dSCompiler1.getSize());
      assertEquals(3, dSCompiler1.getOrder());
      assertEquals(3, dSCompiler1.getFreeParameters());
      
      double double0 = (-1.2322940607922115E-8);
      double double1 = 1.0;
      double double2 = 1.107980489730835;
      double double3 = (-1.0);
      int int1 = 3;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 3;
      doubleArray1[1] = (-1.2322940607922115E-8);
      // Undeclared exception!
      try { 
        dSCompiler1.sinh(doubleArray0, 3, doubleArray1, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      dSCompiler0.pow(doubleArray0, 0, 1.0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      dSCompiler0.asin(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      dSCompiler0.pow(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1174, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(1174, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1174;
      doubleArray0[1] = (double) 1174;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 1174;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1174;
      double double0 = dSCompiler0.taylor(doubleArray0, 0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1174.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(1174, dSCompiler0.getFreeParameters());
      assertArrayEquals(new double[] {1174.0, 1174.0, 0.0, 0.0, 1174.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1174.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        dSCompiler0.divide(doubleArray2, 958, doubleArray2, 1174, doubleArray2, 24);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 958
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertNotNull(dSCompiler0);
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(20, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[8];
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(3, 3);
      assertSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertEquals(3, dSCompiler1.getOrder());
      assertEquals(3, dSCompiler1.getFreeParameters());
      assertEquals(20, dSCompiler1.getSize());
      
      // Undeclared exception!
      try { 
        dSCompiler1.compose(doubleArray0, 31, doubleArray0, doubleArray0, 31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 12);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(12, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      
      int int0 = 960;
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 12;
      doubleArray1[1] = (double) 960;
      doubleArray1[2] = (-210.7600269);
      doubleArray1[3] = (double) 960;
      doubleArray1[4] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.log1p((double[]) null, 12, doubleArray1, 1870);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      dSCompiler0.add(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 2358.223396973551;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      dSCompiler0.remainder(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertArrayEquals(new double[] {Double.NaN, 0.0, 2358.223396973551, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1359;
      doubleArray0[1] = (double) 1359;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1359;
      doubleArray0[4] = (double) 1359;
      doubleArray0[5] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.remainder(doubleArray0, 0, doubleArray0, 0, doubleArray0, 1359);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1359
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getFreeParameters());
      
      int int1 = 1359;
      // Undeclared exception!
      try { 
        dSCompiler0.remainder((double[]) null, 1, (double[]) null, 0, (double[]) null, (-729));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 51);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(51, dSCompiler1.getOrder());
      
      try { 
        dSCompiler0.checkCompatibility(dSCompiler1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 51
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(2482, 0);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(2482, dSCompiler1.getFreeParameters());
      
      try { 
        dSCompiler1.checkCompatibility(dSCompiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2,482 != 0
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3381;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 3381;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 3381;
      doubleArray0[5] = (double) 3381;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 3381;
      doubleArray0[8] = (double) 3381;
      dSCompiler0.log1p(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertArrayEquals(new double[] {8.126222529458525, 0.0, 3381.0, 0.0, 3381.0, 3381.0, 0.0, 3381.0, 3381.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      dSCompiler0.asin(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertArrayEquals(new double[] {Double.NaN, 0.0, 3381.0, 0.0, 3381.0, 3381.0, 0.0, 3381.0, 3381.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[0];
      int int0 = dSCompiler0.getPartialDerivativeIndex(intArray0);
      assertEquals(0, int0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      // Undeclared exception!
      try { 
        dSCompiler0.tan(doubleArray0, 19, doubleArray0, 43);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 19
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 164;
      int int1 = 4;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(4, 4);
      assertNotNull(dSCompiler0);
      assertEquals(4, dSCompiler0.getOrder());
      assertEquals(4, dSCompiler0.getFreeParameters());
      assertEquals(70, dSCompiler0.getSize());
      
      // Undeclared exception!
      try { 
        dSCompiler0.cos((double[]) null, 4, (double[]) null, 164);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      int int2 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1;
      int int3 = 1726;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      int[] intArray0 = new int[1];
      intArray0[0] = 1726;
      try { 
        dSCompiler0.getPartialDerivativeIndex(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1,726 is larger than the maximum (0)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.log(doubleArray0, 0, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      dSCompiler0.asin(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      dSCompiler0.compose(doubleArray0, 0, doubleArray0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertNotNull(dSCompiler0);
      assertEquals(20, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 3;
      doubleArray0[6] = (double) 3;
      doubleArray0[7] = (double) 3;
      // Undeclared exception!
      try { 
        dSCompiler0.sin(doubleArray0, 3, doubleArray0, 162);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = null;
      int int0 = 2465;
      double[] doubleArray1 = new double[7];
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2465, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(2465, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      int int2 = dSCompiler0.getOrder();
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(2465, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      // Undeclared exception!
      try { 
        dSCompiler0.divide(doubleArray1, 2465, (double[]) null, 0, (double[]) null, 1145);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertNotNull(dSCompiler0);
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(20, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[8];
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(3, 3);
      assertSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertEquals(20, dSCompiler1.getSize());
      assertEquals(3, dSCompiler1.getFreeParameters());
      assertEquals(3, dSCompiler1.getOrder());
      
      // Undeclared exception!
      try { 
        dSCompiler1.asin(doubleArray0, 3, doubleArray0, (-3240));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[6];
      dSCompiler0.linearCombination(1995.2821852915886, doubleArray0, 0, (-37.90020540128114), doubleArray0, 0, 428.9395732, doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        dSCompiler0.getPartialDerivativeOrders((-763));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -763
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 0;
      int int1 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      int int2 = 0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      dSCompiler0.linearCombination((double) 1, doubleArray0, 0, 2578.9987, doubleArray1, 0, 2578.9987, doubleArray0, 0, (-1.2322940607922115E-8), doubleArray1, 1, doubleArray0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (double) 1;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 0;
      doubleArray1[8] = (double) 1;
      // Undeclared exception!
      try { 
        dSCompiler0.acosh(doubleArray1, 377, doubleArray1, 33);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 377
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertNotNull(dSCompiler0);
      assertEquals(20, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[8];
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(3, 3);
      assertSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertEquals(3, dSCompiler1.getOrder());
      assertEquals(3, dSCompiler1.getFreeParameters());
      assertEquals(20, dSCompiler1.getSize());
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 3;
      doubleArray1[1] = 0.2701040523123275;
      doubleArray1[2] = (double) 3;
      doubleArray1[3] = (double) 3;
      doubleArray1[4] = (double) 3;
      doubleArray1[5] = (double) 3;
      // Undeclared exception!
      try { 
        dSCompiler0.taylor(doubleArray0, 3, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 22
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(1, 1);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(2, dSCompiler1.getSize());
      assertEquals(1, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getOrder());
      
      try { 
        dSCompiler1.checkCompatibility(dSCompiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertNotNull(dSCompiler0);
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(20, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (double) 3;
      // Undeclared exception!
      try { 
        dSCompiler0.log10(doubleArray0, 3, doubleArray0, 2465);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[7];
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 447);
      assertNotNull(dSCompiler0);
      assertEquals(447, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      // Undeclared exception!
      try { 
        dSCompiler0.acos((double[]) null, (-451), (double[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1726, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(1726, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1726;
      doubleArray0[1] = 0.34300774335861206;
      doubleArray0[2] = (double) 1726;
      int int0 = dSCompiler0.getOrder();
      assertEquals(0, int0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(1726, dSCompiler0.getFreeParameters());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      int int1 = (-256);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-256);
      doubleArray0[1] = (double) 0;
      double double0 = dSCompiler0.taylor(doubleArray0, 0, doubleArray0);
      assertEquals((-256.0), double0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertArrayEquals(new double[] {(-256.0), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-256.0);
      doubleArray2[1] = (-256.0);
      doubleArray2[2] = (double) (-256);
      doubleArray2[3] = (double) (-256);
      // Undeclared exception!
      try { 
        dSCompiler0.remainder(doubleArray0, 0, doubleArray2, (-256), doubleArray0, (-256));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -256
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      int int0 = (-1440);
      dSCompiler0.cosh(doubleArray0, 3, doubleArray0, 3);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        dSCompiler0.add(doubleArray0, 5131, doubleArray0, 5131, doubleArray0, (-1440));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5131
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[6];
      dSCompiler0.linearCombination(1996.9, doubleArray0, 0, 0.0, doubleArray0, 0, 428.9395732, doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      int int2 = 22;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(22, 0);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(22, dSCompiler1.getFreeParameters());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      
      try { 
        dSCompiler0.checkCompatibility(dSCompiler1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 22
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (-5.617718879466363E-299);
      dSCompiler0.divide(doubleArray1, 0, doubleArray0, 0, doubleArray1, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, (-5.617718879466363E-299)}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      dSCompiler0.cos(doubleArray0, 0, doubleArray0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      dSCompiler0.exp(doubleArray0, 0, doubleArray0, 1);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertArrayEquals(new double[] {1.0, 2.718281828459045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1726, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1726, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      dSCompiler0.pow(doubleArray0, 2465, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1726, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 0.34300774335861206;
      doubleArray1[3] = (double) 2465;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 2465;
      // Undeclared exception!
      try { 
        dSCompiler0.log10(doubleArray1, 0, doubleArray1, (-2144));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[4];
      dSCompiler0.atan(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      doubleArray0[0] = (double) 0;
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      doubleArray0[3] = (double) 0;
      int int0 = dSCompiler0.getFreeParameters();
      assertEquals(0, int0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      try { 
        dSCompiler0.getPartialDerivativeIndex(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(1631, 0);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(1631, dSCompiler1.getFreeParameters());
      
      int[] intArray0 = dSCompiler0.getPartialDerivativeOrders(0);
      assertNotSame(dSCompiler0, dSCompiler1);
      assertNotNull(intArray0);
      assertFalse(dSCompiler0.equals((Object)dSCompiler1));
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 0, (-2768), doubleArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertNotNull(dSCompiler0);
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(20, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[8];
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(3, 3);
      assertSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertEquals(3, dSCompiler1.getFreeParameters());
      assertEquals(20, dSCompiler1.getSize());
      assertEquals(3, dSCompiler1.getOrder());
      
      // Undeclared exception!
      try { 
        dSCompiler1.log1p(doubleArray0, 3, doubleArray0, (-645));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = null;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      
      // Undeclared exception!
      try { 
        dSCompiler1.log10((double[]) null, (-3600), (double[]) null, 44);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      double double0 = dSCompiler0.taylor(doubleArray0, 1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      doubleArray0[4] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.asin(doubleArray0, 0, doubleArray0, 396);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[6];
      dSCompiler0.log(doubleArray0, 1, doubleArray0, 1);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertArrayEquals(new double[] {0.0, Double.NEGATIVE_INFINITY, Double.NaN, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DSCompiler.getCompiler(1, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getOrder());
      
      dSCompiler0.checkCompatibility(dSCompiler1);
      assertSame(dSCompiler0, dSCompiler1);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getOrder());
      
      int int0 = 22;
      int int1 = 1274;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler1.pow(doubleArray0, 1274, 27, doubleArray1, 779);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1274
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int int0 = dSCompiler0.getFreeParameters();
      assertEquals(0, int0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      int int1 = 4045;
      int int2 = 2478;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(2478, 0);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(2478, dSCompiler1.getFreeParameters());
      
      dSCompiler1.tanh(doubleArray0, 0, doubleArray0, 0);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(2478, dSCompiler1.getFreeParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      int int3 = 2;
      int int4 = 2075;
      // Undeclared exception!
      try { 
        dSCompiler1.log1p(doubleArray1, 0, doubleArray0, 513);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2578.9987;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 2578.9987;
      doubleArray2[1] = 2578.9987;
      doubleArray2[2] = 2578.9987;
      doubleArray2[3] = 911.8617386477;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = 2578.9987;
      doubleArray2[7] = 2578.9987;
      doubleArray2[8] = (double) 0;
      dSCompiler0.subtract(doubleArray0, 0, doubleArray2, 0, doubleArray0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {(-2578.9987), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2578.9987, 2578.9987, 2578.9987, 911.8617386477, 0.0, 0.0, 2578.9987, 2578.9987, 0.0}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      
      // Undeclared exception!
      try { 
        dSCompiler0.sin(doubleArray2, 45, doubleArray0, 45);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 45
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1.1279135096919439E268;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      dSCompiler0.log(doubleArray0, 0, doubleArray0, 1);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {0.0, Double.NEGATIVE_INFINITY, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      dSCompiler0.tan(doubleArray0, 0, doubleArray1, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {0.0, Double.NEGATIVE_INFINITY, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination(0.5, (double[]) null, 2465, (-3.141592653589793), doubleArray1, 2465, 433.0, (double[]) null, 3157, doubleArray0, (-331));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      dSCompiler0.acos(doubleArray0, 0, doubleArray0, 1);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertArrayEquals(new double[] {0.0, 1.5707963267948966, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = null;
      int int1 = 22;
      int int2 = 1;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(22, 1);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(1, dSCompiler1.getOrder());
      assertEquals(23, dSCompiler1.getSize());
      assertEquals(22, dSCompiler1.getFreeParameters());
      
      // Undeclared exception!
      try { 
        dSCompiler1.atanh(doubleArray0, 0, (double[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 45);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(45, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      // Undeclared exception!
      try { 
        dSCompiler0.sin((double[]) null, (-3892), doubleArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      int int0 = (-1586);
      intArray0[5] = (-1586);
      intArray0[6] = 0;
      intArray0[7] = 0;
      try { 
        dSCompiler0.getPartialDerivativeIndex(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 0
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 65);
      assertNotNull(dSCompiler0);
      assertEquals(65, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      int int0 = dSCompiler0.getOrder();
      assertEquals(65, int0);
      assertEquals(65, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      // Undeclared exception!
      try { 
        dSCompiler0.pow((double[]) null, 814, doubleArray0, 814, (double[]) null, 814);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 1726;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1726, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1726, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1726;
      doubleArray0[2] = (double) 1726;
      doubleArray0[3] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.atanh((double[]) null, 0, doubleArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 1.1279135096919439E268;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = 1.1279135096919439E268;
      dSCompiler0.pow(doubleArray1, 0, (-2185.0783), doubleArray0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.1279135096919439E268, 0.0, 1.1279135096919439E268}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      doubleArray0[1] = 1.1279135096919439E268;
      dSCompiler0.atanh(doubleArray1, 0, doubleArray0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertArrayEquals(new double[] {0.0, 1.1279135096919439E268, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.1279135096919439E268, 0.0, 1.1279135096919439E268}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      dSCompiler0.log(doubleArray0, 0, doubleArray0, 1);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertArrayEquals(new double[] {0.0, Double.NEGATIVE_INFINITY, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = 8.954135150208654E-113;
      doubleArray2[2] = 1.1279135096919439E268;
      doubleArray2[3] = (double) 1;
      doubleArray2[4] = (-525.91872);
      doubleArray2[5] = (double) 1;
      doubleArray2[6] = (-525.91872);
      doubleArray2[7] = 1.1279135096919439E268;
      doubleArray2[8] = (double) 0;
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[8];
      double double0 = dSCompiler0.taylor(doubleArray0, 0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      int int0 = 995;
      int int1 = 948;
      // Undeclared exception!
      try { 
        dSCompiler0.cos(doubleArray0, 16, doubleArray0, 948);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[8];
      // Undeclared exception!
      try { 
        dSCompiler0.taylor(doubleArray0, 63, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 63
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      int int2 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      // Undeclared exception!
      try { 
        dSCompiler0.acosh((double[]) null, 1, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = null;
      int int0 = 2465;
      double[] doubleArray1 = new double[7];
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2465, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(2465, dSCompiler0.getFreeParameters());
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-2174);
      intArray0[1] = 2465;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 2465;
      try { 
        dSCompiler0.getPartialDerivativeIndex(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 2,465
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(10, 0);
      assertNotNull(dSCompiler0);
      assertEquals(10, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = null;
      int int1 = 543;
      // Undeclared exception!
      try { 
        dSCompiler0.pow((double[]) null, 543, (-2240), (double[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
      try { 
        dSCompiler0.atan2((double[]) null, 600, (double[]) null, 0, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      int int2 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      int int3 = 0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 2578.9987;
      // Undeclared exception!
      try { 
        dSCompiler0.exp(doubleArray0, 0, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = null;
      int int1 = 515;
      int int2 = 27;
      int int3 = 68;
      // Undeclared exception!
      try { 
        dSCompiler0.subtract((double[]) null, 27, (double[]) null, (-1737), (double[]) null, 68);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = null;
      int int1 = 995;
      int int2 = 19;
      int int3 = 2209;
      int int4 = (-2149);
      int int5 = 24;
      // Undeclared exception!
      try { 
        dSCompiler0.tan((double[]) null, 995, (double[]) null, 24);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      dSCompiler0.asinh(doubleArray0, 0, doubleArray1, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      doubleArray1[0] = 2578.9987;
      doubleArray1[1] = 798.093689253;
      dSCompiler0.atan2(doubleArray1, 0, doubleArray1, 0, doubleArray1, 0);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertArrayEquals(new double[] {0.7853981633974483, 798.093689253}, doubleArray1, 0.01);
      assertEquals(2, doubleArray1.length);
      
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (double) 0;
      dSCompiler0.divide(doubleArray0, 3, doubleArray0, 545, doubleArray1, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 798.093689253}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination(798.093689253, doubleArray1, 12, 0.0, doubleArray1, 0, 2.0, doubleArray1, 0, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      int int1 = 0;
      double[] doubleArray0 = new double[6];
      // Undeclared exception!
      try { 
        dSCompiler0.checkCompatibility((DSCompiler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2578.9987;
      dSCompiler0.atan2(doubleArray1, 0, doubleArray0, 0, doubleArray1, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.5707963267948966}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(0, dSCompiler1.getOrder());
      
      // Undeclared exception!
      try { 
        dSCompiler1.sinh(doubleArray1, (-1933), doubleArray0, 1761);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1933
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 1717);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1717, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2376.44464);
      doubleArray0[1] = (double) 111;
      doubleArray0[2] = (double) 111;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (-256);
      int int1 = 3;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 0, doubleArray0, 3, doubleArray0, 558);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2465, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(2465, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination((double) 2465, doubleArray0, 0, (double) 2465, doubleArray0, 0, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      int int1 = 1303;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(1303, 0);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(1303, dSCompiler1.getFreeParameters());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1242;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1303;
      doubleArray0[4] = (double) 1242;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 1242;
      doubleArray0[7] = (double) 1303;
      doubleArray0[8] = (double) 1303;
      dSCompiler1.acos(doubleArray0, 0, doubleArray0, 0);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(1303, dSCompiler1.getFreeParameters());
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 1303.0, 1242.0, 0.0, 1242.0, 1303.0, 1303.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      int int2 = 1187;
      int int3 = 11;
      // Undeclared exception!
      try { 
        DSCompiler.getCompiler(11, (-3375));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[7];
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2465, 0);
      assertNotNull(dSCompiler0);
      assertEquals(2465, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      int int1 = 1765;
      // Undeclared exception!
      try { 
        dSCompiler0.pow((double[]) null, 1765, doubleArray1, 0, (double[]) null, 1765);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      dSCompiler0.acosh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      dSCompiler0.sinh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[6];
      // Undeclared exception!
      try { 
        dSCompiler0.atanh(doubleArray0, 810, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 810
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        dSCompiler0.remainder(doubleArray0, 600, doubleArray0, 0, doubleArray0, 54);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 600
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2578.9987;
      doubleArray1[1] = 798.093689253;
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      dSCompiler0.sinh(doubleArray0, 0, doubleArray0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = 2578.9987;
      doubleArray2[4] = 2767.02;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) 0;
      doubleArray2[7] = 798.093689253;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 2767.02;
      doubleArray3[1] = (double) 316;
      // Undeclared exception!
      try { 
        dSCompiler0.add(doubleArray2, 316, doubleArray0, 0, doubleArray3, 552);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 316
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2578.9987;
      doubleArray1[1] = 798.093689253;
      dSCompiler0.atan2(doubleArray1, 0, doubleArray1, 0, doubleArray1, 0);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {0.7853981633974483, 798.093689253}, doubleArray1, 0.01);
      assertEquals(2, doubleArray1.length);
      
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      dSCompiler0.sinh(doubleArray0, 0, doubleArray0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.asin((double[]) null, 0, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[6];
      // Undeclared exception!
      try { 
        dSCompiler0.acosh(doubleArray0, 0, doubleArray0, (-1655));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      dSCompiler0.sin(doubleArray0, 1, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      double double0 = 6.493134033643613E50;
      doubleArray0[1] = 6.493134033643613E50;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      dSCompiler0.divide(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertArrayEquals(new double[] {Double.NaN, 6.493134033643613E50, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      doubleArray0[4] = (double) 0;
      int int2 = 0;
      int int3 = 0;
      dSCompiler0.expm1(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertArrayEquals(new double[] {Double.NaN, 6.493134033643613E50, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        dSCompiler0.sinh(doubleArray0, 0, doubleArray0, 1737);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 65);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(65, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getFreeParameters());
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 65;
      doubleArray1[1] = (double) 65;
      doubleArray1[2] = (double) 19;
      // Undeclared exception!
      try { 
        dSCompiler1.cosh(doubleArray0, 0, doubleArray1, 84);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      dSCompiler0.pow(doubleArray0, 3, (-203.884942928101), doubleArray0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      int int1 = (-256);
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getFreeParameters());
      
      // Undeclared exception!
      try { 
        dSCompiler1.acosh(doubleArray1, (-256), doubleArray1, 1520);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -256
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      int int0 = 500;
      double double0 = 0.0;
      int int1 = 63;
      int int2 = 444;
      // Undeclared exception!
      try { 
        dSCompiler0.sin(doubleArray0, 0, doubleArray0, 444);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = 1726;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1726, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1726, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1726;
      doubleArray0[2] = (double) 1726;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 1726;
      doubleArray0[5] = (-2023.0680671377916);
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = (-1298.9269601);
      // Undeclared exception!
      try { 
        dSCompiler0.acos(doubleArray1, 1660, doubleArray1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1660
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 65);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(65, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      
      // Undeclared exception!
      try { 
        dSCompiler0.getPartialDerivativeIndex((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[7];
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2465, 0);
      assertNotNull(dSCompiler0);
      assertEquals(2465, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      // Undeclared exception!
      try { 
        dSCompiler0.cosh(doubleArray1, 0, (double[]) null, 1765);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      dSCompiler0.cos(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      doubleArray0[1] = (double) 0;
      int int1 = (-1364);
      // Undeclared exception!
      try { 
        dSCompiler0.atan2(doubleArray0, (-1364), doubleArray0, 0, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1364
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = 1726;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1726, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(1726, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.34300774335861206;
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination(0.34300774335861206, doubleArray0, 1726, 0.0, doubleArray0, 1726, (double[]) null, 320);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1726
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      dSCompiler0.log(doubleArray0, 0, doubleArray0, 2);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertArrayEquals(new double[] {0.0, 0.0, Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      int int1 = (-256);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) (-256);
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.cos(doubleArray1, 0, doubleArray1, 4206);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = null;
      int int1 = (-646);
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(59, 0);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(59, dSCompiler1.getFreeParameters());
      assertEquals(0, dSCompiler1.getOrder());
      
      // Undeclared exception!
      try { 
        dSCompiler1.atan((double[]) null, 0, (double[]) null, 59);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertNotNull(dSCompiler0);
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(20, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[8];
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(3, 3);
      assertSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertEquals(3, dSCompiler1.getOrder());
      assertEquals(20, dSCompiler1.getSize());
      assertEquals(3, dSCompiler1.getFreeParameters());
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 3;
      doubleArray1[1] = 2400.9570245177765;
      doubleArray1[2] = (double) 3;
      doubleArray1[3] = (double) 3;
      doubleArray1[4] = (double) 3;
      doubleArray1[5] = (double) 3;
      doubleArray1[6] = (double) 3;
      doubleArray1[7] = (double) 3;
      // Undeclared exception!
      try { 
        dSCompiler1.cos(doubleArray1, 3, doubleArray1, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 3);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(3, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      
      // Undeclared exception!
      try { 
        dSCompiler1.rootN(doubleArray0, 2, 3, doubleArray0, 749);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      int int1 = (-1364);
      // Undeclared exception!
      try { 
        dSCompiler0.atan2(doubleArray0, (-1364), doubleArray0, 0, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1364
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      double double0 = 6.493134033643613E50;
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination((double) 0, (double[]) null, (-2763), (-301.720772), doubleArray0, 0, (double) 0, doubleArray0, 0, 0.0, (double[]) null, 0, (double[]) null, (-2763));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      dSCompiler0.sinh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 6.493134033643613E50;
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.expm1((double[]) null, 438, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 656.13245453693;
      // Undeclared exception!
      try { 
        dSCompiler0.subtract(doubleArray0, (-102), doubleArray0, (-1), doubleArray1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -102
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = 1726;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1726, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(1726, dSCompiler0.getFreeParameters());
      
      double double0 = 0.34300774335861206;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.34300774335861206;
      doubleArray0[2] = 0.34300774335861206;
      doubleArray0[3] = 0.34300774335861206;
      // Undeclared exception!
      try { 
        dSCompiler0.cos(doubleArray0, 1726, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1726
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 3.141592653589793;
      dSCompiler0.tanh(doubleArray0, 1, doubleArray0, 0);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 3.141592653589793}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        dSCompiler0.tan(doubleArray0, 0, doubleArray0, 178);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = 2968;
      // Undeclared exception!
      DSCompiler.getCompiler(2968, 2968);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 2218;
      // Undeclared exception!
      try { 
        dSCompiler0.rootN(doubleArray0, (-2216), 2, doubleArray0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2216
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = 1726;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1726, 0);
      double double0 = 0.34300774335861206;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.34300774335861206;
      doubleArray0[2] = 0.34300774335861206;
      doubleArray0[3] = 0.34300774335861206;
      doubleArray0[4] = 0.34300774335861206;
      doubleArray0[5] = 0.34300774335861206;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.exp(doubleArray0, 26, (double[]) null, (-3217));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 26
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.log(doubleArray0, (-3755), doubleArray0, 800);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3755
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      double double0 = 6.493134033643613E50;
      doubleArray0[1] = 6.493134033643613E50;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.divide(doubleArray0, 0, doubleArray0, (-4032), doubleArray0, (-4032));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4032
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1726, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.34300774335861206;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1726;
      doubleArray0[4] = (double) 1726;
      // Undeclared exception!
      try { 
        dSCompiler0.asin(doubleArray0, 0, doubleArray0, (-745));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      dSCompiler0.log10(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      double double0 = 6.493134033643613E50;
      doubleArray0[1] = 6.493134033643613E50;
      doubleArray0[2] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.atan(doubleArray0, 0, doubleArray0, (-256));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      int int1 = 1520;
      int int2 = (-1352);
      // Undeclared exception!
      try { 
        dSCompiler0.acosh(doubleArray0, (-1352), doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1352
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.rootN(doubleArray0, 0, 3, doubleArray0, 972);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      dSCompiler0.rootN(doubleArray0, 0, 0, doubleArray0, 0);
      // Undeclared exception!
      try { 
        dSCompiler0.expm1(doubleArray0, 2684, doubleArray0, 66);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2684
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.rootN(doubleArray0, 1805, 30, doubleArray0, 578);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1805
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DSCompiler.getCompiler(1726, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.34300774335861206;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1726;
      doubleArray0[4] = (double) 1726;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 1);
      dSCompiler0.log10(doubleArray0, 2, doubleArray0, 1);
      assertArrayEquals(new double[] {0.34300774335861206, Double.NEGATIVE_INFINITY, 0.0, 1726.0, 1726.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getOrder());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DSCompiler.getCompiler(0, 0);
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      dSCompiler0.getSize();
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.asin(doubleArray0, 995, doubleArray0, 19);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 995
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      int int2 = 486;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 486;
      int int3 = (-3248);
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 0, 2465, doubleArray0, (-3248));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      // Undeclared exception!
      try { 
        dSCompiler0.sinh((double[]) null, 0, (double[]) null, 338);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[5];
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 0, doubleArray0, 4544, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4544
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      // Undeclared exception!
      try { 
        dSCompiler0.tanh((double[]) null, 0, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.rootN(doubleArray0, (-3568), (-3568), doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3568
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = 721;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(721, 0);
      double[] doubleArray0 = new double[0];
      int int2 = 0;
      double double0 = 772.0;
      int int3 = (-1753);
      int int4 = 1525;
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination(0.5, doubleArray0, 700, (double) 721, doubleArray0, 0, 772.0, doubleArray0, (-1753), 0.0, doubleArray0, 1525, doubleArray0, 700);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 700
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      double double0 = 6.493134033643613E50;
      doubleArray0[1] = 6.493134033643613E50;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      int int1 = 0;
      int int2 = 0;
      dSCompiler0.expm1(doubleArray0, 0, doubleArray0, 0);
      int int3 = 1737;
      // Undeclared exception!
      try { 
        dSCompiler0.sinh(doubleArray0, 0, doubleArray0, 1737);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.log(doubleArray0, (-4713), doubleArray0, (-3755));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4713
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = null;
      int int1 = 486;
      int int2 = 2465;
      // Undeclared exception!
      try { 
        dSCompiler0.pow((double[]) null, 486, 0, (double[]) null, 2465);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) (-3903);
      // Undeclared exception!
      try { 
        dSCompiler0.log10(doubleArray0, (-3903), doubleArray1, 1641);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3903
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int int0 = 3;
      DSCompiler.getCompiler(3, 3);
      double[] doubleArray0 = new double[8];
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      double double0 = 0.0;
      int int1 = 273;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 3, 0.0, doubleArray0, 273);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = 2965;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2965, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2965;
      int int2 = 17;
      // Undeclared exception!
      try { 
        dSCompiler0.tanh(doubleArray0, 17, doubleArray0, 2965);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      int int1 = 203;
      int int2 = (-748);
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray1, 203, 2.0, doubleArray1, (-748));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 203
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = (double) (-1);
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = 1752.878179691878;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) (-1);
      doubleArray1[8] = (double) (-1);
      // Undeclared exception!
      try { 
        dSCompiler0.divide(doubleArray0, (-1), doubleArray0, 0, doubleArray1, (-3646));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int int0 = 0;
      int int1 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 3;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 3;
      doubleArray1[5] = (double) 3;
      doubleArray1[6] = (double) 0;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 3;
      doubleArray2[2] = (double) 3;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 0;
      dSCompiler0.tanh(doubleArray1, 0, doubleArray2, 0);
      // Undeclared exception!
      try { 
        dSCompiler0.tan(doubleArray0, 3, doubleArray0, 538);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      int int1 = 2218;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 2218;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 2218;
      doubleArray1[3] = (double) 2218;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.asinh(doubleArray1, 0, doubleArray0, (-2044));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int int0 = (-2098);
      int int1 = 1484;
      // Undeclared exception!
      try { 
        DSCompiler.getCompiler((-2098), 1484);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        dSCompiler0.log1p(doubleArray0, 0, doubleArray1, 3381);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int int0 = 3230;
      // Undeclared exception!
      DSCompiler.getCompiler(3230, 3230);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1726, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.34300774335861206;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1726;
      doubleArray0[4] = (double) 1726;
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination(0.34300774335861206, doubleArray0, 1380, 3.141592653589793, doubleArray0, (-1161), 0.0, doubleArray0, (-745), doubleArray0, (-1161));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1380
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      // Undeclared exception!
      DSCompiler.getCompiler(3, 1250);
  }
}
