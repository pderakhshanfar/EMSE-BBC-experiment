/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 08:51:10 GMT 2021
 */

package org.apache.commons.math3.analysis.differentiation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.differentiation.DSCompiler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DSCompiler_ESTest extends DSCompiler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[3];
      int int0 = 3;
      double[] doubleArray1 = null;
      int int1 = 2;
      // Undeclared exception!
      try { 
        dSCompiler0.rootN(doubleArray0, 2, 3, (double[]) null, (-1715));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3064);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(3064, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 3064;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 3064;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 3064;
      // Undeclared exception!
      dSCompiler0.tan(doubleArray0, 0, doubleArray0, 984);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 2212);
      assertNotNull(dSCompiler0);
      assertEquals(2212, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2212;
      doubleArray0[2] = (double) 2212;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 2212;
      // Undeclared exception!
      dSCompiler0.asin(doubleArray0, 0, doubleArray0, 2212);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 1339);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(1339, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1339;
      doubleArray0[1] = (double) (-488);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-488);
      doubleArray0[4] = (double) 5;
      doubleArray0[5] = (double) (-488);
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) (-488);
      doubleArray0[8] = (double) 0;
      // Undeclared exception!
      dSCompiler0.atan(doubleArray0, 5, doubleArray0, 5);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 638);
      assertNotNull(dSCompiler0);
      assertEquals(638, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 638;
      doubleArray0[3] = (double) 638;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 877.8188297535;
      doubleArray0[6] = (double) 638;
      doubleArray0[7] = (double) 638;
      doubleArray0[8] = (double) 0;
      int int0 = 763;
      // Undeclared exception!
      try { 
        dSCompiler0.sinh(doubleArray0, 1, doubleArray0, 763);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 763
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      int int0 = dSCompiler0.getFreeParameters();
      assertEquals(0, int0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      dSCompiler0.subtract(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.subtract((double[]) null, 12, doubleArray0, 31, (double[]) null, (-2855));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      dSCompiler0.cos(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(3, doubleArray0.length);
      
      dSCompiler0.log(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(3, doubleArray0.length);
      
      int int0 = dSCompiler0.getSize();
      assertEquals(1, int0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      dSCompiler0.add(doubleArray0, 1, doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 0;
      int int1 = 1041;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 1041);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(1041, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1041;
      doubleArray0[1] = 1.0;
      // Undeclared exception!
      dSCompiler0.acos(doubleArray0, 0, doubleArray0, 0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 549);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(549, dSCompiler0.getOrder());
      
      dSCompiler0.remainder(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(549, dSCompiler0.getOrder());
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        dSCompiler0.tan(doubleArray0, 144, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 144
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 2);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(3, dSCompiler0.getSize());
      
      int[] intArray0 = dSCompiler0.getPartialDerivativeOrders(0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(3, dSCompiler0.getSize());
      assertEquals(1, intArray0.length);
      
      int int0 = 2;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 2;
      dSCompiler0.acosh(doubleArray0, 1, doubleArray0, 1);
      assertArrayEquals(new double[] {0.0, Double.NaN, Double.NaN, Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(3, dSCompiler0.getSize());
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 1;
      // Undeclared exception!
      try { 
        dSCompiler0.remainder(doubleArray1, 2, doubleArray1, 2, doubleArray1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertNotNull(dSCompiler0);
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(20, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[11];
      int int0 = 5;
      // Undeclared exception!
      try { 
        dSCompiler0.sin(doubleArray0, 3, doubleArray0, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertNotNull(dSCompiler0);
      assertEquals(20, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(3, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[11];
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-488);
      // Undeclared exception!
      try { 
        dSCompiler0.cosh(doubleArray0, 3, doubleArray0, (-294));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -294
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[5] = (double) 0;
      double double0 = dSCompiler0.taylor(doubleArray0, 0, doubleArray0);
      assertEquals(1.0, double0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(7, doubleArray0.length);
      
      doubleArray0[6] = 1.0;
      dSCompiler0.linearCombination(1.0, doubleArray0, 0, 0.0, doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[3];
      dSCompiler0.multiply(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 2);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = 160.1;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 1;
      int int0 = 26;
      // Undeclared exception!
      try { 
        dSCompiler0.log10(doubleArray0, 2, doubleArray0, 26);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 26
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      // Undeclared exception!
      try { 
        dSCompiler0.getPartialDerivativeIndex((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      dSCompiler0.log(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(3, doubleArray0.length);
      
      double double0 = dSCompiler0.taylor(doubleArray0, 0, doubleArray0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(3, doubleArray0.length);
      
      dSCompiler0.atan(doubleArray0, 2, doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.rootN(doubleArray1, 2044, 0, doubleArray0, 106);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2044
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 1.0;
      dSCompiler0.linearCombination(1.0, doubleArray0, 0, 0.0, doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 586;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 586);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(586, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 586);
      assertNotNull(dSCompiler1);
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(586, dSCompiler1.getOrder());
      assertSame(dSCompiler1, dSCompiler0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 586;
      doubleArray0[1] = (double) 586;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 586;
      doubleArray0[5] = (double) 586;
      // Undeclared exception!
      dSCompiler1.acosh(doubleArray0, 0, doubleArray0, 2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertNotNull(dSCompiler0);
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(20, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1375);
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = 2672.99003311111;
      doubleArray0[3] = 2672.99003311111;
      doubleArray0[4] = (double) (-1375);
      doubleArray0[5] = (double) (-1375);
      // Undeclared exception!
      try { 
        dSCompiler0.cos(doubleArray0, 3, doubleArray0, 37);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 37
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertNotNull(dSCompiler0);
      assertEquals(20, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(3, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1375);
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = 2672.99003311111;
      doubleArray0[3] = 2672.99003311111;
      doubleArray0[4] = (double) (-1375);
      doubleArray0[5] = (double) (-1375);
      doubleArray0[6] = 2672.99003311111;
      // Undeclared exception!
      try { 
        dSCompiler0.atan(doubleArray0, 3, doubleArray0, (-1375));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1375
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 2);
      assertNotNull(dSCompiler0);
      assertEquals(3, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      int int0 = dSCompiler0.getPartialDerivativeIndex(intArray0);
      assertEquals(1, int0);
      assertArrayEquals(new int[] {1}, intArray0);
      assertEquals(3, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      // Undeclared exception!
      try { 
        dSCompiler0.atan(doubleArray0, (-1969), doubleArray0, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1969
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 2);
      assertNotNull(dSCompiler0);
      assertEquals(3, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      
      int int1 = (-973);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 5;
      doubleArray0[3] = (double) 5;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 5;
      doubleArray0[6] = (double) 2;
      // Undeclared exception!
      try { 
        dSCompiler0.cosh(doubleArray0, 5, doubleArray0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3064);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(3064, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 1;
      // Undeclared exception!
      dSCompiler0.atanh(doubleArray0, 3, doubleArray0, 1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 0;
      int int1 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertNotNull(dSCompiler0);
      assertEquals(20, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[11];
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(3, 0);
      assertNotNull(dSCompiler1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(3, dSCompiler1.getFreeParameters());
      assertNotSame(dSCompiler1, dSCompiler0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.acosh(doubleArray0, 3, doubleArray0, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[1];
      int int1 = dSCompiler0.getFreeParameters();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      int int2 = 18;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 18);
      assertNotNull(dSCompiler1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(18, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertNotSame(dSCompiler1, dSCompiler0);
      
      dSCompiler1.exp(doubleArray0, 0, doubleArray0, 0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(18, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(1, doubleArray0.length);
      assertNotSame(dSCompiler1, dSCompiler0);
      
      try { 
        dSCompiler0.checkCompatibility(dSCompiler1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 18
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      int int0 = dSCompiler0.getFreeParameters();
      assertEquals(0, int0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1286;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 0;
      dSCompiler0.pow(doubleArray0, 1286, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {1.0, 0.0, 1286.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(5, doubleArray0.length);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(1, 0);
      assertNotNull(dSCompiler1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getFreeParameters());
      assertNotSame(dSCompiler1, dSCompiler0);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1;
      // Undeclared exception!
      try { 
        dSCompiler0.atan(doubleArray1, (-4407), doubleArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4407
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[7];
      dSCompiler0.log10(doubleArray0, 1, doubleArray0, 1);
      assertArrayEquals(new double[] {0.0, Double.NEGATIVE_INFINITY, Double.NaN, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(7, doubleArray0.length);
      
      dSCompiler0.sin(doubleArray0, 1, doubleArray0, 1);
      assertArrayEquals(new double[] {0.0, Double.NaN, Double.NaN, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = 0.0;
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 1;
      double double1 = 0.5;
      doubleArray1[4] = 0.5;
      doubleArray1[5] = (double) 1;
      // Undeclared exception!
      try { 
        dSCompiler0.atan2(doubleArray1, 1, doubleArray0, 1, doubleArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertNotNull(dSCompiler0);
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(20, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[11];
      // Undeclared exception!
      try { 
        dSCompiler0.asin(doubleArray0, 5, doubleArray0, (-488));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -488
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3064);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(3064, dSCompiler0.getOrder());
      
      // Undeclared exception!
      try { 
        dSCompiler0.tan((double[]) null, 1, (double[]) null, (-1679));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 2);
      assertNotNull(dSCompiler0);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(10, dSCompiler0.getSize());
      
      int[] intArray0 = dSCompiler0.getPartialDerivativeOrders(3);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 1, 0}, intArray0);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(10, dSCompiler0.getSize());
      assertEquals(3, intArray0.length);
      
      // Undeclared exception!
      try { 
        dSCompiler0.atan((double[]) null, (-969), (double[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[1];
      int int1 = dSCompiler0.getFreeParameters();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      dSCompiler0.atanh(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = null;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(416, 0);
      assertNotNull(dSCompiler1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(416, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getOrder());
      assertNotSame(dSCompiler1, dSCompiler0);
      
      try { 
        dSCompiler0.checkCompatibility(dSCompiler1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 416
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = null;
      int int1 = (-1887);
      int int2 = 1590;
      // Undeclared exception!
      try { 
        dSCompiler0.acosh((double[]) null, (-1887), (double[]) null, 1590);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try { 
        dSCompiler0.multiply(doubleArray0, 0, doubleArray0, 0, doubleArray0, (-7));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -7
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 20);
      assertNotNull(dSCompiler1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(20, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertNotSame(dSCompiler1, dSCompiler0);
      
      try { 
        dSCompiler0.checkCompatibility(dSCompiler1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 20
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 2);
      assertNotNull(dSCompiler0);
      assertEquals(3, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      dSCompiler0.sinh(doubleArray0, 2, doubleArray0, 1);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(6, doubleArray0.length);
      
      doubleArray0[1] = 1.4217997464522202E-8;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = 1.0;
      dSCompiler0.tan(doubleArray0, 1, doubleArray0, 1);
      assertArrayEquals(new double[] {2.0, 1.4217997464522203E-8, 2.0000000000000004, 1.00000011374398, 2.0, 1.0}, doubleArray0, 0.01);
      assertEquals(3, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(6, doubleArray0.length);
      
      dSCompiler0.tanh(doubleArray0, 2, doubleArray0, 1);
      assertArrayEquals(new double[] {2.0, 0.9640275800758169, 0.07065083288927045, 0.005082931291102821, 2.0, 1.0}, doubleArray0, 0.01);
      assertEquals(3, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = 1;
      int int1 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 2);
      assertNotNull(dSCompiler0);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getSize());
      
      int[] intArray0 = dSCompiler0.getPartialDerivativeOrders(0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getSize());
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[7];
      double double0 = 1.0;
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 2;
      dSCompiler0.log1p(doubleArray0, 1, doubleArray0, 2);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0}, doubleArray0, 0.01);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getSize());
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        dSCompiler0.rootN(doubleArray0, 24, 224, doubleArray0, 2726);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 24
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 2);
      assertNotNull(dSCompiler0);
      assertEquals(3, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      dSCompiler0.sinh(doubleArray0, 2, doubleArray0, 1);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(6, doubleArray0.length);
      
      doubleArray0[1] = 1.4217997464522202E-8;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = 1.0;
      dSCompiler0.cos(doubleArray0, 2, doubleArray0, 1);
      assertArrayEquals(new double[] {2.0, (-0.4161468365471424), (-0.9092974268256817), (-1.402448017104221), 2.0, 1.0}, doubleArray0, 0.01);
      assertEquals(3, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        dSCompiler0.atanh(doubleArray1, (-31), doubleArray1, 30);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -31
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 2);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      
      int[] intArray0 = dSCompiler0.getPartialDerivativeOrders(0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[6];
      // Undeclared exception!
      try { 
        dSCompiler0.atan(doubleArray0, 2, doubleArray0, (-3171));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3171
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertNotNull(dSCompiler0);
      assertEquals(20, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(3, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[11];
      int int1 = dSCompiler0.getFreeParameters();
      assertTrue(int1 == int0);
      assertEquals(3, int1);
      assertEquals(20, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(3, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
      try { 
        dSCompiler0.atanh(doubleArray0, 3, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 2);
      assertNotNull(dSCompiler0);
      assertEquals(3, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = 1.4217997464522202E-8;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = 1.0;
      dSCompiler0.cos(doubleArray0, 2, doubleArray0, 1);
      assertArrayEquals(new double[] {2.0, (-0.4161468365471424), (-0.9092974268256817), (-1.402448017104221), 2.0, 1.0}, doubleArray0, 0.01);
      assertEquals(3, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-3535.241899617253);
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination((-0.9092974268256817), doubleArray1, 30, (double) 1, doubleArray1, 1359, doubleArray0, 157);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 30
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 4;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(4, 4);
      assertNotNull(dSCompiler0);
      assertEquals(70, dSCompiler0.getSize());
      assertEquals(4, dSCompiler0.getOrder());
      assertEquals(4, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[4];
      int int1 = 1;
      // Undeclared exception!
      try { 
        dSCompiler0.acos(doubleArray0, 1, doubleArray0, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      int int2 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 2);
      assertNotNull(dSCompiler0);
      assertEquals(3, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      
      int[] intArray0 = dSCompiler0.getPartialDerivativeOrders(0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(3, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, intArray0.length);
      
      int int3 = 2;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      double double0 = 3.8288623079292884E293;
      doubleArray0[5] = 3.8288623079292884E293;
      int int4 = (-151);
      // Undeclared exception!
      try { 
        dSCompiler0.log(doubleArray0, 1, doubleArray0, (-151));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -151
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      int int2 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 2);
      assertNotNull(dSCompiler0);
      assertEquals(3, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      
      int[] intArray0 = dSCompiler0.getPartialDerivativeOrders(0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(3, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, intArray0.length);
      
      int int3 = 2;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = 3.8288623079292884E293;
      // Undeclared exception!
      try { 
        dSCompiler0.acosh(doubleArray0, 1, doubleArray0, (-2913));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2913
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 1;
      dSCompiler0.atan(doubleArray1, 1, doubleArray1, 1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 0.7853981633974483, 0.5}, doubleArray1, 0.01);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int0 = 0;
      int int1 = 3;
      int int2 = 1;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(3, 1);
      assertNotNull(dSCompiler1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(3, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getOrder());
      assertEquals(4, dSCompiler1.getSize());
      assertNotSame(dSCompiler1, dSCompiler0);
      
      // Undeclared exception!
      try { 
        dSCompiler1.sin(doubleArray1, 1, doubleArray1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[3];
      dSCompiler0.atan2(doubleArray0, 0, doubleArray0, 0, doubleArray0, 1);
      assertArrayEquals(new double[] {0.0, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(3, doubleArray0.length);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(1, 0);
      assertNotNull(dSCompiler1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(1, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getOrder());
      assertNotSame(dSCompiler1, dSCompiler0);
      
      dSCompiler1.atanh(doubleArray0, 0, doubleArray0, 1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(3, doubleArray0.length);
      assertNotSame(dSCompiler1, dSCompiler0);
      
      int int0 = (-285);
      // Undeclared exception!
      try { 
        dSCompiler0.asinh(doubleArray0, (-285), doubleArray0, (-285));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -285
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      dSCompiler0.cos(doubleArray0, 1, doubleArray0, 1);
      assertArrayEquals(new double[] {1.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(3, doubleArray0.length);
      
      dSCompiler0.atan2(doubleArray0, 0, doubleArray0, 0, doubleArray0, 1);
      assertArrayEquals(new double[] {1.0, 0.7853981633974484, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(3, doubleArray0.length);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(1, 0);
      assertNotNull(dSCompiler1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(1, dSCompiler1.getFreeParameters());
      assertEquals(0, dSCompiler1.getOrder());
      assertNotSame(dSCompiler1, dSCompiler0);
      
      dSCompiler1.atanh(doubleArray0, 0, doubleArray0, 1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertArrayEquals(new double[] {1.0, Double.POSITIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(1, dSCompiler1.getFreeParameters());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(3, doubleArray0.length);
      assertNotSame(dSCompiler1, dSCompiler0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.asinh(doubleArray0, (-285), doubleArray0, (-285));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -285
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      dSCompiler0.log10(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      dSCompiler0.atan(doubleArray1, 0, doubleArray1, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      
      dSCompiler0.sin(doubleArray0, 0, doubleArray0, 0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(9, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      
      double[] doubleArray2 = null;
      int int0 = (-6019);
      int int1 = 1;
      // Undeclared exception!
      try { 
        dSCompiler0.log1p(doubleArray0, 1, (double[]) null, (-6019));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      dSCompiler0.cos(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(3, doubleArray0.length);
      
      int int1 = 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler1);
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getOrder());
      assertSame(dSCompiler1, dSCompiler0);
      
      dSCompiler1.atanh(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(3, doubleArray0.length);
      assertSame(dSCompiler1, dSCompiler0);
      
      int int2 = 30;
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        dSCompiler1.rootN(doubleArray0, 387, 3, (double[]) null, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 387
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      dSCompiler0.cos(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(3, doubleArray0.length);
      
      dSCompiler0.atan2(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {0.7853981633974484, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(3, doubleArray0.length);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler1);
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertSame(dSCompiler1, dSCompiler0);
      
      dSCompiler1.atanh(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {1.0593061708232434, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(3, doubleArray0.length);
      assertSame(dSCompiler1, dSCompiler0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.asinh(doubleArray0, (-285), doubleArray0, (-285));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -285
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[7];
      double double0 = dSCompiler0.taylor(doubleArray0, 1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(7, doubleArray0.length);
      
      int int1 = dSCompiler0.getOrder();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      
      int int2 = dSCompiler0.getOrder();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, int2);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      
      int int3 = 997;
      int int4 = (-3331);
      // Undeclared exception!
      try { 
        dSCompiler0.multiply(doubleArray0, 1437, doubleArray0, 997, doubleArray0, (-3331));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1437
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      dSCompiler0.log10(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(9, doubleArray0.length);
      
      dSCompiler0.sin(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = null;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.atanh(doubleArray2, 0, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2073;
      doubleArray1[1] = (double) 2073;
      dSCompiler0.linearCombination((double) 1959, doubleArray0, 1, (double) 1413, doubleArray1, 0, (double) 1, doubleArray1, 1, doubleArray0, 1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 2931222.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2073.0, 2073.0}, doubleArray1, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      // Undeclared exception!
      try { 
        dSCompiler0.multiply(doubleArray0, 1, doubleArray0, 2034, doubleArray2, 161);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2034
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[9];
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(1, 5);
      assertNotNull(dSCompiler1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(1, dSCompiler1.getFreeParameters());
      assertEquals(6, dSCompiler1.getSize());
      assertEquals(5, dSCompiler1.getOrder());
      assertNotSame(dSCompiler1, dSCompiler0);
      
      // Undeclared exception!
      try { 
        dSCompiler1.asinh(doubleArray0, 1, doubleArray0, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[3];
      int int0 = 64;
      int int1 = 0;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 64, 0, doubleArray0, (-440));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -440
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.cosh((double[]) null, 0, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      dSCompiler0.pow(doubleArray0, 1, 355, doubleArray0, 1);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(3, doubleArray0.length);
      
      doubleArray0[1] = (double) 1;
      dSCompiler0.tanh(doubleArray0, 1, doubleArray0, 1);
      assertArrayEquals(new double[] {1.0, 0.7615941559557649, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 355;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 355;
      doubleArray1[3] = (double) 355;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (double) 355;
      doubleArray1[6] = (double) 1;
      // Undeclared exception!
      try { 
        dSCompiler0.acosh(doubleArray1, 2050, doubleArray1, 2050);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2050
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler1);
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertSame(dSCompiler1, dSCompiler0);
      
      int int1 = 1959;
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 1959;
      // Undeclared exception!
      try { 
        dSCompiler1.linearCombination((-1006.96494), (double[]) null, (-2343), (-1006.96494), (double[]) null, (-2343), (double) (-2343), doubleArray1, 1, doubleArray1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3492, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(3492, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 3);
      assertNotNull(dSCompiler1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(3, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertNotSame(dSCompiler1, dSCompiler0);
      
      try { 
        dSCompiler0.checkCompatibility(dSCompiler1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3,492 != 0
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
      try { 
        dSCompiler0.divide((double[]) null, 0, (double[]) null, 0, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      dSCompiler0.cosh(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = (double) 0;
      dSCompiler0.divide(doubleArray1, 0, doubleArray0, 0, doubleArray1, 0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      dSCompiler0.asin(doubleArray1, 0, doubleArray1, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray1, 0, (double[]) null, 0, doubleArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      int int0 = 3;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 3;
      doubleArray1[1] = (double) 3;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = 3035.9272;
      doubleArray1[4] = (double) 3;
      doubleArray1[5] = (double) 3;
      doubleArray1[6] = 3.0;
      doubleArray1[7] = (double) 1;
      dSCompiler0.tanh(doubleArray0, 1, doubleArray1, 1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.0, 0.7615941559557649, 0.0, 3035.9272, 3.0, 3.0, 3.0, 1.0}, doubleArray1, 0.01);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(7, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      dSCompiler0.cosh(doubleArray0, 3, doubleArray0, 1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(7, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      
      dSCompiler0.log1p(doubleArray0, 5, doubleArray0, 1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(7, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      
      int int1 = 27;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 27;
      doubleArray2[1] = (double) 4030;
      // Undeclared exception!
      try { 
        dSCompiler0.log(doubleArray0, 4030, doubleArray2, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4030
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
      try { 
        dSCompiler0.tanh((double[]) null, 1, (double[]) null, (-870));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[4];
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(1, 2);
      assertNotNull(dSCompiler1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(2, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getFreeParameters());
      assertEquals(3, dSCompiler1.getSize());
      assertNotSame(dSCompiler1, dSCompiler0);
      
      // Undeclared exception!
      try { 
        dSCompiler1.asinh(doubleArray0, 1, doubleArray0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      int[] intArray0 = dSCompiler0.getPartialDerivativeOrders(0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, intArray0.length);
      
      dSCompiler0.remainder(doubleArray0, 0, doubleArray1, 0, doubleArray0, 2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(9, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      dSCompiler0.sin(doubleArray0, 0, doubleArray0, 0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(9, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      
      double[] doubleArray2 = null;
      int int0 = (-6019);
      int int1 = 1;
      // Undeclared exception!
      try { 
        dSCompiler0.log1p(doubleArray0, 1, (double[]) null, (-6019));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) 0;
      int int1 = (-2);
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) (-2);
      doubleArray1[2] = (double) (-2);
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) (-2);
      // Undeclared exception!
      try { 
        dSCompiler0.atan(doubleArray1, 3, doubleArray1, 2387);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2387
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[4] = (double) 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler1);
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getOrder());
      assertSame(dSCompiler1, dSCompiler0);
      
      dSCompiler0.checkCompatibility(dSCompiler1);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getOrder());
      assertSame(dSCompiler0, dSCompiler1);
      assertSame(dSCompiler1, dSCompiler0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.asinh(doubleArray0, 0, doubleArray0, 67);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 67
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      dSCompiler0.asinh(doubleArray0, 1, doubleArray0, 1);
      assertArrayEquals(new double[] {1.0, 0.8813735870195429, 0.7071067811865476, 1.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 2, (-2252), doubleArray0, (-1521));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1521
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      
      int int1 = 6;
      double[] doubleArray0 = null;
      int int2 = 111;
      // Undeclared exception!
      try { 
        dSCompiler0.remainder((double[]) null, 1, (double[]) null, 6, (double[]) null, 111);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      double double0 = 480.29956640801;
      doubleArray0[6] = 480.29956640801;
      doubleArray0[7] = (double) 1;
      dSCompiler0.sinh(doubleArray0, 1, doubleArray0, 1);
      assertArrayEquals(new double[] {1.0, 1.1752011936438014, 1.5430806348152437, 1.0, 1.0, 1.0, 480.29956640801, 1.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        dSCompiler0.taylor(doubleArray0, 16, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      // Undeclared exception!
      try { 
        dSCompiler0.taylor((double[]) null, 0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 9;
      doubleArray0[1] = (double) 9;
      doubleArray0[2] = (double) 9;
      doubleArray0[3] = (double) 0;
      int int0 = 2;
      int int1 = 1960;
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 2, 1960, (double[]) null, 2294);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double double0 = 1936.458904775;
      // Undeclared exception!
      try { 
        dSCompiler0.atan2((double[]) null, (-1149), (double[]) null, 25, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertNotNull(dSCompiler0);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(6, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      // Undeclared exception!
      try { 
        dSCompiler0.rootN(doubleArray0, 2, 2, doubleArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 3.0;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2568.036;
      doubleArray1[1] = 694.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) 0;
      dSCompiler0.remainder(doubleArray0, 0, doubleArray1, 0, doubleArray1, 0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 3.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 694.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      int int0 = (-3271);
      double double0 = 5.022188652837274E-9;
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination(4863.563691247, (double[]) null, 0, 5.022188652837274E-9, doubleArray2, (-3271), doubleArray2, (-3271));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      double double0 = dSCompiler0.taylor(doubleArray0, 0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, doubleArray0.length);
      
      double double1 = (-2001.1316762482);
      int int1 = (-1459);
      int int2 = 1413;
      int int3 = 32;
      int int4 = 1971;
      int int5 = 102;
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination(1.0, doubleArray0, (-2373), 0.0, doubleArray0, 1413, (double) 0, doubleArray0, 32, (double) 32, doubleArray0, 1971, doubleArray0, 102);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2373
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[7];
      dSCompiler0.pow(doubleArray0, 1, doubleArray0, 1, doubleArray0, 1);
      assertArrayEquals(new double[] {0.0, Double.NaN, Double.NaN, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(7, doubleArray0.length);
      
      int int1 = 9;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 9, 1, doubleArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      dSCompiler0.expm1(doubleArray0, 0, doubleArray0, 1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      dSCompiler0.acosh(doubleArray1, 0, doubleArray1, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.subtract(doubleArray0, (-1293), doubleArray1, 557, doubleArray0, 557);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1293
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      int[] intArray0 = dSCompiler0.getPartialDerivativeOrders(1);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {1}, intArray0);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination(1.0, doubleArray0, 1, 1.0, doubleArray0, (-936), (-3.141592653589793), doubleArray0, (-936), doubleArray0, (-550));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -936
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 1, 355, doubleArray0, (-493));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -493
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[0] = (-1578.3268736747193);
      doubleArray0[3] = (double) 1;
      dSCompiler0.tanh(doubleArray0, 3, doubleArray0, 3);
      assertArrayEquals(new double[] {(-1578.3268736747193), 1.0, 0.0, 0.7615941559557649, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[25];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      int int0 = (-855);
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) (-855);
      doubleArray1[4] = (double) (-855);
      doubleArray1[5] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray1, 0, doubleArray1, (-855), doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -855
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = 480.29956640801;
      doubleArray0[7] = (double) 1;
      dSCompiler0.sinh(doubleArray0, 1, doubleArray0, 1);
      assertArrayEquals(new double[] {1.0, 1.1752011936438014, 1.5430806348152437, 1.0, 1.0, 1.0, 480.29956640801, 1.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1;
      int int1 = 0;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[1] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.acos(doubleArray1, 0, doubleArray2, (-1261));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1261
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) 1;
      int int0 = 0;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (-1578.3268736747193);
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (-1578.3268736747193);
      doubleArray1[5] = (-770.0974470798);
      doubleArray1[6] = (double) 1;
      doubleArray1[7] = (-1578.3268736747193);
      doubleArray1[8] = (double) 0;
      dSCompiler0.acosh(doubleArray1, 0, doubleArray1, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, Double.NEGATIVE_INFINITY, 1.0, 1.0, (-1578.3268736747193), (-770.0974470798), 1.0, (-1578.3268736747193), 0.0}, doubleArray1, 0.01);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.compose(doubleArray1, 126, doubleArray1, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 127
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = 1685.2644421;
      doubleArray0[4] = (double) 1;
      // Undeclared exception!
      try { 
        dSCompiler0.atan2(doubleArray0, 1, doubleArray0, 1, doubleArray0, (-2650));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      int int1 = 886;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.cos((double[]) null, 886, (double[]) null, 886);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[25];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.exp(doubleArray0, 0, doubleArray0, 61);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 61
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[7];
      double double0 = (-1139.5);
      int int1 = 22;
      int int2 = 3;
      // Undeclared exception!
      try { 
        dSCompiler0.divide(doubleArray0, 3, doubleArray0, 22, doubleArray0, 62);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 62
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.log1p((double[]) null, 0, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[0];
      int[] intArray0 = new int[7];
      int int1 = 1065;
      intArray0[0] = 1065;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      intArray0[3] = (-3271);
      intArray0[4] = (-1);
      intArray0[5] = 0;
      intArray0[6] = 0;
      try { 
        dSCompiler0.getPartialDerivativeIndex(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 0
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[7];
      dSCompiler0.linearCombination((double) 1, doubleArray0, 1, (-1.1660424775832058E-7), doubleArray0, 1, 0.0, doubleArray0, 1, 0.0, doubleArray0, 1, doubleArray0, 1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(7, doubleArray0.length);
      
      doubleArray0[0] = (double) 1;
      doubleArray0[2] = (-1578.3268736747193);
      // Undeclared exception!
      try { 
        dSCompiler0.asinh(doubleArray0, 173, doubleArray0, 885);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 173
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      int int1 = dSCompiler0.getSize();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      // Undeclared exception!
      try { 
        dSCompiler0.rootN((double[]) null, 3, 2, (double[]) null, 3363);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[7];
      dSCompiler0.log10(doubleArray0, 1, doubleArray0, 1);
      assertArrayEquals(new double[] {0.0, Double.NEGATIVE_INFINITY, Double.NaN, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(7, doubleArray0.length);
      
      int int1 = 28;
      double double0 = 0.0;
      double double1 = (-547.4666670658321);
      dSCompiler0.sin(doubleArray0, 1, doubleArray0, 1);
      assertArrayEquals(new double[] {0.0, Double.NaN, Double.NaN, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = null;
      int int2 = (-2384);
      int int3 = 0;
      // Undeclared exception!
      try { 
        dSCompiler0.pow((double[]) null, (-795), doubleArray0, (-2384), doubleArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      int int0 = dSCompiler0.getOrder();
      assertEquals(0, int0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1074;
      doubleArray1[1] = (double) 12;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 12;
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (-3239.9470035);
      doubleArray0[6] = (double) 0;
      dSCompiler0.sin(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, (-3239.9470035), 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      dSCompiler0.acos(doubleArray1, 0, doubleArray1, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.5707963267948966}, doubleArray1, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      
      dSCompiler0.atanh(doubleArray1, 0, doubleArray1, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.sin(doubleArray1, 0, doubleArray1, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      
      int[] intArray0 = new int[0];
      try { 
        dSCompiler0.getPartialDerivativeIndex(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 1
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      int[] intArray0 = new int[0];
      int int0 = dSCompiler0.getPartialDerivativeIndex(intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, intArray0.length);
      
      // Undeclared exception!
      try { 
        dSCompiler0.divide(doubleArray0, 0, doubleArray0, 1, doubleArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = null;
      int int0 = (-3271);
      int int1 = 2;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (-3271);
      int int2 = 1;
      double[] doubleArray2 = null;
      int int3 = 208;
      // Undeclared exception!
      try { 
        dSCompiler0.expm1((double[]) null, 208, (double[]) null, (-3271));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      // Undeclared exception!
      try { 
        dSCompiler0.acos((double[]) null, 1048, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = null;
      int int1 = dSCompiler0.getSize();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      int int2 = 377;
      int int3 = 8;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 377;
      dSCompiler0.log10(doubleArray1, 1, doubleArray1, 0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0, 377.0}, doubleArray1, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(4, doubleArray1.length);
      
      int int4 = 28;
      // Undeclared exception!
      try { 
        dSCompiler0.sin(doubleArray1, 377, (double[]) null, 28);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 377
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination((double) 0, (double[]) null, (-923), 1646.0, (double[]) null, (-923), 1041.67331, (double[]) null, (-3271), (double) 2694, (double[]) null, (-481), (double[]) null, 63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = null;
      int int1 = dSCompiler0.getSize();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      int int2 = 377;
      // Undeclared exception!
      try { 
        dSCompiler0.tan((double[]) null, (-1530), (double[]) null, (-1404));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      dSCompiler0.acos(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {1.5707963267948966}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(1, doubleArray0.length);
      
      int int0 = 368;
      int int1 = (-2448);
      // Undeclared exception!
      try { 
        dSCompiler0.tan(doubleArray0, 0, doubleArray0, (-2366));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2366
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 2017.067;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = 2017.067;
      dSCompiler0.atanh(doubleArray0, 0, doubleArray1, 0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 2017.067, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2017.067}, doubleArray1, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(8, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = 0.0;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      int int1 = 1739;
      int int2 = 66;
      // Undeclared exception!
      try { 
        dSCompiler0.asin(doubleArray2, 66, doubleArray2, 1739);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 66
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (-1578.3268736747193);
      doubleArray0[3] = (double) 1;
      dSCompiler0.log1p(doubleArray0, 1, doubleArray0, 3);
      assertArrayEquals(new double[] {1.0, 1.0, (-1578.3268736747193), 0.6931471805599453, (-789.1634368373597), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(7, doubleArray0.length);
      
      dSCompiler0.asinh(doubleArray0, 3, doubleArray0, 3);
      assertArrayEquals(new double[] {1.0, 1.0, (-1578.3268736747193), 0.6470434810831891, (-648.5890932919714), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      int int1 = 19;
      // Undeclared exception!
      try { 
        dSCompiler0.log(doubleArray0, 1, doubleArray0, 19);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 19
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      dSCompiler0.log(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = new double[25];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 0;
      doubleArray1[8] = (double) 0;
      dSCompiler0.expm1(doubleArray1, 0, doubleArray1, 1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(25, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        dSCompiler0.exp(doubleArray2, 498, doubleArray1, 69);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 498
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      // Undeclared exception!
      try { 
        dSCompiler0.acosh(doubleArray0, 1, doubleArray0, (-2989));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2989
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      int int0 = dSCompiler0.getOrder();
      assertEquals(1, int0);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      
      int int1 = dSCompiler0.getOrder();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      
      // Undeclared exception!
      try { 
        dSCompiler0.multiply(doubleArray0, 0, doubleArray0, (-1466), doubleArray0, 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1466
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      int int1 = 663;
      double[] doubleArray0 = null;
      int int2 = 313;
      int int3 = 1206;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 313;
      doubleArray1[2] = (double) 663;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 1206;
      doubleArray1[6] = (double) 1206;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 313;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 313;
      doubleArray2[5] = (double) 1206;
      doubleArray2[6] = (double) 313;
      // Undeclared exception!
      try { 
        dSCompiler0.tanh(doubleArray1, 0, doubleArray2, 1229);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1229
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = null;
      int int0 = dSCompiler0.getSize();
      assertEquals(1, int0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      int int1 = (-1);
      // Undeclared exception!
      try { 
        dSCompiler0.sinh((double[]) null, 2, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = (double) 25;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 3073;
      doubleArray2[4] = (double) 30;
      // Undeclared exception!
      try { 
        dSCompiler0.multiply(doubleArray0, 25, doubleArray1, 30, doubleArray2, 30);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 25
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      dSCompiler0.cosh(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      dSCompiler0.asin(doubleArray1, 0, doubleArray1, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.log1p(doubleArray1, 2407, doubleArray1, 2288);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2407
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      int int0 = 1;
      // Undeclared exception!
      try { 
        dSCompiler0.divide(doubleArray0, 0, doubleArray0, 1, doubleArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (-1578.3268736747193);
      dSCompiler0.rootN(doubleArray0, 1, 1, doubleArray0, 1);
      assertArrayEquals(new double[] {0.0, 1.0, (-1578.3268736747193), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[25];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      int int1 = 27;
      int int2 = 1448;
      double double0 = (-2788.238829);
      int int3 = 63;
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.add((double[]) null, 64, (double[]) null, 64, doubleArray0, 31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[0];
      int int0 = 2139;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      int int1 = (-2366);
      // Undeclared exception!
      try { 
        dSCompiler0.pow((double[]) null, 0, 5.022188652837274E-9, doubleArray1, (-3271));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      double double0 = (-1578.3268736747193);
      doubleArray0[2] = (-1578.3268736747193);
      doubleArray0[3] = (double) 1;
      dSCompiler0.cos(doubleArray0, 1, doubleArray0, 3);
      assertArrayEquals(new double[] {1.0, 1.0, (-1578.3268736747193), 0.5403023058681398, 1328.1162687398346, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(7, doubleArray0.length);
      
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      int int0 = 4765;
      // Undeclared exception!
      try { 
        dSCompiler0.tanh(doubleArray0, 1, doubleArray0, 4765);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4765
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[0];
      int int2 = (-3271);
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination(4863.563691247, (double[]) null, 0, 5.022188652837274E-9, doubleArray1, (-3271), doubleArray1, (-3271));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      double[] doubleArray1 = null;
      int int0 = 2;
      int int1 = 2139;
      int int2 = 1123;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) (-3271);
      doubleArray2[3] = (double) 1260;
      doubleArray2[4] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.pow((double[]) null, 1260, doubleArray0, 1123, doubleArray2, 1223);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-3271);
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-3271);
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 2070, 2070, doubleArray0, 2139);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2070
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[25];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      dSCompiler0.expm1(doubleArray0, 0, doubleArray0, 1);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(25, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      dSCompiler0.acosh(doubleArray1, 0, doubleArray1, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      
      dSCompiler0.compose(doubleArray0, 0, doubleArray0, doubleArray1, 0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(25, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.asin(doubleArray1, 18, doubleArray0, 1452);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      int int1 = (-1848);
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination(0.0, doubleArray0, 319, (double) 319, doubleArray0, 0, 0.0, doubleArray0, (-1848), doubleArray0, 319);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 319
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.taylor(doubleArray0, 1294, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1294
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      int int1 = 0;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 1;
      // Undeclared exception!
      try { 
        dSCompiler0.divide(doubleArray0, 459, doubleArray0, 13, doubleArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 459
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 187;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      dSCompiler0.tan(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 187.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(1, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getOrder());
      assertEquals(2, dSCompiler1.getSize());
      assertNotSame(dSCompiler1, dSCompiler0);
      
      // Undeclared exception!
      try { 
        dSCompiler1.multiply(doubleArray0, 1, (double[]) null, 0, (double[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      dSCompiler0.pow(doubleArray0, 0, (-1168.4), doubleArray0, 0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      dSCompiler0.acos(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {1.5707963267948966}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, doubleArray0.length);
      
      int int0 = (-2366);
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 0, 0.0, doubleArray0, (-2366));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2366
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        dSCompiler0.cos(doubleArray0, 1, doubleArray1, 886);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 886
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[11];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        dSCompiler0.sinh(doubleArray0, 0, doubleArray1, 118);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 118
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = 1.0;
      doubleArray0[4] = (double) 1;
      dSCompiler0.asinh(doubleArray0, 1, doubleArray0, 1);
      assertArrayEquals(new double[] {1.0, 0.8813735870195429, 0.7071067811865476, 0.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      int int1 = 663;
      // Undeclared exception!
      try { 
        dSCompiler0.atan2(doubleArray0, 0, doubleArray0, 663, doubleArray0, 663);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 663
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      double double0 = (-1578.3268736747193);
      doubleArray0[2] = (-1578.3268736747193);
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      int int1 = 11;
      int int2 = 4765;
      // Undeclared exception!
      try { 
        dSCompiler0.tanh(doubleArray0, 1, doubleArray0, 4765);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4765
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.sin((double[]) null, 1348, doubleArray1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.cosh(doubleArray0, 0, doubleArray0, (-6070));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -6070
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (-3271);
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.rootN((double[]) null, 2139, 11, (double[]) null, 694);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      int int1 = 187;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 187);
      assertNotNull(dSCompiler1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(187, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertNotSame(dSCompiler1, dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1.0386032577072378E209;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      dSCompiler1.tan(doubleArray0, 0, doubleArray0, 0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertArrayEquals(new double[] {0.0, 1.0386032577072378E209, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(187, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(4, doubleArray0.length);
      assertNotSame(dSCompiler1, dSCompiler0);
      
      int int2 = 1108;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.sin(doubleArray0, 35, doubleArray1, (-1430));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 35
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = null;
      int int0 = dSCompiler0.getSize();
      assertEquals(1, int0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      int int1 = 8;
      // Undeclared exception!
      try { 
        dSCompiler0.log10((double[]) null, 377, (double[]) null, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      dSCompiler0.log1p(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.asinh(doubleArray1, 1, doubleArray1, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      int int0 = 0;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 1;
      int int1 = (-1261);
      int int2 = dSCompiler0.getFreeParameters();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      
      dSCompiler0.atanh(doubleArray1, 1, doubleArray1, 1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 1.0}, doubleArray1, 0.01);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.acosh(doubleArray0, 1, doubleArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (-1578.3268736747193);
      doubleArray0[4] = (double) 1;
      // Undeclared exception!
      try { 
        dSCompiler0.asinh(doubleArray0, 1, doubleArray0, 1108);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1108
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      int int1 = 3;
      int int2 = 1448;
      // Undeclared exception!
      try { 
        dSCompiler0.add(doubleArray2, 0, doubleArray0, 27, doubleArray2, 1448);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 1;
      // Undeclared exception!
      try { 
        dSCompiler0.atanh(doubleArray0, (-1587), doubleArray0, (-2843));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1587
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.asin((double[]) null, 0, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        dSCompiler0.compose((double[]) null, (-2721), doubleArray0, (double[]) null, (-2721));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      // Undeclared exception!
      try { 
        dSCompiler0.getPartialDerivativeOrders(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = 0;
      int int1 = 792;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 792);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(792, dSCompiler0.getOrder());
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.log((double[]) null, 0, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[0];
      int int2 = (-3271);
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-3271);
      doubleArray2[1] = (double) 2;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) (-3271);
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray1, 2, (double[]) null, 2139, doubleArray2, 1123);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 1;
      // Undeclared exception!
      try { 
        dSCompiler0.asinh(doubleArray0, 0, doubleArray0, 1108);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1108
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int int0 = 0;
      int int1 = 792;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 792);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(792, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 0, (double) 0, doubleArray0, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.cos(doubleArray0, 0, doubleArray0, (-3758));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3758
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      dSCompiler0.asin(doubleArray1, 0, doubleArray0, 0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(9, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      // Undeclared exception!
      try { 
        dSCompiler0.log10(doubleArray2, 0, doubleArray2, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (-1578.3268736747193);
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      // Undeclared exception!
      try { 
        dSCompiler0.rootN(doubleArray0, 11, (-1), doubleArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 1;
      // Undeclared exception!
      try { 
        dSCompiler0.rootN(doubleArray0, 1108, 1108, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1108
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = 691;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(691, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(691, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
      try { 
        dSCompiler0.checkCompatibility((DSCompiler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      // Undeclared exception!
      try { 
        dSCompiler0.asinh((double[]) null, (-4011), (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      // Undeclared exception!
      try { 
        dSCompiler0.compose((double[]) null, 0, (double[]) null, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      int int2 = 2331;
      // Undeclared exception!
      try { 
        dSCompiler0.cos(doubleArray0, 2331, doubleArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2331
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.cosh(doubleArray0, 1498, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1498
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      int int1 = dSCompiler0.getFreeParameters();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[4];
      // Undeclared exception!
      try { 
        dSCompiler0.expm1(doubleArray0, 2394, (double[]) null, 974);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2394
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int int0 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (-1578.3268736747193);
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      int int1 = 3132;
      // Undeclared exception!
      try { 
        dSCompiler0.asin(doubleArray0, 0, doubleArray0, 3132);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3132
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 792);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(792, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 792;
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination((double) 792, doubleArray0, (-1041), 0.0, doubleArray0, 0, 2228.93, doubleArray0, (-597), (-5347.89983890513), doubleArray0, (-597), doubleArray0, (-869));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1041
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int int0 = 3;
      int int1 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 1);
      assertNotNull(dSCompiler0);
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(4, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      double double0 = (-8.663710700190489E-10);
      int int2 = 628;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 3, (-8.663710700190489E-10), doubleArray0, 628);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 628
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.log1p(doubleArray1, 0, doubleArray1, (-5668));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5668
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int int0 = 0;
      int int1 = 878;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 878);
      assertNotNull(dSCompiler0);
      assertEquals(878, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      double double0 = 0.0;
      int int2 = 0;
      int int3 = 546;
      int int4 = 592;
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination(0.0, doubleArray0, 0, (double) 878, doubleArray0, 546, doubleArray0, 592);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 546
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      int int1 = (-3768);
      // Undeclared exception!
      try { 
        dSCompiler0.remainder(doubleArray0, 0, doubleArray0, (-3768), doubleArray0, (-861));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3768
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int int0 = 839;
      // Undeclared exception!
      DSCompiler.getCompiler(839, 839);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int int0 = 0;
      int int1 = (-943);
      // Undeclared exception!
      try { 
        DSCompiler.getCompiler(0, (-943));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -943
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int int0 = 747;
      int int1 = (-3139);
      // Undeclared exception!
      try { 
        DSCompiler.getCompiler(747, (-3139));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3139
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int int0 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      int int1 = 0;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 1;
      int int2 = (-1261);
      // Undeclared exception!
      try { 
        dSCompiler0.acos(doubleArray0, 0, doubleArray1, (-1261));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1261
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int int0 = (-1214);
      int int1 = (-594);
      // Undeclared exception!
      try { 
        DSCompiler.getCompiler((-1214), (-594));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1214
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int int0 = 959;
      // Undeclared exception!
      DSCompiler.getCompiler(959, 959);
  }
}
