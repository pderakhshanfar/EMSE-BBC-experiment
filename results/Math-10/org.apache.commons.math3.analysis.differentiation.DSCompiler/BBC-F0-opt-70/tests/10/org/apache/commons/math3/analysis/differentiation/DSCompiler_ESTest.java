/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 22:22:19 GMT 2021
 */

package org.apache.commons.math3.analysis.differentiation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.differentiation.DSCompiler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DSCompiler_ESTest extends DSCompiler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[7];
      dSCompiler0.cos(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(7, doubleArray0.length);
      
      dSCompiler0.log10(doubleArray0, 2, doubleArray0, 2);
      assertArrayEquals(new double[] {1.0, 0.0, Double.NEGATIVE_INFINITY, Double.NaN, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(7, doubleArray0.length);
      
      dSCompiler0.atan2(doubleArray0, 0, doubleArray0, 2, doubleArray0, 1);
      assertArrayEquals(new double[] {1.0, (-3.141592653589793), Double.NaN, Double.NaN, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (-327.52);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 3;
      int int1 = 0;
      // Undeclared exception!
      try { 
        dSCompiler0.sinh(doubleArray0, 3, doubleArray0, 2361);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2361
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 1234);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1234, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) 0;
      // Undeclared exception!
      dSCompiler0.asin(doubleArray0, 0, doubleArray0, 1413);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 202);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(202, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 202;
      doubleArray0[1] = (double) 202;
      doubleArray0[2] = (double) 202;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      // Undeclared exception!
      dSCompiler0.atan(doubleArray0, 0, doubleArray0, 202);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      dSCompiler0.log10(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        dSCompiler0.atan2(doubleArray0, 0, doubleArray0, 0, doubleArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 50);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(50, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 50;
      doubleArray0[3] = (-5270.936961157755);
      doubleArray0[4] = (double) 50;
      doubleArray0[5] = (double) 50;
      doubleArray0[6] = (double) 50;
      doubleArray0[7] = (double) 50;
      doubleArray0[8] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.cos(doubleArray0, 0, doubleArray0, 50);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 50
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 4996;
      // Undeclared exception!
      DSCompiler.getCompiler(0, 4996);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[7];
      dSCompiler0.cos(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(7, doubleArray0.length);
      
      dSCompiler0.log10(doubleArray0, 2, doubleArray0, 2);
      assertArrayEquals(new double[] {1.0, 0.0, Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        dSCompiler0.multiply(doubleArray0, 0, (double[]) null, 0, doubleArray0, (-4076));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 47);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(47, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 47;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 47;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 4;
      // Undeclared exception!
      try { 
        dSCompiler0.asin(doubleArray0, 4, doubleArray0, 15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      dSCompiler0.linearCombination(0.0, doubleArray0, 0, 0.0, doubleArray0, 0, (double) 0, doubleArray0, 0, 1.1340476362128895E-7, doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(9, doubleArray0.length);
      
      double double0 = dSCompiler0.taylor(doubleArray0, 0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      dSCompiler0.acos(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {1.5707963267948966, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        dSCompiler0.rootN(doubleArray0, 3, 3, doubleArray0, 2534);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2534
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.atan((double[]) null, (-1955), (double[]) null, 4999);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 50);
      assertEquals(50, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.asinh(doubleArray0, 0, doubleArray0, 15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = 2;
      int int1 = 6;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(6, 2);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(6, dSCompiler0.getFreeParameters());
      assertEquals(28, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.cosh((double[]) null, 2, (double[]) null, (-313));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[7];
      dSCompiler0.cos(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(7, doubleArray0.length);
      
      dSCompiler0.log10(doubleArray0, 2, doubleArray0, 2);
      assertArrayEquals(new double[] {1.0, 0.0, Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(7, doubleArray0.length);
      
      dSCompiler0.atan2(doubleArray0, 0, doubleArray0, 2, doubleArray0, 1);
      assertArrayEquals(new double[] {1.0, (-3.141592653589793), Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 1042);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(1042, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      dSCompiler0.atanh(doubleArray0, 1, doubleArray0, 1042);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(2, 2);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(2, dSCompiler1.getOrder());
      assertEquals(6, dSCompiler1.getSize());
      assertEquals(2, dSCompiler1.getFreeParameters());
      assertNotNull(dSCompiler1);
      
      dSCompiler1.checkCompatibility(dSCompiler0);
      assertSame(dSCompiler0, dSCompiler1);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler1.getOrder());
      assertEquals(6, dSCompiler1.getSize());
      assertEquals(2, dSCompiler1.getFreeParameters());
      
      dSCompiler1.sin(doubleArray0, 2, doubleArray0, 2);
      assertSame(dSCompiler1, dSCompiler0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dSCompiler1.getOrder());
      assertEquals(6, dSCompiler1.getSize());
      assertEquals(2, dSCompiler1.getFreeParameters());
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        dSCompiler0.taylor((double[]) null, 0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      int int0 = 2;
      dSCompiler0.pow(doubleArray0, 0, doubleArray0, 2, doubleArray0, 2);
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        dSCompiler0.asinh(doubleArray0, 2, doubleArray1, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(6, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination(1.1752011936438014, (double[]) null, (-613), (double) (-613), (double[]) null, 2, 2892.80286, (double[]) null, (-1), (double[]) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      dSCompiler0.tan(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        dSCompiler0.log10((double[]) null, 0, (double[]) null, (-3130));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.rootN((double[]) null, 0, 0, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[7] = (double) 0;
      dSCompiler0.cosh(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(8, doubleArray0.length);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(13, 0);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(13, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getOrder());
      assertNotNull(dSCompiler1);
      
      try { 
        dSCompiler0.checkCompatibility(dSCompiler1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 13
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      // Undeclared exception!
      try { 
        dSCompiler0.log(doubleArray0, 2, doubleArray0, 1998);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1998
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.tanh((double[]) null, 0, (double[]) null, 282);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 2;
      double[] doubleArray0 = new double[4];
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.rootN(doubleArray0, (-1864), 3, doubleArray0, (-1864));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1864
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 59.1;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (-1108.0);
      dSCompiler0.log(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0, 0.0, 0.0, 59.1, 0.0, (-1108.0)}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      dSCompiler0.acos(doubleArray1, 0, doubleArray1, 0);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.5707963267948966, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(9, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        dSCompiler0.cosh(doubleArray1, 1548, doubleArray1, 1548);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1548
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      int int0 = 1;
      dSCompiler0.remainder(doubleArray0, 1, doubleArray0, 2, doubleArray0, 2);
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, 0.0}, doubleArray0, 0.01);
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(9, doubleArray0.length);
      
      dSCompiler0.pow(doubleArray0, 1, (-1770), doubleArray0, 1);
      assertArrayEquals(new double[] {0.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, 0.0}, doubleArray0, 0.01);
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray0[5] = (double) 1;
      doubleArray1[1] = (double) (-1770);
      int int1 = 283;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 283;
      doubleArray2[1] = (double) 283;
      doubleArray2[2] = (double) (-1770);
      doubleArray2[3] = (double) 283;
      doubleArray2[4] = (double) (-1770);
      doubleArray2[5] = (double) 1;
      doubleArray2[6] = (double) 2;
      // Undeclared exception!
      try { 
        dSCompiler0.log1p(doubleArray1, 1, doubleArray2, (-1770));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1770
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertNotNull(dSCompiler1);
      
      // Undeclared exception!
      try { 
        dSCompiler0.subtract((double[]) null, 0, (double[]) null, 485, (double[]) null, 485);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[1];
      int int1 = 1364;
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.log((double[]) null, 0, doubleArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      dSCompiler0.atan(doubleArray0, 1, doubleArray0, 1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(9, doubleArray0.length);
      
      double double0 = dSCompiler0.taylor(doubleArray0, 2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(9, doubleArray0.length);
      
      int[] intArray0 = dSCompiler0.getPartialDerivativeOrders(1);
      assertArrayEquals(new int[] {1, 0}, intArray0);
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertNotNull(intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = 0;
      int int1 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 2);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.asin((double[]) null, 0, (double[]) null, 510);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      dSCompiler0.cos(doubleArray0, 2, doubleArray0, 2);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 1, (double) 2, (double[]) null, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 0;
      int int1 = 266;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(266, 0);
      assertEquals(266, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      int int2 = (-2464);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.acosh((double[]) null, 518, (double[]) null, (-1174));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = null;
      int int0 = 26;
      // Undeclared exception!
      try { 
        dSCompiler0.tan((double[]) null, 2, (double[]) null, 26);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      dSCompiler0.linearCombination((double) 0, doubleArray0, 0, 1.4436354751788103, doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = (double) 0;
      int int1 = 1;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 1, (-1), doubleArray1, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[7] = 0.0;
      int[] intArray0 = new int[0];
      int int0 = dSCompiler0.getPartialDerivativeIndex(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, intArray0.length);
      
      int int1 = dSCompiler0.getFreeParameters();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      dSCompiler0.log10(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(8, doubleArray0.length);
      
      int int2 = dSCompiler0.getOrder();
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      dSCompiler0.tan(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(7, doubleArray0.length);
      
      int int0 = 4540;
      int int1 = 1426;
      // Undeclared exception!
      try { 
        dSCompiler0.pow((double[]) null, 4540, 6, (double[]) null, 1426);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      dSCompiler0.acos(doubleArray0, 1, doubleArray0, 2);
      assertArrayEquals(new double[] {0.0, 0.0, 1.5707963267948966, (-1.5707963267948966), 1.5707963267948966, (-1.5707963267948966), 1.5707963267948966, (-1.5707963267948966), 0.0}, doubleArray0, 0.01);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(9, doubleArray0.length);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertNotNull(dSCompiler1);
      
      // Undeclared exception!
      try { 
        dSCompiler1.acosh(doubleArray0, 2, doubleArray0, (-2464));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2464
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.asinh((double[]) null, 0, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      dSCompiler0.tan(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = null;
      int int1 = 4540;
      int int2 = 1426;
      // Undeclared exception!
      try { 
        dSCompiler0.atan2(doubleArray0, 0, (double[]) null, 2754, doubleArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      int int0 = dSCompiler0.getFreeParameters();
      assertEquals(0, int0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 3;
      dSCompiler0.remainder(doubleArray0, 3, doubleArray0, 1, doubleArray0, 1);
      assertArrayEquals(new double[] {3.0, 0.0, 3.0, 3.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(4, doubleArray0.length);
      
      int int1 = (-2393);
      // Undeclared exception!
      try { 
        dSCompiler0.acosh(doubleArray0, (-2393), doubleArray0, (-1770));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2393
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      dSCompiler0.tan(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.pow((double[]) null, 0, doubleArray0, 350, doubleArray0, (-287));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      dSCompiler0.tan(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(7, doubleArray0.length);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 23);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(23, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertNotNull(dSCompiler1);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 23;
      doubleArray1[1] = (double) (-1008);
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) (-1008);
      // Undeclared exception!
      try { 
        dSCompiler1.sinh((double[]) null, 19, doubleArray1, 1238);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      double[] doubleArray0 = new double[6];
      int int1 = 54;
      int int2 = 630;
      int int3 = 2456;
      // Undeclared exception!
      DSCompiler.getCompiler(630, 2456);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      // Undeclared exception!
      try { 
        dSCompiler0.remainder(doubleArray0, 2, doubleArray0, 2, doubleArray0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(2, 2);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(2, dSCompiler1.getOrder());
      assertEquals(6, dSCompiler1.getSize());
      assertEquals(2, dSCompiler1.getFreeParameters());
      assertNotNull(dSCompiler1);
      
      dSCompiler1.checkCompatibility(dSCompiler0);
      assertSame(dSCompiler0, dSCompiler1);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler1.getOrder());
      assertEquals(6, dSCompiler1.getSize());
      assertEquals(2, dSCompiler1.getFreeParameters());
      
      // Undeclared exception!
      try { 
        dSCompiler0.log1p((double[]) null, 2, (double[]) null, 1057);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (-47.796);
      dSCompiler0.log1p(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, (-47.796), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(7, doubleArray0.length);
      
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      dSCompiler0.atanh(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, (-47.796), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (-47.796);
      doubleArray1[2] = (-47.796);
      doubleArray1[3] = (-47.796);
      doubleArray1[4] = (-47.796);
      doubleArray1[5] = (-47.796);
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (-47.796);
      doubleArray1[8] = (-47.796);
      double double0 = dSCompiler0.taylor(doubleArray0, 0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-47.796), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-47.796), (-47.796), (-47.796), (-47.796), (-47.796), 0.0, (-47.796), (-47.796)}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(7, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray1, 780, 12, doubleArray0, 780);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 780
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      dSCompiler0.linearCombination((double) 0, doubleArray0, 0, 1.4436354751788103, doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = (double) 0;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      dSCompiler0.sin(doubleArray2, 0, doubleArray2, 0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, doubleArray2.length);
      
      // Undeclared exception!
      try { 
        dSCompiler0.asinh(doubleArray1, 999, doubleArray2, 28);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 999
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 1.0327515602111816;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = 10.0;
      doubleArray0[8] = (double) 0;
      dSCompiler0.tan(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1.0327515602111816, 0.0, 0.0, 10.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(9, doubleArray0.length);
      
      int[] intArray0 = dSCompiler0.getPartialDerivativeOrders(0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.0327515602111816;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = 10.0;
      doubleArray1[4] = 1.0327515602111816;
      doubleArray1[5] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.multiply(doubleArray0, (-471), doubleArray0, 1591, doubleArray1, (-3265));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -471
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(2, 2);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(2, dSCompiler1.getOrder());
      assertEquals(6, dSCompiler1.getSize());
      assertEquals(2, dSCompiler1.getFreeParameters());
      assertNotNull(dSCompiler1);
      
      int int1 = 19;
      // Undeclared exception!
      try { 
        dSCompiler1.log10(doubleArray0, 2, doubleArray0, 19);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 19
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      dSCompiler0.subtract(doubleArray0, 2, doubleArray0, 2, doubleArray0, 2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (-47.796);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      dSCompiler0.tan(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, (-47.796), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.divide((double[]) null, 0, (double[]) null, (-1906), doubleArray0, (-1906));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 7.103148400942551E-238;
      doubleArray1[7] = (double) 0;
      dSCompiler0.cos(doubleArray1, 0, doubleArray0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.103148400942551E-238, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      int int0 = dSCompiler0.getFreeParameters();
      assertEquals(0, int0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      dSCompiler0.add(doubleArray0, 0, doubleArray0, 6, doubleArray0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (-724);
      doubleArray2[1] = (double) 6;
      // Undeclared exception!
      try { 
        dSCompiler0.rootN(doubleArray2, 617, (-2934), doubleArray0, (-367));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 617
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(2, 2);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(6, dSCompiler1.getSize());
      assertEquals(2, dSCompiler1.getFreeParameters());
      assertEquals(2, dSCompiler1.getOrder());
      assertNotNull(dSCompiler1);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2;
      DSCompiler dSCompiler2 = DSCompiler.getCompiler(54, 1);
      assertNotSame(dSCompiler2, dSCompiler1);
      assertNotSame(dSCompiler2, dSCompiler0);
      assertFalse(dSCompiler2.equals((Object)dSCompiler1));
      assertFalse(dSCompiler2.equals((Object)dSCompiler0));
      assertEquals(54, dSCompiler2.getFreeParameters());
      assertEquals(55, dSCompiler2.getSize());
      assertEquals(1, dSCompiler2.getOrder());
      assertNotNull(dSCompiler2);
      
      // Undeclared exception!
      try { 
        dSCompiler2.rootN(doubleArray0, 2, 1, doubleArray0, 54);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 54
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, (-542), (-93), doubleArray0, (-93));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -542
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[3] = (double) 1;
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      int int1 = dSCompiler0.getPartialDerivativeIndex(intArray0);
      assertArrayEquals(new int[] {1}, intArray0);
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, intArray0.length);
      
      doubleArray0[4] = 1395.7242086459974;
      doubleArray0[5] = (double) 1;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1395.7242086459974;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 1;
      dSCompiler0.cosh(doubleArray1, 1, doubleArray0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 1.0, 1395.7242086459974, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1395.7242086459974, 0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      dSCompiler0.acos(doubleArray0, 0, doubleArray1, 1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 1.0, 1395.7242086459974, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1395.7242086459974, 0.0, Double.NaN, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      int int2 = dSCompiler0.getOrder();
      assertEquals(1, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = 1395.7242086459974;
      doubleArray2[2] = (-1162.0);
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.acosh(doubleArray2, 1, doubleArray2, 15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 0;
      int int1 = 942;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(942, 0);
      assertEquals(942, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (-47.796);
      doubleArray0[2] = (double) 942;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 942;
      doubleArray0[6] = (double) 0;
      dSCompiler0.tan(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, (-47.796), 942.0, 0.0, 0.0, 942.0, 0.0}, doubleArray0, 0.01);
      assertEquals(942, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = null;
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        dSCompiler0.acos((double[]) null, 0, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(20, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination((-3287.6429028814), (double[]) null, (-553), 2.0, (double[]) null, 3, 3.817173955083142E-32, (double[]) null, 43, (-3.141592653589793), (double[]) null, 3467, (double[]) null, 43);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      dSCompiler0.acos(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {1.5707963267948966, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(9, doubleArray0.length);
      
      dSCompiler0.pow(doubleArray0, 0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[3] = (-2885.8388869);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, (-1023), 0.0, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1023
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 2;
      int int1 = 0;
      int int2 = 9;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(9, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(9, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      try { 
        dSCompiler0.getPartialDerivativeIndex(intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 9
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertNotNull(dSCompiler1);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.sin((double[]) null, 1, (double[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      int int0 = dSCompiler0.getFreeParameters();
      assertEquals(0, int0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.add(doubleArray0, 2, doubleArray0, (-724), doubleArray0, 543);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -724
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(2, 2);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(2, dSCompiler1.getFreeParameters());
      assertEquals(6, dSCompiler1.getSize());
      assertEquals(2, dSCompiler1.getOrder());
      assertNotNull(dSCompiler1);
      
      dSCompiler1.atanh(doubleArray0, 2, doubleArray0, 2);
      assertSame(dSCompiler1, dSCompiler0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dSCompiler1.getFreeParameters());
      assertEquals(6, dSCompiler1.getSize());
      assertEquals(2, dSCompiler1.getOrder());
      assertEquals(8, doubleArray0.length);
      
      dSCompiler0.checkCompatibility(dSCompiler1);
      assertSame(dSCompiler0, dSCompiler1);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler1.getFreeParameters());
      assertEquals(6, dSCompiler1.getSize());
      assertEquals(2, dSCompiler1.getOrder());
      
      int int1 = 17;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 17, 17, doubleArray0, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1785;
      doubleArray0[1] = (double) 1785;
      doubleArray0[2] = (double) 1785;
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination(1.2457361221313477, (double[]) null, 1785, 1.2457361221313477, doubleArray0, 1785, (double[]) null, 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 942;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(942, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(942, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      int int1 = dSCompiler0.getFreeParameters();
      assertEquals(942, int1);
      assertTrue(int1 == int0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(942, dSCompiler0.getFreeParameters());
      
      int int2 = 8;
      double[] doubleArray0 = null;
      int int3 = 9;
      // Undeclared exception!
      try { 
        dSCompiler0.remainder((double[]) null, 3341, (double[]) null, 40, (double[]) null, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      int int1 = 44;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 44);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(44, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertNotNull(dSCompiler1);
      
      // Undeclared exception!
      try { 
        dSCompiler0.expm1((double[]) null, 44, (double[]) null, 44);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 1326);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(1326, dSCompiler1.getOrder());
      assertNotNull(dSCompiler1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1326;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1326;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1326;
      doubleArray0[6] = (double) 1326;
      doubleArray0[7] = (double) 1326;
      doubleArray0[8] = (double) 1326;
      // Undeclared exception!
      try { 
        dSCompiler1.sin(doubleArray0, 0, doubleArray0, 1326);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1326
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      int int1 = 1;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(3, 1);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(1, dSCompiler1.getOrder());
      assertEquals(4, dSCompiler1.getSize());
      assertEquals(3, dSCompiler1.getFreeParameters());
      assertNotNull(dSCompiler1);
      
      int int2 = (-1518);
      try { 
        dSCompiler1.checkCompatibility(dSCompiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      dSCompiler0.pow(doubleArray0, 1, 33, doubleArray0, 2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 1;
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = 1395.7242086459974;
      doubleArray0[5] = (double) 1;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1395.7242086459974;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 1;
      dSCompiler0.cosh(doubleArray1, 1, doubleArray0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 1.0, 1395.7242086459974, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1395.7242086459974, 0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      dSCompiler0.acos(doubleArray0, 0, doubleArray1, 1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 1.0, 1395.7242086459974, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1395.7242086459974, 0.0, Double.NaN, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      int int0 = dSCompiler0.getOrder();
      assertEquals(1, int0);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
      try { 
        dSCompiler0.rootN(doubleArray0, 446, 2, (double[]) null, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 446
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(9, 0);
      assertEquals(9, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 785;
      intArray0[2] = 9;
      intArray0[3] = 9;
      intArray0[4] = (-4042);
      intArray0[5] = 0;
      intArray0[6] = 9;
      intArray0[3] = 0;
      intArray0[8] = 2;
      try { 
        dSCompiler0.getPartialDerivativeIndex(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 is larger than the maximum (0)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      dSCompiler0.sinh(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = new double[13];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      dSCompiler0.atan2(doubleArray1, 0, doubleArray1, 0, doubleArray1, 0);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(13, doubleArray1.length);
      
      doubleArray1[0] = (-1675.3152477552146);
      doubleArray1[1] = (double) 0;
      int int0 = 1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      int int1 = (-221);
      // Undeclared exception!
      try { 
        dSCompiler0.divide(doubleArray2, (-221), doubleArray2, 2292, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -221
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.tanh(doubleArray0, 0, doubleArray0, 3383);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3383
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      dSCompiler0.compose(doubleArray0, 45, doubleArray0, doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        dSCompiler0.taylor(doubleArray0, 45, (double[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 45
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[14];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-0.18902955031839502);
      doubleArray1[1] = (-3608.94067);
      doubleArray1[2] = (double) 5;
      doubleArray1[3] = (-0.18902955031839502);
      doubleArray1[4] = (double) 5;
      doubleArray1[5] = (-3608.94067);
      dSCompiler0.pow(doubleArray0, 5, (-3608.94067), doubleArray1, 5);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(8, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      
      int int1 = 215;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 215);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(215, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertNotNull(dSCompiler1);
      
      double double0 = dSCompiler1.taylor(doubleArray1, 0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals((-0.18902955031839502), double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(215, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(14, doubleArray1.length);
      
      try { 
        dSCompiler0.checkCompatibility(dSCompiler1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 215
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      int int0 = 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 901);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(901, dSCompiler1.getOrder());
      assertNotNull(dSCompiler1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 901;
      doubleArray0[7] = (double) 0;
      int int1 = (-1880);
      // Undeclared exception!
      dSCompiler1.acosh(doubleArray0, 0, doubleArray0, (-1880));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[7] = 0.0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 34);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(34, dSCompiler1.getOrder());
      assertNotNull(dSCompiler1);
      
      double[] doubleArray1 = null;
      int int0 = (-2877);
      // Undeclared exception!
      try { 
        dSCompiler0.cos((double[]) null, (-2877), doubleArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int int0 = dSCompiler0.getSize();
      assertEquals(1, int0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.cos(doubleArray0, 1, doubleArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[7] = 0.0;
      int int1 = dSCompiler0.getFreeParameters();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(32, 0);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(32, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertNotNull(dSCompiler1);
      
      // Undeclared exception!
      try { 
        dSCompiler1.getPartialDerivativeIndex((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[7] = 0.0;
      int int0 = dSCompiler0.getFreeParameters();
      assertEquals(0, int0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      int int1 = 0;
      int int2 = 1;
      int int3 = 3;
      dSCompiler0.log10(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) 8;
      doubleArray1[2] = (double) 8;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 3;
      doubleArray1[5] = (double) 1;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 0;
      dSCompiler0.remainder(doubleArray0, 0, doubleArray0, 3, doubleArray1, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 8.0, 8.0, 0.0, 3.0, 1.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      int int4 = 1003;
      // Undeclared exception!
      try { 
        dSCompiler0.acosh(doubleArray1, 0, doubleArray1, 1003);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1003
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 3);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(3, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertNotNull(dSCompiler1);
      
      int int1 = (-1518);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1518);
      try { 
        dSCompiler1.checkCompatibility(dSCompiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(6, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(2, 2);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(2, dSCompiler1.getOrder());
      assertEquals(6, dSCompiler1.getSize());
      assertEquals(2, dSCompiler1.getFreeParameters());
      assertNotNull(dSCompiler1);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 2;
      double double0 = (-3661.8274825104118);
      doubleArray1[3] = (-3661.8274825104118);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (double) 2;
      doubleArray1[6] = (double) 2;
      int int1 = (-780);
      // Undeclared exception!
      try { 
        dSCompiler1.compose(doubleArray0, (-780), doubleArray0, doubleArray0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -779
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      // Undeclared exception!
      try { 
        dSCompiler0.atan(doubleArray0, 1, doubleArray0, (-1277));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1277
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(6, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(2, 2);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(6, dSCompiler1.getSize());
      assertEquals(2, dSCompiler1.getOrder());
      assertEquals(2, dSCompiler1.getFreeParameters());
      assertNotNull(dSCompiler1);
      
      dSCompiler1.tanh(doubleArray0, 2, doubleArray0, 2);
      assertSame(dSCompiler1, dSCompiler0);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, dSCompiler1.getSize());
      assertEquals(2, dSCompiler1.getOrder());
      assertEquals(2, dSCompiler1.getFreeParameters());
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      // Undeclared exception!
      try { 
        dSCompiler0.acosh(doubleArray0, 2744, doubleArray0, 2949);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2744
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        DSCompiler.getCompiler(Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[6] = (double) 0;
      dSCompiler0.atan(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(8, doubleArray0.length);
      
      int int0 = dSCompiler0.getOrder();
      assertEquals(0, int0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      dSCompiler0.multiply(doubleArray0, 1, doubleArray0, 1, doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(8, doubleArray0.length);
      
      dSCompiler0.asinh(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(2, 2);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(2, dSCompiler1.getOrder());
      assertEquals(6, dSCompiler1.getSize());
      assertEquals(2, dSCompiler1.getFreeParameters());
      assertNotNull(dSCompiler1);
      
      dSCompiler1.atanh(doubleArray0, 2, doubleArray0, 2);
      assertSame(dSCompiler1, dSCompiler0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dSCompiler1.getOrder());
      assertEquals(6, dSCompiler1.getSize());
      assertEquals(2, dSCompiler1.getFreeParameters());
      assertEquals(8, doubleArray0.length);
      
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 2;
      dSCompiler0.asinh(doubleArray0, 2, doubleArray0, 2);
      assertSame(dSCompiler0, dSCompiler1);
      assertArrayEquals(new double[] {0.0, 2.0, 1.4436354751788103, 0.8944271909999159, 0.7513188404399294, 0.8944271909999159, 0.7513188404399294, (-0.14310835055998655)}, doubleArray0, 0.01);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        dSCompiler0.atan2(doubleArray0, 2, doubleArray0, 2, doubleArray0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 0, 1474, doubleArray0, 1366);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1366
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = 1395.7242086459974;
      doubleArray0[5] = (double) 1;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      dSCompiler0.exp(doubleArray1, 3, doubleArray0, 1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, 0.0, 1.0, 1395.7242086459974, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      doubleArray1[0] = 1395.7242086459974;
      int int1 = 2165;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray1, 94, doubleArray1, 1, doubleArray0, 2165);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 94
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int int1 = (-182);
      int int2 = 4409;
      int int3 = 180;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-462.559785657);
      doubleArray0[1] = (double) 180;
      // Undeclared exception!
      try { 
        dSCompiler0.tanh(doubleArray0, (-1638), doubleArray0, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1638
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      int int1 = 386;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 2, 0.0, doubleArray0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(6, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 2;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 2, doubleArray0, 2, doubleArray0, (-323));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -323
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[7] = 0.0;
      int int0 = dSCompiler0.getFreeParameters();
      assertEquals(0, int0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      int int1 = 1;
      int int2 = 3;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) 8;
      doubleArray1[2] = (double) 8;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 3;
      doubleArray1[5] = (double) 1;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 0;
      dSCompiler0.remainder(doubleArray0, 0, doubleArray0, 3, doubleArray1, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 8.0, 8.0, 0.0, 3.0, 1.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        dSCompiler0.acosh(doubleArray1, 0, doubleArray1, 1003);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1003
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(2, 2);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(6, dSCompiler1.getSize());
      assertEquals(2, dSCompiler1.getFreeParameters());
      assertEquals(2, dSCompiler1.getOrder());
      assertNotNull(dSCompiler1);
      
      doubleArray0[1] = (double) 2;
      int int0 = dSCompiler0.getOrder();
      assertSame(dSCompiler0, dSCompiler1);
      assertEquals(2, int0);
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      
      // Undeclared exception!
      try { 
        dSCompiler1.multiply(doubleArray0, 2, doubleArray0, (-1169), doubleArray0, (-1169));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1169
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(2, 2);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(2, dSCompiler1.getFreeParameters());
      assertEquals(2, dSCompiler1.getOrder());
      assertEquals(6, dSCompiler1.getSize());
      assertNotNull(dSCompiler1);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 2;
      double double0 = (-3661.8274825104118);
      doubleArray1[3] = (-3661.8274825104118);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (double) 2;
      doubleArray1[6] = (double) 2;
      doubleArray1[7] = (double) 2;
      doubleArray1[8] = (double) 2;
      dSCompiler1.sinh(doubleArray1, 2, doubleArray0, 2);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(dSCompiler1, dSCompiler0);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 3.6268604078470186, (-13776.511576192293), 4.863250052736288E7, 7.524391382167263, (-26554.349841984098), 22.031833013555335, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0, (-3661.8274825104118), 0.0, 2.0, 2.0, 2.0, 2.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, dSCompiler1.getFreeParameters());
      assertEquals(2, dSCompiler1.getOrder());
      assertEquals(6, dSCompiler1.getSize());
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      doubleArray0[1] = (double) 2;
      int int1 = 1334;
      // Undeclared exception!
      try { 
        dSCompiler0.cos(doubleArray0, 2, doubleArray0, 1334);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1334
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      int int1 = dSCompiler0.getFreeParameters();
      assertEquals(2, int1);
      assertTrue(int1 == int0);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getFreeParameters());
      
      int int2 = 1;
      int int3 = (-6744);
      // Undeclared exception!
      try { 
        dSCompiler0.atan(doubleArray0, (-6744), doubleArray0, 1215);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -6744
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(2, 2);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(2, dSCompiler1.getOrder());
      assertEquals(2, dSCompiler1.getFreeParameters());
      assertEquals(6, dSCompiler1.getSize());
      assertNotNull(dSCompiler1);
      
      doubleArray0[2] = (double) 2;
      dSCompiler1.sin(doubleArray0, 2, doubleArray0, 2);
      assertSame(dSCompiler1, dSCompiler0);
      assertArrayEquals(new double[] {2.0, 0.0, 0.9092974268256817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dSCompiler1.getOrder());
      assertEquals(2, dSCompiler1.getFreeParameters());
      assertEquals(6, dSCompiler1.getSize());
      assertEquals(9, doubleArray0.length);
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        dSCompiler1.exp(doubleArray0, (-4500), doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4500
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      int int0 = 4409;
      double[] doubleArray0 = new double[6];
      dSCompiler0.cos(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 0, doubleArray0, 32, doubleArray0, 2195);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      DSCompiler dSCompiler1 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 9, doubleArray0, 0, doubleArray0, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertNotNull(dSCompiler1);
      
      // Undeclared exception!
      try { 
        dSCompiler1.acosh(doubleArray0, 2, doubleArray0, (-2464));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2464
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      int[] intArray0 = new int[6];
      int int1 = (-292);
      intArray0[0] = (-292);
      intArray0[1] = 0;
      int int2 = 6;
      int int3 = 4409;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 787.9923786312456;
      doubleArray0[2] = (double) (-292);
      doubleArray0[3] = (double) (-292);
      doubleArray0[4] = (double) (-182);
      doubleArray0[5] = (double) (-182);
      doubleArray0[6] = (double) 1026;
      doubleArray0[7] = (double) 6;
      doubleArray0[8] = (double) 6;
      // Undeclared exception!
      try { 
        dSCompiler0.atanh(doubleArray0, 6, doubleArray0, (-182));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -182
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      double[] doubleArray0 = new double[6];
      dSCompiler0.cos(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(6, doubleArray0.length);
      
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 4409;
      doubleArray1[1] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.log1p(doubleArray0, 0, doubleArray1, 83);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 83
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int int1 = 1026;
      int int2 = 4409;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-462.559785657);
      doubleArray0[1] = (double) 180;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 2321.72249;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (-182);
      doubleArray0[6] = 1.0;
      doubleArray0[7] = (double) (-182);
      doubleArray0[8] = (double) 4409;
      // Undeclared exception!
      try { 
        dSCompiler0.sin(doubleArray0, 0, doubleArray0, (-4500));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4500
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 15);
      assertEquals(15, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 15;
      // Undeclared exception!
      try { 
        dSCompiler0.cosh(doubleArray0, 0, doubleArray0, 15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 4409;
      doubleArray1[1] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.log1p(doubleArray0, 0, doubleArray1, 83);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 83
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = 0.2689530849456787;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 1;
      dSCompiler0.atan(doubleArray0, 1, doubleArray0, 1);
      assertArrayEquals(new double[] {1.0, 0.7853981633974483, 0.13447654247283936, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = 1395.7242086459974;
      doubleArray1[5] = (double) 1;
      int int0 = (-1056);
      int int1 = 45;
      // Undeclared exception!
      try { 
        DSCompiler.getCompiler((-1056), 45);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      int int1 = dSCompiler0.getFreeParameters();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      int int2 = (-6744);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      dSCompiler0.atan(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {0.7853981633974483}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, doubleArray0.length);
      
      dSCompiler0.expm1(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {1.1932800507380155}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, doubleArray0.length);
      
      int int3 = 64;
      int int4 = 1372;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(3, 1);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(3, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getOrder());
      assertEquals(4, dSCompiler1.getSize());
      assertNotNull(dSCompiler1);
      
      int int5 = 8;
      // Undeclared exception!
      DSCompiler.getCompiler(8, 1372);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      double double0 = 10.0;
      int int1 = 0;
      int int2 = (-651);
      double double1 = 116.1264158819295;
      double double2 = (-22.3856037570894);
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-651);
      doubleArray1[1] = (double) (-651);
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (-22.3856037570894);
      // Undeclared exception!
      try { 
        dSCompiler0.divide(doubleArray0, (-1900), doubleArray1, 0, doubleArray0, 447);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1900
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      dSCompiler0.cosh(doubleArray0, 2, doubleArray0, 2);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        dSCompiler0.asin(doubleArray0, 10, doubleArray0, 44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      int[] intArray0 = new int[6];
      int int1 = (-292);
      intArray0[0] = (-292);
      intArray0[1] = 0;
      int int2 = (-182);
      int int3 = 6;
      int int4 = 1026;
      double double0 = 1312.5;
      int int5 = 4409;
      int int6 = 180;
      double double1 = (-462.559785657);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 0;
      double double2 = 0.0;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 4409;
      doubleArray1[1] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.log1p(doubleArray0, (-292), doubleArray1, 83);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -292
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(2, 2);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(2, dSCompiler1.getOrder());
      assertEquals(6, dSCompiler1.getSize());
      assertEquals(2, dSCompiler1.getFreeParameters());
      assertNotNull(dSCompiler1);
      
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      double[] doubleArray1 = null;
      int int0 = 2;
      int int1 = 8;
      // Undeclared exception!
      try { 
        dSCompiler1.exp((double[]) null, 2, doubleArray0, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = 0;
      int int1 = 942;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(942, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(942, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 942;
      double double0 = (-47.796);
      doubleArray0[1] = (-47.796);
      doubleArray0[2] = (double) 942;
      doubleArray0[3] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination(0.0, doubleArray0, 9, 942.0, doubleArray0, 1004, doubleArray0, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      dSCompiler0.acos(doubleArray0, 0, doubleArray1, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.5707963267948966}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(9, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      dSCompiler0.linearCombination((-656.32), doubleArray1, 0, 0.0, doubleArray0, 0, (-2356.54499119), doubleArray0, 0, doubleArray1, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1030.9450452020267)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(9, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double0 = dSCompiler0.taylor(doubleArray1, 0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1030.9450452020267)}, doubleArray1, 0.01);
      assertEquals((-1030.9450452020267), double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 0;
      int int1 = 942;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(942, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(942, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 942;
      doubleArray0[1] = (-47.796);
      doubleArray0[2] = (double) 942;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 942;
      doubleArray0[6] = (double) 0;
      dSCompiler0.tan(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {(-0.5178127853310958), (-47.796), 942.0, 0.0, 0.0, 942.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(942, dSCompiler0.getFreeParameters());
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        dSCompiler0.sinh(doubleArray0, 0, doubleArray0, 942);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 942
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 0;
      int int1 = 63;
      int int2 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(63, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(63, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      int int3 = 62;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(62, 0);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(62, dSCompiler1.getFreeParameters());
      assertEquals(0, dSCompiler1.getOrder());
      assertNotNull(dSCompiler1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (double) 62;
      doubleArray0[3] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler1.getPartialDerivativeOrders(63);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 63
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(2, 2);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(6, dSCompiler1.getSize());
      assertEquals(2, dSCompiler1.getOrder());
      assertEquals(2, dSCompiler1.getFreeParameters());
      assertNotNull(dSCompiler1);
      
      doubleArray0[1] = (double) 2;
      // Undeclared exception!
      try { 
        dSCompiler0.cos(doubleArray0, 2, doubleArray0, 1334);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1334
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(2, 2);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(2, dSCompiler1.getOrder());
      assertEquals(6, dSCompiler1.getSize());
      assertEquals(2, dSCompiler1.getFreeParameters());
      assertNotNull(dSCompiler1);
      
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      // Undeclared exception!
      try { 
        dSCompiler0.tan(doubleArray0, 2, doubleArray0, 1381);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1381
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      int[] intArray0 = new int[6];
      int int1 = (-292);
      intArray0[0] = (-292);
      intArray0[1] = 0;
      int int2 = (-182);
      // Undeclared exception!
      try { 
        dSCompiler0.checkCompatibility((DSCompiler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[15];
      doubleArray0[1] = (double) 2;
      dSCompiler0.cos(doubleArray0, 2, doubleArray0, 2);
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(15, doubleArray0.length);
      
      dSCompiler0.expm1(doubleArray0, 1, doubleArray0, 1);
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(15, doubleArray0.length);
      
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 2;
      dSCompiler0.asinh(doubleArray0, 0, doubleArray0, 2);
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(15, doubleArray0.length);
      
      int int0 = (-1386);
      // Undeclared exception!
      try { 
        dSCompiler0.atan2(doubleArray0, 2, doubleArray0, 2, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(942, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(942, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 942;
      double double0 = (-47.796);
      doubleArray0[1] = (-47.796);
      doubleArray0[2] = (double) 942;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 942;
      doubleArray0[6] = (double) 0;
      dSCompiler0.tan(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {(-0.5178127853310958), (-47.796), 942.0, 0.0, 0.0, 942.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(942, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(7, doubleArray0.length);
      
      int int1 = 18;
      // Undeclared exception!
      try { 
        dSCompiler0.compose((double[]) null, 18, (double[]) null, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      int int0 = 65;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 65);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(65, dSCompiler1.getOrder());
      assertNotNull(dSCompiler1);
      
      dSCompiler1.acosh(doubleArray0, 0, doubleArray0, 0);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(65, dSCompiler1.getOrder());
      assertEquals(5, doubleArray0.length);
      
      int int1 = 21;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = (double) 21;
      doubleArray1[2] = (double) 65;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = 0.05046287178993225;
      doubleArray1[5] = (double) (-1);
      // Undeclared exception!
      try { 
        dSCompiler1.expm1(doubleArray0, (-1), doubleArray1, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(2, 2);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(2, dSCompiler1.getFreeParameters());
      assertEquals(6, dSCompiler1.getSize());
      assertEquals(2, dSCompiler1.getOrder());
      assertNotNull(dSCompiler1);
      
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      double double0 = dSCompiler0.taylor(doubleArray0, 2, doubleArray0);
      assertSame(dSCompiler0, dSCompiler1);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2.0, double0, 0.01);
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(6, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 2;
      dSCompiler0.asinh(doubleArray0, 0, doubleArray0, 2);
      assertArrayEquals(new double[] {0.0, 2.0, 0.0, 2.0, 0.0, 2.0, 0.0, 2.0}, doubleArray0, 0.01);
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(8, doubleArray0.length);
      
      int int0 = (-1386);
      // Undeclared exception!
      try { 
        dSCompiler0.atan2(doubleArray0, 2, doubleArray0, 2, doubleArray0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      int[] intArray0 = new int[6];
      int int1 = (-292);
      intArray0[0] = (-292);
      intArray0[1] = 0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 901;
      doubleArray0[1] = (double) (-292);
      doubleArray0[2] = (double) (-292);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.acosh(doubleArray0, (-292), doubleArray0, (-292));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -292
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[7] = 0.0;
      int int1 = dSCompiler0.getFreeParameters();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      int int2 = 0;
      // Undeclared exception!
      try { 
        dSCompiler0.atan(doubleArray0, 1, doubleArray0, (-6744));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -6744
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.exp(doubleArray0, (-181), doubleArray0, (-181));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -181
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      int[] intArray0 = new int[6];
      int int0 = (-292);
      intArray0[0] = (-292);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination(9.761163062156018E179, doubleArray0, (-292), (double) (-292), doubleArray0, Integer.MIN_VALUE, 0.0, doubleArray0, Integer.MIN_VALUE, doubleArray0, 201);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -292
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double double0 = (-2473.0);
      int int0 = (-576);
      int int1 = 1;
      int int2 = (-1718);
      int int3 = 0;
      int int4 = 1519;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 1519);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(1519, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertNotNull(dSCompiler1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3.973222981713661E240;
      // Undeclared exception!
      dSCompiler1.acos(doubleArray0, 0, doubleArray0, (-1718));
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = (double) 1;
      int int1 = 2561;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = 1395.7242086459974;
      doubleArray1[3] = 1395.7242086459974;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (double) 2561;
      // Undeclared exception!
      try { 
        dSCompiler0.taylor(doubleArray0, 2561, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2562
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      dSCompiler0.divide(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(5, doubleArray0.length);
      
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.sin(doubleArray0, 61, doubleArray0, 66);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 61
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      int int1 = dSCompiler0.getOrder();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.remainder(doubleArray0, 0, doubleArray0, 0, doubleArray0, 386);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 386
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(6, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(2, 2);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(2, dSCompiler1.getOrder());
      assertEquals(6, dSCompiler1.getSize());
      assertEquals(2, dSCompiler1.getFreeParameters());
      assertNotNull(dSCompiler1);
      
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      dSCompiler0.linearCombination(1197.3389543, doubleArray0, 2, (-55.487501), doubleArray0, 2, 1387.51840256761, doubleArray0, 2, doubleArray0, 2);
      assertSame(dSCompiler0, dSCompiler1);
      assertArrayEquals(new double[] {2.0, 2.0, 5058.73971173522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = (double) 2;
      // Undeclared exception!
      try { 
        dSCompiler0.cosh(doubleArray0, 1197, doubleArray0, 126);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1197
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      int int1 = 260;
      // Undeclared exception!
      try { 
        dSCompiler0.asinh(doubleArray0, 0, doubleArray0, 260);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 260
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      dSCompiler0.acos(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {1.5707963267948966, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[3] = (-2885.8388869);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, (-1023), 0.0, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1023
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      dSCompiler0.asinh(doubleArray0, 0, doubleArray0, 1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(9, doubleArray0.length);
      
      int int1 = 710;
      int int2 = (-219);
      // Undeclared exception!
      try { 
        DSCompiler.getCompiler(710, (-219));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.taylor(doubleArray0, 2561, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2561
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = 2048;
      // Undeclared exception!
      DSCompiler.getCompiler(2, 2048);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-292);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      try { 
        dSCompiler0.getPartialDerivativeIndex(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 0
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = 1395.7242086459974;
      doubleArray0[5] = (double) 1;
      int int0 = 0;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1395.7242086459974;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 1;
      dSCompiler0.cosh(doubleArray1, 1, doubleArray0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 1.0, 1395.7242086459974, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1395.7242086459974, 0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        dSCompiler0.asin(doubleArray1, 11, doubleArray1, (-737));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 942);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(942, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) 942;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 1.0327515602111816;
      doubleArray0[5] = (double) 942;
      doubleArray0[6] = (double) 942;
      doubleArray0[7] = 10.0;
      doubleArray0[8] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.subtract(doubleArray0, 942, doubleArray0, (-651), doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 942
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        dSCompiler0.sin(doubleArray0, 1796, doubleArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1796
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = 0;
      int int1 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 1);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.atanh((double[]) null, 0, doubleArray0, 2114);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[7] = 0.0;
      doubleArray0[4] = 1408.258;
      doubleArray0[7] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      dSCompiler0.cosh(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 1408.258, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(8, doubleArray0.length);
      
      dSCompiler0.asin(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {1.5707963267948966, 0.0, 0.0, 0.0, 1408.258, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        dSCompiler0.log(doubleArray0, 0, doubleArray0, 1364);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1364
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 1543.33629;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      int int1 = 1133;
      int int2 = 3730;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 1133, 3730, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1133
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = 1396.5983;
      doubleArray0[5] = (double) 1;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1396.5983;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = 1396.5983;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 1;
      dSCompiler0.acos(doubleArray0, 0, doubleArray1, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1396.5983, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NEGATIVE_INFINITY, 1.0, 1396.5983, 0.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        dSCompiler0.compose((double[]) null, 1, (double[]) null, (double[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 942);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 942;
      doubleArray0[1] = (double) 942;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 1.0327515602111816;
      doubleArray0[5] = (double) 942;
      doubleArray0[6] = (double) 942;
      doubleArray0[7] = 10.0;
      doubleArray0[8] = (double) 0;
      // Undeclared exception!
      dSCompiler0.tan(doubleArray0, 0, doubleArray0, 0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      dSCompiler0.rootN(doubleArray0, 0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 0;
      dSCompiler0.pow(doubleArray0, 0, 0.0, doubleArray0, 0);
      // Undeclared exception!
      try { 
        dSCompiler0.sinh(doubleArray0, 137, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 137
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      int int1 = (-1856);
      // Undeclared exception!
      try { 
        dSCompiler0.acos(doubleArray0, 0, doubleArray0, (-1856));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1856
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      int int0 = dSCompiler0.getOrder();
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = 0.0;
      double double0 = dSCompiler0.taylor(doubleArray0, 0, doubleArray1);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        dSCompiler0.log10(doubleArray0, (-3255), doubleArray0, (-917));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3255
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = 0;
      int int1 = 2330;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 2330);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2330;
      doubleArray0[1] = (double) 0;
      int int2 = 0;
      // Undeclared exception!
      try { 
        dSCompiler0.sinh(doubleArray0, 2330, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2330
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      DSCompiler.getCompiler(2, 2);
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      dSCompiler0.linearCombination(1197.3389543, doubleArray0, 2, (-55.487501), doubleArray0, 2, 1387.51840256761, doubleArray0, 2, doubleArray0, 2);
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = (double) 2;
      int int1 = 1676;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 2;
      // Undeclared exception!
      try { 
        dSCompiler0.compose(doubleArray0, 1676, doubleArray1, doubleArray0, (-780));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -780
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[5];
      dSCompiler0.taylor(doubleArray0, 0, doubleArray0);
      doubleArray0[0] = (double) 0;
      int int1 = (-2752);
      // Undeclared exception!
      try { 
        dSCompiler0.rootN(doubleArray0, 473, 473, doubleArray0, (-2752));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 473
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int int0 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 2;
      int int1 = 0;
      dSCompiler0.asinh(doubleArray0, 0, doubleArray0, 2);
      int int2 = (-1386);
      // Undeclared exception!
      try { 
        dSCompiler0.sinh(doubleArray0, (-1386), doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1386
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = 964;
      int int1 = 1213;
      // Undeclared exception!
      DSCompiler.getCompiler(964, 1213);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      int int1 = (-2345);
      int int2 = (-1180);
      // Undeclared exception!
      try { 
        dSCompiler0.rootN(doubleArray0, (-2345), (-1180), doubleArray0, (-2345));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2345
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-2473.0);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-2473.0);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination((-2473.0), doubleArray0, 0, (-2473.0), doubleArray0, 0, 0.0, doubleArray0, 0, 1.6374890804290771, doubleArray0, 0, doubleArray0, (-576));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -576
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int int0 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        dSCompiler0.atanh(doubleArray0, 1, doubleArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1877);
      // Undeclared exception!
      try { 
        DSCompiler.getCompiler(0, (-1877));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      DSCompiler.getCompiler(575, 575);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int int0 = (-209);
      // Undeclared exception!
      try { 
        DSCompiler.getCompiler((-209), (-209));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
