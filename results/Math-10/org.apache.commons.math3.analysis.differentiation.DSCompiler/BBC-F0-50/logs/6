* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: org.apache.commons.math3.analysis.differentiation.DSCompiler
* Starting Client-0
* Connecting to master process on port 2453
* Analyzing classpath: 
  - subjects/buggy-versions/Math-10/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.math3.analysis.differentiation.DSCompiler
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1519
* Using seed 3903181873
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 366 / 1519
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.rootN([DII[DI)V: I12 Branch 67 IF_ICMPNE L949 - false: 207
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.pow([DII[DI)V: Line 872: 544
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.log10([DI[DI)V: I45 Branch 75 IF_ICMPGT L1083 - true: 276
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.acos([DI[DI)V: I156 Branch 90 IF_ICMPNE L1239 - false: 96
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.tan([DI[DI)V: I25 Branch 80 IFLE L1162 - true: 754
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.log10([DI[DI)V: I45 Branch 75 IF_ICMPGT L1083 - false: 276
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.pow([DII[DI)V: Line 887: 244
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.acos([DI[DI)V: I174 Branch 91 IFNE L1243 - true: 96
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.pow([DII[DI)V: Line 892: 244
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.pow([DII[DI)V: Line 891: 244
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.atanh([DI[DI)V: Line 1698: 36
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.pow([DII[DI)V: Line 896: 151
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.pow([DII[DI)V: Line 895: 151
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.cosh([DI[DI)V: I39 Branch 109 IF_ICMPGT L1438 - false: 145
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.cosh([DI[DI)V: I21 Branch 108 IFLE L1436 - false: 291
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.cosh([DI[DI)V: I39 Branch 109 IF_ICMPGT L1438 - true: 145
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.atanh([DI[DI)V: Line 1696: 36
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.log1p([DI[DI)V: I21 Branch 72 IFLE L1053 - true: 67
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.pow([DII[DI)V: Line 903: 168
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.pow([DII[DI)V: Line 902: 168
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.pow([DII[DI)V: Line 909: 168
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.linearCombination(D[DID[DID[DI[DI)V: Line 691: 392
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.cosh([DI[DI)V: I21 Branch 108 IFLE L1436 - true: 146
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.log1p([DI[DI)V: I21 Branch 72 IFLE L1053 - false: 503
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.getFreeParameters()I: Line 624: 49
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.pow([DII[DI)V: Line 911: 168
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.asin([DI[DI)V: Line 1271: 247
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.asin([DI[DI)V: Line 1270: 247
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.acos([DI[DI)V: I25 Branch 86 IFLE L1216 - true: 49
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.asin([DI[DI)V: Line 1273: 471
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.asin([DI[DI)V: Line 1272: 471
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.add([DI[DI[DI)V: I8 Branch 55 IF_ICMPGE L737 - true: 288
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.tan([DI[DI)V: I25 Branch 80 IFLE L1162 - false: 849
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.acos([DI[DI)V: I25 Branch 86 IFLE L1216 - false: 483
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.exp([DI[DI)V: Line 989: 26
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.linearCombination(D[DID[DID[DI[DI)V: Line 685: 49
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.exp([DI[DI)V: Line 987: 26
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.cosh([DI[DI)V: Line 1446: 350
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.acos([DI[DI)V: I105 Branch 88 IFLT L1235 - true: 132
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.linearCombination(D[DID[DI[DI)V: Line 660: 49
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.acos([DI[DI)V: I105 Branch 88 IFLT L1235 - false: 132
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.linearCombination(D[DID[DI[DI)V: Line 664: 302
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.atan([DI[DI)V: I25 Branch 98 IFLE L1330 - true: 647
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.atan([DI[DI)V: I74 Branch 99 IF_ICMPGT L1344 - true: 475
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.rootN([DII[DI)V: I113 Branch 69 IF_ICMPGT L961 - true: 48
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.atan([DI[DI)V: I25 Branch 98 IFLE L1330 - false: 1122
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.linearCombination(D[DID[DID[DID[DI[DI)V: Line 723: 311
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.cos([DI[DI)V: I21 Branch 76 IFLE L1108 - false: 228
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.log1p([DI[DI)V: Line 1065: 339
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.tan([DI[DI)V: I54 Branch 81 IF_ICMPGT L1174 - false: 95
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.cos([DI[DI)V: I21 Branch 76 IFLE L1108 - true: 175
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.linearCombination(D[DID[DID[DID[DI[DI)V: Line 716: 49
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.rootN([DII[DI)V: I113 Branch 69 IF_ICMPGT L961 - false: 311
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.atanh([DI[DI)V: Line 1658: 36
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.atanh([DI[DI)V: Line 1657: 36
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.log1p([DI[DI)V: Line 1063: 67
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.tan([DI[DI)V: I54 Branch 81 IF_ICMPGT L1174 - true: 95
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.log1p([DI[DI)V: Line 1053: 67
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.atan([DI[DI)V: I74 Branch 99 IF_ICMPGT L1344 - false: 475
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.multiply([DI[DI[DI)V: I29 Branch 58 IF_ICMPGE L774 - true: 97
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.log1p([DI[DI)V: I44 Branch 73 IF_ICMPGT L1056 - true: 436
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.tan([DI[DI)V: I147 Branch 85 IFNE L1187 - false: 518
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.divide([DI[DI[DI)V: Line 796: 544
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.divide([DI[DI[DI)V: Line 797: 544
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.divide([DI[DI[DI)V: Line 798: 790
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.divide([DI[DI[DI)V: Line 799: 1041
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.log1p([DI[DI)V: I44 Branch 73 IF_ICMPGT L1056 - false: 436
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.rootN([DII[DI)V: Line 969: 83
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.compileMultiplicationIndirection(IILorg/apache/commons/math3/analysis/differentiation/DSCompiler;Lorg/apache/commons/math3/analysis/differentiation/DSCompiler;[I)[[[I: I228 Branch 31 IF_ICMPNE L371 - true: 987
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.acosh([DI[DI)V: Line 1584: 216
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.rootN([DII[DI)V: Line 967: 48
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.sinh([DI[DI)V: I21 Branch 110 IFLE L1462 - true: 250
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.acos([DI[DI)V: Line 1213: 49
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.acos([DI[DI)V: Line 1214: 49
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.asin([DI[DI)V: I120 Branch 95 IF_ICMPLE L1294 - false: 246
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.checkCompatibility(Lorg/apache/commons/math3/analysis/differentiation/DSCompiler;)V: I6 Branch 142 IF_ICMPEQ L1754 - true: 1162
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.acos([DI[DI)V: Line 1215: 49
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.acos([DI[DI)V: Line 1216: 49
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.acosh([DI[DI)V: Line 1582: 216
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.remainder([DI[DI[DI)V: Line 815: 49
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.checkCompatibility(Lorg/apache/commons/math3/analysis/differentiation/DSCompiler;)V: I6 Branch 142 IF_ICMPEQ L1754 - false: 1051
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.remainder([DI[DI[DI)V: I37 Branch 59 IF_ICMPGE L822 - false: 1333
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.linearCombination(D[DID[DID[DID[DI[DI)V: I8 Branch 54 IF_ICMPGE L716 - false: 49
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.tan([DI[DI)V: Line 1197: 754
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.rootN([DII[DI)V: Line 961: 48
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.rootN([DII[DI)V: Line 960: 48
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.tan([DI[DI)V: Line 1199: 793
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.rootN([DII[DI)V: Line 959: 48
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.rootN([DII[DI)V: Line 957: 48
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.sinh([DI[DI)V: I21 Branch 110 IFLE L1462 - false: 391
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.remainder([DI[DI[DI)V: I37 Branch 59 IF_ICMPGE L822 - true: 49
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.linearCombination(D[DID[DID[DID[DI[DI)V: I8 Branch 54 IF_ICMPGE L716 - true: 296
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.rootN([DII[DI)V: Line 954: 78
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.remainder([DI[DI[DI)V: Line 826: 49
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.atanh([DI[DI)V: I117 Branch 133 IF_ICMPLE L1679 - false: 76
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.remainder([DI[DI[DI)V: Line 822: 49
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.remainder([DI[DI[DI)V: Line 819: 49
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.remainder([DI[DI[DI)V: Line 816: 49
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.tan([DI[DI)V: Line 1158: 647
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.tan([DI[DI)V: Line 1159: 647
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.tan([DI[DI)V: Line 1160: 754
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.tan([DI[DI)V: Line 1162: 754
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(II[[I[I)I: I37 Branch 50 IF_ICMPLE L572 - false: 1011
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.taylor([DI[D)D: I36 Branch 140 IF_ICMPGE L1738 - false: 255
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.checkCompatibility(Lorg/apache/commons/math3/analysis/differentiation/DSCompiler;)V: I23 Branch 143 IF_ICMPEQ L1757 - false: 248
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.checkCompatibility(Lorg/apache/commons/math3/analysis/differentiation/DSCompiler;)V: I23 Branch 143 IF_ICMPEQ L1757 - true: 111
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.pow([DID[DI)V: I27 Branch 60 IFLE L844 - true: 49
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.taylor([DI[D)D: I42 Branch 141 IFLE L1739 - false: 255
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.pow([DII[DI)V: I111 Branch 65 IF_ICMPGT L896 - true: 151
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.pow([DII[DI)V: I111 Branch 65 IF_ICMPGT L896 - false: 151
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.compose([DI[D[DI)V: I57 Branch 138 IF_ICMPGE L1718 - false: 388
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.cos([DI[DI)V: I40 Branch 77 IF_ICMPGT L1110 - false: 53
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.acosh([DI[DI)V: Line 1543: 216
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.acosh([DI[DI)V: Line 1544: 216
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.linearCombination(D[DID[DI[DI)V: I8 Branch 52 IF_ICMPGE L660 - true: 299
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.taylor([DI[D)D: I42 Branch 141 IFLE L1739 - true: 255
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.linearCombination(D[DID[DI[DI)V: I8 Branch 52 IF_ICMPGE L660 - false: 49
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.tan([DI[DI)V: I95 Branch 83 IF_ICMPLE L1181 - false: 518
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.cos([DI[DI)V: I40 Branch 77 IF_ICMPGT L1110 - true: 53
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.pow([DID[DI)V: I27 Branch 60 IFLE L844 - false: 741
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.tanh([DI[DI)V: Line 1488: 49
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.tanh([DI[DI)V: Line 1490: 49
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.multiply([DI[DI[DI)V: Line 779: 97
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.subtract([DI[DI[DI)V: I8 Branch 56 IF_ICMPGE L753 - true: 4129
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.multiply([DI[DI[DI)V: Line 781: 97
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.asin([DI[DI)V: I25 Branch 92 IFLE L1273 - true: 487
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.tanh([DI[DI)V: Line 1486: 49
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.tanh([DI[DI)V: Line 1487: 49
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.atan2([DI[DI[DI)V: Line 1400: 128
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.atan2([DI[DI[DI)V: Line 1399: 128
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.asin([DI[DI)V: I75 Branch 93 IF_ICMPGT L1287 - false: 172
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.sin([DI[DI)V: I21 Branch 78 IFLE L1134 - false: 390
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.atan2([DI[DI[DI)V: Line 1388: 445
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.atan2([DI[DI[DI)V: Line 1387: 445
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.atan2([DI[DI[DI)V: Line 1390: 517
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.atan2([DI[DI[DI)V: Line 1389: 517
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.multiply([DI[DI[DI)V: I9 Branch 57 IF_ICMPGE L771 - true: 97
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.atan2([DI[DI[DI)V: Line 1392: 828
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.atan2([DI[DI[DI)V: Line 1391: 828
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.atan2([DI[DI[DI)V: Line 1394: 828
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.linearCombination(D[DID[DID[DI[DI)V: I8 Branch 53 IF_ICMPGE L685 - true: 380
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.pow([DID[DI)V: I64 Branch 61 IF_ICMPGT L850 - false: 692
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.linearCombination(D[DID[DID[DI[DI)V: I8 Branch 53 IF_ICMPGE L685 - false: 49
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.subtract([DI[DI[DI)V: I8 Branch 56 IF_ICMPGE L753 - false: 3685
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.checkCompatibility(Lorg/apache/commons/math3/analysis/differentiation/DSCompiler;)V: Line 1754: 1051
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.tanh([DI[DI)V: I54 Branch 113 IF_ICMPGT L1502 - false: 764
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.subtract([DI[DI[DI)V: Line 756: 4131
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.subtract([DI[DI[DI)V: Line 753: 3685
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.tanh([DI[DI)V: Line 1525: 49
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.tanh([DI[DI)V: Line 1527: 49
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.tanh([DI[DI)V: I54 Branch 113 IF_ICMPGT L1502 - true: 764
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.atan2([DI[DI[DI)V: Line 1420: 972
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.asin([DI[DI)V: I25 Branch 92 IFLE L1273 - false: 471
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.divide([DI[DI[DI)V: root-Branch: 544
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.tanh([DI[DI)V: I25 Branch 112 IFLE L1490 - false: 813
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.asinh([DI[DI)V: I25 Branch 124 IFLE L1601 - false: 67
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.log10([DI[DI)V: Line 1078: 146
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.tanh([DI[DI)V: I25 Branch 112 IFLE L1490 - true: 49
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.log10([DI[DI)V: Line 1079: 146
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.log10([DI[DI)V: Line 1080: 282
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.asinh([DI[DI)V: I75 Branch 125 IF_ICMPGT L1615 - false: 67
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.log10([DI[DI)V: Line 1090: 282
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.log10([DI[DI)V: Line 1092: 282
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.asinh([DI[DI)V: I75 Branch 125 IF_ICMPGT L1615 - true: 113
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.acos([DI[DI)V: Line 1254: 49
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.sin([DI[DI)V: I39 Branch 79 IF_ICMPGT L1136 - true: 390
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.cos([DI[DI)V: Line 1116: 175
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.cos([DI[DI)V: Line 1118: 175
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.acos([DI[DI)V: Line 1256: 49
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.sin([DI[DI)V: I39 Branch 79 IF_ICMPGT L1136 - false: 390
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex([I)I: I6 Branch 48 IF_ICMPEQ L538 - true: 189
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.cos([DI[DI)V: Line 1107: 49
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.cos([DI[DI)V: Line 1106: 49
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex([I)I: I6 Branch 48 IF_ICMPEQ L538 - false: 49
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex([I)I: Line 538: 49
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.cos([DI[DI)V: Line 1108: 175
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.add([DI[DI[DI)V: Line 740: 289
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.pow([DII[DI)V: I60 Branch 64 IFLE L887 - true: 244
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.atan2([DI[DI[DI)V: I58 Branch 104 IFLT L1394 - false: 828
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.pow([DII[DI)V: I60 Branch 64 IFLE L887 - false: 244
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.asin([DI[DI)V: I105 Branch 94 IFLT L1292 - false: 172
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.atan2([DI[DI[DI)V: I58 Branch 104 IFLT L1394 - true: 1845
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.log([DI[DI)V: I21 Branch 70 IFLE L1026 - false: 146
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.pow([DII[DI)V: I3 Branch 62 IFNE L872 - true: 544
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.asin([DI[DI)V: I105 Branch 94 IFLT L1292 - true: 172
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.sinh([DI[DI)V: I39 Branch 111 IF_ICMPGT L1464 - true: 141
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.pow([DID[DI)V: Line 858: 49
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.sinh([DI[DI)V: I39 Branch 111 IF_ICMPGT L1464 - false: 141
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.pow([DI[DI[DI)V: Line 930: 712
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.getFreeParameters()I: root-Branch: 49
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.acosh([DI[DI)V: I25 Branch 118 IFLE L1544 - false: 216
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.pow([DID[DI)V: Line 850: 49
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.pow([DID[DI)V: Line 849: 49
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.pow([DI[DI[DI)V: Line 931: 1201
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.pow([DID[DI)V: Line 856: 49
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.atan2([DI[DI[DI)V: I95 Branch 105 IF_ICMPGE L1400 - false: 128
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.acosh([DI[DI)V: I25 Branch 118 IFLE L1544 - true: 216
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.pow([DID[DI)V: Line 844: 49
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.pow([DID[DI)V: Line 843: 49
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.pow([DID[DI)V: Line 842: 49
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.pow([DID[DI)V: Line 848: 49
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.atan2([DI[DI[DI)V: I151 Branch 106 IFGT L1410 - true: 1017
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.atan2([DI[DI[DI)V: I95 Branch 105 IF_ICMPGE L1400 - true: 128
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.atan2([DI[DI[DI)V: I151 Branch 106 IFGT L1410 - false: 1017
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.expm1([DI[DI)V: Line 1010: 593
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.cosh([DI[DI)V: Line 1444: 146
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.acos([DI[DI)V: I75 Branch 87 IF_ICMPGT L1230 - false: 566
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.atanh([DI[DI)V: I25 Branch 130 IFLE L1658 - true: 36
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.acos([DI[DI)V: I120 Branch 89 IF_ICMPLE L1237 - false: 96
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.expm1([DI[DI)V: Line 1008: 433
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.log([DI[DI)V: I42 Branch 71 IF_ICMPGT L1029 - true: 146
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.expm1([DI[DI)V: Line 1003: 347
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.cosh([DI[DI)V: Line 1436: 146
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.atanh([DI[DI)V: I25 Branch 130 IFLE L1658 - false: 205
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.log10([DI[DI)V: I21 Branch 74 IFLE L1080 - false: 558
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.expm1([DI[DI)V: Line 1005: 433
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.cosh([DI[DI)V: Line 1435: 146
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.expm1([DI[DI)V: Line 1004: 347
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.cosh([DI[DI)V: Line 1434: 146
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.log([DI[DI)V: I42 Branch 71 IF_ICMPGT L1029 - false: 146
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.acosh([DI[DI)V: I120 Branch 121 IF_ICMPLE L1565 - false: 484
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.acos([DI[DI)V: I75 Branch 87 IF_ICMPGT L1230 - true: 434
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.rootN([DII[DI)V: I36 Branch 68 IF_ICMPNE L952 - false: 259
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.sinh([DI[DI)V: Line 1460: 146
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.atan([DI[DI)V: Line 1330: 647
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.expm1([DI[DI)V: root-Branch: 347
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.atan([DI[DI)V: Line 1329: 647
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.atan([DI[DI)V: Line 1328: 647
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.atan([DI[DI)V: Line 1327: 647
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.atan([DI[DI)V: Line 1370: 938
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.atanh([DI[DI)V: I102 Branch 132 IFLT L1677 - false: 848
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.sinh([DI[DI)V: Line 1472: 250
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.atan([DI[DI)V: Line 1368: 647
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.sinh([DI[DI)V: Line 1470: 250
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.atanh([DI[DI)V: I102 Branch 132 IFLT L1677 - true: 848
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.pow([DII[DI)V: I3 Branch 62 IFNE L872 - false: 834
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.asin([DI[DI)V: Line 1311: 471
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.asin([DI[DI)V: Line 1313: 471
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.sinh([DI[DI)V: Line 1461: 146
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.sinh([DI[DI)V: Line 1462: 250
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.log10([DI[DI)V: I21 Branch 74 IFLE L1080 - true: 282
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.atanh([DI[DI)V: I74 Branch 131 IF_ICMPGT L1672 - true: 169
Number of times BBC is called for org.apache.commons.math3.analysis.differentiation.DSCompiler.atanh([DI[DI)V: I74 Branch 131 IF_ICMPGT L1672 - false: 1017
Number of times BBC is called in total: 93111
* Search finished after 602s and 95 generations, 36309 statements, best individual has fitness: 165.0
* Minimizing test suite
[MASTER] 13:57:35.778 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 99%
* Total number of goals: 544
* Number of covered goals: 536
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 97%
* Total number of goals: 295
* Number of covered goals: 287
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 76
* Number of covered goals: 76
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 81%
* Total number of goals: 279
* Number of covered goals: 227
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 54%
* Total number of goals: 28
* Number of covered goals: 15
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 39
* Number of covered goals: 39
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 97%
* Total number of goals: 39
* Number of covered goals: 38
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 96%
* Total number of goals: 295
* Number of covered goals: 282
* Generated 162 tests with total length 2496
* Resulting test suite's coverage: 84% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 13:58:19.414 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.70525% of time used, but only 20/162 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 1%
* Compiling and checking tests
[MASTER] 13:58:41.796 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<311>
[MASTER] 13:58:41.797 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 311;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(311, 0);
assertEquals(1, dSCompiler0.getSize());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(3, dSCompiler0.getFreeParameters());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[9];
doubleArray0[0] = (double) 0;
doubleArray0[1] = (double) 0;
doubleArray0[2] = (double) 311;
doubleArray0[3] = (double) 0;
int int1 = 45;
int int2 = 67;
dSCompiler0.linearCombination((double) 311, doubleArray0, 45, (double) 311, doubleArray0, 311, doubleArray0, 67);

[MASTER] 13:58:41.945 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:41.946 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(1, dSCompiler0.getSize());
assertEquals(0, dSCompiler0.getOrder());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[1];
doubleArray0[0] = (double) 0;
dSCompiler0.remainder(doubleArray0, (-2288), doubleArray0, 25, doubleArray0, (-2246));

[MASTER] 13:58:42.077 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:42.078 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(1, dSCompiler0.getSize());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(3, dSCompiler0.getFreeParameters());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[2];
doubleArray0[0] = (double) 0;
doubleArray0[1] = (double) 0;
dSCompiler0.sin(doubleArray0, 1142, doubleArray0, 1858);

[MASTER] 13:58:42.332 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:42.332 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(1, dSCompiler0.getSize());
assertEquals(0, dSCompiler0.getOrder());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[8];
doubleArray0[0] = (double) 0;
doubleArray0[1] = (double) 0;
doubleArray0[2] = (double) 0;
doubleArray0[3] = (double) 0;
doubleArray0[4] = (double) 0;
doubleArray0[5] = (double) 0;
doubleArray0[6] = (double) 0;
dSCompiler0.acosh(doubleArray0, 1252, doubleArray0, 1252);

[MASTER] 13:58:42.504 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:42.505 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[2];
dSCompiler0.sin(doubleArray0, 0, doubleArray0, 0);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
assertEquals(2, doubleArray0.length);
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());

double[] doubleArray1 = new double[1];
assertFalse(doubleArray1.equals((Object)doubleArray0));

doubleArray1[0] = 0.0;
dSCompiler0.acos(doubleArray0, 0, doubleArray1, 0);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
assertArrayEquals(new double[] {1.5707963267948966}, doubleArray1, 0.01);
assertEquals(2, doubleArray0.length);
assertEquals(1, doubleArray1.length);
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertFalse(doubleArray0.equals((Object)doubleArray1));
assertFalse(doubleArray1.equals((Object)doubleArray0));
assertNotSame(doubleArray0, doubleArray1);
assertNotSame(doubleArray1, doubleArray0);

dSCompiler0.linearCombination((double) 0, doubleArray1, (-968), 0.0, doubleArray0, 480, 1.5707963267948966, doubleArray1, (-1551), (double) 0, doubleArray0, (-1920), doubleArray0, 60);

[MASTER] 13:58:43.225 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<311>
[MASTER] 13:58:43.226 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 311;
int int1 = 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(311, 0);
assertEquals(1, dSCompiler0.getSize());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(3, dSCompiler0.getFreeParameters());
assertNotNull(dSCompiler0);

int[] intArray0 = new int[6];
intArray0[0] = 311;
intArray0[1] = 311;
intArray0[2] = 311;
intArray0[3] = 311;
intArray0[4] = 311;
intArray0[5] = 0;
dSCompiler0.getPartialDerivativeIndex(intArray0);

[MASTER] 13:58:43.544 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:43.545 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(1, dSCompiler0.getSize());
assertEquals(0, dSCompiler0.getOrder());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[8];
doubleArray0[0] = (double) 0;
doubleArray0[1] = (double) 0;
doubleArray0[2] = (double) 0;
doubleArray0[3] = (double) 0;
doubleArray0[4] = (double) 0;
doubleArray0[5] = (double) 0;
doubleArray0[6] = (double) 0;
doubleArray0[7] = (double) 0;
int int0 = 5489;
dSCompiler0.tanh(doubleArray0, 0, doubleArray0, 0);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertEquals(8, doubleArray0.length);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(1, dSCompiler0.getSize());
assertEquals(0, dSCompiler0.getOrder());

dSCompiler0.linearCombination(696.13, doubleArray0, 5489, (double) 0, doubleArray0, 0, 0.0, doubleArray0, 2837, doubleArray0, 2837);

[MASTER] 13:58:43.749 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:43.749 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(1, dSCompiler0.getSize());
assertEquals(0, dSCompiler0.getOrder());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[0];
dSCompiler0.asinh(doubleArray0, 3056, doubleArray0, 0);

[MASTER] 13:58:43.876 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:43.876 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertNotNull(dSCompiler0);

double[] doubleArray0 = null;
double[] doubleArray1 = new double[8];
doubleArray1[0] = (double) (-693);
doubleArray1[1] = (double) (-693);
doubleArray1[2] = 0.0;
doubleArray1[3] = (double) 0;
doubleArray1[4] = (double) (-693);
doubleArray1[5] = (double) 0;
doubleArray1[6] = (double) (-693);
doubleArray1[7] = (double) (-693);
dSCompiler0.taylor((double[]) null, (-693), doubleArray1);

[MASTER] 13:58:44.066 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:44.066 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(1, dSCompiler0.getSize());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[2];
doubleArray0[0] = (double) 0;
doubleArray0[1] = (double) 0;
double double0 = dSCompiler0.taylor(doubleArray0, 0, doubleArray0);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
assertEquals(2, doubleArray0.length);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(1, dSCompiler0.getSize());
assertEquals(0.0, double0, 0.01);

int[] intArray0 = new int[1];
intArray0[0] = 0;
dSCompiler0.log1p(doubleArray0, 0, (double[]) null, 251);

[MASTER] 13:58:44.196 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:44.197 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(1, dSCompiler0.getSize());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[8];
doubleArray0[0] = (double) 0;
int int1 = 557;
dSCompiler0.pow(doubleArray0, 0, (-2.7836800219410262E-8), doubleArray0, 2615);

[MASTER] 13:58:44.616 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:44.616 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[2];
dSCompiler0.sin(doubleArray0, 0, doubleArray0, 0);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
assertEquals(2, doubleArray0.length);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());

double[] doubleArray1 = new double[1];
assertFalse(doubleArray1.equals((Object)doubleArray0));

dSCompiler0.log10(doubleArray1, 17, doubleArray0, 17);

[MASTER] 13:58:44.729 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:44.730 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[8];
double[] doubleArray1 = new double[4];
assertFalse(doubleArray1.equals((Object)doubleArray0));

doubleArray1[0] = (double) 0;
doubleArray1[1] = (double) 0;
doubleArray1[2] = (double) 0;
doubleArray1[3] = (double) 0;
dSCompiler0.cosh(doubleArray1, 3, doubleArray1, (-68));

[MASTER] 13:58:44.882 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:44.883 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(1, dSCompiler0.getSize());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(3, dSCompiler0.getFreeParameters());
assertNotNull(dSCompiler0);

int[] intArray0 = new int[8];
intArray0[0] = 0;
intArray0[1] = 6918;
intArray0[2] = 0;
intArray0[3] = 0;
intArray0[4] = 0;
intArray0[5] = 0;
intArray0[6] = 0;
intArray0[7] = 0;
dSCompiler0.getPartialDerivativeIndex(intArray0);

[MASTER] 13:58:45.345 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:45.345 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(1, dSCompiler0.getSize());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[8];
int int1 = 557;
dSCompiler0.asin(doubleArray0, 557, doubleArray0, 0);

[MASTER] 13:58:45.459 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:45.460 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(1, dSCompiler0.getSize());
assertEquals(0, dSCompiler0.getOrder());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[8];
double[] doubleArray1 = new double[4];
assertFalse(doubleArray1.equals((Object)doubleArray0));

dSCompiler0.log(doubleArray0, 0, doubleArray0, 0);
assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertEquals(8, doubleArray0.length);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(1, dSCompiler0.getSize());
assertEquals(0, dSCompiler0.getOrder());
assertFalse(doubleArray0.equals((Object)doubleArray1));
assertNotSame(doubleArray0, doubleArray1);

double[] doubleArray2 = new double[2];
assertFalse(doubleArray2.equals((Object)doubleArray0));
assertFalse(doubleArray2.equals((Object)doubleArray1));

doubleArray2[0] = (double) 0;
doubleArray2[1] = (double) 0;
dSCompiler0.atanh(doubleArray2, 0, doubleArray1, 0);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
assertEquals(4, doubleArray1.length);
assertEquals(2, doubleArray2.length);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(1, dSCompiler0.getSize());
assertEquals(0, dSCompiler0.getOrder());
assertFalse(doubleArray1.equals((Object)doubleArray2));
assertFalse(doubleArray1.equals((Object)doubleArray0));
assertFalse(doubleArray2.equals((Object)doubleArray0));
assertFalse(doubleArray2.equals((Object)doubleArray1));
assertNotSame(doubleArray1, doubleArray2);
assertNotSame(doubleArray1, doubleArray0);
assertNotSame(doubleArray2, doubleArray0);
assertNotSame(doubleArray2, doubleArray1);

doubleArray1[0] = (double) 0;
doubleArray1[1] = (double) 0;
doubleArray1[2] = (double) 0;
doubleArray1[3] = (double) 0;
dSCompiler0.cosh(doubleArray1, 3, doubleArray1, (-68));

[MASTER] 13:58:45.574 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:45.574 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[2];
dSCompiler0.sin(doubleArray0, 0, doubleArray0, 0);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
assertEquals(2, doubleArray0.length);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());

double[] doubleArray1 = new double[1];
assertFalse(doubleArray1.equals((Object)doubleArray0));

int int1 = 30;
int int2 = 812;
dSCompiler0.expm1(doubleArray0, 812, doubleArray1, (-2645));

[MASTER] 13:58:45.725 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:45.725 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[2];
doubleArray0[0] = (double) 0;
double[] doubleArray1 = null;
int int0 = 14;
double[] doubleArray2 = new double[1];
assertFalse(doubleArray2.equals((Object)doubleArray0));

doubleArray2[0] = (double) 14;
int int1 = 918;
dSCompiler0.log10((double[]) null, 14, doubleArray2, 918);

[MASTER] 13:58:45.857 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:45.858 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[8];
doubleArray0[1] = (double) 0;
doubleArray0[2] = (double) 0;
doubleArray0[3] = (double) 0;
doubleArray0[4] = (double) 0;
doubleArray0[5] = (double) 0;
doubleArray0[6] = (double) 0;
doubleArray0[7] = (double) 0;
dSCompiler0.sinh(doubleArray0, 0, doubleArray0, 0);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertEquals(8, doubleArray0.length);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());

double[] doubleArray1 = new double[9];
assertFalse(doubleArray1.equals((Object)doubleArray0));

doubleArray1[0] = (double) 3;
doubleArray1[1] = (double) 5254;
doubleArray1[2] = 3.0;
doubleArray1[3] = 1575.2585990197583;
doubleArray1[4] = (double) 3;
doubleArray1[5] = (double) 5254;
doubleArray1[6] = (double) 0;
doubleArray1[7] = (double) 5254;
doubleArray1[8] = (double) 0;
dSCompiler0.multiply(doubleArray1, 3, doubleArray0, 67, doubleArray1, 66);

[MASTER] 13:58:46.034 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:46.035 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(1, dSCompiler0.getSize());
assertEquals(0, dSCompiler0.getOrder());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[7];
int int0 = 557;
dSCompiler0.rootN(doubleArray0, 5, (-1958), doubleArray0, 557);

[MASTER] 13:58:46.229 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:46.229 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertNotNull(dSCompiler0);

dSCompiler0.sin((double[]) null, 0, (double[]) null, 797);

[MASTER] 13:58:46.584 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:46.585 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[2];
dSCompiler0.atanh(doubleArray0, 0, doubleArray0, 0);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
assertEquals(2, doubleArray0.length);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());

int int0 = 1017;
double[] doubleArray1 = null;
int int1 = 1;
dSCompiler0.linearCombination((double) 0, (double[]) null, 1, (double) 1, (double[]) null, 23, doubleArray0, 1017);

[MASTER] 13:58:46.711 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:46.711 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[0];
dSCompiler0.atan2(doubleArray0, 0, doubleArray0, 0, doubleArray0, (-3082));

[MASTER] 13:58:47.128 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:47.128 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[6];
doubleArray0[0] = (double) 0;
doubleArray0[1] = (double) 0;
doubleArray0[2] = (double) 0;
doubleArray0[3] = (double) 0;
int int0 = 15;
dSCompiler0.acos(doubleArray0, 0, doubleArray0, 15);

[MASTER] 13:58:47.276 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:47.276 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(1, dSCompiler0.getSize());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[2];
dSCompiler0.sin(doubleArray0, 0, doubleArray0, 0);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
assertEquals(2, doubleArray0.length);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(1, dSCompiler0.getSize());

double[] doubleArray1 = new double[1];
assertFalse(doubleArray1.equals((Object)doubleArray0));

dSCompiler0.log10(doubleArray1, 0, doubleArray0, 0);
assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0}, doubleArray0, 0.01);
assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
assertEquals(2, doubleArray0.length);
assertEquals(1, doubleArray1.length);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(1, dSCompiler0.getSize());
assertFalse(doubleArray0.equals((Object)doubleArray1));
assertFalse(doubleArray1.equals((Object)doubleArray0));
assertNotSame(doubleArray0, doubleArray1);
assertNotSame(doubleArray1, doubleArray0);

double double0 = 0.0;
doubleArray1[0] = 0.0;
dSCompiler0.acos(doubleArray0, 0, doubleArray1, 0);
assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0}, doubleArray0, 0.01);
assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
assertEquals(2, doubleArray0.length);
assertEquals(1, doubleArray1.length);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(1, dSCompiler0.getSize());
assertFalse(doubleArray0.equals((Object)doubleArray1));
assertFalse(doubleArray1.equals((Object)doubleArray0));
assertNotSame(doubleArray0, doubleArray1);
assertNotSame(doubleArray1, doubleArray0);

int int1 = (-968);
int int2 = (-1551);
int int3 = (-1920);
dSCompiler0.linearCombination(0.0, doubleArray0, 2313, (double) (-1551), doubleArray1, (-1920), doubleArray1, 0);

[MASTER] 13:58:47.604 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:47.604 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(1, dSCompiler0.getSize());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(3, dSCompiler0.getFreeParameters());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[2];
dSCompiler0.sin(doubleArray0, 0, doubleArray0, 0);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
assertEquals(2, doubleArray0.length);
assertEquals(1, dSCompiler0.getSize());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(3, dSCompiler0.getFreeParameters());

double[] doubleArray1 = new double[1];
assertFalse(doubleArray1.equals((Object)doubleArray0));

dSCompiler0.divide(doubleArray1, 806, doubleArray0, 0, doubleArray0, 0);

[MASTER] 13:58:47.815 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:47.815 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[9];
doubleArray0[0] = (double) 0;
doubleArray0[1] = (double) 0;
doubleArray0[2] = (-1.0);
doubleArray0[3] = (double) 0;
doubleArray0[4] = (double) 0;
doubleArray0[5] = (double) 0;
doubleArray0[6] = (double) 0;
doubleArray0[7] = (double) 0;
doubleArray0[8] = 2.7279024753382288E76;
dSCompiler0.atan2(doubleArray0, 1033, doubleArray0, 0, doubleArray0, 1033);

[MASTER] 13:58:48.038 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:48.038 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[2];
dSCompiler0.sin(doubleArray0, 0, doubleArray0, 0);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
assertEquals(2, doubleArray0.length);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());

double[] doubleArray1 = new double[1];
assertFalse(doubleArray1.equals((Object)doubleArray0));

int int1 = 30;
dSCompiler0.expm1(doubleArray0, 0, doubleArray1, (-2645));

[MASTER] 13:58:48.216 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<311>
[MASTER] 13:58:48.216 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(311, 0);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[9];
doubleArray0[0] = (double) 0;
doubleArray0[1] = (double) 0;
doubleArray0[2] = (double) 311;
doubleArray0[3] = (double) 0;
doubleArray0[4] = (double) 0;
doubleArray0[5] = (double) 311;
doubleArray0[6] = (double) 311;
doubleArray0[7] = 1876.9669699981869;
dSCompiler0.atan(doubleArray0, 0, doubleArray0, 311);

[MASTER] 13:58:49.340 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:49.340 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[9];
doubleArray0[0] = (double) 0;
doubleArray0[1] = (double) 0;
doubleArray0[4] = (-1.0);
doubleArray0[3] = (double) 0;
doubleArray0[4] = (double) 0;
doubleArray0[5] = (double) 0;
doubleArray0[6] = (double) 0;
doubleArray0[7] = (double) 0;
double double0 = 2.7279024753382288E76;
dSCompiler0.tan(doubleArray0, (-1423), doubleArray0, 985);

[MASTER] 13:58:49.471 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:49.472 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(1, dSCompiler0.getSize());
assertEquals(0, dSCompiler0.getOrder());
assertNotNull(dSCompiler0);

int int1 = 1033;
double[] doubleArray0 = null;
int int2 = 3159;
double[] doubleArray1 = new double[0];
int int3 = 1984;
dSCompiler0.atan2((double[]) null, 3159, (double[]) null, 0, doubleArray1, 1984);

[MASTER] 13:58:49.581 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:49.582 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(1, dSCompiler0.getSize());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[2];
dSCompiler0.sin(doubleArray0, 0, doubleArray0, 0);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
assertEquals(2, doubleArray0.length);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(1, dSCompiler0.getSize());

doubleArray0[0] = (double) 0;
dSCompiler0.log((double[]) null, 484, (double[]) null, 484);

[MASTER] 13:58:49.676 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:49.676 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[2];
dSCompiler0.sin(doubleArray0, 0, doubleArray0, 0);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
assertEquals(2, doubleArray0.length);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());

double[] doubleArray1 = new double[8];
assertFalse(doubleArray1.equals((Object)doubleArray0));

dSCompiler0.log10(doubleArray1, 0, doubleArray0, 0);
assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0}, doubleArray0, 0.01);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
assertEquals(2, doubleArray0.length);
assertEquals(8, doubleArray1.length);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertFalse(doubleArray0.equals((Object)doubleArray1));
assertFalse(doubleArray1.equals((Object)doubleArray0));
assertNotSame(doubleArray0, doubleArray1);
assertNotSame(doubleArray1, doubleArray0);

doubleArray1[0] = 0.0;
dSCompiler0.acos(doubleArray0, 0, doubleArray1, 0);
assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0}, doubleArray0, 0.01);
assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
assertEquals(2, doubleArray0.length);
assertEquals(8, doubleArray1.length);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertFalse(doubleArray0.equals((Object)doubleArray1));
assertFalse(doubleArray1.equals((Object)doubleArray0));
assertNotSame(doubleArray0, doubleArray1);
assertNotSame(doubleArray1, doubleArray0);

dSCompiler0.rootN(doubleArray1, 5, 0, doubleArray1, 0);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
assertEquals(8, doubleArray1.length);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertFalse(doubleArray1.equals((Object)doubleArray0));
assertNotSame(doubleArray1, doubleArray0);

dSCompiler0.log(doubleArray1, 61, doubleArray0, 458);

[MASTER] 13:58:49.816 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<311>
[MASTER] 13:58:49.817 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(311, 0);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[9];
int int1 = 817;
int int2 = 16;
int int3 = 469;
dSCompiler0.pow(doubleArray0, 16, (-310), doubleArray0, 469);

[MASTER] 13:58:49.981 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:49.982 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[2];
dSCompiler0.cos(doubleArray0, 0, doubleArray0, 0);
assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
assertEquals(2, doubleArray0.length);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());

doubleArray0[1] = (double) 0;
int int1 = 3;
dSCompiler0.pow(doubleArray0, 3, doubleArray0, (-2679), doubleArray0, 0);

[MASTER] 13:58:50.139 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:50.139 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[2];
doubleArray0[0] = (double) 0;
doubleArray0[1] = (double) 0;
int[] intArray0 = new int[1];
intArray0[0] = 0;
double[] doubleArray1 = new double[2];
assertFalse(doubleArray1.equals((Object)doubleArray0));

doubleArray1[0] = (-7.821867597227376E-9);
doubleArray1[1] = (double) 0;
dSCompiler0.linearCombination(0.0, (double[]) null, 0, (-1028.76043), doubleArray1, 0, (-1028.76043), doubleArray1, 0, doubleArray1, 0);

[MASTER] 13:58:50.255 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:50.255 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(1, dSCompiler0.getSize());
assertEquals(0, dSCompiler0.getOrder());
assertNotNull(dSCompiler0);

dSCompiler0.expm1((double[]) null, 0, (double[]) null, 0);

[MASTER] 13:58:50.504 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:50.505 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[9];
double[] doubleArray1 = new double[9];
assertFalse(doubleArray1.equals((Object)doubleArray0));

doubleArray1[0] = (double) 0;
doubleArray1[1] = (double) 0;
doubleArray1[2] = 0.0;
doubleArray1[3] = 2280.809035;
doubleArray1[4] = 0.0;
doubleArray1[5] = (double) 0;
doubleArray1[6] = (double) 0;
doubleArray1[7] = (double) 0;
doubleArray1[8] = (double) 0;
dSCompiler0.acosh(doubleArray1, 0, doubleArray0, 0);
assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2280.809035, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
assertEquals(9, doubleArray0.length);
assertEquals(9, doubleArray1.length);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertFalse(doubleArray0.equals((Object)doubleArray1));
assertFalse(doubleArray1.equals((Object)doubleArray0));
assertNotSame(doubleArray0, doubleArray1);
assertNotSame(doubleArray1, doubleArray0);

doubleArray0[0] = (double) 0;
doubleArray0[1] = (double) 0;
doubleArray0[3] = (double) 0;
doubleArray0[4] = (double) 0;
double[] doubleArray2 = new double[3];
assertFalse(doubleArray2.equals((Object)doubleArray1));
assertFalse(doubleArray2.equals((Object)doubleArray0));

doubleArray2[0] = (-1.0);
dSCompiler0.expm1(doubleArray0, 0, doubleArray0, 31);

[MASTER] 13:58:50.667 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:50.667 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(1, dSCompiler0.getSize());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(3, dSCompiler0.getFreeParameters());
assertNotNull(dSCompiler0);

double[] doubleArray0 = null;
dSCompiler0.pow((double[]) null, 0, 17.58598588105888, (double[]) null, 428);

[MASTER] 13:58:51.215 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:51.216 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertNotNull(dSCompiler0);

int int1 = 62;
DSCompiler dSCompiler1 = DSCompiler.getCompiler(62, 0);
assertEquals(1, dSCompiler1.getSize());
assertEquals(3, dSCompiler1.getFreeParameters());
assertEquals(0, dSCompiler1.getOrder());
assertNotNull(dSCompiler1);
assertSame(dSCompiler1, dSCompiler0);

dSCompiler1.checkCompatibility(dSCompiler0);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(1, dSCompiler1.getSize());
assertEquals(3, dSCompiler1.getFreeParameters());
assertEquals(0, dSCompiler1.getOrder());
assertSame(dSCompiler0, dSCompiler1);
assertSame(dSCompiler1, dSCompiler0);

DSCompiler dSCompiler2 = DSCompiler.getCompiler(int0, int1);
assertEquals(1, dSCompiler2.getSize());
assertEquals(0, dSCompiler2.getFreeParameters());
assertEquals(62, dSCompiler2.getOrder());
assertFalse(int0 == int1);
assertFalse(int1 == int0);
assertFalse(dSCompiler2.equals((Object)dSCompiler1));
assertFalse(dSCompiler2.equals((Object)dSCompiler0));
assertNotNull(dSCompiler2);
assertNotSame(dSCompiler2, dSCompiler1);
assertNotSame(dSCompiler2, dSCompiler0);

double[] doubleArray0 = new double[1];
int int2 = 3584;
double[] doubleArray1 = new double[3];
assertFalse(doubleArray1.equals((Object)doubleArray0));

doubleArray1[0] = (double) int0;
doubleArray1[1] = (double) int0;
doubleArray1[2] = (double) int2;
dSCompiler2.sin(doubleArray0, int2, doubleArray1, int2);

[MASTER] 13:58:51.336 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:51.336 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[8];
int int1 = 2;
dSCompiler0.log(doubleArray0, 0, doubleArray0, 2);
assertArrayEquals(new double[] {0.0, 0.0, Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertEquals(8, doubleArray0.length);
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());

DSCompiler dSCompiler1 = DSCompiler.getCompiler(2, 0);
assertEquals(3, dSCompiler1.getFreeParameters());
assertEquals(0, dSCompiler1.getOrder());
assertEquals(1, dSCompiler1.getSize());
assertNotNull(dSCompiler1);
assertSame(dSCompiler1, dSCompiler0);

dSCompiler0.checkCompatibility(dSCompiler1);
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(3, dSCompiler1.getFreeParameters());
assertEquals(0, dSCompiler1.getOrder());
assertEquals(1, dSCompiler1.getSize());
assertSame(dSCompiler0, dSCompiler1);
assertSame(dSCompiler1, dSCompiler0);

int int2 = (-67);
dSCompiler0.log10(doubleArray0, int1, doubleArray0, int2);

[MASTER] 13:58:51.637 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:51.638 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[8];
double[] doubleArray1 = new double[4];
assertFalse(doubleArray1.equals((Object)doubleArray0));

doubleArray0[3] = (double) 0;
dSCompiler0.linearCombination(0.0, doubleArray0, 0, 0.0, doubleArray0, 4, doubleArray1, 0);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
assertEquals(8, doubleArray0.length);
assertEquals(4, doubleArray1.length);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertFalse(doubleArray0.equals((Object)doubleArray1));
assertFalse(doubleArray1.equals((Object)doubleArray0));
assertNotSame(doubleArray0, doubleArray1);
assertNotSame(doubleArray1, doubleArray0);


[MASTER] 13:58:51.816 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:51.816 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertNotNull(dSCompiler0);

dSCompiler0.tanh((double[]) null, (-3569), (double[]) null, (-3569));

[MASTER] 13:58:51.937 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<311>
[MASTER] 13:58:51.937 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(311, 0);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[9];
doubleArray0[0] = (double) 0;
doubleArray0[1] = (double) 0;
doubleArray0[2] = (double) 311;
doubleArray0[3] = (double) 0;
doubleArray0[4] = (double) 0;
doubleArray0[5] = (double) 311;
doubleArray0[6] = (double) 311;
dSCompiler0.remainder((double[]) null, 0, doubleArray0, 311, (double[]) null, 311);

[MASTER] 13:58:52.068 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<311>
[MASTER] 13:58:52.068 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 311;
int int1 = 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(311, 0);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[9];
doubleArray0[0] = (double) 0;
doubleArray0[1] = (double) 0;
doubleArray0[2] = (double) 311;
dSCompiler0.divide(doubleArray0, 0, doubleArray0, (-128), doubleArray0, 2239);

[MASTER] 13:58:52.199 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:52.199 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(1, dSCompiler0.getSize());
assertEquals(0, dSCompiler0.getOrder());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[9];
double[] doubleArray1 = new double[9];
assertFalse(doubleArray1.equals((Object)doubleArray0));

int int0 = 545;
dSCompiler0.asin(doubleArray0, 0, doubleArray1, 545);

[MASTER] 13:58:52.561 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:52.562 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(1, dSCompiler0.getSize());
assertEquals(0, dSCompiler0.getOrder());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[9];
double[] doubleArray1 = new double[9];
assertFalse(doubleArray1.equals((Object)doubleArray0));

doubleArray1[0] = (double) 0;
doubleArray1[1] = (double) 0;
doubleArray1[2] = 0.0;
doubleArray1[3] = 0.0;
doubleArray1[4] = 0.0;
doubleArray1[5] = (double) 0;
doubleArray1[6] = (double) 0;
doubleArray1[7] = (double) 0;
doubleArray1[8] = (double) 0;
dSCompiler0.acosh(doubleArray1, 0, doubleArray0, 0);
assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
assertEquals(9, doubleArray0.length);
assertEquals(9, doubleArray1.length);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(1, dSCompiler0.getSize());
assertEquals(0, dSCompiler0.getOrder());
assertFalse(doubleArray0.equals((Object)doubleArray1));
assertFalse(doubleArray1.equals((Object)doubleArray0));
assertNotSame(doubleArray0, doubleArray1);
assertNotSame(doubleArray1, doubleArray0);

doubleArray0[0] = (double) 0;
DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
assertEquals(0, dSCompiler1.getOrder());
assertEquals(3, dSCompiler1.getFreeParameters());
assertEquals(1, dSCompiler1.getSize());
assertNotNull(dSCompiler1);
assertSame(dSCompiler1, dSCompiler0);

dSCompiler1.checkCompatibility(dSCompiler0);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(1, dSCompiler0.getSize());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(0, dSCompiler1.getOrder());
assertEquals(3, dSCompiler1.getFreeParameters());
assertEquals(1, dSCompiler1.getSize());
assertSame(dSCompiler0, dSCompiler1);
assertSame(dSCompiler1, dSCompiler0);


[MASTER] 13:58:52.843 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:52.843 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertNotNull(dSCompiler0);

double[] doubleArray0 = null;
dSCompiler0.cos((double[]) null, 0, (double[]) null, 0);

[MASTER] 13:58:52.974 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:52.975 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertNotNull(dSCompiler0);

int int0 = 985;
double[] doubleArray0 = null;
dSCompiler0.tan((double[]) null, (-1423), (double[]) null, 985);

[MASTER] 13:58:53.274 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:53.275 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertNotNull(dSCompiler0);

double[] doubleArray0 = null;
int int0 = 431;
int int1 = 3870;
dSCompiler0.rootN((double[]) null, 431, 33, (double[]) null, 3870);

[MASTER] 13:58:53.546 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:53.546 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[1];
doubleArray0[0] = (double) 0;
double[] doubleArray1 = new double[8];
assertFalse(doubleArray1.equals((Object)doubleArray0));

doubleArray1[0] = (double) 0;
doubleArray1[1] = (double) 0;
doubleArray1[2] = (double) 0;
doubleArray1[3] = (double) 0;
doubleArray1[4] = (-2.0);
doubleArray1[5] = (double) 0;
doubleArray1[6] = (double) 0;
doubleArray1[7] = (double) 0;
dSCompiler0.expm1(doubleArray0, 0, doubleArray1, 0);
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-2.0), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
assertEquals(1, doubleArray0.length);
assertEquals(8, doubleArray1.length);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertFalse(doubleArray0.equals((Object)doubleArray1));
assertFalse(doubleArray1.equals((Object)doubleArray0));
assertNotSame(doubleArray0, doubleArray1);
assertNotSame(doubleArray1, doubleArray0);

dSCompiler0.cosh(doubleArray0, 0, doubleArray1, 45);

[MASTER] 13:58:53.684 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:53.685 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(1, dSCompiler0.getSize());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[8];
doubleArray0[2] = (double) 0;
doubleArray0[3] = (double) 0;
doubleArray0[4] = (double) 0;
doubleArray0[5] = (double) 0;
doubleArray0[7] = (double) 0;
dSCompiler0.atanh(doubleArray0, 0, doubleArray0, 0);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertEquals(8, doubleArray0.length);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(1, dSCompiler0.getSize());

double[] doubleArray1 = new double[8];
assertFalse(doubleArray1.equals((Object)doubleArray0));

dSCompiler0.atan2(doubleArray1, 4, doubleArray1, 0, doubleArray1, 4);

[MASTER] 13:58:53.903 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:53.903 [logback-1] WARN  JUnitAnalyzer - Failing test:
 double[] doubleArray0 = new double[9];
double[] doubleArray1 = new double[9];
assertFalse(doubleArray1.equals((Object)doubleArray0));

doubleArray1[0] = (double) 0;
doubleArray1[1] = (double) 0;
doubleArray1[2] = 0.0;
doubleArray1[3] = 0.0;
doubleArray1[4] = 0.0;
doubleArray1[5] = (double) 0;
doubleArray1[6] = (double) 0;
doubleArray1[7] = (double) 0;
doubleArray1[8] = (double) 0;
doubleArray0[0] = (double) 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertNotNull(dSCompiler0);

dSCompiler0.tan(doubleArray0, 0, doubleArray0, 68);

[MASTER] 13:58:54.256 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:54.257 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(1, dSCompiler0.getSize());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(3, dSCompiler0.getFreeParameters());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[9];
doubleArray0[0] = (double) 0;
doubleArray0[1] = (double) 0;
doubleArray0[2] = 0.0;
doubleArray0[3] = 0.0;
doubleArray0[4] = 0.0;
doubleArray0[5] = (double) 0;
doubleArray0[6] = (double) 0;
doubleArray0[7] = (double) 0;
doubleArray0[8] = (double) 0;
DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
assertEquals(3, dSCompiler1.getFreeParameters());
assertEquals(0, dSCompiler1.getOrder());
assertEquals(1, dSCompiler1.getSize());
assertNotNull(dSCompiler1);
assertSame(dSCompiler1, dSCompiler0);

dSCompiler1.linearCombination(0.0, doubleArray0, 0, (double) 0, doubleArray0, 0, 0.0, doubleArray0, 0, 474.10836140496264, doubleArray0, 0, doubleArray0, 0);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertEquals(9, doubleArray0.length);
assertEquals(3, dSCompiler1.getFreeParameters());
assertEquals(0, dSCompiler1.getOrder());
assertEquals(1, dSCompiler1.getSize());
assertSame(dSCompiler1, dSCompiler0);

dSCompiler1.checkCompatibility(dSCompiler0);
assertEquals(1, dSCompiler0.getSize());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(3, dSCompiler1.getFreeParameters());
assertEquals(0, dSCompiler1.getOrder());
assertEquals(1, dSCompiler1.getSize());
assertSame(dSCompiler0, dSCompiler1);
assertSame(dSCompiler1, dSCompiler0);


[MASTER] 13:58:54.492 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:54.492 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(1, dSCompiler0.getSize());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(3, dSCompiler0.getFreeParameters());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[9];
doubleArray0[0] = (double) 0;
doubleArray0[1] = (double) 0;
doubleArray0[2] = 0.0;
doubleArray0[3] = 0.0;
doubleArray0[4] = 0.0;
doubleArray0[5] = (double) 0;
doubleArray0[6] = (double) 0;
doubleArray0[7] = (double) 0;
doubleArray0[8] = (double) 0;
DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
assertEquals(3, dSCompiler1.getFreeParameters());
assertEquals(0, dSCompiler1.getOrder());
assertEquals(1, dSCompiler1.getSize());
assertNotNull(dSCompiler1);
assertSame(dSCompiler1, dSCompiler0);

dSCompiler1.checkCompatibility(dSCompiler0);
assertEquals(1, dSCompiler0.getSize());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(3, dSCompiler1.getFreeParameters());
assertEquals(0, dSCompiler1.getOrder());
assertEquals(1, dSCompiler1.getSize());
assertSame(dSCompiler0, dSCompiler1);
assertSame(dSCompiler1, dSCompiler0);

int int0 = dSCompiler1.getFreeParameters();
assertEquals(3, dSCompiler1.getFreeParameters());
assertEquals(0, dSCompiler1.getOrder());
assertEquals(1, dSCompiler1.getSize());
assertSame(dSCompiler1, dSCompiler0);
assertEquals(3, int0);


[MASTER] 13:58:54.607 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:54.608 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[6];
doubleArray0[0] = (double) 0;
doubleArray0[1] = (double) 0;
doubleArray0[2] = (double) 0;
doubleArray0[3] = (double) 0;
doubleArray0[4] = (-1004.642684420687);
doubleArray0[5] = (double) 0;
dSCompiler0.log1p(doubleArray0, 3, doubleArray0, 3);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-1004.642684420687), 0.0}, doubleArray0, 0.01);
assertEquals(6, doubleArray0.length);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());

double[] doubleArray1 = new double[8];
assertFalse(doubleArray1.equals((Object)doubleArray0));

doubleArray1[0] = (double) 0;
dSCompiler0.tanh(doubleArray1, 0, doubleArray1, 34);

[MASTER] 13:58:54.851 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:54.851 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(1, dSCompiler0.getSize());
assertEquals(0, dSCompiler0.getOrder());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[8];
double double0 = 17.58598588105888;
dSCompiler0.atan(doubleArray0, 0, doubleArray0, 0);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertEquals(8, doubleArray0.length);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(1, dSCompiler0.getSize());
assertEquals(0, dSCompiler0.getOrder());

int int1 = 2615;
dSCompiler0.cosh(doubleArray0, 1663, doubleArray0, 1663);

[MASTER] 13:58:55.750 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:55.750 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[2];
dSCompiler0.cos(doubleArray0, 0, doubleArray0, 0);
assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
assertEquals(2, doubleArray0.length);
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());

doubleArray0[1] = (double) 0;
int int0 = 3;
int int1 = (-2679);
dSCompiler0.compose(doubleArray0, 0, doubleArray0, doubleArray0, 0);
assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
assertEquals(2, doubleArray0.length);
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());

dSCompiler0.multiply(doubleArray0, 1519, doubleArray0, 1519, doubleArray0, (-2679));

[MASTER] 13:58:55.921 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:55.921 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(1, dSCompiler0.getSize());
assertNotNull(dSCompiler0);

DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 910);
assertEquals(0, dSCompiler1.getFreeParameters());
assertEquals(910, dSCompiler1.getOrder());
assertEquals(1, dSCompiler1.getSize());
assertFalse(dSCompiler1.equals((Object)dSCompiler0));
assertNotNull(dSCompiler1);
assertNotSame(dSCompiler1, dSCompiler0);

double[] doubleArray0 = new double[8];
doubleArray0[0] = (double) 910;
doubleArray0[1] = (double) 910;
doubleArray0[2] = (double) 0;
doubleArray0[3] = (-2.0);
doubleArray0[4] = 0.0;
doubleArray0[5] = 474.10836140496264;
doubleArray0[6] = (-2.0);
doubleArray0[7] = 0.0;
dSCompiler0.linearCombination((-2.0), (double[]) null, 910, (-2.0), doubleArray0, 910, 0.0, doubleArray0, 1503, 474.10836140496264, doubleArray0, 1517, doubleArray0, 4146);

[MASTER] 13:58:56.357 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:56.358 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[8];
doubleArray0[2] = (double) 0;
doubleArray0[3] = (double) 0;
doubleArray0[4] = (double) 0;
doubleArray0[5] = (double) 0;
doubleArray0[7] = (double) 0;
DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 34);
assertEquals(0, dSCompiler1.getFreeParameters());
assertEquals(1, dSCompiler1.getSize());
assertEquals(34, dSCompiler1.getOrder());
assertFalse(dSCompiler1.equals((Object)dSCompiler0));
assertNotNull(dSCompiler1);
assertNotSame(dSCompiler1, dSCompiler0);

dSCompiler0.checkCompatibility(dSCompiler1);

[MASTER] 13:58:56.759 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:56.760 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[9];
int int0 = 407;
dSCompiler0.pow(doubleArray0, 407, 0, doubleArray0, 0);
assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertEquals(9, doubleArray0.length);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());

double double0 = (-2.3866331257845713E-8);
dSCompiler0.taylor(doubleArray0, (-1), doubleArray0);

[MASTER] 13:58:56.993 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:56.993 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(1, dSCompiler0.getSize());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[8];
int int0 = 34;
int int1 = 3;
int int2 = 752;
dSCompiler0.rootN(doubleArray0, 1505, 3, doubleArray0, 752);

[MASTER] 13:58:57.150 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:57.150 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[8];
doubleArray0[0] = (double) 0;
doubleArray0[1] = (double) 0;
doubleArray0[2] = (double) 0;
dSCompiler0.log10(doubleArray0, 0, doubleArray0, 0);
assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertEquals(8, doubleArray0.length);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());

dSCompiler0.acos(doubleArray0, 0, doubleArray0, 0);
assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertEquals(8, doubleArray0.length);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());

DSCompiler.getCompiler(4, 4);

[MASTER] 13:58:57.290 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:57.290 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[8];
doubleArray0[0] = (double) 0;
doubleArray0[1] = (double) 0;
doubleArray0[2] = (double) 0;
dSCompiler0.log10(doubleArray0, 0, doubleArray0, 0);
assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertEquals(8, doubleArray0.length);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());

dSCompiler0.acos(doubleArray0, 0, doubleArray0, 0);
assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertEquals(8, doubleArray0.length);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());

DSCompiler.getCompiler(4, 4);

[MASTER] 13:58:57.539 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:57.539 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[8];
doubleArray0[3] = (double) 0;
doubleArray0[3] = (double) 0;
doubleArray0[4] = (double) 0;
doubleArray0[5] = (double) 0;
doubleArray0[6] = (double) 0;
doubleArray0[7] = (double) 0;
DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
assertEquals(0, dSCompiler1.getOrder());
assertEquals(1, dSCompiler1.getSize());
assertEquals(3, dSCompiler1.getFreeParameters());
assertNotNull(dSCompiler1);
assertSame(dSCompiler1, dSCompiler0);

dSCompiler1.tan(doubleArray0, 1, doubleArray0, 0);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertEquals(8, doubleArray0.length);
assertEquals(0, dSCompiler1.getOrder());
assertEquals(1, dSCompiler1.getSize());
assertEquals(3, dSCompiler1.getFreeParameters());
assertSame(dSCompiler1, dSCompiler0);


[MASTER] 13:58:58.636 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:58.636 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[8];
doubleArray0[3] = (double) 0;
doubleArray0[3] = (double) 0;
doubleArray0[4] = (double) 0;
doubleArray0[5] = (double) 0;
doubleArray0[6] = (double) 0;
doubleArray0[7] = (double) 0;
DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
assertEquals(0, dSCompiler1.getOrder());
assertEquals(1, dSCompiler1.getSize());
assertEquals(3, dSCompiler1.getFreeParameters());
assertNotNull(dSCompiler1);
assertSame(dSCompiler1, dSCompiler0);

double[] doubleArray1 = new double[1];
assertFalse(doubleArray1.equals((Object)doubleArray0));

doubleArray1[0] = (double) 0;
dSCompiler1.cosh(doubleArray0, 0, doubleArray1, 0);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
assertEquals(8, doubleArray0.length);
assertEquals(1, doubleArray1.length);
assertEquals(0, dSCompiler1.getOrder());
assertEquals(1, dSCompiler1.getSize());
assertEquals(3, dSCompiler1.getFreeParameters());
assertFalse(doubleArray0.equals((Object)doubleArray1));
assertFalse(doubleArray1.equals((Object)doubleArray0));
assertNotSame(doubleArray0, doubleArray1);
assertSame(dSCompiler1, dSCompiler0);
assertNotSame(doubleArray1, doubleArray0);

dSCompiler1.acosh(doubleArray0, 0, doubleArray0, 0);
assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertEquals(8, doubleArray0.length);
assertEquals(0, dSCompiler1.getOrder());
assertEquals(1, dSCompiler1.getSize());
assertEquals(3, dSCompiler1.getFreeParameters());
assertFalse(doubleArray0.equals((Object)doubleArray1));
assertNotSame(doubleArray0, doubleArray1);
assertSame(dSCompiler1, dSCompiler0);

dSCompiler1.taylor(doubleArray0, 2987, doubleArray0);

[MASTER] 13:58:59.018 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:59.018 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(1, dSCompiler0.getSize());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(3, dSCompiler0.getFreeParameters());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[11];
dSCompiler0.atan2(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
assertEquals(11, doubleArray0.length);
assertEquals(1, dSCompiler0.getSize());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(3, dSCompiler0.getFreeParameters());

doubleArray0[0] = (double) 0;
doubleArray0[1] = (double) 0;
doubleArray0[2] = 0.0;
dSCompiler0.add(doubleArray0, 311, doubleArray0, 311, doubleArray0, 0);

[MASTER] 13:58:59.158 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:59.159 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[8];
dSCompiler0.multiply(doubleArray0, 0, doubleArray0, 3, doubleArray0, 0);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertEquals(8, doubleArray0.length);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());

double[] doubleArray1 = new double[6];
assertFalse(doubleArray1.equals((Object)doubleArray0));

doubleArray1[0] = (double) 61;
doubleArray1[1] = (double) 0;
doubleArray1[2] = (double) 3;
doubleArray1[3] = (double) 3;
doubleArray1[4] = 0.0;
doubleArray1[5] = (double) 3;
dSCompiler0.exp(doubleArray0, 3, doubleArray1, (-177));

[MASTER] 13:58:59.379 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:59.379 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertNotNull(dSCompiler0);

int int1 = 2;
DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 2);
assertEquals(0, dSCompiler1.getFreeParameters());
assertEquals(1, dSCompiler1.getSize());
assertEquals(2, dSCompiler1.getOrder());
assertFalse(dSCompiler1.equals((Object)dSCompiler0));
assertNotNull(dSCompiler1);
assertNotSame(dSCompiler1, dSCompiler0);

double[] doubleArray0 = new double[2];
doubleArray0[0] = (double) 2;
dSCompiler1.acos(doubleArray0, 0, doubleArray0, 156);

[MASTER] 13:58:59.626 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:59.627 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[11];
dSCompiler0.atan2(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
assertEquals(11, doubleArray0.length);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());

doubleArray0[0] = (double) 0;
int int1 = 1509;
int int2 = 1028;
int int3 = 2;
double[] doubleArray1 = new double[5];
assertFalse(doubleArray1.equals((Object)doubleArray0));

doubleArray1[0] = (double) 0;
doubleArray1[1] = (double) 2;
doubleArray1[2] = (double) 1028;
doubleArray1[3] = (double) 1509;
doubleArray1[4] = (double) 2;
dSCompiler0.rootN(doubleArray0, 1028, 2, doubleArray1, 2);

[MASTER] 13:58:59.791 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:59.791 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[8];
doubleArray0[0] = (double) 0;
doubleArray0[1] = (double) 0;
doubleArray0[2] = (double) 0;
dSCompiler0.log10(doubleArray0, 0, doubleArray0, 0);
assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertEquals(8, doubleArray0.length);
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());

dSCompiler0.checkCompatibility((DSCompiler) null);

[MASTER] 13:58:59.932 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:58:59.932 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[9];
doubleArray0[1] = (double) 0;
dSCompiler0.rootN(doubleArray0, 0, 3, doubleArray0, 34);

[MASTER] 13:59:00.050 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:59:00.051 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertNotNull(dSCompiler0);

DSCompiler dSCompiler1 = DSCompiler.getCompiler(3, 0);
assertEquals(3, dSCompiler1.getFreeParameters());
assertEquals(0, dSCompiler1.getOrder());
assertEquals(1, dSCompiler1.getSize());
assertNotNull(dSCompiler1);
assertSame(dSCompiler1, dSCompiler0);

double[] doubleArray0 = null;
int int0 = 444;
dSCompiler0.pow((double[]) null, 444, 444, (double[]) null, 2);

[MASTER] 13:59:00.188 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<9>
[MASTER] 13:59:00.189 [logback-1] WARN  JUnitAnalyzer - Failing test:
 double[] doubleArray0 = new double[10];
doubleArray0[0] = (double) 9;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(9, 0);
assertEquals(1, dSCompiler0.getSize());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(3, dSCompiler0.getFreeParameters());
assertNotNull(dSCompiler0);

int[] intArray0 = dSCompiler0.getPartialDerivativeOrders(0);
assertArrayEquals(new int[] {0, 0, 0}, intArray0);
assertEquals(3, intArray0.length);
assertEquals(1, dSCompiler0.getSize());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(3, dSCompiler0.getFreeParameters());
assertNotNull(intArray0);


[MASTER] 13:59:00.784 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:59:00.785 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[9];
doubleArray0[1] = (double) 0;
doubleArray0[2] = 0.0;
doubleArray0[3] = 0.0;
doubleArray0[4] = 0.0;
doubleArray0[6] = (double) 0;
doubleArray0[7] = (double) 0;
doubleArray0[8] = (double) 0;
DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
assertEquals(0, dSCompiler1.getOrder());
assertEquals(1, dSCompiler1.getSize());
assertEquals(3, dSCompiler1.getFreeParameters());
assertNotNull(dSCompiler1);
assertSame(dSCompiler1, dSCompiler0);

DSCompiler dSCompiler2 = DSCompiler.getCompiler(0, 0);
assertEquals(3, dSCompiler2.getFreeParameters());
assertEquals(1, dSCompiler2.getSize());
assertEquals(0, dSCompiler2.getOrder());
assertNotNull(dSCompiler2);
assertSame(dSCompiler2, dSCompiler0);
assertSame(dSCompiler2, dSCompiler1);

dSCompiler1.linearCombination(0.0, doubleArray0, 0, (double) 0, doubleArray0, 0, 0.0, doubleArray0, 0, 474.10836140496264, doubleArray0, 0, doubleArray0, 0);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertEquals(9, doubleArray0.length);
assertEquals(0, dSCompiler1.getOrder());
assertEquals(1, dSCompiler1.getSize());
assertEquals(3, dSCompiler1.getFreeParameters());
assertSame(dSCompiler1, dSCompiler0);
assertSame(dSCompiler1, dSCompiler2);

dSCompiler1.checkCompatibility(dSCompiler0);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler1.getOrder());
assertEquals(1, dSCompiler1.getSize());
assertEquals(3, dSCompiler1.getFreeParameters());
assertSame(dSCompiler0, dSCompiler1);
assertSame(dSCompiler0, dSCompiler2);
assertSame(dSCompiler1, dSCompiler0);
assertSame(dSCompiler1, dSCompiler2);

dSCompiler1.getPartialDerivativeIndex((int[]) null);

[MASTER] 13:59:01.224 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<311>
[MASTER] 13:59:01.224 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 311;
int int1 = 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(311, 0);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertNotNull(dSCompiler0);

int int2 = 2;
int int3 = 4860;
DSCompiler.getCompiler(2, 4860);

[MASTER] 13:59:01.518 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:59:01.518 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertNotNull(dSCompiler0);

int int1 = 545;
double[] doubleArray0 = null;
int int2 = 2;
dSCompiler0.asin((double[]) null, 0, (double[]) null, 2);

[MASTER] 13:59:02.045 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:59:02.046 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[9];
doubleArray0[1] = (double) 0;
DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 185);
assertEquals(0, dSCompiler1.getFreeParameters());
assertEquals(185, dSCompiler1.getOrder());
assertEquals(1, dSCompiler1.getSize());
assertFalse(dSCompiler1.equals((Object)dSCompiler0));
assertNotNull(dSCompiler1);
assertNotSame(dSCompiler1, dSCompiler0);

dSCompiler1.asin(doubleArray0, 0, doubleArray0, 0);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertEquals(9, doubleArray0.length);
assertEquals(0, dSCompiler1.getFreeParameters());
assertEquals(185, dSCompiler1.getOrder());
assertEquals(1, dSCompiler1.getSize());
assertFalse(dSCompiler1.equals((Object)dSCompiler0));
assertNotSame(dSCompiler1, dSCompiler0);

int int0 = 8;
int int1 = 37;
dSCompiler1.asinh(doubleArray0, 8, doubleArray0, 37);

[MASTER] 13:59:02.503 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:59:02.504 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[6];
doubleArray0[0] = (double) 0;
doubleArray0[1] = (double) 0;
doubleArray0[2] = (double) 0;
doubleArray0[3] = (double) 0;
doubleArray0[4] = (-1004.642684420687);
doubleArray0[5] = (double) 0;
dSCompiler0.log1p(doubleArray0, 3, doubleArray0, 3);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-1004.642684420687), 0.0}, doubleArray0, 0.01);
assertEquals(6, doubleArray0.length);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());

double[] doubleArray1 = new double[8];
assertFalse(doubleArray1.equals((Object)doubleArray0));

dSCompiler0.atan(doubleArray0, 3, doubleArray1, 0);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-1004.642684420687), 0.0}, doubleArray0, 0.01);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
assertEquals(6, doubleArray0.length);
assertEquals(8, doubleArray1.length);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertFalse(doubleArray0.equals((Object)doubleArray1));
assertFalse(doubleArray1.equals((Object)doubleArray0));
assertNotSame(doubleArray0, doubleArray1);
assertNotSame(doubleArray1, doubleArray0);

doubleArray1[0] = (double) 0;
dSCompiler0.tanh(doubleArray1, 0, doubleArray1, 0);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
assertEquals(8, doubleArray1.length);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertFalse(doubleArray1.equals((Object)doubleArray0));
assertNotSame(doubleArray1, doubleArray0);

int int1 = dSCompiler0.getOrder();
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertTrue(int1 == int0);
assertEquals(0, int1);

double[] doubleArray2 = null;
dSCompiler0.asinh(doubleArray1, 0, (double[]) null, 0);

[MASTER] 13:59:02.849 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:59:02.849 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertNotNull(dSCompiler0);

dSCompiler0.atan((double[]) null, 27, (double[]) null, 0);

[MASTER] 13:59:03.202 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: ArrayIndexOutOfBoundsException
[MASTER] 13:59:03.202 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
DSCompiler.getCompiler(2494, 0);

[MASTER] 13:59:03.311 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<17>
[MASTER] 13:59:03.311 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(17, 0);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[1];
doubleArray0[0] = (double) 0;
int int0 = 2743;
dSCompiler0.divide(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
assertEquals(1, doubleArray0.length);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());

dSCompiler0.atanh(doubleArray0, 0, doubleArray0, 63);

[MASTER] 13:59:03.434 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:59:03.434 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[8];
doubleArray0[0] = (double) 0;
doubleArray0[1] = 500.5949;
doubleArray0[2] = (double) 0;
doubleArray0[3] = (double) 0;
doubleArray0[4] = (double) 0;
doubleArray0[5] = (double) 0;
doubleArray0[6] = (double) 0;
doubleArray0[7] = (double) 0;
dSCompiler0.pow(doubleArray0, 0, 500.5949, doubleArray0, 0);
assertArrayEquals(new double[] {0.0, 500.5949, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertEquals(8, doubleArray0.length);
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());

double[] doubleArray1 = new double[2];
assertFalse(doubleArray1.equals((Object)doubleArray0));

dSCompiler0.acosh(doubleArray1, 0, doubleArray1, 0);
assertArrayEquals(new double[] {Double.NaN, 0.0}, doubleArray1, 0.01);
assertEquals(2, doubleArray1.length);
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertFalse(doubleArray1.equals((Object)doubleArray0));
assertNotSame(doubleArray1, doubleArray0);

dSCompiler0.subtract(doubleArray1, 802, doubleArray0, (-539), doubleArray1, 4);

[MASTER] 13:59:05.727 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:59:05.727 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(1, dSCompiler0.getSize());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(3, dSCompiler0.getFreeParameters());
assertNotNull(dSCompiler0);

int int1 = 4469;
DSCompiler.getCompiler(0, 4469);

[MASTER] 13:59:06.132 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:59:06.141 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
int int1 = (-2669);
int int2 = 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[2];
doubleArray0[0] = (double) (-2669);
doubleArray0[1] = (double) 0;
double double0 = dSCompiler0.taylor(doubleArray0, 0, doubleArray0);
assertArrayEquals(new double[] {(-2669.0), 0.0}, doubleArray0, 0.01);
assertEquals(2, doubleArray0.length);
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertEquals((-2669.0), double0, 0.01);

int int3 = 473;
dSCompiler0.atanh(doubleArray0, 473, doubleArray0, (-2669));

[MASTER] 13:59:06.431 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:59:06.431 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[8];
dSCompiler0.pow(doubleArray0, 2, doubleArray0, 3, doubleArray0, 2);
assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertEquals(8, doubleArray0.length);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());


[MASTER] 13:59:07.337 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:59:07.338 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertNotNull(dSCompiler0);

DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
assertEquals(3, dSCompiler1.getFreeParameters());
assertEquals(0, dSCompiler1.getOrder());
assertEquals(1, dSCompiler1.getSize());
assertNotNull(dSCompiler1);
assertSame(dSCompiler1, dSCompiler0);

DSCompiler dSCompiler2 = DSCompiler.getCompiler(0, 0);
assertEquals(0, dSCompiler2.getOrder());
assertEquals(3, dSCompiler2.getFreeParameters());
assertEquals(1, dSCompiler2.getSize());
assertNotNull(dSCompiler2);
assertSame(dSCompiler2, dSCompiler0);
assertSame(dSCompiler2, dSCompiler1);

int[] intArray0 = dSCompiler0.getPartialDerivativeOrders(0);
assertArrayEquals(new int[] {0, 0, 0}, intArray0);
assertEquals(3, intArray0.length);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertNotNull(intArray0);
assertSame(dSCompiler0, dSCompiler1);
assertSame(dSCompiler0, dSCompiler2);


[MASTER] 13:59:08.021 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:59:08.022 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[9];
dSCompiler0.log1p(doubleArray0, 0, doubleArray0, 0);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertEquals(9, doubleArray0.length);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());

dSCompiler0.linearCombination(0.0, doubleArray0, 0, (double) 0, doubleArray0, 0, 0.0, doubleArray0, 0, doubleArray0, 1);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertEquals(9, doubleArray0.length);
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());


[MASTER] 13:59:08.136 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:59:08.137 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertNotNull(dSCompiler0);

double[] doubleArray0 = new double[8];
dSCompiler0.log10(doubleArray0, 0, doubleArray0, 0);
assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertEquals(8, doubleArray0.length);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());

dSCompiler0.subtract(doubleArray0, 1, doubleArray0, 2, doubleArray0, 2);
assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertEquals(8, doubleArray0.length);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());

dSCompiler0.log10(doubleArray0, 1409, doubleArray0, 2);

[MASTER] 13:59:08.412 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:59:08.412 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(1, dSCompiler0.getSize());
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertNotNull(dSCompiler0);

dSCompiler0.compose((double[]) null, (-1), (double[]) null, (double[]) null, (-1));

[MASTER] 13:59:08.883 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 13:59:08.883 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
assertEquals(3, dSCompiler0.getFreeParameters());
assertEquals(0, dSCompiler0.getOrder());
assertEquals(1, dSCompiler0.getSize());
assertNotNull(dSCompiler0);

int int1 = 2;
double[] doubleArray0 = null;
dSCompiler0.subtract((double[]) null, 0, (double[]) null, 2, (double[]) null, 2);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 9
* Writing tests to file
* Writing JUnit test case 'DSCompiler_ESTest' to results/Math-10/org.apache.commons.math3.analysis.differentiation.DSCompiler/BBC-F0-50/tests/6
* Done!

* Computation finished
