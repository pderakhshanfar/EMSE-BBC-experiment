/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 13:59:12 GMT 2021
 */

package org.apache.commons.math3.analysis.differentiation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.differentiation.DSCompiler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DSCompiler_ESTest extends DSCompiler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 3);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(4, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      // Undeclared exception!
      try { 
        dSCompiler0.tan(doubleArray0, 1, doubleArray0, (-137));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -137
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(1, 1);
      assertEquals(1, dSCompiler1.getOrder());
      assertEquals(2, dSCompiler1.getSize());
      assertEquals(1, dSCompiler1.getFreeParameters());
      assertNotNull(dSCompiler1);
      assertSame(dSCompiler1, dSCompiler0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[5] = 0.0;
      doubleArray0[4] = (double) 19;
      doubleArray0[5] = (double) 19;
      doubleArray0[6] = (double) 1;
      // Undeclared exception!
      try { 
        dSCompiler1.atanh(doubleArray0, 1, (double[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 1;
      int int1 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 3);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(4, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 3;
      // Undeclared exception!
      try { 
        dSCompiler0.atanh(doubleArray0, 1, doubleArray0, 19);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 19
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.acos((double[]) null, 398, (double[]) null, 52);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      int int1 = 2;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.subtract((double[]) null, 0, (double[]) null, 2, (double[]) null, 2);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[6];
      double double0 = dSCompiler0.taylor(doubleArray0, 1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(0.0, double0, 0.01);
      
      int int0 = dSCompiler0.getFreeParameters();
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[6];
      dSCompiler0.add(doubleArray0, 1, doubleArray0, 0, doubleArray0, 1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 1);
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(1, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotNull(dSCompiler1);
      assertNotSame(dSCompiler1, dSCompiler0);
      
      // Undeclared exception!
      try { 
        dSCompiler1.cosh(doubleArray0, 1, doubleArray0, 19);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 19
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.compose((double[]) null, (-1), (double[]) null, (double[]) null, (-1));
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 0;
      int int1 = 2644;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 2644);
      assertEquals(2644, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.divide((double[]) null, 2644, (double[]) null, 2644, (double[]) null, 1785);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      dSCompiler0.log10(doubleArray0, 0, doubleArray0, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(8, doubleArray0.length);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      
      dSCompiler0.subtract(doubleArray0, 1, doubleArray0, 2, doubleArray0, 2);
      //  // Unstable assertion: assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(8, doubleArray0.length);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      
      // Undeclared exception!
      try { 
        dSCompiler0.log10(doubleArray0, 1409, doubleArray0, 2);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1409
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      dSCompiler0.log1p(doubleArray0, 0, doubleArray0, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(9, doubleArray0.length);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      
      dSCompiler0.linearCombination(0.0, doubleArray0, 0, (double) 0, doubleArray0, 0, 0.0, doubleArray0, 0, doubleArray0, 1);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(9, doubleArray0.length);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[14];
      dSCompiler0.tanh(doubleArray0, 1, doubleArray0, 1);
      assertEquals(14, doubleArray0.length);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(1, 1);
      assertEquals(1, dSCompiler1.getOrder());
      assertEquals(2, dSCompiler1.getSize());
      assertEquals(1, dSCompiler1.getFreeParameters());
      assertNotNull(dSCompiler1);
      assertSame(dSCompiler1, dSCompiler0);
      
      double[] doubleArray1 = new double[19];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 4;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 4;
      doubleArray1[3] = (double) 4;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (double) 1;
      doubleArray1[6] = (double) 1;
      doubleArray1[7] = (double) 1;
      doubleArray1[8] = (double) 1;
      // Undeclared exception!
      try { 
        dSCompiler1.atan2(doubleArray0, 1, doubleArray0, 4, doubleArray1, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 0;
      int int1 = 597;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 597);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(597, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 597;
      doubleArray0[1] = (double) 597;
      doubleArray0[2] = (double) 597;
      doubleArray0[3] = (double) 597;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      int int2 = 1206;
      // Undeclared exception!
      dSCompiler0.tanh(doubleArray0, 0, doubleArray0, 1206);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(3, dSCompiler1.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler1.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler1.getSize());
      //  // Unstable assertion: assertNotNull(dSCompiler1);
      //  // Unstable assertion: assertSame(dSCompiler1, dSCompiler0);
      
      DSCompiler dSCompiler2 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(0, dSCompiler2.getOrder());
      //  // Unstable assertion: assertEquals(3, dSCompiler2.getFreeParameters());
      //  // Unstable assertion: assertEquals(1, dSCompiler2.getSize());
      //  // Unstable assertion: assertNotNull(dSCompiler2);
      //  // Unstable assertion: assertSame(dSCompiler2, dSCompiler0);
      //  // Unstable assertion: assertSame(dSCompiler2, dSCompiler1);
      
      int[] intArray0 = dSCompiler0.getPartialDerivativeOrders(0);
      //  // Unstable assertion: assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      //  // Unstable assertion: assertEquals(3, intArray0.length);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertNotNull(intArray0);
      //  // Unstable assertion: assertSame(dSCompiler0, dSCompiler1);
      //  // Unstable assertion: assertSame(dSCompiler0, dSCompiler2);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 2644);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(2644, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2644;
      doubleArray1[1] = (double) 0;
      // Undeclared exception!
      dSCompiler0.atan2(doubleArray0, 0, doubleArray1, 0, doubleArray0, 3438);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 6);
      assertEquals(6, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.getPartialDerivativeOrders(2020);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      dSCompiler0.pow(doubleArray0, 2, doubleArray0, 3, doubleArray0, 2);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(8, doubleArray0.length);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 0;
      int int1 = (-2669);
      int int2 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2669);
      doubleArray0[1] = (double) 0;
      double double0 = dSCompiler0.taylor(doubleArray0, 0, doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {(-2669.0), 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(2, doubleArray0.length);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals((-2669.0), double0, 0.01);
      
      int int3 = 473;
      // Undeclared exception!
      try { 
        dSCompiler0.atanh(doubleArray0, 473, doubleArray0, (-2669));
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 473
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      int int1 = 4469;
      // Undeclared exception!
      DSCompiler.getCompiler(0, 4469);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      dSCompiler0.remainder(doubleArray0, 2, doubleArray0, 1, doubleArray0, 2);
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, Double.NaN, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2;
      dSCompiler0.asinh(doubleArray1, 2, doubleArray0, 1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 2;
      doubleArray1[4] = (double) 2;
      dSCompiler0.pow(doubleArray0, 2, (double) 1, doubleArray1, 1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 0.0, Double.NaN, 0.0, 2.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      dSCompiler0.log(doubleArray0, 1, doubleArray0, 1);
      assertArrayEquals(new double[] {0.0, Double.NEGATIVE_INFINITY, Double.NaN, Double.NaN, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      // Undeclared exception!
      try { 
        dSCompiler0.acosh(doubleArray0, 1407, doubleArray1, 1520);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1407
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 595);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(595, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      // Undeclared exception!
      dSCompiler0.atan(doubleArray0, 0, doubleArray0, 0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 500.5949;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      dSCompiler0.pow(doubleArray0, 0, 500.5949, doubleArray0, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 500.5949, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(8, doubleArray0.length);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray1 = new double[2];
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      dSCompiler0.acosh(doubleArray1, 0, doubleArray1, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {Double.NaN, 0.0}, doubleArray1, 0.01);
      //  // Unstable assertion: assertEquals(2, doubleArray1.length);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      //  // Unstable assertion: assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.subtract(doubleArray1, 802, doubleArray0, (-539), doubleArray1, 4);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 802
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(17, 0);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      int int0 = 2743;
      dSCompiler0.divide(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(1, doubleArray0.length);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
      try { 
        dSCompiler0.atanh(doubleArray0, 0, doubleArray0, 63);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 63
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        DSCompiler.getCompiler(2494, 0);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.atan((double[]) null, 27, (double[]) null, 0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[14];
      dSCompiler0.log(doubleArray0, 1, doubleArray0, 1);
      assertEquals(14, doubleArray0.length);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      
      doubleArray0[0] = (double) 1;
      dSCompiler0.atanh(doubleArray0, 1, doubleArray0, 1);
      assertEquals(14, doubleArray0.length);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      
      dSCompiler0.tan(doubleArray0, 1, doubleArray0, 1);
      assertEquals(14, doubleArray0.length);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      
      int int1 = 1525;
      int int2 = 1509;
      // Undeclared exception!
      try { 
        dSCompiler0.rootN(doubleArray0, 1, 1525, doubleArray0, 1509);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1509
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-1004.642684420687);
      doubleArray0[5] = (double) 0;
      dSCompiler0.log1p(doubleArray0, 3, doubleArray0, 3);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-1004.642684420687), 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(6, doubleArray0.length);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      
      double[] doubleArray1 = new double[8];
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      dSCompiler0.atan(doubleArray0, 3, doubleArray1, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-1004.642684420687), 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      //  // Unstable assertion: assertEquals(6, doubleArray0.length);
      //  // Unstable assertion: assertEquals(8, doubleArray1.length);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertFalse(doubleArray0.equals((Object)doubleArray1));
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      //  // Unstable assertion: assertNotSame(doubleArray0, doubleArray1);
      //  // Unstable assertion: assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[0] = (double) 0;
      dSCompiler0.tanh(doubleArray1, 0, doubleArray1, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      //  // Unstable assertion: assertEquals(8, doubleArray1.length);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      //  // Unstable assertion: assertNotSame(doubleArray1, doubleArray0);
      
      int int1 = dSCompiler0.getOrder();
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertTrue(int1 == int0);
      //  // Unstable assertion: assertEquals(0, int1);
      
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.asinh(doubleArray1, 0, (double[]) null, 0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 621);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(621, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 621;
      doubleArray0[1] = (double) 156;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 621;
      doubleArray0[4] = (double) 156;
      doubleArray0[5] = 146.689675494723;
      // Undeclared exception!
      dSCompiler0.acos(doubleArray0, 0, doubleArray0, 4472);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 185);
      //  // Unstable assertion: assertEquals(0, dSCompiler1.getFreeParameters());
      //  // Unstable assertion: assertEquals(185, dSCompiler1.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler1.getSize());
      //  // Unstable assertion: assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      //  // Unstable assertion: assertNotNull(dSCompiler1);
      //  // Unstable assertion: assertNotSame(dSCompiler1, dSCompiler0);
      
      dSCompiler1.asin(doubleArray0, 0, doubleArray0, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(9, doubleArray0.length);
      //  // Unstable assertion: assertEquals(0, dSCompiler1.getFreeParameters());
      //  // Unstable assertion: assertEquals(185, dSCompiler1.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler1.getSize());
      //  // Unstable assertion: assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      //  // Unstable assertion: assertNotSame(dSCompiler1, dSCompiler0);
      
      int int0 = 8;
      int int1 = 37;
      // Undeclared exception!
      try { 
        dSCompiler1.asinh(doubleArray0, 8, doubleArray0, 37);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 37
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2;
      doubleArray0[4] = (double) 1;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) 2;
      dSCompiler0.atan(doubleArray1, 1, doubleArray1, 2);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0, 2.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      dSCompiler0.log(doubleArray0, 1, doubleArray0, 1);
      assertArrayEquals(new double[] {0.0, Double.NEGATIVE_INFINITY, Double.NaN, 0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      doubleArray0[0] = (double) 1;
      double double0 = dSCompiler0.taylor(doubleArray0, 1, doubleArray0);
      assertArrayEquals(new double[] {1.0, Double.NEGATIVE_INFINITY, Double.NaN, 0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(Double.NaN, double0, 0.01);
      
      int int0 = dSCompiler0.getSize();
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      int int1 = 545;
      double[] doubleArray0 = null;
      int int2 = 2;
      // Undeclared exception!
      try { 
        dSCompiler0.asin((double[]) null, 0, (double[]) null, 2);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 828);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(828, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.cosh((double[]) null, 0, (double[]) null, 53);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 311;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(311, 0);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      int int2 = 2;
      int int3 = 4860;
      // Undeclared exception!
      DSCompiler.getCompiler(2, 4860);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(0, dSCompiler1.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler1.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler1.getFreeParameters());
      //  // Unstable assertion: assertNotNull(dSCompiler1);
      //  // Unstable assertion: assertSame(dSCompiler1, dSCompiler0);
      
      DSCompiler dSCompiler2 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(3, dSCompiler2.getFreeParameters());
      //  // Unstable assertion: assertEquals(1, dSCompiler2.getSize());
      //  // Unstable assertion: assertEquals(0, dSCompiler2.getOrder());
      //  // Unstable assertion: assertNotNull(dSCompiler2);
      //  // Unstable assertion: assertSame(dSCompiler2, dSCompiler0);
      //  // Unstable assertion: assertSame(dSCompiler2, dSCompiler1);
      
      dSCompiler1.linearCombination(0.0, doubleArray0, 0, (double) 0, doubleArray0, 0, 0.0, doubleArray0, 0, 474.10836140496264, doubleArray0, 0, doubleArray0, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(9, doubleArray0.length);
      //  // Unstable assertion: assertEquals(0, dSCompiler1.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler1.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler1.getFreeParameters());
      //  // Unstable assertion: assertSame(dSCompiler1, dSCompiler0);
      //  // Unstable assertion: assertSame(dSCompiler1, dSCompiler2);
      
      dSCompiler1.checkCompatibility(dSCompiler0);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler1.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler1.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler1.getFreeParameters());
      //  // Unstable assertion: assertSame(dSCompiler0, dSCompiler1);
      //  // Unstable assertion: assertSame(dSCompiler0, dSCompiler2);
      //  // Unstable assertion: assertSame(dSCompiler1, dSCompiler0);
      //  // Unstable assertion: assertSame(dSCompiler1, dSCompiler2);
      
      // Undeclared exception!
      try { 
        dSCompiler1.getPartialDerivativeIndex((int[]) null);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 1527);
      assertEquals(1527, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1527;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 1527;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 1527;
      doubleArray1[7] = (double) 0;
      doubleArray1[8] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 0, doubleArray0, 0, doubleArray1, 38);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 38
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 0;
      int int1 = 3;
      int int2 = (-2669);
      int int3 = 5499;
      // Undeclared exception!
      try { 
        DSCompiler.getCompiler(5499, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) 9;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(9, 0);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      int[] intArray0 = dSCompiler0.getPartialDerivativeOrders(0);
      //  // Unstable assertion: assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      //  // Unstable assertion: assertEquals(3, intArray0.length);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(3, 0);
      //  // Unstable assertion: assertEquals(3, dSCompiler1.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler1.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler1.getSize());
      //  // Unstable assertion: assertNotNull(dSCompiler1);
      //  // Unstable assertion: assertSame(dSCompiler1, dSCompiler0);
      
      double[] doubleArray0 = null;
      int int0 = 444;
      // Undeclared exception!
      try { 
        dSCompiler0.pow((double[]) null, 444, 444, (double[]) null, 2);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.rootN(doubleArray0, 0, 3, doubleArray0, 34);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 34
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      dSCompiler0.log10(doubleArray0, 0, doubleArray0, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(8, doubleArray0.length);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      
      // Undeclared exception!
      try { 
        dSCompiler0.checkCompatibility((DSCompiler) null);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[11];
      dSCompiler0.atan2(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      //  // Unstable assertion: assertEquals(11, doubleArray0.length);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      
      doubleArray0[0] = (double) 0;
      int int1 = 1509;
      int int2 = 1028;
      int int3 = 2;
      double[] doubleArray1 = new double[5];
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 1028;
      doubleArray1[3] = (double) 1509;
      doubleArray1[4] = (double) 2;
      // Undeclared exception!
      try { 
        dSCompiler0.rootN(doubleArray0, 1028, 2, doubleArray1, 2);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1028
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 1527);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1527, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[7];
      dSCompiler0.log1p(doubleArray0, 6, doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1527, dSCompiler0.getOrder());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      int int1 = 2;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 2);
      //  // Unstable assertion: assertEquals(0, dSCompiler1.getFreeParameters());
      //  // Unstable assertion: assertEquals(1, dSCompiler1.getSize());
      //  // Unstable assertion: assertEquals(2, dSCompiler1.getOrder());
      //  // Unstable assertion: assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      //  // Unstable assertion: assertNotNull(dSCompiler1);
      //  // Unstable assertion: assertNotSame(dSCompiler1, dSCompiler0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2;
      // Undeclared exception!
      try { 
        dSCompiler1.acos(doubleArray0, 0, doubleArray0, 156);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 156
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      dSCompiler0.multiply(doubleArray0, 0, doubleArray0, 3, doubleArray0, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(8, doubleArray0.length);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray1 = new double[6];
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 61;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 3;
      doubleArray1[3] = (double) 3;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (double) 3;
      // Undeclared exception!
      try { 
        dSCompiler0.exp(doubleArray0, 3, doubleArray1, (-177));
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -177
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[11];
      dSCompiler0.atan2(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      //  // Unstable assertion: assertEquals(11, doubleArray0.length);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      // Undeclared exception!
      try { 
        dSCompiler0.add(doubleArray0, 311, doubleArray0, 311, doubleArray0, 0);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 311
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 12);
      assertEquals(12, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[10];
      dSCompiler0.atan(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, doubleArray0.length);
      assertEquals(12, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
      try { 
        dSCompiler0.asin(doubleArray0, 1659, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1659
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[3] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(0, dSCompiler1.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler1.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler1.getFreeParameters());
      //  // Unstable assertion: assertNotNull(dSCompiler1);
      //  // Unstable assertion: assertSame(dSCompiler1, dSCompiler0);
      
      double[] doubleArray1 = new double[1];
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      dSCompiler1.cosh(doubleArray0, 0, doubleArray1, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      //  // Unstable assertion: assertEquals(8, doubleArray0.length);
      //  // Unstable assertion: assertEquals(1, doubleArray1.length);
      //  // Unstable assertion: assertEquals(0, dSCompiler1.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler1.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler1.getFreeParameters());
      //  // Unstable assertion: assertFalse(doubleArray0.equals((Object)doubleArray1));
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      //  // Unstable assertion: assertNotSame(doubleArray0, doubleArray1);
      //  // Unstable assertion: assertSame(dSCompiler1, dSCompiler0);
      //  // Unstable assertion: assertNotSame(doubleArray1, doubleArray0);
      
      dSCompiler1.acosh(doubleArray0, 0, doubleArray0, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(8, doubleArray0.length);
      //  // Unstable assertion: assertEquals(0, dSCompiler1.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler1.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler1.getFreeParameters());
      //  // Unstable assertion: assertFalse(doubleArray0.equals((Object)doubleArray1));
      //  // Unstable assertion: assertNotSame(doubleArray0, doubleArray1);
      //  // Unstable assertion: assertSame(dSCompiler1, dSCompiler0);
      
      // Undeclared exception!
      try { 
        dSCompiler1.taylor(doubleArray0, 2987, doubleArray0);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2987
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(20, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (-206.47);
      doubleArray0[5] = (double) 3;
      doubleArray0[6] = (double) 3;
      // Undeclared exception!
      try { 
        dSCompiler0.cosh(doubleArray0, 3, doubleArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 597);
      assertEquals(597, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = (double) 0;
      // Undeclared exception!
      dSCompiler0.acosh(doubleArray0, 0, doubleArray0, 1506);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[14];
      dSCompiler0.log(doubleArray0, 1, doubleArray0, 1);
      assertEquals(14, doubleArray0.length);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      
      doubleArray0[0] = (double) 1;
      dSCompiler0.atanh(doubleArray0, 1, doubleArray0, 1);
      assertEquals(14, doubleArray0.length);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      
      int int1 = 1525;
      // Undeclared exception!
      try { 
        dSCompiler0.rootN(doubleArray0, 1, 1525, doubleArray0, 1509);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1509
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 1);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      // Undeclared exception!
      try { 
        dSCompiler0.cosh(doubleArray0, 0, doubleArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 0;
      int int1 = 1527;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 1527);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1527, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[7];
      // Undeclared exception!
      try { 
        dSCompiler0.sin(doubleArray0, 0, doubleArray0, 1527);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1527
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[3] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(0, dSCompiler1.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler1.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler1.getFreeParameters());
      //  // Unstable assertion: assertNotNull(dSCompiler1);
      //  // Unstable assertion: assertSame(dSCompiler1, dSCompiler0);
      
      dSCompiler1.tan(doubleArray0, 1, doubleArray0, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(8, doubleArray0.length);
      //  // Unstable assertion: assertEquals(0, dSCompiler1.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler1.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler1.getFreeParameters());
      //  // Unstable assertion: assertSame(dSCompiler1, dSCompiler0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertEquals(20, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (-206.47);
      doubleArray0[5] = (double) 3;
      doubleArray0[6] = (double) 3;
      doubleArray0[7] = (double) 3;
      doubleArray0[8] = (double) 3;
      // Undeclared exception!
      try { 
        dSCompiler0.asin(doubleArray0, 3, doubleArray0, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      dSCompiler0.log10(doubleArray0, 0, doubleArray0, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(8, doubleArray0.length);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      
      dSCompiler0.acos(doubleArray0, 0, doubleArray0, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(8, doubleArray0.length);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
      try { 
        DSCompiler.getCompiler(4, 4);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      int int0 = 34;
      int int1 = 3;
      int int2 = 752;
      // Undeclared exception!
      try { 
        dSCompiler0.rootN(doubleArray0, 1505, 3, doubleArray0, 752);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1505
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      int int0 = 407;
      dSCompiler0.pow(doubleArray0, 407, 0, doubleArray0, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(9, doubleArray0.length);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      
      double double0 = (-2.3866331257845713E-8);
      // Undeclared exception!
      try { 
        dSCompiler0.taylor(doubleArray0, (-1), doubleArray0);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 2;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) 2;
      dSCompiler0.pow(doubleArray0, 2, (double) 1, doubleArray1, 1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0, 2.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      dSCompiler0.log(doubleArray0, 1, doubleArray0, 1);
      assertArrayEquals(new double[] {0.0, Double.NEGATIVE_INFINITY, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      doubleArray0[0] = (double) 1;
      double double0 = dSCompiler0.taylor(doubleArray0, 1, doubleArray0);
      assertArrayEquals(new double[] {1.0, Double.NEGATIVE_INFINITY, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 479.61981987151;
      doubleArray2[1] = Double.NaN;
      // Undeclared exception!
      try { 
        dSCompiler0.cosh(doubleArray2, (-68), doubleArray2, 1903);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -68
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double double0 = 1876.9669699981869;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1876.9669699981869;
      doubleArray0[1] = 1876.9669699981869;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = 1876.9669699981869;
      doubleArray0[4] = 1876.9669699981869;
      // Undeclared exception!
      try { 
        dSCompiler0.acos(doubleArray0, 1, doubleArray0, 1527);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1527
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[7] = (double) 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 34);
      //  // Unstable assertion: assertEquals(0, dSCompiler1.getFreeParameters());
      //  // Unstable assertion: assertEquals(1, dSCompiler1.getSize());
      //  // Unstable assertion: assertEquals(34, dSCompiler1.getOrder());
      //  // Unstable assertion: assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      //  // Unstable assertion: assertNotNull(dSCompiler1);
      //  // Unstable assertion: assertNotSame(dSCompiler1, dSCompiler0);
      
      try { 
        dSCompiler0.checkCompatibility(dSCompiler1);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(20, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (-206.47);
      doubleArray0[5] = (double) 3;
      doubleArray0[6] = (double) 3;
      doubleArray0[7] = (double) 3;
      doubleArray0[8] = (double) 3;
      int int0 = 2;
      // Undeclared exception!
      try { 
        dSCompiler0.sinh(doubleArray0, 2, doubleArray0, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 910);
      //  // Unstable assertion: assertEquals(0, dSCompiler1.getFreeParameters());
      //  // Unstable assertion: assertEquals(910, dSCompiler1.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler1.getSize());
      //  // Unstable assertion: assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      //  // Unstable assertion: assertNotNull(dSCompiler1);
      //  // Unstable assertion: assertNotSame(dSCompiler1, dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 910;
      doubleArray0[1] = (double) 910;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-2.0);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 474.10836140496264;
      doubleArray0[6] = (-2.0);
      doubleArray0[7] = 0.0;
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination((-2.0), (double[]) null, 910, (-2.0), doubleArray0, 910, 0.0, doubleArray0, 1503, 474.10836140496264, doubleArray0, 1517, doubleArray0, 4146);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[2];
      dSCompiler0.cos(doubleArray0, 0, doubleArray0, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(2, doubleArray0.length);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      
      doubleArray0[1] = (double) 0;
      int int0 = 3;
      int int1 = (-2679);
      dSCompiler0.compose(doubleArray0, 0, doubleArray0, doubleArray0, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(2, doubleArray0.length);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      
      // Undeclared exception!
      try { 
        dSCompiler0.multiply(doubleArray0, 1519, doubleArray0, 1519, doubleArray0, (-2679));
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1519
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      dSCompiler0.log(doubleArray0, 1, doubleArray0, 1);
      assertArrayEquals(new double[] {0.0, Double.NEGATIVE_INFINITY, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      
      doubleArray0[0] = (double) 1;
      double double0 = (-2.3866331257845713E-8);
      double double1 = dSCompiler0.taylor(doubleArray0, 1, doubleArray0);
      assertArrayEquals(new double[] {1.0, Double.NEGATIVE_INFINITY, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      int int0 = (-68);
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = (-2.3866331257845713E-8);
      doubleArray1[3] = Double.NaN;
      // Undeclared exception!
      try { 
        dSCompiler0.tanh(doubleArray1, (-2503), doubleArray1, 1672);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2503
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(20, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 3;
      int int1 = 13;
      // Undeclared exception!
      try { 
        dSCompiler0.compose(doubleArray0, 13, doubleArray0, doubleArray0, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      double double0 = 17.58598588105888;
      dSCompiler0.atan(doubleArray0, 0, doubleArray0, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(8, doubleArray0.length);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      
      int int1 = 2615;
      // Undeclared exception!
      try { 
        dSCompiler0.cosh(doubleArray0, 1663, doubleArray0, 1663);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1663
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-1004.642684420687);
      doubleArray0[5] = (double) 0;
      dSCompiler0.log1p(doubleArray0, 3, doubleArray0, 3);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-1004.642684420687), 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(6, doubleArray0.length);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray1 = new double[8];
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.tanh(doubleArray1, 0, doubleArray1, 34);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 34
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(3, dSCompiler1.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler1.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler1.getSize());
      //  // Unstable assertion: assertNotNull(dSCompiler1);
      //  // Unstable assertion: assertSame(dSCompiler1, dSCompiler0);
      
      dSCompiler1.checkCompatibility(dSCompiler0);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(3, dSCompiler1.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler1.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler1.getSize());
      //  // Unstable assertion: assertSame(dSCompiler0, dSCompiler1);
      //  // Unstable assertion: assertSame(dSCompiler1, dSCompiler0);
      
      int int0 = dSCompiler1.getFreeParameters();
      //  // Unstable assertion: assertEquals(3, dSCompiler1.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler1.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler1.getSize());
      //  // Unstable assertion: assertSame(dSCompiler1, dSCompiler0);
      //  // Unstable assertion: assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(3, dSCompiler1.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler1.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler1.getSize());
      //  // Unstable assertion: assertNotNull(dSCompiler1);
      //  // Unstable assertion: assertSame(dSCompiler1, dSCompiler0);
      
      dSCompiler1.linearCombination(0.0, doubleArray0, 0, (double) 0, doubleArray0, 0, 0.0, doubleArray0, 0, 474.10836140496264, doubleArray0, 0, doubleArray0, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(9, doubleArray0.length);
      //  // Unstable assertion: assertEquals(3, dSCompiler1.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler1.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler1.getSize());
      //  // Unstable assertion: assertSame(dSCompiler1, dSCompiler0);
      
      dSCompiler1.checkCompatibility(dSCompiler0);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(3, dSCompiler1.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler1.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler1.getSize());
      //  // Unstable assertion: assertSame(dSCompiler0, dSCompiler1);
      //  // Unstable assertion: assertSame(dSCompiler1, dSCompiler0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 0;
      int int1 = 595;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 595);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(595, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      double double0 = 2.9728170818998143E-8;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 595;
      doubleArray2[1] = (-1589.366665953703);
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 1;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 0, 1, doubleArray2, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[9];
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 0;
      doubleArray1[8] = (double) 0;
      doubleArray0[0] = (double) 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.tan(doubleArray0, 0, doubleArray0, 68);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 68
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[7] = (double) 0;
      dSCompiler0.atanh(doubleArray0, 0, doubleArray0, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(8, doubleArray0.length);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray1 = new double[8];
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        dSCompiler0.atan2(doubleArray1, 4, doubleArray1, 0, doubleArray1, 4);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      double[] doubleArray1 = new double[8];
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (-2.0);
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 0;
      dSCompiler0.expm1(doubleArray0, 0, doubleArray1, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-2.0), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      //  // Unstable assertion: assertEquals(1, doubleArray0.length);
      //  // Unstable assertion: assertEquals(8, doubleArray1.length);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertFalse(doubleArray0.equals((Object)doubleArray1));
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      //  // Unstable assertion: assertNotSame(doubleArray0, doubleArray1);
      //  // Unstable assertion: assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.cosh(doubleArray0, 0, doubleArray1, 45);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 45
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      dSCompiler0.log(doubleArray0, 1, doubleArray0, 1);
      assertArrayEquals(new double[] {0.0, Double.NEGATIVE_INFINITY, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      
      doubleArray0[0] = (double) 1;
      dSCompiler0.atanh(doubleArray0, 1, doubleArray0, 1);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      
      int int0 = (-906);
      // Undeclared exception!
      try { 
        dSCompiler0.exp(doubleArray0, 1, doubleArray0, (-906));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -906
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = null;
      int int0 = 431;
      int int1 = 3870;
      // Undeclared exception!
      try { 
        dSCompiler0.rootN((double[]) null, 431, 33, (double[]) null, 3870);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(20, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[7] = (double) 3;
      // Undeclared exception!
      try { 
        dSCompiler0.cos(doubleArray0, 3, doubleArray0, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      int int0 = 985;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.tan((double[]) null, (-1423), (double[]) null, 985);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.cos((double[]) null, 0, (double[]) null, 0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      int int0 = 3;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 1, (-1), doubleArray0, 1205);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1205
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[9];
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 0;
      doubleArray1[8] = (double) 0;
      dSCompiler0.acosh(doubleArray1, 0, doubleArray0, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      //  // Unstable assertion: assertEquals(9, doubleArray0.length);
      //  // Unstable assertion: assertEquals(9, doubleArray1.length);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertFalse(doubleArray0.equals((Object)doubleArray1));
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      //  // Unstable assertion: assertNotSame(doubleArray0, doubleArray1);
      //  // Unstable assertion: assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray0[0] = (double) 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(0, dSCompiler1.getOrder());
      //  // Unstable assertion: assertEquals(3, dSCompiler1.getFreeParameters());
      //  // Unstable assertion: assertEquals(1, dSCompiler1.getSize());
      //  // Unstable assertion: assertNotNull(dSCompiler1);
      //  // Unstable assertion: assertSame(dSCompiler1, dSCompiler0);
      
      dSCompiler1.checkCompatibility(dSCompiler0);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(0, dSCompiler1.getOrder());
      //  // Unstable assertion: assertEquals(3, dSCompiler1.getFreeParameters());
      //  // Unstable assertion: assertEquals(1, dSCompiler1.getSize());
      //  // Unstable assertion: assertSame(dSCompiler0, dSCompiler1);
      //  // Unstable assertion: assertSame(dSCompiler1, dSCompiler0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertEquals(20, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[7] = (double) 3;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      // Undeclared exception!
      try { 
        dSCompiler0.log10(doubleArray0, 3, doubleArray0, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[9];
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int0 = 545;
      // Undeclared exception!
      try { 
        dSCompiler0.asin(doubleArray0, 0, doubleArray1, 545);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 545
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 311;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(311, 0);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 311;
      // Undeclared exception!
      try { 
        dSCompiler0.divide(doubleArray0, 0, doubleArray0, (-128), doubleArray0, 2239);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2239
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(311, 0);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 311;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 311;
      doubleArray0[6] = (double) 311;
      // Undeclared exception!
      try { 
        dSCompiler0.remainder((double[]) null, 0, doubleArray0, 311, (double[]) null, 311);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.tanh((double[]) null, (-3569), (double[]) null, (-3569));
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[4];
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray0[3] = (double) 0;
      dSCompiler0.linearCombination(0.0, doubleArray0, 0, 0.0, doubleArray0, 4, doubleArray1, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      //  // Unstable assertion: assertEquals(8, doubleArray0.length);
      //  // Unstable assertion: assertEquals(4, doubleArray1.length);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertFalse(doubleArray0.equals((Object)doubleArray1));
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      //  // Unstable assertion: assertNotSame(doubleArray0, doubleArray1);
      //  // Unstable assertion: assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      dSCompiler0.asin(doubleArray0, 3, doubleArray0, 1);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      
      // Undeclared exception!
      try { 
        dSCompiler0.asinh(doubleArray0, 0, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      int int1 = 2;
      dSCompiler0.log(doubleArray0, 0, doubleArray0, 2);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(8, doubleArray0.length);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(2, 0);
      //  // Unstable assertion: assertEquals(3, dSCompiler1.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler1.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler1.getSize());
      //  // Unstable assertion: assertNotNull(dSCompiler1);
      //  // Unstable assertion: assertSame(dSCompiler1, dSCompiler0);
      
      dSCompiler0.checkCompatibility(dSCompiler1);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(3, dSCompiler1.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler1.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler1.getSize());
      //  // Unstable assertion: assertSame(dSCompiler0, dSCompiler1);
      //  // Unstable assertion: assertSame(dSCompiler1, dSCompiler0);
      
      int int2 = (-67);
      // Undeclared exception!
      try { 
        dSCompiler0.log10(doubleArray0, int1, doubleArray0, int2);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -67
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      int int1 = 62;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(62, 0);
      //  // Unstable assertion: assertEquals(1, dSCompiler1.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler1.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler1.getOrder());
      //  // Unstable assertion: assertNotNull(dSCompiler1);
      //  // Unstable assertion: assertSame(dSCompiler1, dSCompiler0);
      
      dSCompiler1.checkCompatibility(dSCompiler0);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(1, dSCompiler1.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler1.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler1.getOrder());
      //  // Unstable assertion: assertSame(dSCompiler0, dSCompiler1);
      //  // Unstable assertion: assertSame(dSCompiler1, dSCompiler0);
      
      DSCompiler dSCompiler2 = DSCompiler.getCompiler(int0, int1);
      //  // Unstable assertion: assertEquals(1, dSCompiler2.getSize());
      //  // Unstable assertion: assertEquals(0, dSCompiler2.getFreeParameters());
      //  // Unstable assertion: assertEquals(62, dSCompiler2.getOrder());
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(dSCompiler2.equals((Object)dSCompiler1));
      //  // Unstable assertion: assertFalse(dSCompiler2.equals((Object)dSCompiler0));
      //  // Unstable assertion: assertNotNull(dSCompiler2);
      //  // Unstable assertion: assertNotSame(dSCompiler2, dSCompiler1);
      //  // Unstable assertion: assertNotSame(dSCompiler2, dSCompiler0);
      
      double[] doubleArray0 = new double[1];
      int int2 = 3584;
      double[] doubleArray1 = new double[3];
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) int0;
      doubleArray1[1] = (double) int0;
      doubleArray1[2] = (double) int2;
      // Undeclared exception!
      try { 
        dSCompiler2.sin(doubleArray0, int2, doubleArray1, int2);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3584
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      dSCompiler0.log(doubleArray0, 1, doubleArray0, 1);
      assertArrayEquals(new double[] {0.0, Double.NEGATIVE_INFINITY, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      
      doubleArray0[0] = (double) 1;
      int int0 = 251;
      // Undeclared exception!
      try { 
        DSCompiler.getCompiler(1710, (-778));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      // Undeclared exception!
      try { 
        dSCompiler0.asinh(doubleArray0, 0, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(20, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (-206.47);
      doubleArray0[5] = (double) 3;
      doubleArray0[6] = (double) 3;
      doubleArray0[7] = (double) 3;
      doubleArray0[8] = (double) 3;
      // Undeclared exception!
      try { 
        dSCompiler0.acosh(doubleArray0, 2, doubleArray0, 1089);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1089
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.pow((double[]) null, 0, 17.58598588105888, (double[]) null, 428);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[9];
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 2280.809035;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 0;
      doubleArray1[8] = (double) 0;
      dSCompiler0.acosh(doubleArray1, 0, doubleArray0, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2280.809035, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      //  // Unstable assertion: assertEquals(9, doubleArray0.length);
      //  // Unstable assertion: assertEquals(9, doubleArray1.length);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertFalse(doubleArray0.equals((Object)doubleArray1));
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      //  // Unstable assertion: assertNotSame(doubleArray0, doubleArray1);
      //  // Unstable assertion: assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      double[] doubleArray2 = new double[3];
      //  // Unstable assertion: assertFalse(doubleArray2.equals((Object)doubleArray1));
      //  // Unstable assertion: assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-1.0);
      // Undeclared exception!
      try { 
        dSCompiler0.expm1(doubleArray0, 0, doubleArray0, 31);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 31
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(20, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 3;
      intArray0[1] = (-768);
      intArray0[2] = 3;
      // Undeclared exception!
      try { 
        dSCompiler0.getPartialDerivativeIndex(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.expm1((double[]) null, 0, (double[]) null, 0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double[] doubleArray1 = new double[2];
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-7.821867597227376E-9);
      doubleArray1[1] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination(0.0, (double[]) null, 0, (-1028.76043), doubleArray1, 0, (-1028.76043), doubleArray1, 0, doubleArray1, 0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[2];
      dSCompiler0.cos(doubleArray0, 0, doubleArray0, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(2, doubleArray0.length);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      
      doubleArray0[1] = (double) 0;
      int int1 = 3;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 3, doubleArray0, (-2679), doubleArray0, 0);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(311, 0);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      int int1 = 817;
      int int2 = 16;
      int int3 = 469;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 16, (-310), doubleArray0, 469);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[2];
      dSCompiler0.sin(doubleArray0, 0, doubleArray0, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(2, doubleArray0.length);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      
      double[] doubleArray1 = new double[8];
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      dSCompiler0.log10(doubleArray1, 0, doubleArray0, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      //  // Unstable assertion: assertEquals(2, doubleArray0.length);
      //  // Unstable assertion: assertEquals(8, doubleArray1.length);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertFalse(doubleArray0.equals((Object)doubleArray1));
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      //  // Unstable assertion: assertNotSame(doubleArray0, doubleArray1);
      //  // Unstable assertion: assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[0] = 0.0;
      dSCompiler0.acos(doubleArray0, 0, doubleArray1, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      //  // Unstable assertion: assertEquals(2, doubleArray0.length);
      //  // Unstable assertion: assertEquals(8, doubleArray1.length);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertFalse(doubleArray0.equals((Object)doubleArray1));
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      //  // Unstable assertion: assertNotSame(doubleArray0, doubleArray1);
      //  // Unstable assertion: assertNotSame(doubleArray1, doubleArray0);
      
      dSCompiler0.rootN(doubleArray1, 5, 0, doubleArray1, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      //  // Unstable assertion: assertEquals(8, doubleArray1.length);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      //  // Unstable assertion: assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.log(doubleArray1, 61, doubleArray0, 458);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 61
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[2];
      dSCompiler0.sin(doubleArray0, 0, doubleArray0, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(2, doubleArray0.length);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      
      doubleArray0[0] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.log((double[]) null, 484, (double[]) null, 484);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      int int1 = 1033;
      double[] doubleArray0 = null;
      int int2 = 3159;
      double[] doubleArray1 = new double[0];
      int int3 = 1984;
      // Undeclared exception!
      try { 
        dSCompiler0.atan2((double[]) null, 3159, (double[]) null, 0, doubleArray1, 1984);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[4] = (-1.0);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      double double0 = 2.7279024753382288E76;
      // Undeclared exception!
      try { 
        dSCompiler0.tan(doubleArray0, (-1423), doubleArray0, 985);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1423
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(311, 0);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 311;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 311;
      doubleArray0[6] = (double) 311;
      doubleArray0[7] = 1876.9669699981869;
      // Undeclared exception!
      try { 
        dSCompiler0.atan(doubleArray0, 0, doubleArray0, 311);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 311
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[2];
      dSCompiler0.sin(doubleArray0, 0, doubleArray0, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(2, doubleArray0.length);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      
      double[] doubleArray1 = new double[1];
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int1 = 30;
      // Undeclared exception!
      try { 
        dSCompiler0.expm1(doubleArray0, 0, doubleArray1, (-2645));
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2645
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = 2.7279024753382288E76;
      // Undeclared exception!
      try { 
        dSCompiler0.atan2(doubleArray0, 1033, doubleArray0, 0, doubleArray0, 1033);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1033
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[2];
      dSCompiler0.sin(doubleArray0, 0, doubleArray0, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(2, doubleArray0.length);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      
      double[] doubleArray1 = new double[1];
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        dSCompiler0.divide(doubleArray1, 806, doubleArray0, 0, doubleArray0, 0);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 806
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = 0;
      int int1 = 595;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 595);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(595, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 595;
      doubleArray0[2] = 10.0;
      doubleArray0[3] = (double) 595;
      doubleArray0[4] = 0.5;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 595;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 722, 817, doubleArray0, 28);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 722
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[2];
      dSCompiler0.sin(doubleArray0, 0, doubleArray0, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(2, doubleArray0.length);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray1 = new double[1];
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      dSCompiler0.log10(doubleArray1, 0, doubleArray0, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      //  // Unstable assertion: assertEquals(2, doubleArray0.length);
      //  // Unstable assertion: assertEquals(1, doubleArray1.length);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertFalse(doubleArray0.equals((Object)doubleArray1));
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      //  // Unstable assertion: assertNotSame(doubleArray0, doubleArray1);
      //  // Unstable assertion: assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = 0.0;
      doubleArray1[0] = 0.0;
      dSCompiler0.acos(doubleArray0, 0, doubleArray1, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      //  // Unstable assertion: assertEquals(2, doubleArray0.length);
      //  // Unstable assertion: assertEquals(1, doubleArray1.length);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertFalse(doubleArray0.equals((Object)doubleArray1));
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      //  // Unstable assertion: assertNotSame(doubleArray0, doubleArray1);
      //  // Unstable assertion: assertNotSame(doubleArray1, doubleArray0);
      
      int int1 = (-968);
      int int2 = (-1551);
      int int3 = (-1920);
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination(0.0, doubleArray0, 2313, (double) (-1551), doubleArray1, (-1920), doubleArray1, 0);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2313
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      int int0 = 15;
      // Undeclared exception!
      try { 
        dSCompiler0.acos(doubleArray0, 0, doubleArray0, 15);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(20, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = null;
      int int1 = 63;
      // Undeclared exception!
      try { 
        dSCompiler0.sinh((double[]) null, 3, (double[]) null, 63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        dSCompiler0.atan2(doubleArray0, 0, doubleArray0, 0, doubleArray0, (-3082));
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[2];
      dSCompiler0.atanh(doubleArray0, 0, doubleArray0, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(2, doubleArray0.length);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      
      int int0 = 1017;
      double[] doubleArray1 = null;
      int int1 = 1;
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination((double) 0, (double[]) null, 1, (double) 1, (double[]) null, 23, doubleArray0, 1017);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(20, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 494;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 494;
      // Undeclared exception!
      try { 
        dSCompiler0.add((double[]) null, (-3104), (double[]) null, 494, doubleArray0, (-1832));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.sin((double[]) null, 0, (double[]) null, 797);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[7];
      int int0 = 557;
      // Undeclared exception!
      try { 
        dSCompiler0.rootN(doubleArray0, 5, (-1958), doubleArray0, 557);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 557
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      dSCompiler0.sinh(doubleArray0, 0, doubleArray0, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(8, doubleArray0.length);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray1 = new double[9];
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 3;
      doubleArray1[1] = (double) 5254;
      doubleArray1[2] = 3.0;
      doubleArray1[3] = 1575.2585990197583;
      doubleArray1[4] = (double) 3;
      doubleArray1[5] = (double) 5254;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 5254;
      doubleArray1[8] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.multiply(doubleArray1, 3, doubleArray0, 67, doubleArray1, 66);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 67
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      double[] doubleArray1 = null;
      int int0 = 14;
      double[] doubleArray2 = new double[1];
      //  // Unstable assertion: assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 14;
      int int1 = 918;
      // Undeclared exception!
      try { 
        dSCompiler0.log10((double[]) null, 14, doubleArray2, 918);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[2];
      dSCompiler0.sin(doubleArray0, 0, doubleArray0, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(2, doubleArray0.length);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      
      double[] doubleArray1 = new double[1];
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int1 = 30;
      int int2 = 812;
      // Undeclared exception!
      try { 
        dSCompiler0.expm1(doubleArray0, 812, doubleArray1, (-2645));
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 812
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[4];
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      dSCompiler0.log(doubleArray0, 0, doubleArray0, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(8, doubleArray0.length);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertFalse(doubleArray0.equals((Object)doubleArray1));
      //  // Unstable assertion: assertNotSame(doubleArray0, doubleArray1);
      
      double[] doubleArray2 = new double[2];
      //  // Unstable assertion: assertFalse(doubleArray2.equals((Object)doubleArray0));
      //  // Unstable assertion: assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      dSCompiler0.atanh(doubleArray2, 0, doubleArray1, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      //  // Unstable assertion: assertEquals(4, doubleArray1.length);
      //  // Unstable assertion: assertEquals(2, doubleArray2.length);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray2));
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      //  // Unstable assertion: assertFalse(doubleArray2.equals((Object)doubleArray0));
      //  // Unstable assertion: assertFalse(doubleArray2.equals((Object)doubleArray1));
      //  // Unstable assertion: assertNotSame(doubleArray1, doubleArray2);
      //  // Unstable assertion: assertNotSame(doubleArray1, doubleArray0);
      //  // Unstable assertion: assertNotSame(doubleArray2, doubleArray0);
      //  // Unstable assertion: assertNotSame(doubleArray2, doubleArray1);
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.cosh(doubleArray1, 3, doubleArray1, (-68));
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -68
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      int int1 = 557;
      // Undeclared exception!
      try { 
        dSCompiler0.asin(doubleArray0, 557, doubleArray0, 0);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 557
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 595);
      assertEquals(595, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      dSCompiler0.remainder(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(595, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
      dSCompiler0.asinh(doubleArray0, 0, doubleArray0, 946);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 6918;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      try { 
        dSCompiler0.getPartialDerivativeIndex(intArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // 8 != 3
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[4];
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.cosh(doubleArray1, 3, doubleArray1, (-68));
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -68
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[2];
      dSCompiler0.sin(doubleArray0, 0, doubleArray0, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(2, doubleArray0.length);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray1 = new double[1];
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        dSCompiler0.log10(doubleArray1, 17, doubleArray0, 17);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(20, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (-3104);
      doubleArray1[1] = (double) 3;
      doubleArray1[2] = (double) 3;
      doubleArray1[3] = (double) 494;
      doubleArray1[4] = (double) 3;
      doubleArray1[5] = (double) (-3104);
      doubleArray1[6] = (double) (-3104);
      doubleArray1[7] = (double) (-3104);
      int int0 = 2173;
      // Undeclared exception!
      try { 
        dSCompiler0.sinh(doubleArray1, (-3104), doubleArray1, 2173);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3104
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(20, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double double0 = (-3467.301410904066);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-3467.301410904066);
      doubleArray0[1] = 5.5807813570926636E-148;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (-3467.301410904066);
      // Undeclared exception!
      try { 
        dSCompiler0.tanh(doubleArray0, (-1), doubleArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      int int1 = 557;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 0, (-2.7836800219410262E-8), doubleArray0, 2615);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2615
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double double0 = dSCompiler0.taylor(doubleArray0, 0, doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(2, doubleArray0.length);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        dSCompiler0.log1p(doubleArray0, 0, (double[]) null, 251);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (-693);
      doubleArray1[1] = (double) (-693);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) (-693);
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) (-693);
      doubleArray1[7] = (double) (-693);
      // Undeclared exception!
      try { 
        dSCompiler0.taylor((double[]) null, (-693), doubleArray1);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        dSCompiler0.asinh(doubleArray0, 3056, doubleArray0, 0);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3056
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      int int0 = 5489;
      dSCompiler0.tanh(doubleArray0, 0, doubleArray0, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(8, doubleArray0.length);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination(696.13, doubleArray0, 5489, (double) 0, doubleArray0, 0, 0.0, doubleArray0, 2837, doubleArray0, 2837);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5489
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = 311;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(311, 0);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 311;
      intArray0[1] = 311;
      intArray0[2] = 311;
      intArray0[3] = 311;
      intArray0[4] = 311;
      intArray0[5] = 0;
      try { 
        dSCompiler0.getPartialDerivativeIndex(intArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // 6 != 3
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertEquals(20, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = null;
      int int1 = (-3104);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (-3104);
      doubleArray1[1] = (double) 3;
      doubleArray1[2] = (double) 3;
      doubleArray1[3] = (double) 494;
      doubleArray1[4] = (double) 3;
      doubleArray1[5] = (double) (-3104);
      doubleArray1[6] = (double) (-3104);
      doubleArray1[7] = (double) (-3104);
      int int2 = 549;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 3;
      // Undeclared exception!
      try { 
        dSCompiler0.cos(doubleArray2, 494, doubleArray2, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 494
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 595);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(595, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      dSCompiler0.remainder(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(595, dSCompiler0.getOrder());
      
      dSCompiler0.exp(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(595, dSCompiler0.getOrder());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[2];
      dSCompiler0.sin(doubleArray0, 0, doubleArray0, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(2, doubleArray0.length);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray1 = new double[1];
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      dSCompiler0.acos(doubleArray0, 0, doubleArray1, 0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertArrayEquals(new double[] {1.5707963267948966}, doubleArray1, 0.01);
      //  // Unstable assertion: assertEquals(2, doubleArray0.length);
      //  // Unstable assertion: assertEquals(1, doubleArray1.length);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertFalse(doubleArray0.equals((Object)doubleArray1));
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      //  // Unstable assertion: assertNotSame(doubleArray0, doubleArray1);
      //  // Unstable assertion: assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination((double) 0, doubleArray1, (-968), 0.0, doubleArray0, 480, 1.5707963267948966, doubleArray1, (-1551), (double) 0, doubleArray0, (-1920), doubleArray0, 60);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -968
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.acosh(doubleArray0, 1252, doubleArray0, 1252);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1252
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(20, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.asinh((double[]) null, 3, (double[]) null, (-712));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.sin(doubleArray0, 1142, doubleArray0, 1858);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1142
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.remainder(doubleArray0, (-2288), doubleArray0, 25, doubleArray0, (-2246));
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2288
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = 311;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(311, 0);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(3, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 311;
      doubleArray0[3] = (double) 0;
      int int1 = 45;
      int int2 = 67;
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination((double) 311, doubleArray0, 45, (double) 311, doubleArray0, 311, doubleArray0, 67);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 45
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 0;
      dSCompiler0.pow(doubleArray0, 0, (-966.782), doubleArray0, 0);
      // Undeclared exception!
      try { 
        DSCompiler.getCompiler(28, 43);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      double[] doubleArray0 = null;
      int int0 = 494;
      int int1 = 976;
      // Undeclared exception!
      try { 
        dSCompiler0.log1p((double[]) null, 976, (double[]) null, 22);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      double[] doubleArray0 = new double[0];
      int int0 = 0;
      // Undeclared exception!
      try { 
        dSCompiler0.taylor(doubleArray0, 1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      // Undeclared exception!
      try { 
        dSCompiler0.pow((double[]) null, (-741), (double[]) null, 54, (double[]) null, 54);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      dSCompiler0.asinh(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = 0;
      int int1 = 807;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 807);
      dSCompiler0.getOrder();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 807;
      doubleArray0[1] = 2702.461524;
      doubleArray0[2] = (double) 807;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 807;
      doubleArray0[5] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.log1p(doubleArray0, 303, doubleArray0, 303);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 303
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        dSCompiler0.exp(doubleArray0, 0, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      // Undeclared exception!
      try { 
        dSCompiler0.acosh((double[]) null, 494, (double[]) null, 976);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = 0;
      int int1 = 263;
      DSCompiler.getCompiler(0, 263);
      int int2 = 1304;
      int int3 = 2608;
      // Undeclared exception!
      try { 
        DSCompiler.getCompiler(1304, 2608);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[2];
      dSCompiler0.sin(doubleArray0, 0, doubleArray0, 0);
      doubleArray0[0] = (double) 0;
      int int1 = 0;
      int int2 = (-3888);
      // Undeclared exception!
      try { 
        dSCompiler0.log(doubleArray0, 0, doubleArray0, (-3888));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3888
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[1];
      int int1 = 0;
      int int2 = 1243;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 0, doubleArray0, 1243, doubleArray0, 1230);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1243
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      dSCompiler0.taylor(doubleArray0, 0, doubleArray0);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      int int1 = 0;
      int int2 = 1;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      // Undeclared exception!
      try { 
        dSCompiler0.taylor(doubleArray1, 711, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 711
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = 1397;
      // Undeclared exception!
      try { 
        DSCompiler.getCompiler(1397, 1397);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      int int1 = 557;
      int int2 = 0;
      // Undeclared exception!
      try { 
        dSCompiler0.rootN(doubleArray0, 557, 557, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 557
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = 1000;
      int int1 = (-2809);
      // Undeclared exception!
      try { 
        DSCompiler.getCompiler(1000, (-2809));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      dSCompiler0.taylor(doubleArray0, 0, doubleArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        dSCompiler0.atanh(doubleArray0, 251, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 251
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(311, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 311;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 311;
      doubleArray0[6] = (double) 311;
      doubleArray0[7] = 1876.9669699981869;
      doubleArray0[8] = (double) 311;
      // Undeclared exception!
      try { 
        dSCompiler0.add(doubleArray0, (-3104), doubleArray0, (-3104), doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3104
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int int0 = 267;
      // Undeclared exception!
      try { 
        DSCompiler.getCompiler(267, 267);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = (-855);
      int int1 = 0;
      // Undeclared exception!
      try { 
        DSCompiler.getCompiler((-855), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int int0 = 686;
      int int1 = (-1487);
      // Undeclared exception!
      try { 
        DSCompiler.getCompiler(686, (-1487));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
