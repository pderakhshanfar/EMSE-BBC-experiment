/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 02:19:22 GMT 2021
 */

package org.apache.commons.math3.analysis.differentiation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.differentiation.DSCompiler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DSCompiler_ESTest extends DSCompiler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 7);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(7, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) 7;
      doubleArray0[4] = (double) 0;
      doubleArray0[3] = (double) 7;
      doubleArray0[4] = (double) 7;
      doubleArray0[5] = (double) 7;
      dSCompiler0.exp(doubleArray0, 7, doubleArray0, 7);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 7.0, 0.0, 7.0, 7.0, 7.0, 0.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(7, dSCompiler0.getOrder());
      
      // Undeclared exception!
      try { 
        dSCompiler0.acos(doubleArray0, 0, doubleArray0, (-2724));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2724
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 2);
      assertNotNull(dSCompiler0);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(3, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[4];
      dSCompiler0.pow(doubleArray0, 1, 1, doubleArray0, 1);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(3, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      
      dSCompiler0.cos(doubleArray0, 1, doubleArray0, 1);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(3, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      
      double double0 = dSCompiler0.taylor(doubleArray0, 1, doubleArray0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(3, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
      try { 
        dSCompiler0.add(doubleArray0, 1, doubleArray0, 2, doubleArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 14);
      assertNotNull(dSCompiler0);
      assertEquals(14, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (-1391.9554659);
      doubleArray0[2] = (-1391.9554659);
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 14;
      doubleArray0[5] = (-1391.9554659);
      dSCompiler0.acosh(doubleArray0, 3, doubleArray0, 0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1.762747174039086, (-1391.9554659), (-1391.9554659), 3.0, 14.0, (-1391.9554659)}, doubleArray0, 0.01);
      assertEquals(14, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(5, 3);
      assertNotNull(dSCompiler1);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(3, dSCompiler1.getOrder());
      assertEquals(5, dSCompiler1.getFreeParameters());
      assertEquals(56, dSCompiler1.getSize());
      
      try { 
        dSCompiler1.checkCompatibility(dSCompiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 0
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3242);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(3242, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3242;
      doubleArray0[1] = (double) 3242;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 3;
      // Undeclared exception!
      try { 
        dSCompiler0.rootN(doubleArray0, 0, 3, doubleArray0, (-3147));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3147
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 0;
      int int1 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertNotNull(dSCompiler0);
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      double double0 = (-1.0);
      // Undeclared exception!
      try { 
        dSCompiler0.cos(doubleArray0, 2, doubleArray0, (-5201));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5201
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[4];
      dSCompiler0.compose(doubleArray0, 1, doubleArray0, doubleArray0, 1);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      
      // Undeclared exception!
      try { 
        dSCompiler0.divide(doubleArray0, 328, doubleArray0, (-2011), doubleArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 328
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 2210);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(2210, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      // Undeclared exception!
      dSCompiler0.asinh(doubleArray0, 0, doubleArray0, 1335);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 1873);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1873, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 54;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 54;
      doubleArray0[4] = (double) 54;
      doubleArray0[5] = (double) 1873;
      doubleArray0[6] = (double) 54;
      doubleArray0[7] = (double) 54;
      // Undeclared exception!
      try { 
        dSCompiler0.sin(doubleArray0, 0, doubleArray0, 1873);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1873
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[1];
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler1);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(0, dSCompiler1.getOrder());
      
      dSCompiler1.remainder(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(0, dSCompiler1.getOrder());
      
      // Undeclared exception!
      try { 
        dSCompiler0.sin((double[]) null, 37, (double[]) null, 37);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[1];
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler1);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getOrder());
      
      // Undeclared exception!
      try { 
        dSCompiler1.atanh((double[]) null, 0, doubleArray0, 19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[1];
      dSCompiler0.acosh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler1);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      
      dSCompiler0.checkCompatibility(dSCompiler1);
      assertSame(dSCompiler0, dSCompiler1);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      
      DSCompiler dSCompiler2 = DSCompiler.getCompiler(1042, 0);
      assertNotNull(dSCompiler2);
      assertNotSame(dSCompiler2, dSCompiler0);
      assertNotSame(dSCompiler2, dSCompiler1);
      assertFalse(dSCompiler2.equals((Object)dSCompiler0));
      assertFalse(dSCompiler2.equals((Object)dSCompiler1));
      assertEquals(1042, dSCompiler2.getFreeParameters());
      assertEquals(1, dSCompiler2.getSize());
      assertEquals(0, dSCompiler2.getOrder());
      
      int int0 = dSCompiler2.getFreeParameters();
      assertNotSame(dSCompiler2, dSCompiler0);
      assertNotSame(dSCompiler2, dSCompiler1);
      assertEquals(1042, int0);
      assertFalse(dSCompiler2.equals((Object)dSCompiler0));
      assertFalse(dSCompiler2.equals((Object)dSCompiler1));
      assertEquals(1042, dSCompiler2.getFreeParameters());
      assertEquals(1, dSCompiler2.getSize());
      assertEquals(0, dSCompiler2.getOrder());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[1];
      dSCompiler0.acosh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 539;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 539;
      doubleArray1[5] = (double) 3;
      doubleArray1[6] = (double) 3;
      doubleArray1[7] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.rootN(doubleArray1, 50, 3, doubleArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 50
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertNotNull(dSCompiler0);
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(20, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1391.9554659);
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      // Undeclared exception!
      try { 
        dSCompiler0.acosh(doubleArray0, 0, doubleArray0, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = 0;
      int int1 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 2);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double double0 = (-497.70207036);
      double[] doubleArray0 = null;
      int int2 = (-1621);
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination((double) (-1621), (double[]) null, (-4425), (-68.0), (double[]) null, 16, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[4];
      dSCompiler0.add(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[4];
      dSCompiler0.subtract(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[1];
      dSCompiler0.acosh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
      try { 
        dSCompiler0.atan2(doubleArray0, 0, doubleArray0, 0, doubleArray0, (-1202));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1202
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 2);
      assertNotNull(dSCompiler0);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(3, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-68.0);
      dSCompiler0.atanh(doubleArray0, 1, doubleArray0, 2);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-68.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(3, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      
      doubleArray0[1] = 2718.26351966624;
      doubleArray0[2] = (double) 54;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (-490.3509475559);
      doubleArray0[5] = (double) 2;
      // Undeclared exception!
      try { 
        dSCompiler0.asin(doubleArray0, (-524), doubleArray0, 1296);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -524
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1952);
      doubleArray0[1] = (double) (-1952);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-1952);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (-1952);
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) (-1952);
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1952);
      doubleArray1[1] = (double) (-1952);
      doubleArray1[2] = (double) (-1952);
      // Undeclared exception!
      try { 
        dSCompiler0.atanh(doubleArray0, 0, doubleArray1, (-1952));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1952
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      int[] intArray0 = new int[0];
      int int0 = dSCompiler0.getPartialDerivativeIndex(intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 1;
      int int1 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 2);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(3, dSCompiler0.getSize());
      
      double double0 = (-63.0033541);
      double[] doubleArray0 = new double[2];
      int[] intArray0 = dSCompiler0.getPartialDerivativeOrders(2);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {2}, intArray0);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(3, dSCompiler0.getSize());
      
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      // Undeclared exception!
      try { 
        dSCompiler0.asin(doubleArray0, 2, doubleArray0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      
      int int0 = 54;
      double[] doubleArray0 = null;
      int int1 = 11;
      double[] doubleArray1 = new double[2];
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        dSCompiler0.asinh((double[]) null, 859, (double[]) null, (-492));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[2];
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 1418);
      assertNotNull(dSCompiler1);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1418, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      
      // Undeclared exception!
      dSCompiler1.atan(doubleArray0, 0, doubleArray0, 1418);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = 4;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(4, 4);
      assertNotNull(dSCompiler0);
      assertEquals(4, dSCompiler0.getOrder());
      assertEquals(70, dSCompiler0.getSize());
      assertEquals(4, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[6];
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(4, 4);
      assertNotNull(dSCompiler1);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(4, dSCompiler1.getOrder());
      assertEquals(70, dSCompiler1.getSize());
      assertEquals(4, dSCompiler1.getFreeParameters());
      
      int int1 = 113;
      // Undeclared exception!
      try { 
        dSCompiler1.sinh(doubleArray0, 4, doubleArray0, 113);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 113
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 2);
      assertNotNull(dSCompiler0);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = 2549.07584;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 2;
      dSCompiler0.tan(doubleArray0, 1, doubleArray0, 1);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, (-2.185039863261519), 5.774399204041917, (-835.6396800866441), 2.0, 2.0, 2549.07584, 1.0, 2.0}, doubleArray0, 0.01);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getSize());
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2;
      dSCompiler0.asin(doubleArray1, 2, doubleArray1, 2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getSize());
      
      int int0 = dSCompiler0.getSize();
      assertEquals(3, int0);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getSize());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination(2952.217678, (double[]) null, 0, 2952.217678, (double[]) null, 2169, 10.0, (double[]) null, 0, (double) 0, (double[]) null, 3646, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 45);
      assertNotNull(dSCompiler0);
      assertEquals(45, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[4];
      int int1 = 3;
      int int2 = 23;
      // Undeclared exception!
      try { 
        dSCompiler0.atan(doubleArray0, 3, doubleArray0, 23);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 23
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 1;
      int int1 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 2);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      // Undeclared exception!
      try { 
        dSCompiler0.rootN(doubleArray0, 1, 2, doubleArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[2];
      dSCompiler0.linearCombination((double) 0, doubleArray0, 0, (double) 0, doubleArray0, 0, (double) 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 2);
      assertNotNull(dSCompiler0);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[4];
      double double0 = dSCompiler0.taylor(doubleArray0, 1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getSize());
      
      // Undeclared exception!
      try { 
        dSCompiler0.atanh(doubleArray0, 2, doubleArray0, (-1952));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1952
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[6];
      double double0 = (-170.277);
      int int1 = 614;
      // Undeclared exception!
      try { 
        dSCompiler0.remainder((double[]) null, 0, doubleArray0, 0, doubleArray0, 614);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[4] = (-170.277);
      doubleArray0[1] = 1728.62;
      dSCompiler0.remainder(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 1728.62, 0.0, 0.0, (-170.277), 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 14;
      intArray0[4] = 0;
      try { 
        dSCompiler0.getPartialDerivativeIndex(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 0
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertNotNull(dSCompiler0);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[6];
      // Undeclared exception!
      try { 
        dSCompiler0.remainder(doubleArray0, 2, doubleArray0, 2, doubleArray0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[6];
      // Undeclared exception!
      try { 
        dSCompiler0.checkCompatibility((DSCompiler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 586);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(586, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      int int1 = 1;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.cosh(doubleArray0, 0, doubleArray0, 586);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 586
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 2;
      doubleArray0[1] = (double) (-68);
      doubleArray0[3] = (double) 0;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 0;
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.cosh((double[]) null, 2, doubleArray0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[3];
      dSCompiler0.acos(doubleArray0, 0, doubleArray0, 0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.5707963267948966, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1586;
      // Undeclared exception!
      try { 
        dSCompiler0.add(doubleArray1, 0, doubleArray1, 904, doubleArray0, 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 904
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[4] = (-170.277);
      doubleArray0[1] = 1728.62;
      dSCompiler0.remainder(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 1728.62, 0.0, 0.0, (-170.277), 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      dSCompiler0.multiply(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 1728.62, 0.0, 0.0, (-170.277), 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      int int0 = dSCompiler0.getFreeParameters();
      assertEquals(0, int0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 63);
      assertNotNull(dSCompiler0);
      assertEquals(63, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.acos((double[]) null, 0, (double[]) null, 34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertNotNull(dSCompiler0);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(6, dSCompiler0.getSize());
      
      int int0 = dSCompiler0.getOrder();
      assertEquals(2, int0);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(6, dSCompiler0.getSize());
      
      // Undeclared exception!
      try { 
        dSCompiler0.atan2((double[]) null, 46, (double[]) null, 46, (double[]) null, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[3];
      int int0 = dSCompiler0.getOrder();
      assertEquals(0, int0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      // Undeclared exception!
      try { 
        dSCompiler0.log(doubleArray0, (-1673), doubleArray0, 729);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1673
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[3];
      dSCompiler0.sin(doubleArray0, 0, doubleArray0, 0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      // Undeclared exception!
      try { 
        dSCompiler0.exp(doubleArray0, 0, doubleArray0, (-130));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -130
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[6];
      dSCompiler0.acosh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      dSCompiler0.asinh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      dSCompiler0.linearCombination((double) 0, doubleArray0, 0, (double) 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, (-1590), (-593.618282), doubleArray0, 404);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1590
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      int int0 = dSCompiler0.getFreeParameters();
      assertEquals(0, int0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      // Undeclared exception!
      try { 
        dSCompiler0.log10((double[]) null, 0, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[9];
      // Undeclared exception!
      try { 
        dSCompiler0.add(doubleArray0, 2, doubleArray0, 36, doubleArray0, (-119));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 36
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 2);
      assertNotNull(dSCompiler0);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(3, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2;
      dSCompiler0.exp(doubleArray1, 1, doubleArray0, 1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(3, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      
      dSCompiler0.asin(doubleArray1, 2, doubleArray1, 2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(3, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      
      dSCompiler0.cosh(doubleArray1, 1, doubleArray1, 1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {2.0, 1.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(3, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
      try { 
        dSCompiler0.sinh(doubleArray1, 1, doubleArray0, 488);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 488
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      // Undeclared exception!
      try { 
        dSCompiler0.rootN((double[]) null, 0, 0, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 1;
      int int1 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 2);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(3, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[4];
      double double0 = dSCompiler0.taylor(doubleArray0, 1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(3, dSCompiler0.getSize());
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2;
      // Undeclared exception!
      try { 
        dSCompiler0.log(doubleArray0, 2, doubleArray1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler1);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      
      int[] intArray0 = new int[1];
      int int0 = dSCompiler1.getFreeParameters();
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(0, int0);
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      
      // Undeclared exception!
      try { 
        dSCompiler0.add((double[]) null, 0, (double[]) null, (-119), (double[]) null, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 2);
      assertNotNull(dSCompiler0);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 2;
      dSCompiler0.exp(doubleArray0, 2, doubleArray0, 2);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 2.0, 1.0, 2.0, 0.0, 2.0, 2.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
      try { 
        dSCompiler0.acos(doubleArray0, 0, doubleArray0, (-2724));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2724
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[4] = (-170.277);
      doubleArray0[1] = 1740.681852358661;
      dSCompiler0.exp(doubleArray0, 0, doubleArray0, 0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 1740.681852358661, 0.0, 0.0, (-170.277), 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 1740.681852358661;
      dSCompiler0.asin(doubleArray1, 0, doubleArray0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.5707963267948966), 1740.681852358661, 0.0, 0.0, (-170.277), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 1740.681852358661, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      int[] intArray0 = dSCompiler0.getPartialDerivativeOrders(0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[1];
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 61);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(61, dSCompiler0.getOrder());
      
      int int1 = dSCompiler0.getFreeParameters();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(61, dSCompiler0.getOrder());
      
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.pow((double[]) null, 0, 22, doubleArray0, 2933);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[3];
      dSCompiler0.exp(doubleArray0, 0, doubleArray0, 0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      int int0 = 63;
      // Undeclared exception!
      try { 
        dSCompiler0.acos(doubleArray0, 0, doubleArray0, 63);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 63
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 0;
      int int1 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 2);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (double) 0;
      dSCompiler0.cosh(doubleArray0, 2, doubleArray0, 2);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0, 2.0, 2.0, 2.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int2 = 3;
      int int3 = 55;
      // Undeclared exception!
      try { 
        dSCompiler0.atan(doubleArray1, 3, doubleArray1, 55);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 55
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[3];
      double double0 = (-515.6211);
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (-515.6211);
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (-515.6211);
      doubleArray1[4] = (-515.6211);
      // Undeclared exception!
      try { 
        dSCompiler0.cosh(doubleArray1, 0, doubleArray1, 195);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 195
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[6];
      dSCompiler0.acosh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      // Undeclared exception!
      try { 
        dSCompiler0.cos((double[]) null, 2241, (double[]) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[3];
      double double0 = dSCompiler0.taylor(doubleArray0, 0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      // Undeclared exception!
      try { 
        DSCompiler.getCompiler(1135, (-853));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = 22;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(22, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(22, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[26];
      doubleArray0[0] = (double) 22;
      doubleArray0[1] = 4539.1;
      doubleArray0[22] = (double) 22;
      doubleArray0[3] = 4539.1;
      doubleArray0[4] = 4539.1;
      doubleArray0[5] = 10.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (double) 0;
      int int1 = 0;
      // Undeclared exception!
      try { 
        dSCompiler0.atan2(doubleArray0, 22, doubleArray0, 0, doubleArray0, 22);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 22
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try { 
        dSCompiler0.sin(doubleArray0, 0, doubleArray0, 2237);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2237
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
      DSCompiler.getCompiler(4118, 4118);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.compose((double[]) null, (-1382), (double[]) null, (double[]) null, 1214);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      int int1 = 6;
      int int2 = 1;
      double[] doubleArray0 = null;
      int int3 = (-665);
      // Undeclared exception!
      try { 
        dSCompiler0.atan2((double[]) null, (-665), (double[]) null, 6, (double[]) null, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0;
      dSCompiler0.pow(doubleArray0, 0, (-2219), doubleArray0, 0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      int int0 = 752;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 752);
      assertNotNull(dSCompiler1);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(752, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      
      int int1 = 237;
      try { 
        dSCompiler1.checkCompatibility(dSCompiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 752 != 0
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 0;
      int int1 = 1636;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 1636);
      assertNotNull(dSCompiler0);
      assertEquals(1636, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1636;
      // Undeclared exception!
      dSCompiler0.atan2(doubleArray0, 0, doubleArray0, 0, doubleArray0, 1636);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 1676);
      assertNotNull(dSCompiler1);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1676, dSCompiler1.getOrder());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 1676;
      doubleArray0[5] = 1.9803689272433392E-303;
      // Undeclared exception!
      try { 
        dSCompiler1.exp(doubleArray0, 1247, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1247
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = null;
      int int1 = (-3952);
      int int2 = 5;
      int int3 = (-392);
      // Undeclared exception!
      try { 
        dSCompiler0.log1p((double[]) null, 5, (double[]) null, (-392));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler1);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getOrder());
      
      double double0 = 2398.0;
      // Undeclared exception!
      try { 
        dSCompiler0.atan((double[]) null, 28, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 2398.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      dSCompiler0.remainder(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 2398.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int0 = (-982);
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 331;
      doubleArray2[1] = (double) (-982);
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 331;
      doubleArray2[4] = 2398.0;
      doubleArray2[5] = 2398.0;
      doubleArray2[6] = (double) 331;
      doubleArray2[7] = 2398.0;
      // Undeclared exception!
      try { 
        dSCompiler0.taylor((double[]) null, 331, doubleArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      // Undeclared exception!
      try { 
        dSCompiler0.pow((double[]) null, 60, 671, (double[]) null, 476);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[3];
      dSCompiler0.atan(doubleArray0, 1, doubleArray0, 0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      int int1 = 8;
      int int2 = 15;
      // Undeclared exception!
      try { 
        dSCompiler0.atan(doubleArray0, (-2973), doubleArray0, 38);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2973
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 488);
      assertNotNull(dSCompiler0);
      assertEquals(488, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1728.62;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 10, (-1072), doubleArray0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 3.080714152600695E145;
      // Undeclared exception!
      try { 
        dSCompiler0.asin(doubleArray1, 0, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      int int1 = (-68);
      int int2 = 2;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.expm1(doubleArray0, 650, doubleArray0, 28);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 650
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 4539.1;
      doubleArray0[2] = (double) 0;
      int int1 = 4080;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-4062.11324386);
      doubleArray1[1] = (double) 4080;
      dSCompiler0.compose(doubleArray0, 0, doubleArray0, doubleArray1, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 4539.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 4080.0}, doubleArray1, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray1, 2, 2862, doubleArray1, 1298);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = 0;
      int int1 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 2);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[4];
      dSCompiler0.log1p(doubleArray0, 0, doubleArray0, 2);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        dSCompiler0.log1p(doubleArray0, 946, doubleArray1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 946
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 4539.1;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 4539.1;
      doubleArray0[4] = 4539.1;
      doubleArray0[5] = 10.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (double) 0;
      dSCompiler0.atan2(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 4539.1, 0.0, 4539.1, 4539.1, 10.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 1747.9;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (-68.0);
      doubleArray1[4] = 2619.89538853;
      doubleArray1[5] = (-1227.0);
      // Undeclared exception!
      try { 
        dSCompiler0.tan(doubleArray0, 990, doubleArray1, 3113);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 990
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(67, 0);
      assertNotNull(dSCompiler0);
      assertEquals(67, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      // Undeclared exception!
      try { 
        dSCompiler0.sinh((double[]) null, 721, (double[]) null, 721);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) (-68);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 2;
      dSCompiler0.tan(doubleArray0, 0, doubleArray0, 2);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-68.0), 0.0, 2.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
      try { 
        dSCompiler0.cosh(doubleArray0, 59, doubleArray0, 1212);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 59
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
      try { 
        dSCompiler0.pow((double[]) null, 0, (-944.54614), (double[]) null, 169);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[3];
      dSCompiler0.exp(doubleArray0, 0, doubleArray0, 0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      int int0 = dSCompiler0.getSize();
      assertEquals(1, int0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 0;
      int int1 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 2);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2;
      // Undeclared exception!
      try { 
        dSCompiler0.acosh(doubleArray0, 0, doubleArray0, 65);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double double0 = 1728.62;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-170.277);
      doubleArray0[1] = 1728.62;
      int int1 = (-1864);
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1728.62;
      doubleArray1[2] = (double) (-1864);
      doubleArray1[3] = 0.0;
      double double1 = 3.282424571107068E-189;
      doubleArray1[4] = 3.282424571107068E-189;
      double[] doubleArray2 = null;
      int int2 = 112;
      // Undeclared exception!
      try { 
        dSCompiler0.tan((double[]) null, 112, doubleArray1, (-165));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      double double0 = 4539.1;
      doubleArray0[3] = 4539.1;
      doubleArray0[4] = (double) 0;
      double[] doubleArray1 = new double[25];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = 0.0;
      doubleArray1[0] = 0.0;
      doubleArray1[16] = (double) 0;
      dSCompiler0.tanh(doubleArray1, 0, doubleArray1, 0);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(25, doubleArray1.length);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      int int1 = 45;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler1);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getFreeParameters());
      
      dSCompiler0.checkCompatibility(dSCompiler1);
      assertSame(dSCompiler0, dSCompiler1);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getFreeParameters());
      
      // Undeclared exception!
      try { 
        dSCompiler1.atan(doubleArray1, 45, doubleArray0, 45);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 45
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-170.277);
      doubleArray0[1] = 1728.62;
      double[] doubleArray1 = null;
      dSCompiler0.acosh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 1728.62, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler1);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      
      // Undeclared exception!
      try { 
        dSCompiler1.divide(doubleArray0, 62, (double[]) null, 121, doubleArray0, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 2480);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(2480, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      // Undeclared exception!
      try { 
        dSCompiler0.log((double[]) null, 2480, (double[]) null, 676);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[3];
      dSCompiler0.exp(doubleArray0, 0, doubleArray0, 0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      dSCompiler0.pow(doubleArray0, 2, 2.0, doubleArray0, 0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 2);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 2;
      doubleArray1[4] = (double) 0;
      dSCompiler0.asin(doubleArray0, 2, doubleArray1, 2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 2.0, 0.0, 2.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      doubleArray0[0] = (double) 2;
      // Undeclared exception!
      try { 
        dSCompiler0.log(doubleArray0, 237, doubleArray0, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 237
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      int int1 = 2;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.exp((double[]) null, 29, (double[]) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(69, 0);
      assertNotNull(dSCompiler0);
      assertEquals(69, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 69;
      intArray0[2] = 69;
      intArray0[3] = 69;
      intArray0[4] = 69;
      intArray0[5] = 69;
      intArray0[6] = 359;
      intArray0[7] = (-2153);
      try { 
        dSCompiler0.getPartialDerivativeIndex(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 69
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      int int1 = 165;
      int int2 = 727;
      double[] doubleArray0 = new double[5];
      // Undeclared exception!
      try { 
        dSCompiler0.rootN(doubleArray0, 727, 0, doubleArray0, (-2239));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 727
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      int int2 = (-68);
      int int3 = 2;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 2;
      doubleArray0[1] = (double) (-68);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 0;
      int int4 = 6;
      int int5 = 1;
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.atan2(doubleArray0, 6, doubleArray0, 1, (double[]) null, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 2);
      assertNotNull(dSCompiler0);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2;
      dSCompiler0.pow(doubleArray0, 3, 497.8, doubleArray0, 2);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[3] = (double) 2;
      doubleArray0[2] = (double) 2;
      dSCompiler0.log10(doubleArray0, 2, doubleArray0, 2);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.3010299956639812, 2.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try { 
        dSCompiler0.log(doubleArray0, 0, doubleArray0, 237);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 237
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double double0 = 1728.62;
      double[] doubleArray0 = new double[6];
      double double1 = (-170.277);
      doubleArray0[0] = (-170.277);
      doubleArray0[1] = 1728.62;
      double[] doubleArray1 = null;
      dSCompiler0.acosh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 1728.62, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler1);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getFreeParameters());
      
      int int1 = 4199;
      int int2 = (-950);
      // Undeclared exception!
      try { 
        dSCompiler0.pow((double[]) null, (-950), (double[]) null, 0, doubleArray0, 4199);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (-405.84758037945);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (double) 0;
      dSCompiler0.expm1(doubleArray0, 0, doubleArray1, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-405.84758037945), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 2043, doubleArray0, 2043, doubleArray0, 2043);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2043
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 0;
      int int1 = 930;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 930);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(930, dSCompiler0.getOrder());
      
      double[] doubleArray0 = null;
      int int2 = 1997;
      // Undeclared exception!
      try { 
        dSCompiler0.multiply((double[]) null, 1997, (double[]) null, 1997, (double[]) null, 930);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-170.277);
      doubleArray0[1] = 1728.62;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (-1269.87);
      doubleArray1[2] = 1728.62;
      doubleArray1[3] = 1728.62;
      doubleArray1[4] = (-170.277);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 1728.62;
      double double0 = dSCompiler0.taylor(doubleArray0, 0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals((-170.277), double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {(-170.277), 1728.62, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1269.87), 1728.62, 1728.62, (-170.277), 0.0, 1728.62}, doubleArray1, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination(3.141592653589793, doubleArray1, 132, 8.443084996839363E-245, doubleArray1, (-3215), (double) 132, doubleArray1, 1909, doubleArray1, 132);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 132
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[3] = (double) 2;
      doubleArray0[2] = (double) 50;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(2, 2);
      assertNotNull(dSCompiler1);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(2, dSCompiler1.getOrder());
      assertEquals(6, dSCompiler1.getSize());
      assertEquals(2, dSCompiler1.getFreeParameters());
      
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (-170.277);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      dSCompiler0.sinh(doubleArray0, 0, doubleArray0, 0);
      assertNotSame(dSCompiler0, dSCompiler1);
      assertFalse(dSCompiler0.equals((Object)dSCompiler1));
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 50.0, 2.0, (-170.277), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 1128, 0.0, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1128
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      int int0 = 68;
      // Undeclared exception!
      try { 
        dSCompiler0.getPartialDerivativeIndex((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-170.277);
      doubleArray0[1] = 1728.62;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1728.62;
      doubleArray1[1] = (-170.277);
      doubleArray1[2] = (double) (-1864);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 3.282424571107068E-189;
      dSCompiler0.tanh(doubleArray0, 0, doubleArray1, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {(-170.277), 1728.62, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-170.277), (-1864.0), 0.0, 3.282424571107068E-189}, doubleArray1, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 2);
      assertNotNull(dSCompiler0);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2;
      dSCompiler0.log10(doubleArray0, 2, doubleArray0, 0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = 4539.1;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 0;
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-1300);
      int int1 = 68;
      intArray0[3] = 68;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      try { 
        dSCompiler0.getPartialDerivativeIndex(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 0
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.log1p(doubleArray0, 0, doubleArray0, (-1854));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1854
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1728.62;
      doubleArray0[1] = 1728.62;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int0 = 3;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(3, 3);
      assertNotNull(dSCompiler1);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(20, dSCompiler1.getSize());
      assertEquals(3, dSCompiler1.getOrder());
      assertEquals(3, dSCompiler1.getFreeParameters());
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-170.277);
      doubleArray2[1] = 1728.62;
      // Undeclared exception!
      try { 
        dSCompiler0.getPartialDerivativeOrders(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[3] = (double) 2;
      doubleArray0[2] = (double) 50;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (-170.277);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      dSCompiler0.sinh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 50.0, 2.0, (-170.277), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      // Undeclared exception!
      try { 
        dSCompiler0.log1p(doubleArray0, 1128, doubleArray0, (-1688));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1128
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1728.62;
      double double0 = dSCompiler0.taylor(doubleArray0, 0, doubleArray0);
      assertEquals(1728.62, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1728.62, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      doubleArray0[1] = 1106.9;
      doubleArray0[2] = 1728.62;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 1728.62;
      doubleArray0[5] = (double) 0;
      dSCompiler0.asinh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {8.14822594553268, 1106.9, 1728.62, 0.0, 1728.62, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      int int1 = (-708);
      int int2 = (-2225);
      // Undeclared exception!
      try { 
        dSCompiler0.acos(doubleArray0, (-2225), doubleArray0, (-2225));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2225
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[6];
      int int0 = 49;
      // Undeclared exception!
      try { 
        dSCompiler0.log1p(doubleArray0, 4700, doubleArray0, 49);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4700
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 4539.1;
      doubleArray0[4] = (double) 0;
      double[] doubleArray1 = new double[25];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = 0.0;
      doubleArray1[0] = 0.0;
      doubleArray1[16] = (double) 0;
      doubleArray1[3] = 4539.1;
      int int1 = 1150;
      // Undeclared exception!
      try { 
        dSCompiler0.atan2(doubleArray0, 0, doubleArray1, 0, doubleArray0, 1150);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1150
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = 0;
      int int1 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 2);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = null;
      int int2 = (-1804);
      int int3 = 1;
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination((-497.70207036), (double[]) null, (-1621), (-2393.3500217464), (double[]) null, 2, (-4444.291575229), (double[]) null, (-1804), (double[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      int int1 = 165;
      // Undeclared exception!
      try { 
        dSCompiler0.tan(doubleArray0, 0, doubleArray0, 165);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 165
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(2, 0);
      assertNotNull(dSCompiler1);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(2, dSCompiler1.getFreeParameters());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      
      // Undeclared exception!
      try { 
        dSCompiler0.tanh((double[]) null, 2, (double[]) null, (-2651));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 2);
      assertNotNull(dSCompiler0);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.acosh((double[]) null, 2, (double[]) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 2);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      // Undeclared exception!
      try { 
        dSCompiler0.tan(doubleArray0, 10, doubleArray0, 41);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-170.277);
      doubleArray0[1] = 1728.62;
      double[] doubleArray1 = null;
      dSCompiler0.acosh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 1728.62, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      int int0 = 327;
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.subtract(doubleArray0, 0, (double[]) null, 0, (double[]) null, 26);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = 5;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 5);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(5, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.asinh(doubleArray0, 0, doubleArray0, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = 0;
      int int1 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 2);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[4];
      // Undeclared exception!
      try { 
        dSCompiler0.atan(doubleArray0, 3, doubleArray0, 55);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 55
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      int int2 = 0;
      int int3 = 1306;
      // Undeclared exception!
      try { 
        dSCompiler0.compose(doubleArray0, 828, doubleArray0, doubleArray0, 828);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 828
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      double double0 = 2398.0;
      doubleArray0[3] = 2398.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      dSCompiler0.remainder(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 2398.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = 4539.1;
      doubleArray1[4] = (double) 0;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      int int1 = 507;
      // Undeclared exception!
      DSCompiler.getCompiler(507, 507);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 2833;
      // Undeclared exception!
      DSCompiler.getCompiler(2833, 2833);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      dSCompiler0.cos(doubleArray0, 0, doubleArray0, 0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      int int1 = 839;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        dSCompiler0.compose(doubleArray1, 1130, doubleArray1, doubleArray1, 1130);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      int int1 = 0;
      // Undeclared exception!
      try { 
        dSCompiler0.rootN(doubleArray0, 0, 605, doubleArray0, 38);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 38
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      double double0 = 4539.1;
      doubleArray0[3] = 4539.1;
      doubleArray0[4] = (double) 0;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination(0.0, doubleArray0, (-998), (-1929.7770043919), doubleArray0, 0, 0.0, doubleArray0, (-998), 0.0, doubleArray1, 0, doubleArray1, 871);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -998
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.remainder(doubleArray0, 567, doubleArray0, 567, doubleArray0, 1396);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 567
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      double double0 = 4539.1;
      doubleArray0[3] = 4539.1;
      doubleArray0[4] = (double) 0;
      double[] doubleArray1 = new double[25];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = 0.0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 507);
      assertNotNull(dSCompiler1);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(507, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      
      try { 
        dSCompiler0.checkCompatibility(dSCompiler1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 507
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[5];
      dSCompiler0.divide(doubleArray0, 4, doubleArray0, (-423), doubleArray0, 4);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 930);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(930, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 930;
      doubleArray0[2] = (double) 0;
      int int1 = 839;
      int int2 = 0;
      // Undeclared exception!
      dSCompiler0.atanh(doubleArray0, 0, doubleArray0, 839);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertNotNull(dSCompiler0);
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[6];
      // Undeclared exception!
      try { 
        dSCompiler0.sin(doubleArray0, 2, doubleArray0, (-87));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -87
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      double double0 = 0.0;
      dSCompiler0.pow(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double double1 = 0.0;
      int int2 = 60;
      dSCompiler0.rootN(doubleArray0, 0, 60, doubleArray0, 0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      int int3 = 1430;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) (-3069);
      doubleArray1[3] = 0.0;
      int int4 = (-2887);
      // Undeclared exception!
      try { 
        dSCompiler0.taylor(doubleArray0, (-2887), doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2887
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = 0;
      int int1 = 930;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 930);
      assertNotNull(dSCompiler0);
      assertEquals(930, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.expm1((double[]) null, 297, doubleArray0, 297);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 2);
      assertNotNull(dSCompiler0);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1130;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 1130;
      doubleArray1[3] = (double) 1130;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 1130;
      doubleArray1[6] = (double) 1130;
      doubleArray1[8] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.log(doubleArray1, 2, doubleArray1, 61);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 61
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) (-68);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.asin(doubleArray0, 0, doubleArray0, (-1766));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1766
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 499;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 499;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = 1228.282694367;
      doubleArray1[5] = (double) 499;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (-1.0);
      doubleArray1[8] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.log10(doubleArray0, 499, doubleArray1, (-1851));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 499
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 4539.1;
      doubleArray0[4] = (double) 0;
      double[] doubleArray1 = new double[25];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) 0;
      doubleArray1[3] = 4539.1;
      doubleArray0[2] = 4539.1;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler1);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      
      // Undeclared exception!
      try { 
        dSCompiler1.pow(doubleArray1, 0, 2317, doubleArray1, 2317);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2317
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertNotNull(dSCompiler0);
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      int int1 = 4162;
      int int2 = (-1413);
      // Undeclared exception!
      try { 
        dSCompiler0.divide(doubleArray0, 2, doubleArray0, 4162, doubleArray0, (-1413));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = 0;
      int int1 = 930;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 930);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(930, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 930;
      doubleArray0[2] = (double) 0;
      int int2 = 0;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(2829, 0);
      assertNotNull(dSCompiler1);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(2829, dSCompiler1.getFreeParameters());
      
      // Undeclared exception!
      try { 
        dSCompiler1.acos(doubleArray0, 930, doubleArray0, 930);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 930
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 4539.1;
      doubleArray0[4] = (double) 0;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = 0.0;
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = 4539.1;
      doubleArray1[4] = 4539.1;
      doubleArray1[5] = (double) 0;
      int int1 = 2650;
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.acosh(doubleArray1, 2650, (double[]) null, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2650
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      int int1 = 1202;
      int int2 = 9;
      // Undeclared exception!
      try { 
        dSCompiler0.multiply(doubleArray0, 1202, doubleArray0, 0, doubleArray0, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1202
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1728.62;
      doubleArray0[1] = 1728.62;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(3, 3);
      assertNotNull(dSCompiler1);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(3, dSCompiler1.getFreeParameters());
      assertEquals(3, dSCompiler1.getOrder());
      assertEquals(20, dSCompiler1.getSize());
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-170.277);
      doubleArray2[1] = 1728.62;
      doubleArray2[2] = 1728.62;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 1728.62;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = 1114.2;
      doubleArray2[7] = (double) (-3069);
      // Undeclared exception!
      try { 
        dSCompiler1.atan2(doubleArray1, (-3069), doubleArray2, (-1), doubleArray0, 1416);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = 0;
      int int1 = 930;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 930);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(930, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 930;
      doubleArray0[2] = (double) 0;
      int int2 = 0;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(2829, 0);
      assertNotNull(dSCompiler1);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(2829, dSCompiler1.getFreeParameters());
      
      int int3 = (-1599);
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1.7650169203544438E51;
      doubleArray2[1] = (double) (-1599);
      doubleArray2[2] = (double) 930;
      doubleArray2[3] = (double) 930;
      doubleArray2[4] = (double) 930;
      doubleArray2[5] = 682.8217446;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = 682.8217446;
      doubleArray3[2] = 1342.4142;
      // Undeclared exception!
      try { 
        dSCompiler1.sinh(doubleArray2, (-1599), doubleArray3, (-1599));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1599
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 2);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 2;
      dSCompiler0.log(doubleArray0, 0, doubleArray0, 2);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, 2.0, 0.6931471805599453, 2.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.subtract(doubleArray0, 862, doubleArray0, 406, doubleArray0, 406);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 862
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double double0 = 1728.62;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-170.277);
      doubleArray0[1] = 1728.62;
      doubleArray0[2] = 0.0;
      int int1 = 3;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) (-1);
      doubleArray1[2] = (double) 3;
      doubleArray1[3] = 0.0;
      // Undeclared exception!
      try { 
        dSCompiler0.cos(doubleArray0, (-1), doubleArray1, 424);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = 0;
      int int1 = 930;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 930);
      assertNotNull(dSCompiler0);
      assertEquals(930, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 930;
      doubleArray0[2] = (double) 0;
      int int2 = 0;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int3 = 2829;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(2829, 0);
      assertNotNull(dSCompiler1);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(2829, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler1.atan(doubleArray2, 0, doubleArray0, 2268);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2268
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1728.62;
      doubleArray0[1] = 1106.9;
      doubleArray0[2] = 1728.62;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 1728.62;
      doubleArray0[5] = (double) 0;
      dSCompiler0.asinh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {8.14822594553268, 1106.9, 1728.62, 0.0, 1728.62, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        dSCompiler0.atan(doubleArray0, (-2225), doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2225
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double double0 = 1728.62;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-170.277);
      doubleArray0[1] = 1728.62;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 527, doubleArray0, (-406), doubleArray0, (-406));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 527
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertNotNull(dSCompiler0);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      // Undeclared exception!
      try { 
        dSCompiler0.asinh(doubleArray0, 2, doubleArray0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        dSCompiler0.taylor(doubleArray0, 0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 2);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 2;
      // Undeclared exception!
      try { 
        dSCompiler0.tanh(doubleArray0, 0, doubleArray0, (-1864));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1864
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      dSCompiler0.cos(doubleArray0, 0, doubleArray0, 0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 839;
      doubleArray1[2] = (double) 839;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 839;
      // Undeclared exception!
      try { 
        dSCompiler0.atanh(doubleArray0, 839, doubleArray1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 839
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = 64;
      // Undeclared exception!
      DSCompiler.getCompiler(64, 64);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = 0;
      int int1 = 930;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 930);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(930, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 930;
      doubleArray0[2] = (double) 0;
      int int2 = 0;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(2829, 0);
      try { 
        dSCompiler0.checkCompatibility(dSCompiler1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2,829
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = 162;
      int int1 = 1336;
      // Undeclared exception!
      DSCompiler.getCompiler(162, 1336);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1279, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1279, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1279;
      doubleArray0[2] = (double) 1279;
      doubleArray0[3] = (double) 1279;
      doubleArray0[4] = (double) 1279;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 1279;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 1279;
      doubleArray1[4] = (double) 1279;
      doubleArray1[5] = (double) 2128;
      // Undeclared exception!
      try { 
        dSCompiler0.asin(doubleArray0, 2128, doubleArray1, 1279);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2128
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-170.277);
      doubleArray0[1] = 1728.62;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination(1728.62, doubleArray0, 0, 1114.2, doubleArray0, 0, 0.0, doubleArray0, 0, doubleArray1, (-3069));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3069
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 4539.1;
      doubleArray0[4] = (double) 0;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = 4539.1;
      doubleArray1[4] = 4539.1;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 0;
      doubleArray1[8] = (double) 0;
      dSCompiler0.pow(doubleArray0, 0, 0, doubleArray1, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 4539.1, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 4539.1, 4539.1, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.divide(doubleArray0, 0, doubleArray0, 0, doubleArray0, (-1423));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1423
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int int0 = (-807);
      // Undeclared exception!
      try { 
        DSCompiler.getCompiler((-807), (-807));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -807
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = 1244;
      // Undeclared exception!
      DSCompiler.getCompiler(1244, 1244);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      int int2 = 0;
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      double double0 = 0.0;
      double double1 = (-2.0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (-1843);
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination(2.442600707513088E-36, doubleArray0, (-1843), (double) 1, doubleArray0, 3754, doubleArray1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1843
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int int0 = 1188;
      // Undeclared exception!
      DSCompiler.getCompiler(1188, 1188);
  }
}
