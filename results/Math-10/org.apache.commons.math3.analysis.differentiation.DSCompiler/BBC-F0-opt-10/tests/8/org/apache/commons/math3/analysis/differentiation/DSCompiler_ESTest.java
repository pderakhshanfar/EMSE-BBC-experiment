/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 22:13:28 GMT 2021
 */

package org.apache.commons.math3.analysis.differentiation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.differentiation.DSCompiler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DSCompiler_ESTest extends DSCompiler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 37);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(37, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.atan(doubleArray0, 0, doubleArray1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      dSCompiler0.log10(doubleArray0, 0, doubleArray0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      dSCompiler0.atan2(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      dSCompiler0.asin(doubleArray0, 0, doubleArray0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 929;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 929);
      assertEquals(929, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[2] = (double) 929;
      int int1 = 1207;
      // Undeclared exception!
      dSCompiler0.atan(doubleArray0, 0, doubleArray0, 1207);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(20, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = 2856.0;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 3;
      doubleArray0[6] = (double) 3;
      doubleArray0[7] = (double) 3;
      doubleArray0[8] = (double) 3;
      // Undeclared exception!
      try { 
        dSCompiler0.acos(doubleArray0, 3, doubleArray0, 1268);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1268
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      int int0 = 49;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 49);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(49, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertNotNull(dSCompiler1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 49;
      doubleArray0[1] = 2334.724468197685;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      int int1 = 3;
      // Undeclared exception!
      try { 
        dSCompiler1.asinh(doubleArray0, 3, doubleArray0, (-553));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -553
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 28);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(28, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.atan((double[]) null, (-95), (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 857);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(857, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertNotNull(dSCompiler1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 857;
      // Undeclared exception!
      try { 
        dSCompiler0.compose((double[]) null, (-136), (double[]) null, (double[]) null, 1209);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.divide(doubleArray0, (-1), (double[]) null, 0, doubleArray0, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      int[] intArray0 = dSCompiler0.getPartialDerivativeOrders(0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(963, 0);
      assertEquals(963, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 28);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(28, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertNotNull(dSCompiler1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 28;
      doubleArray0[1] = 355.8461;
      doubleArray0[2] = (-3275.93000508106);
      doubleArray0[3] = (double) 28;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 963;
      doubleArray0[6] = (double) 0;
      dSCompiler1.acosh(doubleArray0, 0, doubleArray0, 0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(28, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertArrayEquals(new double[] {4.025032660551618, 355.8461, (-3275.93000508106), 28.0, 0.0, 963.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        dSCompiler1.asin(doubleArray0, (-2), doubleArray0, 28);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 1306);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(1306, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1306;
      doubleArray0[3] = (double) 1306;
      // Undeclared exception!
      dSCompiler0.tanh(doubleArray0, 0, doubleArray0, 0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      dSCompiler0.log10(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      int int1 = 794;
      // Undeclared exception!
      try { 
        dSCompiler0.atan2(doubleArray0, 0, doubleArray0, 0, doubleArray0, 794);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 794
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 0;
      int int1 = 1306;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 1306);
      assertEquals(1306, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1306;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1306;
      doubleArray0[3] = (double) 1306;
      // Undeclared exception!
      dSCompiler0.acosh(doubleArray0, 0, doubleArray0, 0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[6];
      int int1 = (-33);
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) (-33);
      doubleArray1[2] = 1.0;
      doubleArray1[3] = (double) (-33);
      doubleArray1[4] = (double) (-33);
      doubleArray1[5] = 1.0;
      doubleArray1[6] = (double) (-33);
      doubleArray1[7] = (double) 0;
      doubleArray1[8] = (double) (-33);
      dSCompiler0.linearCombination((double) 0, doubleArray0, 0, (double) (-33), doubleArray0, 0, 1.0, doubleArray0, 0, doubleArray1, 0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-33.0), 1.0, (-33.0), (-33.0), 1.0, (-33.0), 0.0, (-33.0)}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        dSCompiler0.asinh(doubleArray0, 0, doubleArray0, (-33));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -33
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.exp((double[]) null, 0, (double[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      int int1 = 3747;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 3747);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(3747, dSCompiler1.getOrder());
      assertNotNull(dSCompiler1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3747;
      doubleArray0[1] = (double) 3747;
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 3747;
      // Undeclared exception!
      dSCompiler1.acos(doubleArray0, 6, doubleArray0, (-544));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 13);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(13, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.tanh(doubleArray0, 0, doubleArray0, 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = null;
      int int1 = 2;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 2;
      double double0 = 2.5836901664733887;
      doubleArray1[2] = 2.5836901664733887;
      doubleArray1[3] = (double) 2;
      doubleArray1[4] = (double) 2;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 2;
      doubleArray1[7] = (double) 2;
      int int2 = 1;
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination((double) 0, (double[]) null, 2, (double) 0, (double[]) null, 0, (double) 0, doubleArray1, 1, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(2, 2);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(2, dSCompiler1.getFreeParameters());
      assertEquals(2, dSCompiler1.getOrder());
      assertEquals(6, dSCompiler1.getSize());
      assertNotNull(dSCompiler1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = 2.9728170818998143E-8;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 2;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = 2.9728170818998143E-8;
      doubleArray1[3] = (double) 2;
      doubleArray1[4] = 2.9728170818998143E-8;
      // Undeclared exception!
      try { 
        dSCompiler1.atanh(doubleArray0, 2, doubleArray1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(390, 0);
      assertEquals(390, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination(0.0, (double[]) null, 2, (double) 0, (double[]) null, 0, 0.5, (double[]) null, 390, 0.6233867406845093, (double[]) null, 5, (double[]) null, (-4041));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 390;
      int int1 = 4106;
      // Undeclared exception!
      DSCompiler.getCompiler(390, 4106);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      double[] doubleArray1 = null;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 970;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = 3.141592653589793;
      doubleArray2[3] = (double) 1249;
      doubleArray2[4] = (double) 970;
      // Undeclared exception!
      try { 
        dSCompiler0.atan2(doubleArray0, 970, (double[]) null, 1249, doubleArray2, (-2140));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 0;
      int int1 = 2355;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 2355);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(2355, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[5];
      double double0 = (-6.344612631552417E-136);
      doubleArray0[0] = (-6.344612631552417E-136);
      doubleArray0[2] = (double) 2355;
      // Undeclared exception!
      try { 
        dSCompiler0.atan2(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2355
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[6];
      dSCompiler0.pow(doubleArray0, 0, (double) 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      dSCompiler0.linearCombination((double) 0, doubleArray0, 0, (double) 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      dSCompiler0.cosh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      int int0 = 66;
      // Undeclared exception!
      try { 
        dSCompiler0.log10((double[]) null, 66, doubleArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 3747);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(3747, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertNotNull(dSCompiler1);
      
      dSCompiler0.checkCompatibility(dSCompiler0);
      assertFalse(dSCompiler0.equals((Object)dSCompiler1));
      assertNotSame(dSCompiler0, dSCompiler1);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      int int0 = dSCompiler0.getFreeParameters();
      assertFalse(dSCompiler0.equals((Object)dSCompiler1));
      assertEquals(0, int0);
      assertNotSame(dSCompiler0, dSCompiler1);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      // Undeclared exception!
      try { 
        dSCompiler1.rootN((double[]) null, (-424), 1194, (double[]) null, 821);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 3.141592653589793;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 0.0;
      dSCompiler0.rootN(doubleArray0, 3, 3, doubleArray0, 3);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 3.141592653589793, 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      dSCompiler0.cosh(doubleArray1, 0, doubleArray1, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray1.length);
      
      dSCompiler0.log10(doubleArray1, 0, doubleArray1, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray1.length);
      
      int int0 = dSCompiler0.getFreeParameters();
      assertEquals(0, int0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      dSCompiler0.pow(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 3.141592653589793, 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      dSCompiler0.sinh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 1997);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1997, dSCompiler1.getOrder());
      assertNotNull(dSCompiler1);
      
      try { 
        dSCompiler0.checkCompatibility(dSCompiler1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 1,997
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      dSCompiler0.sinh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(1, 1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(1, dSCompiler1.getOrder());
      assertEquals(2, dSCompiler1.getSize());
      assertEquals(1, dSCompiler1.getFreeParameters());
      assertNotNull(dSCompiler1);
      
      dSCompiler1.cos(doubleArray0, 0, doubleArray0, 1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(1, dSCompiler1.getOrder());
      assertEquals(2, dSCompiler1.getSize());
      assertEquals(1, dSCompiler1.getFreeParameters());
      assertArrayEquals(new double[] {0.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int int0 = dSCompiler0.getSize();
      assertFalse(dSCompiler0.equals((Object)dSCompiler1));
      assertEquals(1, int0);
      assertNotSame(dSCompiler0, dSCompiler1);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      // Undeclared exception!
      try { 
        dSCompiler0.atan2(doubleArray0, 1, doubleArray0, 1, doubleArray0, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 390;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(390, 0);
      assertEquals(390, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = null;
      int int2 = 1431;
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        dSCompiler0.sin((double[]) null, 13, doubleArray1, (-630));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(390, 0);
      assertEquals(390, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      dSCompiler0.add(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(390, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 0;
      int int1 = 3564;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3564);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(3564, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      int int2 = 0;
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        dSCompiler0.remainder((double[]) null, 0, (double[]) null, 775, doubleArray0, 775);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (double) 0;
      dSCompiler0.subtract(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        dSCompiler0.sinh(doubleArray0, 28, doubleArray0, 28);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 28
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (-6.344612631552417E-136);
      doubleArray1[2] = (double) 0;
      dSCompiler0.pow(doubleArray0, 0, doubleArray0, 0, doubleArray1, 0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, (-6.344612631552417E-136), 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      doubleArray0[0] = (double) 0;
      dSCompiler0.linearCombination(0.6233867406845093, doubleArray0, 0, 0.0, doubleArray0, 0, (double) 0, doubleArray0, 0, (-1562.502143), doubleArray0, 0, doubleArray0, 0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1240.687601);
      doubleArray0[1] = (double) 0;
      double double0 = dSCompiler0.taylor(doubleArray0, 0, doubleArray0);
      assertEquals((-1240.687601), double0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {(-1240.687601), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(398, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(398, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(1, 1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(1, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getOrder());
      assertEquals(2, dSCompiler1.getSize());
      assertNotNull(dSCompiler1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (-6.344612631552417E-136);
      doubleArray0[8] = (double) 0;
      dSCompiler1.remainder(doubleArray0, 2, doubleArray0, 0, doubleArray0, 1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(1, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getOrder());
      assertEquals(2, dSCompiler1.getSize());
      assertArrayEquals(new double[] {0.0, Double.NaN, Double.NaN, 1.0, 0.0, 1.0, 0.0, (-6.344612631552417E-136), 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        dSCompiler1.tan(doubleArray0, 1, doubleArray0, 269);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 269
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = null;
      int int1 = 2038;
      // Undeclared exception!
      try { 
        dSCompiler0.acos((double[]) null, 2038, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      dSCompiler0.multiply(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = new double[19];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2669;
      doubleArray1[1] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.taylor(doubleArray1, (-5), doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      int int1 = 0;
      int int2 = 2662;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 2662;
      doubleArray1[5] = (double) 2662;
      doubleArray1[6] = (double) 0;
      int int3 = 11;
      // Undeclared exception!
      try { 
        dSCompiler0.multiply(doubleArray1, 0, doubleArray0, 0, doubleArray1, 11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(542, 0);
      assertEquals(542, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      int[] intArray0 = dSCompiler0.getPartialDerivativeOrders(0);
      assertEquals(542, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(intArray0);
      assertEquals(542, intArray0.length);
      
      int int0 = dSCompiler0.getFreeParameters();
      assertEquals(542, int0);
      assertEquals(542, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2872, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(2872, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 2872;
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (double) (-1);
      // Undeclared exception!
      try { 
        dSCompiler0.add((double[]) null, (-1), doubleArray0, (-1), (double[]) null, 2872);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[6];
      dSCompiler0.pow(doubleArray0, 0, (double) 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        dSCompiler0.log((double[]) null, (-2461), (double[]) null, 97);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      dSCompiler0.acosh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double0 = dSCompiler0.taylor(doubleArray0, 0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.log1p(doubleArray0, 0, (double[]) null, 1097);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = null;
      int int0 = (-1547);
      // Undeclared exception!
      try { 
        dSCompiler0.cosh((double[]) null, (-1547), (double[]) null, (-1547));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      dSCompiler0.linearCombination(0.6233867406845093, doubleArray0, 0, 0.0, doubleArray0, 0, (double) 0, doubleArray0, 0, (-1562.502143), doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      dSCompiler0.log10(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      dSCompiler0.pow(doubleArray0, 3, (-131), doubleArray0, 3);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 0;
      double double0 = dSCompiler0.taylor(doubleArray0, 0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int int0 = dSCompiler0.getOrder();
      assertEquals(0, int0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      dSCompiler0.log10(doubleArray0, 0, doubleArray0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      dSCompiler0.pow(doubleArray0, 0, 0, doubleArray0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 3610);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(3610, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertNotNull(dSCompiler1);
      
      DSCompiler dSCompiler2 = DSCompiler.getCompiler(0, 3610);
      assertFalse(dSCompiler2.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler2, dSCompiler0);
      assertSame(dSCompiler2, dSCompiler1);
      assertEquals(0, dSCompiler2.getFreeParameters());
      assertEquals(3610, dSCompiler2.getOrder());
      assertEquals(1, dSCompiler2.getSize());
      assertNotNull(dSCompiler2);
      
      // Undeclared exception!
      try { 
        dSCompiler0.pow((double[]) null, 0, (-52), (double[]) null, 3610);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[6];
      dSCompiler0.pow(doubleArray0, 0, (double) 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = null;
      int int1 = 599;
      // Undeclared exception!
      try { 
        dSCompiler0.asinh(doubleArray0, 0, (double[]) null, 599);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 3610);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(3610, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertNotNull(dSCompiler1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-592);
      doubleArray0[1] = (double) 2735;
      doubleArray0[2] = 4.2046187038837375E-8;
      doubleArray0[3] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler1.pow(doubleArray0, 0, 2735, doubleArray0, (-592));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -592
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      dSCompiler0.sinh(doubleArray0, 3, doubleArray0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertArrayEquals(new double[] {0.0, 3.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(3, 3);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(3, dSCompiler1.getFreeParameters());
      assertEquals(20, dSCompiler1.getSize());
      assertEquals(3, dSCompiler1.getOrder());
      assertNotNull(dSCompiler1);
      
      try { 
        dSCompiler1.checkCompatibility(dSCompiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 23;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 23;
      doubleArray0[4] = 2.551170809294396E-181;
      doubleArray0[5] = (double) 23;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (double) 0;
      dSCompiler0.cosh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertArrayEquals(new double[] {4.872401723124452E9, 0.0, 0.0, 23.0, 2.551170809294396E-181, 23.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      int int0 = 808;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 808, (double) 808, doubleArray0, 23);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 808
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 3623;
      int int1 = (-1157);
      // Undeclared exception!
      try { 
        DSCompiler.getCompiler(3623, (-1157));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 390;
      int int1 = 0;
      int int2 = 2355;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 2355);
      assertEquals(2355, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[5];
      double double0 = (-6.344612631552417E-136);
      dSCompiler0.exp(doubleArray0, 0, doubleArray0, 3);
      assertEquals(2355, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (-6.344612631552417E-136);
      doubleArray1[2] = (double) 2355;
      doubleArray1[3] = (double) 3;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 2355;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 2355;
      doubleArray1[8] = (double) 2355;
      // Undeclared exception!
      try { 
        dSCompiler0.acos(doubleArray0, 2355, doubleArray1, 390);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2355
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      int int0 = 2;
      double[] doubleArray1 = null;
      int int1 = 2742;
      // Undeclared exception!
      try { 
        dSCompiler0.sinh((double[]) null, 2, doubleArray0, 2742);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = 0;
      int int1 = 3548;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3548);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(3548, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      int int2 = (-17);
      int int3 = 0;
      double[] doubleArray0 = new double[5];
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(508, 0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(508, dSCompiler1.getFreeParameters());
      assertNotNull(dSCompiler1);
      
      DSCompiler dSCompiler2 = DSCompiler.getCompiler(0, 3548);
      assertFalse(dSCompiler2.equals((Object)dSCompiler1));
      assertSame(dSCompiler2, dSCompiler0);
      assertNotSame(dSCompiler2, dSCompiler1);
      assertEquals(0, dSCompiler2.getFreeParameters());
      assertEquals(3548, dSCompiler2.getOrder());
      assertNotNull(dSCompiler2);
      
      // Undeclared exception!
      try { 
        dSCompiler2.cosh(doubleArray0, 2, doubleArray0, 508);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 508
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(390, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(390, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.taylor((double[]) null, 390, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      int int0 = 2735;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, (-592), 0, doubleArray0, 2052);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2052
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 390;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 2355);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(2355, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-6.344612631552417E-136);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 2355;
      doubleArray0[3] = (double) 2355;
      doubleArray0[4] = (double) 390;
      // Undeclared exception!
      try { 
        dSCompiler0.atan2(doubleArray0, 2, doubleArray0, 0, doubleArray0, 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2355
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      dSCompiler0.log10(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      doubleArray0[0] = (double) 0;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      dSCompiler0.atanh(doubleArray1, 0, doubleArray0, 2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 7);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(7, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertNotNull(dSCompiler1);
      
      // Undeclared exception!
      try { 
        dSCompiler1.tan(doubleArray0, 2, doubleArray0, 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      dSCompiler0.asinh(doubleArray0, 1, doubleArray0, 1);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 2;
      dSCompiler0.remainder(doubleArray1, 2, doubleArray0, 2, doubleArray0, 2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 2.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      doubleArray1[6] = (double) 60;
      int int0 = (-327);
      // Undeclared exception!
      try { 
        dSCompiler0.add(doubleArray1, (-327), doubleArray0, 60, doubleArray1, 156);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -327
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        dSCompiler0.cosh(doubleArray0, 0, doubleArray1, 23);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 23
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(398, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(398, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 398;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 398;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.compose(doubleArray0, 2, doubleArray0, doubleArray0, 697);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 697
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = 4;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(4, 4);
      assertEquals(4, dSCompiler0.getFreeParameters());
      assertEquals(4, dSCompiler0.getOrder());
      assertEquals(70, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      int int1 = dSCompiler0.getOrder();
      assertTrue(int1 == int0);
      assertEquals(4, int1);
      assertEquals(4, dSCompiler0.getFreeParameters());
      assertEquals(4, dSCompiler0.getOrder());
      assertEquals(70, dSCompiler0.getSize());
      
      int[] intArray0 = new int[4];
      intArray0[0] = 4;
      intArray0[1] = 4;
      intArray0[2] = 4;
      intArray0[3] = 4;
      try { 
        dSCompiler0.getPartialDerivativeIndex(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 is larger than the maximum (4)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = null;
      int int1 = 2;
      // Undeclared exception!
      try { 
        dSCompiler0.tan((double[]) null, 2, (double[]) null, (-2342));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      dSCompiler0.tan(doubleArray0, 1, doubleArray0, 1);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      dSCompiler0.atan(doubleArray0, 0, doubleArray0, 0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      doubleArray1[0] = 0.0;
      // Undeclared exception!
      try { 
        dSCompiler0.sin(doubleArray0, 0, doubleArray1, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 3610);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(3610, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertNotNull(dSCompiler1);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        dSCompiler1.tanh((double[]) null, (-1452), (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(390, 0);
      assertEquals(390, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      int int0 = 2662;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.multiply((double[]) null, 0, (double[]) null, 0, (double[]) null, (-2435));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 3610);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(3610, dSCompiler1.getOrder());
      assertNotNull(dSCompiler1);
      
      DSCompiler dSCompiler2 = DSCompiler.getCompiler(0, 3610);
      assertFalse(dSCompiler2.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler2, dSCompiler0);
      assertSame(dSCompiler2, dSCompiler1);
      assertEquals(0, dSCompiler2.getFreeParameters());
      assertEquals(3610, dSCompiler2.getOrder());
      assertEquals(1, dSCompiler2.getSize());
      assertNotNull(dSCompiler2);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 3610;
      doubleArray0[2] = (double) 3610;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler2.log10(doubleArray0, 0, doubleArray0, 1400);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1400
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[6];
      dSCompiler0.pow(doubleArray0, 0, (double) 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      dSCompiler0.tanh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertArrayEquals(new double[] {0.7615941559557649, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        dSCompiler0.tan(doubleArray0, 0, doubleArray0, (-2461));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2461
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 51);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(51, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 36);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(36, dSCompiler1.getOrder());
      assertNotNull(dSCompiler1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 51;
      doubleArray0[1] = (double) 51;
      doubleArray0[2] = (double) 36;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 36;
      doubleArray0[5] = (double) 36;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 997;
      doubleArray0[8] = (double) 36;
      dSCompiler1.asin(doubleArray0, 0, doubleArray0, 0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(36, dSCompiler1.getOrder());
      assertArrayEquals(new double[] {Double.NaN, 51.0, 36.0, 0.0, 36.0, 36.0, 0.0, 997.0, 36.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DSCompiler.getCompiler((-875), 2354);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3564);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(3564, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      int int0 = 0;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-2509.96);
      doubleArray1[2] = (double) 0;
      dSCompiler0.rootN(doubleArray0, 0, 31, doubleArray1, 0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(3564, dSCompiler0.getOrder());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-2509.96), 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      int int1 = 1177;
      // Undeclared exception!
      dSCompiler0.asin(doubleArray0, 0, doubleArray1, 1177);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 3610);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(3610, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertNotNull(dSCompiler1);
      
      DSCompiler dSCompiler2 = DSCompiler.getCompiler(0, 3610);
      assertFalse(dSCompiler2.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler2, dSCompiler0);
      assertSame(dSCompiler2, dSCompiler1);
      assertEquals(1, dSCompiler2.getSize());
      assertEquals(3610, dSCompiler2.getOrder());
      assertEquals(0, dSCompiler2.getFreeParameters());
      assertNotNull(dSCompiler2);
      
      dSCompiler1.checkCompatibility(dSCompiler2);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertFalse(dSCompiler2.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertSame(dSCompiler1, dSCompiler2);
      assertNotSame(dSCompiler2, dSCompiler0);
      assertSame(dSCompiler2, dSCompiler1);
      assertEquals(3610, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(1, dSCompiler2.getSize());
      assertEquals(3610, dSCompiler2.getOrder());
      assertEquals(0, dSCompiler2.getFreeParameters());
      
      try { 
        dSCompiler1.checkCompatibility(dSCompiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3,610 != 0
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3564);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(3564, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(3564, 0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(3564, dSCompiler1.getFreeParameters());
      assertNotNull(dSCompiler1);
      
      // Undeclared exception!
      try { 
        dSCompiler0.cos(doubleArray0, 0, doubleArray0, 3564);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3564
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(997, 0);
      assertEquals(997, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[0];
      int int1 = dSCompiler0.getFreeParameters();
      assertFalse(int1 == int0);
      assertEquals(997, int1);
      assertEquals(997, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      // Undeclared exception!
      try { 
        dSCompiler0.log(doubleArray0, (-1), doubleArray0, 997);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = 0.0;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, (-1115), (-2193), doubleArray0, (-1115));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1115
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(390, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(390, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) 390;
      dSCompiler0.asin(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(390, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {0.0, 390.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 390);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(390, dSCompiler1.getOrder());
      assertNotNull(dSCompiler1);
      
      dSCompiler1.log(doubleArray0, 0, doubleArray0, 0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(390, dSCompiler1.getOrder());
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 390.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 0;
      int int1 = 3564;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3564);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(3564, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.cosh(doubleArray0, (-1426), doubleArray0, 819);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1426
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      dSCompiler0.log10(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      doubleArray0[0] = (double) 0;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      dSCompiler0.atanh(doubleArray1, 0, doubleArray0, 2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      int int0 = (-28);
      // Undeclared exception!
      try { 
        dSCompiler0.atan(doubleArray0, 219, doubleArray1, (-2955));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 219
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(35, 1);
      assertEquals(35, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(36, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 35;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 35;
      doubleArray0[7] = (double) 1;
      // Undeclared exception!
      try { 
        dSCompiler0.log(doubleArray0, 0, doubleArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      dSCompiler0.sinh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      doubleArray0[2] = (double) 0;
      int int0 = dSCompiler0.getSize();
      assertEquals(1, int0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      // Undeclared exception!
      try { 
        dSCompiler0.getPartialDerivativeOrders(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(6, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = 384.251;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      dSCompiler0.pow(doubleArray0, 2, (double) 2, doubleArray0, 2);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(6, dSCompiler0.getSize());
      assertArrayEquals(new double[] {2.0, 2.0, 147648.83100099998, 1537.004, 4726299.596031999, 1537.004, 4724762.5920319995, 4724762.5920319995, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      dSCompiler0.sin(doubleArray0, 2, doubleArray0, 2);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(6, dSCompiler0.getSize());
      assertArrayEquals(new double[] {2.0, 2.0, 0.2565659967779903, 1485.5554258601398, 4001885.7545018787, 1485.5554258601398, 4000400.1990760197, 4000400.1990760197, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      dSCompiler0.compose(doubleArray0, 2, doubleArray0, doubleArray0, 2);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(6, dSCompiler0.getSize());
      assertArrayEquals(new double[] {2.0, 2.0, 2.0, 2971.1108517202797, 2.565877089542377E7, 2971.1108517202797, 2.565579978457205E7, 2.565579978457205E7, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        dSCompiler0.add(doubleArray0, 0, doubleArray0, 2, doubleArray0, 467);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 467
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = 0;
      int int1 = 3564;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3564);
      assertEquals(3564, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3564;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 46.99620132416118;
      doubleArray0[3] = (double) 3564;
      doubleArray0[4] = (-7.875434494414498E-9);
      doubleArray0[5] = (double) 0;
      // Undeclared exception!
      dSCompiler0.atanh(doubleArray0, 2, doubleArray0, 0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      dSCompiler0.acos(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {1.5707963267948966}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int int0 = 1232;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1232;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertNotNull(dSCompiler1);
      
      int int1 = (-1221);
      // Undeclared exception!
      try { 
        dSCompiler1.getPartialDerivativeIndex((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      int int1 = 2;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.atan(doubleArray1, 0, doubleArray0, 2620);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2620
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      dSCompiler0.log10(doubleArray0, 0, doubleArray0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      doubleArray0[0] = (double) 0;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 2;
      dSCompiler0.sin(doubleArray0, 0, doubleArray1, 7);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 2.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      int int0 = dSCompiler0.getFreeParameters();
      assertEquals(0, int0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray1, (-1643), 686, doubleArray0, 66);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1643
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      int int1 = (-1);
      int int2 = 0;
      double[] doubleArray0 = new double[7];
      double double0 = 1.0;
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.tanh(doubleArray0, 0, doubleArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      dSCompiler0.atan2(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int int1 = (-1365);
      // Undeclared exception!
      try { 
        dSCompiler0.atanh(doubleArray0, 3570, doubleArray0, (-1365));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3570
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      int int1 = 0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-1331.316);
      doubleArray0[4] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.asinh(doubleArray0, 1566, doubleArray0, (-570));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1566
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      int int1 = 2;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      int[] intArray0 = new int[0];
      int int2 = dSCompiler0.getPartialDerivativeIndex(intArray0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      // Undeclared exception!
      try { 
        dSCompiler0.atan(doubleArray1, 782, doubleArray0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 782
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 0;
      int int1 = 3564;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3564);
      assertEquals(3564, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      // Undeclared exception!
      try { 
        dSCompiler0.cos((double[]) null, 2048, (double[]) null, (-202));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      int int1 = 60;
      int int2 = 2;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 2;
      dSCompiler0.remainder(doubleArray1, 2, doubleArray0, 2, doubleArray0, 2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 2.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      doubleArray1[6] = (double) 60;
      doubleArray1[7] = (double) 2;
      // Undeclared exception!
      try { 
        dSCompiler0.rootN(doubleArray1, 60, 0, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 60
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertNotNull(dSCompiler1);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        dSCompiler1.pow((double[]) null, 0, (-5.619010749352923E-8), (double[]) null, 3315);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3564);
      assertEquals(3564, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 3564;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 3564;
      doubleArray0[4] = (double) 0;
      dSCompiler0.log1p(doubleArray0, 0, doubleArray0, 0);
      assertEquals(3564, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertArrayEquals(new double[] {0.0, 3564.0, 0.0, 3564.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (-41.58141580488738);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) 3564;
      int int0 = dSCompiler0.getFreeParameters();
      assertEquals(0, int0);
      assertEquals(3564, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
      try { 
        dSCompiler0.subtract(doubleArray1, 479, doubleArray0, (-1371), doubleArray1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3564
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 3564;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3564);
      assertEquals(3564, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      int int1 = 7;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1680.0446260101671;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.sin(doubleArray1, 1, doubleArray1, (-4606));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4606
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(390, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(390, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) 390;
      dSCompiler0.asin(doubleArray0, 0, doubleArray0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(390, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertArrayEquals(new double[] {0.0, 390.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 390);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(390, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertNotNull(dSCompiler1);
      
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        dSCompiler1.linearCombination(0.0, (double[]) null, (-2799), 1063.02950599, doubleArray0, 0, (double[]) null, 3029);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3564);
      //  // Unstable assertion: assertEquals(3564, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.taylor(doubleArray0, 0, doubleArray0);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 0;
      int int1 = 3564;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3564);
      assertEquals(3564, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      int int2 = 0;
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 3564;
      // Undeclared exception!
      dSCompiler0.asinh(doubleArray0, 0, doubleArray0, 1619);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(1, 1);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(2, dSCompiler1.getSize());
      assertEquals(1, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getFreeParameters());
      assertNotNull(dSCompiler1);
      
      int int1 = (-1243);
      // Undeclared exception!
      try { 
        dSCompiler0.taylor(doubleArray0, 919, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = 2977;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2977, 0);
      assertEquals(2977, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2977;
      doubleArray0[1] = (double) 2977;
      int int2 = (-1);
      // Undeclared exception!
      try { 
        dSCompiler0.checkCompatibility((DSCompiler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1242, 0);
      assertEquals(1242, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 390;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 390;
      doubleArray0[4] = (double) 1242;
      doubleArray0[5] = (double) 0;
      double double0 = dSCompiler0.taylor(doubleArray0, 3, doubleArray0);
      assertEquals(390.0, double0, 0.01);
      assertEquals(1242, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {0.0, 390.0, 0.0, 390.0, 1242.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = 390;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(390, 0);
      assertEquals(390, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 390;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 390;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 390;
      doubleArray0[6] = (double) 0;
      double double0 = dSCompiler0.taylor(doubleArray0, 0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(390, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertArrayEquals(new double[] {0.0, 390.0, 0.0, 390.0, 0.0, 390.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      int int2 = (-2799);
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 390;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) (-2799);
      // Undeclared exception!
      try { 
        dSCompiler0.exp(doubleArray0, (-1924), doubleArray1, (-2799));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1924
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2256.7158);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.log(doubleArray0, 0, doubleArray0, (-3162));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3162
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(390, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(390, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) 390;
      dSCompiler0.asin(doubleArray0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(390, dSCompiler0.getFreeParameters());
      assertArrayEquals(new double[] {0.0, 390.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 390);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(390, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertNotNull(dSCompiler1);
      
      int int0 = (-2799);
      int int1 = 2574;
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        DSCompiler.getCompiler((-2799), 2574);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 0, doubleArray0, 0, doubleArray0, (-327));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -327
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      int int1 = 60;
      int int2 = 2;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 60;
      // Undeclared exception!
      try { 
        dSCompiler0.rootN(doubleArray0, 60, 2, doubleArray0, 60);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 60
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 2;
      dSCompiler0.sin(doubleArray0, 0, doubleArray1, 7);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 2.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      int int0 = dSCompiler0.getFreeParameters();
      assertEquals(0, int0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray1, (-1643), 686, doubleArray0, 66);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1643
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      int int1 = (-3120);
      int int2 = 1;
      dSCompiler0.expm1(doubleArray0, 1, doubleArray0, 1);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int int3 = 4996;
      // Undeclared exception!
      try { 
        DSCompiler.getCompiler((-3120), 4996);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      int int0 = 60;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 2;
      dSCompiler0.remainder(doubleArray1, 2, doubleArray0, 2, doubleArray0, 2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 2.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      doubleArray1[6] = (double) 60;
      doubleArray1[7] = (double) 2;
      doubleArray1[8] = (double) 2;
      // Undeclared exception!
      try { 
        dSCompiler0.atanh(doubleArray1, 0, doubleArray0, 24);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 24
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.asin((double[]) null, 0, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      int int1 = 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 468);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(468, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertNotNull(dSCompiler1);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 468;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (-1655.743505651676);
      doubleArray1[4] = (double) 468;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      // Undeclared exception!
      dSCompiler1.asin(doubleArray1, 0, doubleArray1, 0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1973.8086016);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      dSCompiler0.rootN(doubleArray0, 0, 205, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertArrayEquals(new double[] {0.0, 0.0, (-1973.8086016), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int1 = 60;
      int int2 = 2;
      // Undeclared exception!
      try { 
        dSCompiler0.atanh(doubleArray1, 60, doubleArray1, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 60
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        dSCompiler0.atanh((double[]) null, 2, (double[]) null, 1007);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(2, 0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(2, dSCompiler1.getFreeParameters());
      assertNotNull(dSCompiler1);
      
      int int1 = (-1052);
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      // Undeclared exception!
      try { 
        dSCompiler1.rootN(doubleArray1, (-1052), 27, doubleArray0, 27);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1052
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[9];
      int int1 = 0;
      int int2 = 0;
      int int3 = (-475);
      int int4 = 2258;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        dSCompiler0.multiply(doubleArray1, 0, doubleArray0, 2662, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      int int1 = 0;
      int int2 = 2662;
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination((double) 0, doubleArray0, 0, (double) 0, doubleArray0, 367, 4628.28433724237, doubleArray0, (-1), doubleArray0, 250);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 367
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(390, 0);
      assertEquals(390, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = (double) 0;
      doubleArray0[1] = (double) 390;
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (double) 390;
      doubleArray0[5] = (double) 390;
      doubleArray0[6] = (double) 390;
      double double0 = dSCompiler0.taylor(doubleArray0, 0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(390, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertArrayEquals(new double[] {0.0, 390.0, 0.0, 0.0, 390.0, 390.0, 390.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        dSCompiler0.sinh(doubleArray0, (-1356), doubleArray1, (-1326));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1356
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      dSCompiler0.checkCompatibility(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      int int0 = dSCompiler0.getFreeParameters();
      assertEquals(0, int0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(12, 0);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(12, dSCompiler1.getFreeParameters());
      assertNotNull(dSCompiler1);
      
      double[] doubleArray0 = new double[2];
      int int0 = dSCompiler0.getSize();
      assertFalse(dSCompiler0.equals((Object)dSCompiler1));
      assertEquals(1, int0);
      assertNotSame(dSCompiler0, dSCompiler1);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      doubleArray0[0] = (double) 12;
      doubleArray0[1] = (double) 12;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 12;
      doubleArray1[1] = (double) 12;
      doubleArray1[2] = (double) 12;
      doubleArray1[3] = 3648.8;
      doubleArray1[4] = (double) 3643;
      doubleArray1[5] = (-3346.3611518);
      // Undeclared exception!
      try { 
        dSCompiler1.divide(doubleArray0, 12, doubleArray0, 3643, doubleArray1, (-2591));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[0];
      int int1 = (-825);
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 96;
      doubleArray1[3] = (double) 96;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = 3221.0;
      doubleArray1[7] = (double) 3;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 3, doubleArray0, 96, doubleArray1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = null;
      double double0 = (-1043.8771766397456);
      int int1 = 0;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1043.8771766397456);
      doubleArray1[1] = (-181.34514);
      doubleArray1[2] = 1024.595625;
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination((-181.34514), doubleArray1, 0, 740.0817867087, doubleArray1, 24, 740.0817867087, (double[]) null, 2, 3.0, (double[]) null, 24, (double[]) null, 24);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 24
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3564);
      assertEquals(3564, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 3564;
      // Undeclared exception!
      dSCompiler0.tan(doubleArray0, 2, doubleArray0, 0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      double double0 = 384.251;
      int int1 = (-327);
      int int2 = 0;
      int int3 = (-2520);
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      int int4 = 4248;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) (-327);
      doubleArray2[2] = (double) (-327);
      doubleArray2[3] = (double) (-327);
      doubleArray2[4] = (double) (-2520);
      doubleArray2[5] = 384.251;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 202.65953312;
      doubleArray3[1] = (double) (-327);
      doubleArray3[2] = (double) (-327);
      doubleArray3[3] = (double) 4248;
      doubleArray3[4] = 384.251;
      doubleArray3[5] = (double) (-327);
      doubleArray3[6] = (double) (-327);
      // Undeclared exception!
      try { 
        dSCompiler0.expm1(doubleArray3, (-2520), doubleArray2, (-1754));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2520
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-1693.707706);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.expm1(doubleArray0, 0, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.tanh(doubleArray0, 1345, doubleArray0, 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1345
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      dSCompiler0.divide(doubleArray0, 0, doubleArray0, 3540, doubleArray0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertArrayEquals(new double[] {Double.NaN, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        dSCompiler0.acos(doubleArray0, 3564, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3564
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = 0;
      int int1 = 3564;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3564);
      assertEquals(3564, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      int int2 = 1;
      int int3 = 966;
      // Undeclared exception!
      try { 
        dSCompiler0.divide(doubleArray0, 1, doubleArray0, 1, doubleArray0, 966);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3564
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = null;
      int int1 = 3;
      // Undeclared exception!
      try { 
        dSCompiler0.acosh((double[]) null, 3, (double[]) null, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[5];
      int int0 = 11;
      // Undeclared exception!
      try { 
        dSCompiler0.log1p(doubleArray1, 11, (double[]) null, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      int int1 = 1985;
      // Undeclared exception!
      try { 
        dSCompiler0.atan2(doubleArray0, 0, doubleArray0, 0, doubleArray0, 1985);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1985
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.acosh(doubleArray0, 0, doubleArray0, (-3082));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3082
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(12, 0);
      try { 
        dSCompiler0.checkCompatibility(dSCompiler1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 12
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[3] = (-2928.259665874);
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1028, 0);
      // Undeclared exception!
      try { 
        dSCompiler0.log10(doubleArray0, 1816, (double[]) null, (-3928));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1816
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[6];
      dSCompiler0.pow(doubleArray0, 0, (double) 0, doubleArray0, 0);
      // Undeclared exception!
      try { 
        dSCompiler0.tan(doubleArray0, 0, doubleArray0, (-2461));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2461
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = 997;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(997, 0);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 997;
      doubleArray1[1] = (double) 997;
      // Undeclared exception!
      try { 
        dSCompiler0.atan2(doubleArray0, (-1663), doubleArray0, 997, doubleArray1, 469);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 997
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        dSCompiler0.remainder(doubleArray0, (-825), doubleArray0, 0, doubleArray0, (-825));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -825
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2372, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2372;
      doubleArray0[2] = 0.0;
      // Undeclared exception!
      try { 
        dSCompiler0.sin(doubleArray0, 1957, doubleArray0, (-1115));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1957
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 1);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 0;
      try { 
        dSCompiler0.getPartialDerivativeIndex(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 0
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[5];
      // Undeclared exception!
      try { 
        dSCompiler0.asin(doubleArray1, 468, (double[]) null, 468);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 468
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.cos(doubleArray0, (-104), doubleArray0, (-104));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -104
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = 384.251;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      // Undeclared exception!
      try { 
        dSCompiler0.pow(doubleArray0, 2, (double) 2, doubleArray0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2977, 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2977;
      dSCompiler0.divide(doubleArray0, 0, doubleArray0, (-1), doubleArray0, 0);
      doubleArray0[2] = (double) 2977;
      doubleArray0[3] = (double) 2977;
      doubleArray0[4] = (double) 2977;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      dSCompiler0.cos(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {Double.NaN, 2977.0, 2977.0, 2977.0, 2977.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2977, dSCompiler0.getFreeParameters());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      dSCompiler0.log1p(doubleArray0, 0, doubleArray0, 0);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.atan(doubleArray0, (-193), doubleArray0, 606);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -193
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      dSCompiler0.acos(doubleArray0, 0, doubleArray0, 0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 1232;
      doubleArray1[1] = (double) 1232;
      // Undeclared exception!
      try { 
        dSCompiler0.divide(doubleArray0, 1232, doubleArray1, 1232, doubleArray0, 1232);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1232
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[6];
      double double0 = 0.0;
      int int1 = (-2461);
      // Undeclared exception!
      try { 
        dSCompiler0.tan(doubleArray0, 0, doubleArray0, (-2461));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2461
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.add(doubleArray0, (-327), doubleArray0, 0, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -327
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(390, 0);
      assertNotNull(dSCompiler0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 390;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 390;
      doubleArray0[4] = (double) 390;
      doubleArray0[5] = (double) 390;
      doubleArray0[6] = (double) 390;
      double double0 = dSCompiler0.taylor(doubleArray0, 0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(390, dSCompiler0.getFreeParameters());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      dSCompiler0.sin(doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = dSCompiler0.getFreeParameters();
      assertEquals(0, int0);
      assertEquals(0, dSCompiler0.getOrder());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = 433;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(433, 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 433;
      doubleArray0[1] = (double) 433;
      doubleArray0[2] = (double) 433;
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      try { 
        dSCompiler0.getPartialDerivativeIndex(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 433
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = 0;
      int int1 = 585;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 585);
      double[] doubleArray0 = new double[7];
      double double0 = 219.8690569828018;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 585;
      doubleArray1[1] = (double) 585;
      doubleArray1[2] = 219.8690569828018;
      doubleArray1[3] = 219.8690569828018;
      // Undeclared exception!
      try { 
        dSCompiler0.taylor(doubleArray0, 585, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DSCompiler.getCompiler(48, 0);
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 1384);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 48;
      // Undeclared exception!
      try { 
        dSCompiler0.log(doubleArray0, 1384, doubleArray0, 1671);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1384
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int int0 = 2409;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2409, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2409;
      doubleArray0[1] = (double) 2409;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 2409;
      doubleArray1[1] = (double) 2409;
      doubleArray1[2] = (double) 2409;
      doubleArray1[3] = (double) 0;
      // Undeclared exception!
      try { 
        dSCompiler0.atanh(doubleArray0, 888, doubleArray1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 888
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = 283;
      // Undeclared exception!
      DSCompiler.getCompiler(283, 1234);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(997, 0);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 997;
      doubleArray1[1] = (double) 997;
      doubleArray1[2] = (double) 997;
      doubleArray1[3] = (double) 997;
      // Undeclared exception!
      try { 
        dSCompiler0.log(doubleArray0, 997, doubleArray1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 997
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int int0 = 0;
      int int1 = (-2678);
      // Undeclared exception!
      try { 
        DSCompiler.getCompiler(0, (-2678));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3564);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 3564;
      // Undeclared exception!
      try { 
        dSCompiler0.linearCombination(0.0, doubleArray0, 0, 0.0, doubleArray0, 3742, doubleArray0, 3564);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3564
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = 1899;
      // Undeclared exception!
      DSCompiler.getCompiler(1899, 1899);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int int0 = 0;
      int int1 = (-768);
      // Undeclared exception!
      try { 
        DSCompiler.getCompiler(0, (-768));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
