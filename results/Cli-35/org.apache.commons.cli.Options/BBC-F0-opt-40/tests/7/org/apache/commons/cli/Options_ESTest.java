/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 17:28:22 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.List;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Options_ESTest extends Options_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Options options0 = new Options();
      List<Option> list0 = options0.helpOptions();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("c", "d<igc#.Eo--b)", false, "f43rX5VRkC[0gY+@r");
      List<Option> list0 = options1.helpOptions();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("5454", "[ Options: [ short java.util.LinkedHashMap@0000000003 ] [ long {} ]", true, "[ Options: [ short java.util.LinkedHashMap@0000000003 ] [ long {} ]");
      OptionGroup optionGroup0 = options0.getOptionGroup(option0);
      assertNull(optionGroup0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      Option option0 = new Option("5454", "[ Options: [ short java.util.LinkedHashMap@0000000003 ] [ long {} ]", true, "[ Options: [ short java.util.LinkedHashMap@0000000003 ] [ long {} ]");
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      OptionGroup optionGroup1 = options0.getOptionGroup(option0);
      assertNotNull(optionGroup1);
      assertFalse(option0.isRequired());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("c", "d<igc#.Eo--b)", false, "f43rX5VRkC[0gY+@r");
      Option option0 = options1.getOption("c");
      option0.setRequired(true);
      Option option1 = options1.getOption("d<igc#.Eo--b)");
      assertFalse(option1.hasArg());
      assertNotNull(option1);
      assertEquals("f43rX5VRkC[0gY+@r", option1.getDescription());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("d", "[ Options: [ short ", true, "[ Options: [ short ");
      Options options1 = options0.addOption(option0);
      option0.setValueSeparator('u');
      Option option1 = options1.getOption("[ Options: [ short ");
      assertFalse(option1.hasArgName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("c", "d<igc#.Eo--b)", false, "f43rX5VRkC[0gY+@r");
      Option option0 = options1.getOption("c");
      option0.setOptionalArg(true);
      Option option1 = options1.getOption("c");
      assertEquals("d<igc#.Eo--b)", option1.getLongOpt());
      assertEquals((-1), option1.getArgs());
      assertEquals("f43rX5VRkC[0gY+@r", option1.getDescription());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("c", "d<igc#.Eo--b)", false, "f43rX5VRkC[0gY+@r");
      Option option0 = options1.getOption("c");
      option0.setArgName("[ Options: [ short java.util.LinkedHashMap@0000000002 ] [ long {} ]");
      Option option1 = options1.getOption("c");
      assertEquals("d<igc#.Eo--b)", option1.getLongOpt());
      assertEquals("f43rX5VRkC[0gY+@r", option1.getDescription());
      assertFalse(option1.hasArg());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("c", "d<igc#.Eo--b)", false, "f43rX5VRkC[0gY+@r");
      Option option0 = options1.getOption("c");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs(0);
      Option option1 = options1.getOption("d<igc#.Eo--b)");
      assertEquals("f43rX5VRkC[0gY+@r", option1.getDescription());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("", "");
      option0.setArgs(1406);
      Options options1 = options0.addOption(option0);
      Option option1 = options1.getOption("");
      assertEquals("", option1.getOpt());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("", ",F*XTdj!t_2E7l");
      assertSame(options0, options1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption("", "54", false, "");
      // Undeclared exception!
      try { 
        options0.getMatchingOptions((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption(".e;pNNmC#6", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '.e;pNNmC#6' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption(".`", ".`", true, ".`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '.`' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption("c", "d<igc#.Eo--b)", false, "f43rX5VRkC[0gY+@r");
      boolean boolean0 = options0.hasShortOption("c");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Options options0 = new Options();
      boolean boolean0 = options0.hasShortOption("[ Options: [ short java.util.LinkedHashMap@0000000003 ] [ long {} ]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption("c", "d<igc#.Eo--b)", false, "f43rX5VRkC[0gY+@r");
      boolean boolean0 = options0.hasLongOption("d<igc#.Eo--b)");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Options options0 = new Options();
      boolean boolean0 = options0.hasLongOption("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("c", "d<igc#.Eo--b)", false, "f43rX5VRkC[0gY+@r");
      boolean boolean0 = options1.hasOption("d<igc#.Eo--b)");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("c", "d<igc#.Eo--b)", false, "f43rX5VRkC[0gY+@r");
      boolean boolean0 = options1.hasOption("c");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Options options0 = new Options();
      boolean boolean0 = options0.hasOption("qW1pR*w2lO");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption("c", "d<igc#.Eo--b)", false, "f43rX5VRkC[0gY+@r");
      List<String> list0 = options0.getMatchingOptions("c");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("c", "d<igc#.Eo--b)", false, "f43rX5VRkC[0gY+@r");
      List<String> list0 = options1.getMatchingOptions("d<igc#.Eo--b)");
      assertTrue(list0.contains("d<igc#.Eo--b)"));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("c", "d<igc#.Eo--b)", false, "f43rX5VRkC[0gY+@r");
      Option option0 = options1.getOption("c");
      assertNotNull(option0);
      
      option0.setRequired(true);
      Options options2 = options1.addOption(option0);
      options2.addOption(option0);
      assertEquals((-1), option0.getArgs());
      assertEquals("f43rX5VRkC[0gY+@r", option0.getDescription());
      assertEquals("d<igc#.Eo--b)", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("5454", "[ Options: [ short java.util.LinkedHashMap@0000000003 ] [ long {} ]", true, "[ Options: [ short java.util.LinkedHashMap@0000000003 ] [ long {} ]");
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      OptionGroup optionGroup1 = options0.getOptionGroup(option0);
      assertFalse(option0.isRequired());
      assertNotNull(optionGroup1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Options options0 = new Options();
      Collection<OptionGroup> collection0 = options0.getOptionGroups();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = options0.getOption("qW1pR*w2lO");
      // Undeclared exception!
      try { 
        options0.getOptionGroup(option0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Options options0 = new Options();
      String string0 = options0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Options options0 = new Options();
      List list0 = options0.getRequiredOptions();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Options options0 = new Options();
      Collection<Option> collection0 = options0.getOptions();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("[ Options: [ short java.util.LinkedHashMap@0000000003 ] [ long {} ]", "qW1pR*w2lO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[ Options: [ short java.util.LinkedHashMap@0000000003 ] [ long {} ]' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("E04", true, "54e");
      assertSame(options0, options1);
  }
}
