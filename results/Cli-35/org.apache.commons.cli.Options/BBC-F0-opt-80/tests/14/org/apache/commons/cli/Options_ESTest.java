/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 01:04:02 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.List;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Options_ESTest extends Options_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Options options0 = new Options();
      List<Option> list0 = options0.helpOptions();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("sk", false, "Y?7TK??Hv.5l5)0jm");
      Options options1 = options0.addOption(option0);
      List<Option> list0 = options1.helpOptions();
      assertTrue(list0.contains(option0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("sk", false, "Y?7TK??Hv.5l5)0jm");
      OptionGroup optionGroup0 = options0.getOptionGroup(option0);
      assertNull(optionGroup0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option((String) null, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(true);
      options1.getOptionGroup(option0);
      assertFalse(option0.isRequired());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option((String) null, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOptionGroup(option0);
      assertFalse(option0.isRequired());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("", "[ Options: [ short java.util.LinkedHashMap@0000000003 ] [ long {=[ option:    [ARG] :: FBGOX :: class java.lang.String ], O&B~X%^i=[ option: FBGOX O&B~X%^i  [ARG] :: org.apache.commons.cli.Options :: class java.lang.String ]} ]", false, "[ Options: [ short java.util.LinkedHashMap@0000000003 ] [ long {=[ option:    [ARG] :: FBGOX :: class java.lang.String ], O&B~X%^i=[ option: FBGOX O&B~X%^i  [ARG] :: org.apache.commons.cli.Options :: class java.lang.String ]} ]");
      options0.addOption(option0);
      option0.setRequired(true);
      Option option1 = options0.getOption("");
      assertFalse(option1.hasArgs());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("sk", false, "Y?7TK??Hv.5l5)0jm");
      Options options1 = options0.addOption(option0);
      option0.setValueSeparator('{');
      Option option1 = options1.getOption("sk");
      assertSame(option0, option1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("", "", false, "");
      option0.setOptionalArg(true);
      options0.addOption(option0);
      Option option1 = options0.getOption("");
      assertEquals((-1), option1.getArgs());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("", "");
      options0.addOption(option0);
      option0.setArgs(8);
      Option option1 = options0.getOption("");
      assertFalse(option1.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option((String) null, "[+ZI8QuOyd=", true, "{");
      option0.setArgName("J#|ln");
      Options options1 = options0.addOption(option0);
      Option option1 = options1.getOption("[+ZI8QuOyd=");
      assertTrue(option1.hasArg());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("", "");
      options0.addOption(option0);
      option0.setArgs(0);
      Option option1 = options0.getOption("");
      assertFalse(option1.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption("7", "m\"*`)#HyE$M0", true, " ]");
      Option option0 = options0.getOption("m\"*`)#HyE$M0");
      assertNotNull(option0);
      assertEquals(" ]", option0.getDescription());
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("", "", true, "");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        options1.getMatchingOptions((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("F+RQ", false, "F+RQ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'F+RQ' contains an illegal character : '+'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("O&B~X%^i", "", true, " ]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'O&B~X%^i' contains an illegal character : '&'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("[ Options: [short java.util.LinkedHashMap@0000000003 ] [ long {=[ option:    [ARG] : FBGOX :: class java.lang.String ], O&B~X%^i=[ option: FBGOX O&B~X%^i  [ARG] :: org.apache.commons.cli.Options :: class java.lang.String ]} ]", " ]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[ Options: [short java.util.LinkedHashMap@0000000003 ] [ long {=[ option:    [ARG] : FBGOX :: class java.lang.String ], O&B~X%^i=[ option: FBGOX O&B~X%^i  [ARG] :: org.apache.commons.cli.Options :: class java.lang.String ]} ]' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("sk", false, "Y?7TK??Hv.5l5)0jm");
      Options options1 = options0.addOption(option0);
      boolean boolean0 = options1.hasShortOption("sk");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Options options0 = new Options();
      boolean boolean0 = options0.hasShortOption("sk");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("", "[ Options: [short java.util.LinkedHashMap@0000000003 ] [ long {=[ option:    [ARG] : FBGOX :: class java.lang.String ], O&B~X%^i=[ option: FBGOX O&B~X%^i  [ARG] :: org.apache.commons.cli.Options :: class java.lang.String ]} ]", true, "[ Options: [short java.util.LinkedHashMap@0000000003 ] [ long {=[ option:    [ARG] : FBGOX :: class java.lang.String ], O&B~X%^i=[ option: FBGOX O&B~X%^i  [ARG] :: org.apache.commons.cli.Options :: class java.lang.String ]} ]");
      options0.addOption(option0);
      boolean boolean0 = options0.hasLongOption("[ Options: [short java.util.LinkedHashMap@0000000003 ] [ long {=[ option:    [ARG] : FBGOX :: class java.lang.String ], O&B~X%^i=[ option: FBGOX O&B~X%^i  [ARG] :: org.apache.commons.cli.Options :: class java.lang.String ]} ]");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Options options0 = new Options();
      boolean boolean0 = options0.hasLongOption("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("", "", false, "Oh%!b");
      options0.addOption(option0);
      boolean boolean0 = options0.hasOption("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Options options0 = new Options();
      boolean boolean0 = options0.hasOption("sk");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("", "[ Options: [ short java.util.LinkedHashMap@0000000003 ] [ long {=[ option:    [ARG] :: FBGOX :: class java.lang.String ], O&B~X%^i=[ option: FBGOX O&B~X%^i  [ARG] :: org.apache.commons.cli.Options :: class java.lang.String ]} ]", false, "[ Options: [ short java.util.LinkedHashMap@0000000003 ] [ long {=[ option:    [ARG] :: FBGOX :: class java.lang.String ], O&B~X%^i=[ option: FBGOX O&B~X%^i  [ARG] :: org.apache.commons.cli.Options :: class java.lang.String ]} ]");
      options0.addOption(option0);
      List<String> list0 = options0.getMatchingOptions("[ Options: [ short java.util.LinkedHashMap@0000000003 ] [ long {=[ option:    [ARG] :: FBGOX :: class java.lang.String ], O&B~X%^i=[ option: FBGOX O&B~X%^i  [ARG] :: org.apache.commons.cli.Options :: class java.lang.String ]} ]");
      assertTrue(list0.contains("[ Options: [ short java.util.LinkedHashMap@0000000003 ] [ long {=[ option:    [ARG] :: FBGOX :: class java.lang.String ], O&B~X%^i=[ option: FBGOX O&B~X%^i  [ARG] :: org.apache.commons.cli.Options :: class java.lang.String ]} ]"));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("", "[ Options: [short java.util.LinkedHashMap@0000000003 ] [ long {=[ option:    [ARG] : FBGOX :: class java.lang.String ], O&B~X%^i=[ option: FBGOX O&B~X%^i  [ARG] :: org.apache.commons.cli.Options :: class java.lang.String ]} ]", true, "[ Options: [short java.util.LinkedHashMap@0000000003 ] [ long {=[ option:    [ARG] : FBGOX :: class java.lang.String ], O&B~X%^i=[ option: FBGOX O&B~X%^i  [ARG] :: org.apache.commons.cli.Options :: class java.lang.String ]} ]");
      Options options1 = options0.addOption(option0);
      List<String> list0 = options1.getMatchingOptions("[ Options: [ short ");
      assertFalse(list0.contains("[ Options: [short java.util.LinkedHashMap@0000000003 ] [ long {=[ option:    [ARG] : FBGOX :: class java.lang.String ], O&B~X%^i=[ option: FBGOX O&B~X%^i  [ARG] :: org.apache.commons.cli.Options :: class java.lang.String ]} ]"));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("", "[ Options: [short java.util.LinkedHashMap@0000000003 ] [ long {=[ option:    [ARG] : FBGOX :: class java.lang.String ], O&B~X%^i=[ option: FBGOX O&B~X%^i  [ARG] :: org.apache.commons.cli.Options :: class java.lang.String ]} ]", true, "[ Options: [short java.util.LinkedHashMap@0000000003 ] [ long {=[ option:    [ARG] : FBGOX :: class java.lang.String ], O&B~X%^i=[ option: FBGOX O&B~X%^i  [ARG] :: org.apache.commons.cli.Options :: class java.lang.String ]} ]");
      option0.setRequired(true);
      options0.addOption(option0);
      Options options1 = options0.addOption(option0);
      assertSame(options1, options0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("", "wK", true, "");
      boolean boolean0 = options1.hasOption("wK");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup0);
      assertSame(options0, options1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Options options0 = new Options();
      Collection<OptionGroup> collection0 = options0.getOptionGroups();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = options0.getOption("@*j$#$~~Uc7P");
      // Undeclared exception!
      try { 
        options0.getOptionGroup(option0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Options options0 = new Options();
      String string0 = options0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Options options0 = new Options();
      List list0 = options0.getRequiredOptions();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Options options0 = new Options();
      Collection<Option> collection0 = options0.getOptions();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("", "NS<vm-l*J.QQ3%d");
      assertSame(options0, options1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("6qt4", true, "");
      assertSame(options0, options1);
  }
}
