/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 02:35:16 GMT 2021
 */

package org.apache.commons.jxpath.ri.model.jdom;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jdom.Attribute;
import org.jdom.CDATA;
import org.jdom.Comment;
import org.jdom.Content;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.ProcessingInstruction;
import org.jdom.Text;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JDOMNodePointer_ESTest extends JDOMNodePointer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Element element0 = new Element("V", "V", "V");
      Text text0 = new Text("6\"mrJNp:'It2Xxvme");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) element0);
      Locale locale0 = jXPathContext0.getLocale();
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(text0, locale0);
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      String string0 = jDOMNodePointer1.asPath();
      assertEquals("/text()[1]/V:V[1]", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Namespace namespace0 = Namespace.getNamespace("&quot;");
      Element element0 = new Element("mDl", namespace0);
      Locale locale0 = Locale.GERMANY;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "oT(;5v");
      QName qName0 = jDOMNodePointer0.getName();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      boolean boolean0 = jDOMNodePointer0.testNode((NodeTest) nodeNameTest0);
      assertFalse(boolean0);
      assertEquals("mDl", nodeNameTest0.toString());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      Namespace namespace0 = Namespace.getNamespace("orgWjdom.output.NamespaceCtack");
      Element element0 = new Element("orgWjdom.output.NamespaceCtack", namespace0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      Element element1 = new Element("orgWjdom.output.NamespaceCtack", namespace0);
      jDOMNodePointer0.setValue(element1);
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Comment comment0 = new Comment("");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(comment0, locale0);
      boolean boolean0 = jDOMNodePointer0.isLanguage("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      Element element0 = new Element("org.apache.commons.jxpath.util.BasicTypeConverter", "Comment data cannot start with a hyphen.");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      boolean boolean0 = jDOMNodePointer0.isLanguage("org.apache.commons.jxpath.util.BasicTypeConverter");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      Element element0 = new Element("org.apache.commons.jxpath.util.BasicTypeConverter", "Comment data cannot start with a hyphen.");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      String string0 = jDOMNodePointer0.getNamespaceURI();
      assertEquals("Comment data cannot start with a hyphen.", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, (Object) null);
      NamespaceResolver namespaceResolver0 = jDOMNodePointer0.getNamespaceResolver();
      namespaceResolver0.seal();
      NamespaceResolver namespaceResolver1 = jDOMNodePointer0.getNamespaceResolver();
      assertTrue(namespaceResolver1.isSealed());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, (Locale) null, "'~.kl*.");
      Object object0 = jDOMNodePointer0.getImmediateNode();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0, "processing-instruction");
      Object object0 = jDOMNodePointer0.getBaseValue();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Object object0 = new Object();
      Locale locale0 = Locale.CANADA;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(object0, locale0, "\" is not legal for JDOM/XML Processing Instructions: ");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      NodeIterator nodeIterator0 = jDOMNodePointer0.childIterator(nodeTypeTest0, false, jDOMNodePointer0);
      assertEquals(0, nodeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Element element0 = new Element("g", "g", "g");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, (Locale) null);
      QName qName0 = new QName("g", (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Cannot remove root JDOM node");
      // Undeclared exception!
      try { 
        jDOMNodePointer0.testNode((NodeTest) nodeNameTest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.NodeNameTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      QName qName0 = new QName("m");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      CDATA cDATA0 = new CDATA((String) null);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, cDATA0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue(variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: m
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      Element element0 = new Element("org.apache.commns.jxpath.ri.compiler.Constant");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      Document document0 = new Document((Element) null);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue(document0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1233));
      Locale locale0 = Locale.FRANCE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeTypeTest0, locale0, "MHs,]nzfH^fMu=5L@\"");
      CDATA cDATA0 = new CDATA("http://www.w3.org/XML/1998/namespace");
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue(cDATA0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.jxpath.ri.compiler.NodeTypeTest cannot be cast to org.jdom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Element element0 = new Element("org.apache.commons.jxpat.utl.BsicTypeConverter", "org.apache.commons.jxpat.utl.BsicTypeConverter", "org.apache.commons.jxpat.utl.BsicTypeConverter");
      Document document0 = new Document(element0);
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      document0.setContent((Collection) linkedList0);
      Locale locale0 = new Locale("org.apache.commons.jxpat.utl.BsicTypeConverter", "org.apache.commons.jxpat.utl.BsicTypeConverter", "org.apache.commons.jxpat.utl.BsicTypeConverter");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, locale0, "org.apache.commons.jxpat.utl.BsicTypeConverter");
      // Undeclared exception!
      try { 
        jDOMNodePointer0.namespaceIterator();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, (Locale) null, "");
      // Undeclared exception!
      try { 
        jDOMNodePointer0.getNamespaceURI((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Element element0 = new Element("orgapache.cmmons.jxpat.utl.BasicTypeConverter", "orgapache.cmmons.jxpat.utl.BasicTypeConverter", "orgapache.cmmons.jxpat.utl.BasicTypeConverter");
      // Undeclared exception!
      try { 
        JDOMNodePointer.findEnclosingAttribute(element0, "xml", (Namespace) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jdom.AttributeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("org.apache.commns.jxpah.ri.compiler.onstant", "org.apache.commns.jxpah.ri.compiler.onstant");
      Element element0 = new Element("org.apache.commns.jxpah.ri.compiler.onstant", "org.apache.commns.jxpah.ri.compiler.onstant", "org.apache.commns.jxpah.ri.compiler.onstant");
      Document document0 = new Document(element0);
      document0.addContent((Content) processingInstruction0);
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      // Undeclared exception!
      try { 
        JDOMNodePointer.findEnclosingAttribute(processingInstruction0, "http://www.w3.org/2000/xmlns/", namespace0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jdom.Document cannot be cast to org.jdom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Element element0 = new Element("ml", "ml");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, (Locale) null, "ml");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) jDOMNodePointer0);
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      QName qName0 = jDOMNodePointer0.getName();
      // Undeclared exception!
      jDOMNodePointer1.createChild(jXPathContext0, qName0, Integer.MIN_VALUE, (Object) jDOMNodePointer0.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CDATA cDATA0 = new CDATA("The entity reference\"");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      QName qName0 = new QName("", "<<unknown namespace>>");
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createChild((JXPathContext) null, qName0, 1, (Object) cDATA0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Element element0 = new Element("B", "B");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("B");
      Locale locale0 = Locale.KOREA;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstructionTest0, locale0, "B");
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) processingInstructionTest0);
      // Undeclared exception!
      jDOMNodePointer1.createChild(jXPathContext0, (QName) null, Integer.MIN_VALUE);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("Ge}");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) variablePointer0);
      variablePointer0.setIndex(2461);
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(variablePointer0, qName0, qName0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodePointer0, jXPathContext0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createChild(jXPathContext0, qName0, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'Ge}'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      Element element0 = new Element("org.apache.commons.jxpat.utl.BasicTypeConverter", "D|");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "U>n!>FRRwjW4#('");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "org.apache.commons.jxpat.utl.BasicTypeConverter");
      QName qName0 = new QName("&Kz c&$#%8N;+FJ");
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createAttribute(jXPathContext0, qName0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The name \"&Kz c&$#%8N;+FJ\" is not legal for JDOM/XML attributes: XML names cannot begin with the character \"&\".
         //
         verifyException("org.jdom.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Element element0 = new Element("ml", "ml", "ml");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "ml");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createAttribute(jXPathContext0, (QName) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      QName qName0 = new QName("", "");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, (Object) null);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.compareChildNodePointers(variablePointer0, variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: :
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      QName qName0 = new QName("/processing-instruction('", "@_DKekx?S*Cf 9");
      VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, "@_DKekx?S*Cf 9");
      // Undeclared exception!
      try { 
        jDOMNodePointer0.compareChildNodePointers(variablePointer0, variablePointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<Attribute, NodeNameTest> hashMap0 = new HashMap<Attribute, NodeNameTest>();
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("em", hashMap0);
      Locale locale0 = Locale.FRANCE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0, "em");
      Document document0 = new Document((List) null);
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(document0, locale0);
      // Undeclared exception!
      try { 
        jDOMNodePointer1.compareChildNodePointers(jDOMNodePointer1, jDOMNodePointer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Comment comment0 = new Comment("&quot;");
      Locale locale0 = new Locale("&quot;", "&quot;", "O}0+{f~s?od");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(comment0, locale0);
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("O}0+{f~s?od", "-");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.compareChildNodePointers(variablePointer0, variablePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'O}0+{f~s?od:-'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      CDATA cDATA0 = new CDATA("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) cDATA0);
      Variables variables0 = jXPathContext0.getVariables();
      VariablePointer variablePointer0 = new VariablePointer(variables0, (QName) null);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.childIterator(nodeTypeTest0, true, variablePointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      Document document0 = new Document();
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, locale0);
      QName qName0 = new QName("kUVe", "[");
      Object object0 = new Object();
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, object0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("RB?(bwe!AeV%l':");
      // Undeclared exception!
      try { 
        jDOMNodePointer0.childIterator(processingInstructionTest0, true, nodePointer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Comment comment0 = new Comment("XxEHz}}{`G@JB");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) comment0);
      Variables variables0 = jXPathContext0.getVariables();
      QName qName0 = new QName((String) null, "A DocType cannot be added after the root element");
      VariablePointer variablePointer0 = new VariablePointer(variables0, qName0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, "XxEHz}}{`G@JB");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("&quot;");
      // Undeclared exception!
      try { 
        jDOMNodePointer0.childIterator(processingInstructionTest0, true, variablePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'A DocType cannot be added after the root element'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      Element element0 = new Element("org.jdom.output.NamespaceStack", namespace0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "yx");
      // Undeclared exception!
      try { 
        jDOMNodePointer0.attributeIterator((QName) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMAttributeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      Element element0 = new Element("org.apache.commons.jxpat.utl.BasicTypeConverter", "g^xAc><<i/61]0FA");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0, "g^xAc><<i/61]0FA");
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      // Undeclared exception!
      jDOMNodePointer1.asPath();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Element element0 = new Element("p", "p");
      LinkedList<CDATA> linkedList0 = new LinkedList<CDATA>();
      LinkedList<Text> linkedList1 = new LinkedList<Text>(linkedList0);
      Document document0 = new Document(linkedList1);
      Locale locale0 = new Locale("p", "p");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, locale0);
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      // Undeclared exception!
      try { 
        jDOMNodePointer1.asPath();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("V", "V");
      Element element0 = new Element("G", "java.util.Loale@0000000010");
      Document document0 = new Document();
      document0.addContent((Content) processingInstruction0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, (Locale) null, "G");
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, processingInstruction0);
      // Undeclared exception!
      try { 
        jDOMNodePointer1.asPath();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jdom.Document cannot be cast to org.jdom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      QName qName0 = new QName("org.jdom.filter.AndFilter", "org.jdom.filter.AndFilter");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) variablePointer0, (Object) null);
      String string0 = jDOMNodePointer0.asPath();
      assertEquals("$org.jdom.filter.AndFilter:org.jdom.filter.AndFilter", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("Ge}");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) variablePointer0);
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(variablePointer0, qName0, qName0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodePointer0, jXPathContext0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createChild(jXPathContext0, qName0, Integer.MIN_VALUE);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: $Ge}
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Element element0 = new Element("org.apache.commons.jxpath.util.BasicTypeConverter");
      String string0 = JDOMNodePointer.getLocalName(element0);
      assertEquals("org.apache.commons.jxpath.util.BasicTypeConverter", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Element element0 = new Element("org.apache.commons.jxpat.utl.BasicTypeConverter", "D|");
      String string0 = JDOMNodePointer.getPrefix(element0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0, "D|");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) jDOMNodePointer0, (NodeTest) processingInstructionTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      Element element0 = new Element("org.jdom.output.NamespaceStack", namespace0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "");
      QName qName0 = jDOMNodePointer0.getName();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "k8OQJzp;Zg/dz/.}Pi3");
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) element0, (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Comment comment0 = new Comment("lang");
      Locale locale0 = Locale.ROOT;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(comment0, locale0, "");
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) "http://www.w3.org/2000/xmlns/", (NodeTest) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      CDATA cDATA0 = new CDATA("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      Object object0 = jDOMNodePointer0.getValue();
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", object0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Comment comment0 = new Comment("lang");
      Locale locale0 = Locale.ROOT;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(comment0, locale0, "");
      Object object0 = jDOMNodePointer0.getValue();
      assertEquals("lang", object0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      Element element0 = new Element("org.jdom.output.NamespaceStack", namespace0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "yx");
      boolean boolean0 = jDOMNodePointer0.isLeaf();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      Element element0 = new Element("org.apache.commons.jxpath.util.BasicTypeConverter");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      String string0 = jDOMNodePointer0.getNamespaceURI("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      NodeIterator nodeIterator0 = jDOMNodePointer0.namespaceIterator();
      assertEquals(0, nodeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      Comment comment0 = new Comment("The entity refere ce\"");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(comment0, locale0);
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(comment0, locale0, "'~.kl*.");
      boolean boolean0 = jDOMNodePointer1.equals(jDOMNodePointer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstructionTest0, (Locale) null, "~~;.^");
      QName qName0 = new QName("http://www.w3.org/2000/xmlns/");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      boolean boolean0 = jDOMNodePointer0.equals(nodeNameTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, (Locale) null);
      boolean boolean0 = jDOMNodePointer0.equals(jDOMNodePointer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, (Locale) null);
      QName qName0 = jDOMNodePointer0.getName();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "oq>VM_qEY&");
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(nodeNameTest0, (Locale) null, "&&2wN:ctt;");
      boolean boolean0 = jDOMNodePointer1.equals(jDOMNodePointer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("org.apache.omns.jxpaB.r.copiler.EnsDat", "org.apache.omns.jxpaB.r.copiler.EnsDat");
      Locale locale0 = Locale.FRENCH;
      Element element0 = new Element("org.apache.omns.jxpaB.r.copiler.EnsDat", "org.apache.omns.jxpaB.r.copiler.EnsDat");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
      element0.addContent((Content) processingInstruction0);
      String string0 = jDOMNodePointer0.asPath();
      assertEquals("/processing-instruction('org.apache.omns.jxpaB.r.copiler.EnsDat')[1]", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Element element0 = new Element("L", "L", "L");
      Text text0 = new Text("L");
      Locale locale0 = Locale.US;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(text0, locale0);
      QName qName0 = jDOMNodePointer0.getName();
      Element element1 = element0.addContent((Content) text0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) element1);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createAttribute(jXPathContext0, qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot create an attribute for path /text()[1]/@null, operation is not allowed for this type of node
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(set0, (Locale) null, "Namespace prefixes cannot begin with \"xml\" in any combination of case");
      QName qName0 = new QName("[EntityRef: ", "/processing-instruction('");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "The entity reference\"");
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createAttribute(jXPathContext0, qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot create an attribute for path id('Namespace prefixes cannot begin with &quot;xml&quot; in any combination of case')/@[EntityRef: :/processing-instruction(', operation is not allowed for this type of node
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("org.apache.commons.jxpath.util.BasicTypeConverter", locale0, "Q)! [shY.Y2<rxM'dy");
      String string0 = jDOMNodePointer0.asPath();
      assertEquals("id('Q)! [shY.Y2<rxM&apos;dy')", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("org.apache.omns.jxpaB.r.copiler.EnsDat", "org.apache.omns.jxpaB.r.copiler.EnsDat");
      Locale locale0 = Locale.FRENCH;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
      String string0 = jDOMNodePointer0.asPath();
      assertEquals("/processing-instruction('org.apache.omns.jxpaB.r.copiler.EnsDat')[1]", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Element element0 = new Element("V", "V", "V");
      Text text0 = new Text("6\"mrJNp:'It2Xxvme");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) element0);
      Locale locale0 = jXPathContext0.getLocale();
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(text0, locale0);
      String string0 = jDOMNodePointer0.asPath();
      assertEquals("/text()[1]", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Element element0 = new Element("uml");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "uml");
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      String string0 = jDOMNodePointer1.asPath();
      assertEquals("id('uml')/uml[1]", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      Element element0 = new Element("org.apache.commons.jxpath.util.BasicTypeConverter", "Comment data cannot start with a hyphen.");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      String string0 = jDOMNodePointer0.asPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Comment comment0 = new Comment("");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(comment0, locale0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.remove();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot remove root JDOM node
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Element element0 = new Element("L");
      CDATA cDATA0 = new CDATA("L");
      Locale locale0 = Locale.US;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      element0.addContent((Content) cDATA0);
      jDOMNodePointer0.remove();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      Element element0 = new Element("org.jdom.output.NamespaceStack");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "Pyx");
      QName qName0 = jDOMNodePointer0.getName();
      Object object0 = new Object();
      JXPathContext jXPathContext0 = JXPathContext.newContext(object0);
      jDOMNodePointer0.createAttribute(jXPathContext0, qName0);
      jDOMNodePointer0.createAttribute(jXPathContext0, qName0);
      assertEquals("org.jdom.output.NamespaceStack", qName0.toString());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      Element element0 = new Element("org.jdom.output.NamespaceStack", namespace0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "Pyx");
      QName qName0 = jDOMNodePointer0.getName();
      Object object0 = new Object();
      JXPathContext jXPathContext0 = JXPathContext.newContext(object0);
      jDOMNodePointer0.createAttribute(jXPathContext0, qName0);
      jDOMNodePointer0.createAttribute(jXPathContext0, qName0);
      assertEquals("xml:org.jdom.output.NamespaceStack", qName0.toString());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      Element element0 = new Element("org.apache.commons.jxpat.utl.BasicTypeConverter", "D|");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "U>n!>FRRwjW4#('");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "org.apache.commons.jxpat.utl.BasicTypeConverter");
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace");
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createAttribute(jXPathContext0, qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown namespace prefix: http
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, (Locale) null, "");
      QName qName0 = jDOMNodePointer0.getName();
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createChild((JXPathContext) null, qName0, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Comment comment0 = new Comment("");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(comment0, locale0);
      String string0 = jDOMNodePointer0.getLanguage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Object object0 = new Object();
      Namespace namespace0 = Namespace.getNamespace(">=");
      String string0 = JDOMNodePointer.findEnclosingAttribute(object0, "org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest@0000000016", namespace0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Element element0 = new Element("og.apacb.commnsjxpaV.rl.copier.ostant");
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      element0.setAttribute("og.apacb.commnsjxpaV.rl.copier.ostant", "86L>ec':{:4OU", namespace0);
      String string0 = JDOMNodePointer.findEnclosingAttribute(element0, "og.apacb.commnsjxpaV.rl.copier.ostant", namespace0);
      assertNotNull(string0);
      assertEquals("86L>ec':{:4OU", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Element element0 = new Element("og.apacb.commnsjxpaV.rl.copier.ostant");
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      element0.setAttribute("og.apacb.commnsjxpaV.rl.copier.ostant", "", namespace0);
      String string0 = JDOMNodePointer.findEnclosingAttribute(element0, "og.apacb.commnsjxpaV.rl.copier.ostant", namespace0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Attribute attribute0 = new Attribute("em", "em");
      String string0 = JDOMNodePointer.getLocalName(attribute0);
      assertEquals("em", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      String string0 = JDOMNodePointer.getLocalName(processingInstructionTest0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Attribute attribute0 = new Attribute("orgapache.cmmons.jxpat.utl.BasicTypeConverter", "http://www.w3.org/XML/1998/namespace");
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      attribute0.setNamespace(namespace0);
      String string0 = JDOMNodePointer.getPrefix(attribute0);
      assertEquals("xml", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Attribute attribute0 = new Attribute("orgapache.cmmons.jxpat.utl.BasicTypeConverter", "http://www.w3.org/XML/1998/namespace");
      String string0 = JDOMNodePointer.getPrefix(attribute0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Element element0 = new Element("m", "m", "m");
      String string0 = JDOMNodePointer.getPrefix(element0);
      assertNotNull(string0);
      assertEquals("m", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      String string0 = JDOMNodePointer.getPrefix(locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("org.apache.commons.jxpath.util.BasicTypeConverter", "org.apache.commons.jxpath.util.BasicTypeConverter");
      Locale locale0 = Locale.TAIWAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      // Undeclared exception!
      try { 
        JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) processingInstruction0, (NodeTest) processingInstructionTest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      CDATA cDATA0 = new CDATA("null parameter");
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) null, (Object) cDATA0, (NodeTest) nodeTypeTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      QName qName0 = new QName("org.jdom.output.NamespaceStack", "org.jdom.output.NamespaceStack");
      Document document0 = new Document();
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, variablePointer0);
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) document0, (NodeTest) nodeTypeTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<Object, Text> hashMap0 = new HashMap<Object, Text>();
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("org.apache.commons.jxpath.util.BasicTypeConverter", hashMap0);
      Locale locale0 = Locale.TAIWAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) locale0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("f{*QAl");
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) null, (Object) processingInstructionTest0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      QName qName0 = new QName("z*dG^S=iQ%bRfMr");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, (Object) null);
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) qName0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) null, (Object) null, (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Element element0 = new Element("m", "m", "m");
      Locale locale0 = Locale.PRC;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) element0, (NodeTest) nodeTypeTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      Element element0 = new Element("org.jdom.output.NamespaceStack", namespace0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "");
      QName qName0 = jDOMNodePointer0.getName();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "k8OQJzp;Zg/dz/.}Pi3");
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) element0, (NodeTest) nodeNameTest0);
      assertEquals("org.jdom.output.NamespaceStack", nodeNameTest0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Element element0 = new Element("m");
      QName qName0 = new QName("m", "m");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "<<unknown namespace>>");
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) variablePointer0, (Object) element0, (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Element element0 = new Element("m", "m");
      QName qName0 = new QName("m");
      QName qName1 = new QName("q");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) variablePointer0, (Object) element0, (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Element element0 = new Element("p");
      QName qName0 = new QName("p", "p");
      QName qName1 = new QName("*");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) variablePointer0, (Object) element0, (NodeTest) nodeNameTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Element element0 = new Element("p");
      QName qName0 = new QName("p", "p");
      QName qName1 = new QName("p", "*");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) variablePointer0, (Object) element0, (NodeTest) nodeNameTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      QName qName0 = new QName((String) null, "");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, set0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) qName0, (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      QName qName0 = new QName("/processing-instruction('", "@_DKekx?S*Cf 9");
      VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, "@_DKekx?S*Cf 9");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(25);
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) "$LJhwt", (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("org.apache.commns.jxpath.ri.compiler.Constant", "org.apache.commns.jxpath.ri.compiler.Constant");
      Locale locale0 = Locale.TAIWAN;
      Element element0 = new Element("org.apache.commns.jxpath.ri.compiler.Constant");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      Document document0 = new Document(element0);
      Document document1 = document0.addContent((Content) processingInstruction0);
      jDOMNodePointer0.setValue(document1);
      assertEquals(1, element0.getContentSize());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      Element element0 = new Element("org.apache.commons.jxpath.util.BasicTypeConverter", "org.apache.commons.jxpath.util.BasicTypeConverter");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      jDOMNodePointer0.setValue("");
      assertFalse(jDOMNodePointer0.isContainer());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      Element element0 = new Element("org.apache.commns.jxpah.ri.compiler.onstant", "org.apache.commns.jxpah.ri.compiler.onstant", "org.apache.commns.jxpah.ri.compiler.onstant");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      jDOMNodePointer0.setValue((Object) null);
      assertTrue(jDOMNodePointer0.isRoot());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Element element0 = new Element("uml");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "uml");
      jDOMNodePointer0.setValue(locale0);
      assertEquals("zho", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<Object, Text> hashMap0 = new HashMap<Object, Text>();
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("org.apache.commons.jxpath.util.BasicTypeConverter", hashMap0);
      Locale locale0 = Locale.TAIWAN;
      Element element0 = new Element("org.apache.commons.jxpath.util.BasicTypeConverter", "org.apache.commons.jxpath.util.BasicTypeConverter");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      jDOMNodePointer0.setValue(processingInstruction0);
      assertTrue(jDOMNodePointer0.isNode());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      Element element0 = new Element("org.apache.commons.jxpat.utl.BasicTypeConverter", "UFbXP!tsbc9");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      Text text0 = new Text("7cc2gL");
      jDOMNodePointer0.setValue(text0);
      assertEquals("UFbXP!tsbc9", jDOMNodePointer0.getNamespaceURI());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CDATA cDATA0 = new CDATA(">P9P*{tY(F 2}t?");
      Locale locale0 = Locale.CANADA_FRENCH;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0, ">P9P*{tY(F 2}t?");
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CDATA cDATA0 = new CDATA("The entity reference\"");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<Object, Text> hashMap0 = new HashMap<Object, Text>();
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("org.apache.commons.jxpath.util.BasicTypeConverter", hashMap0);
      Locale locale0 = Locale.TAIWAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0, "java.util.Locale@0000000005");
      Object object0 = jDOMNodePointer0.getValue();
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, (Locale) null);
      Object object0 = jDOMNodePointer0.getValue();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      Element element0 = new Element("org.apache.commons.jxpath.util.BasicTypeConverter", "Comment data cannot start with a hyphen.");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      Comment comment0 = new Comment("http://www.w3.org/XML/1998/namespace");
      element0.addContent((Content) comment0);
      Object object0 = jDOMNodePointer0.getValue();
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      Element element0 = new Element("org.apache.commns.jxpath.ri.compiler.Constant");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      Document document0 = new Document(element0);
      jDOMNodePointer0.setValue(document0);
      jDOMNodePointer0.getValue();
      assertEquals(1, element0.getContentSize());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      Element element0 = new Element("org.apache.commons.jxpat.utl.BasicTypeConverter", "D|");
      Element element1 = element0.setText("U>n!>FRRwjW4#('");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element1, locale0, "LiMRdPzqHln@4Dn");
      Object object0 = jDOMNodePointer0.getValue();
      assertEquals("U>n!>FRRwjW4#('", object0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CDATA cDATA0 = new CDATA("Factory is not set on the JXPathContext - cannot create path: ");
      Comment comment0 = new Comment("");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(comment0, (Locale) null, "Was expecting:");
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, cDATA0);
      jDOMNodePointer1.setValue(jDOMNodePointer1);
      assertEquals("Factory is not set on the JXPathContext - cannot create path:", cDATA0.getValue());
      assertEquals("Factory is not set on the JXPathContext - cannot create path:", cDATA0.getText());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<Object, Text> hashMap0 = new HashMap<Object, Text>();
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("org.apache.commons.jxpath.util.BasicTypeConverter", hashMap0);
      Locale locale0 = Locale.TAIWAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
      QName qName0 = jDOMNodePointer0.getName();
      assertEquals("org.apache.commons.jxpath.util.BasicTypeConverter", qName0.toString());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      Element element0 = new Element("org.jdom.output.NamespaceStack", namespace0);
      Document document0 = new Document(element0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, locale0, "8|%&");
      boolean boolean0 = jDOMNodePointer0.isLeaf();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = new Document();
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, document0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.isLeaf();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      Element element0 = new Element("org.jdom.output.NamespaceStack", namespace0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "yx");
      Comment comment0 = new Comment("http://www.w3.org/2000/xmlns/");
      jDOMNodePointer0.setValue(comment0);
      boolean boolean0 = jDOMNodePointer0.isLeaf();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Element element0 = new Element("V", "V", "V");
      Text text0 = new Text("6\"mrJNp:'It2Xxvme");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) element0);
      Locale locale0 = jXPathContext0.getLocale();
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(text0, locale0);
      boolean boolean0 = jDOMNodePointer0.isLeaf();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("org.apache.omns.jxpaB.r.copiler.EnsDat", "org.apache.omns.jxpaB.r.copiler.EnsDat");
      Locale locale0 = Locale.FRENCH;
      Element element0 = new Element("org.apache.omns.jxpaB.r.copiler.EnsDat", "org.apache.omns.jxpaB.r.copiler.EnsDat");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
      Element element1 = element0.addContent((Content) processingInstruction0);
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(element1, locale0);
      QName qName0 = new QName("org.apache.omns.jxpaB.r.copiler.EnsDat");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, nodeTypeTest0);
      int int0 = jDOMNodePointer1.compareChildNodePointers(nodePointer0, jDOMNodePointer0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Element element0 = new Element("m", "m", "m");
      Element element1 = element0.addContent("]lN");
      Locale locale0 = Locale.GERMAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element1, locale0);
      QName qName0 = new QName("]lN");
      CDATA cDATA0 = new CDATA("<<unknown namespace>>");
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, cDATA0);
      int int0 = jDOMNodePointer0.compareChildNodePointers(nodePointer0, jDOMNodePointer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<Attribute, NodeNameTest> hashMap0 = new HashMap<Attribute, NodeNameTest>();
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("em", hashMap0);
      Locale locale0 = Locale.FRANCE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0, "em");
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, jDOMNodePointer0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.compareChildNodePointers(jDOMNodePointer1, jDOMNodePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JXPath internal error: compareChildNodes called for [ProcessingInstruction: <?em?>]
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Attribute attribute0 = new Attribute("orgapache.cmmons.jxpat.utl.BasicTypeConverter", "orgapache.cmmons.jxpat.utl.BasicTypeConverter");
      Text text0 = new Text("&quot;");
      Locale locale0 = Locale.JAPAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(text0, locale0);
      QName qName0 = new QName("http://www.w3.org/2000/xmlns/");
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, "Factory is not 1et on the JXPathContext - cannot create path: ");
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(attribute0, locale0, "<<unknown namespace>>");
      int int0 = jDOMNodePointer0.compareChildNodePointers(nodePointer0, jDOMNodePointer1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      Document document0 = new Document();
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, locale0);
      QName qName0 = new QName("kUVe", "[");
      Object object0 = new Object();
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, object0);
      int int0 = jDOMNodePointer0.compareChildNodePointers(nodePointer0, nodePointer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Attribute attribute0 = new Attribute("ke", "ke");
      Locale locale0 = new Locale("Filter won't allow add of ", "Filter won't allow add of ");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(attribute0, locale0);
      QName qName0 = new QName("ke", "http://www.w3.org/XML/1998/namespace");
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, jDOMNodePointer0);
      int int0 = jDOMNodePointer0.compareChildNodePointers(jDOMNodePointer0, nodePointer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      Element element0 = new Element("org.apache.commons.jxpath.util.BasicTypeConverter", "org.apache.commons.jxpath.util.BasicTypeConverter");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      String string0 = jDOMNodePointer0.getNamespaceURI("xDp-81k]MK");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      QName qName0 = new QName("e*2EcCTzu.", "");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, "");
      String string0 = jDOMNodePointer0.getNamespaceURI("java.util.Locale@0000000005");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = new Document();
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, document0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.getNamespaceURI("<<unknown namespace>>");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeTypeTest0, locale0, "\u0005+7");
      String string0 = jDOMNodePointer0.getNamespaceURI("xml");
      assertEquals("http://www.w3.org/XML/1998/namespace", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      Element element0 = new Element("org.apache.commons.jxpat.utl.BasicTypeConverter", "org.apache.commons.jxpat.utl.BasicTypeConverter", "org.apache.commons.jxpat.utl.BasicTypeConverter");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "org.apache.commons.jxpat.utl.BasicTypeConverter");
      QName qName0 = jDOMNodePointer0.getName();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) element0);
      jDOMNodePointer0.createAttribute(jXPathContext0, qName0);
      assertEquals("org.apache.commons.jxpat.utl.BasicTypeConverter:org.apache.commons.jxpat.utl.BasicTypeConverter", qName0.toString());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      QName qName0 = new QName("e*2EcCTzu.", "");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, "");
      String string0 = jDOMNodePointer0.getNamespaceURI();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, (Locale) null, "ml");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) jDOMNodePointer0);
      QName qName0 = jDOMNodePointer0.getName();
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createChild(jXPathContext0, qName0, Integer.MIN_VALUE, (Object) jDOMNodePointer0.WHOLE_COLLECTION);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: id('ml')
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      jDOMNodePointer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Object object0 = new Object();
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(object0, (Locale) null, "r?q$E]Wh");
      QName qName0 = new QName("o* :/");
      NodeIterator nodeIterator0 = jDOMNodePointer0.attributeIterator(qName0);
      assertEquals(0, nodeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CDATA cDATA0 = new CDATA("$k[%x4_TjR+");
      Locale locale0 = Locale.ROOT;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0, "l~,-1e");
      CDATA cDATA1 = (CDATA)jDOMNodePointer0.getBaseValue();
      assertEquals("$k[%x4_TjR+", cDATA1.getValue());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      QName qName0 = new QName("e*2EcCTzu.", "");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, "");
      // Undeclared exception!
      try { 
        jDOMNodePointer0.childIterator(processingInstructionTest0, false, variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: e*2EcCTzu.:
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Comment comment0 = new Comment("");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(comment0, (Locale) null, "Was expecting:");
      boolean boolean0 = jDOMNodePointer0.testNode((NodeTest) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, (Locale) null);
      int int0 = jDOMNodePointer0.getLength();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      QName qName0 = new QName("e*2EcCTzu.", "");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, "");
      Object object0 = jDOMNodePointer0.getImmediateNode();
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, (Locale) null, "");
      // Undeclared exception!
      try { 
        jDOMNodePointer0.isLanguage("uhA;\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Element element0 = new Element("uml");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "uml");
      NodePointer nodePointer0 = jDOMNodePointer0.namespacePointer("[_~K,J7M8Oc8");
      assertTrue(nodePointer0.isNode());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      Element element0 = new Element("org.apache.commons.jxpath.util.BasicTypeConverter");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      boolean boolean0 = jDOMNodePointer0.isCollection();
      assertFalse(boolean0);
  }
}
