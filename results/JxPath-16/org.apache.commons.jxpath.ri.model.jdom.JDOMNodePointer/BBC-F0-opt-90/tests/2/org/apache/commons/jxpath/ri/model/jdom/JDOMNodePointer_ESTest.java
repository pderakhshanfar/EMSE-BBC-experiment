/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 07:33:20 GMT 2021
 */

package org.apache.commons.jxpath.ri.model.jdom;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.jdom.JDOMAttributePointer;
import org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jdom.Attribute;
import org.jdom.CDATA;
import org.jdom.Comment;
import org.jdom.Content;
import org.jdom.DocType;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.ProcessingInstruction;
import org.jdom.Text;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JDOMNodePointer_ESTest extends JDOMNodePointer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Element element0 = new Element("P", "P", "P");
      assertEquals(0, element0.getContentSize());
      assertEquals("P", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("P", element0.getNamespaceURI());
      assertEquals("P", element0.getNamespacePrefix());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals(0, element0.getContentSize());
      assertEquals("P", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("P", element0.getNamespaceURI());
      assertEquals("P", element0.getNamespacePrefix());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("P", jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals(0, element0.getContentSize());
      assertEquals("P", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("P", element0.getNamespaceURI());
      assertEquals("P", element0.getNamespacePrefix());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("P", jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals("P", jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(jDOMNodePointer1, element0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals(0, element0.getContentSize());
      assertEquals("P", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("P", element0.getNamespaceURI());
      assertEquals("P", element0.getNamespacePrefix());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("P", jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals("P", jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals("P", jDOMNodePointer2.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(jDOMNodePointer2.isContainer());
      assertFalse(jDOMNodePointer2.isRoot());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer2);
      
      String string0 = jDOMNodePointer2.toString();
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals(0, element0.getContentSize());
      assertEquals("P", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("P", element0.getNamespaceURI());
      assertEquals("P", element0.getNamespacePrefix());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("P", jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals("P", jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals("P", jDOMNodePointer2.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(jDOMNodePointer2.isContainer());
      assertFalse(jDOMNodePointer2.isRoot());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertEquals("/P:P[1]/P:P[1]", string0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      assertNotNull(namespace0);
      
      Element element0 = new Element("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0);
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getName());
      assertNotNull(element0);
      
      List list0 = element0.getChildren("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0);
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(list0, (Locale) null);
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("http://www.w3.org/XML/1998/namespace", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      QName qName0 = jDOMNodePointer1.getName();
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("http://www.w3.org/XML/1998/namespace", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.getName());
      assertEquals("xml", qName0.getPrefix());
      assertEquals("xml:org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.toString());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      JDOMAttributePointer jDOMAttributePointer0 = (JDOMAttributePointer)jDOMNodePointer1.createAttribute(jXPathContextReferenceImpl0, qName0);
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("http://www.w3.org/XML/1998/namespace", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.getName());
      assertEquals("xml", qName0.getPrefix());
      assertEquals("xml:org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.toString());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("http://www.w3.org/XML/1998/namespace", jDOMAttributePointer0.getNamespaceURI());
      assertTrue(jDOMAttributePointer0.isActual());
      assertFalse(jDOMAttributePointer0.isContainer());
      assertFalse(jDOMAttributePointer0.isRoot());
      assertFalse(jDOMAttributePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMAttributePointer0.getIndex());
      assertFalse(jDOMAttributePointer0.isAttribute());
      assertTrue(jDOMAttributePointer0.isLeaf());
      assertTrue(jDOMAttributePointer0.isNode());
      assertEquals(1, jDOMAttributePointer0.getLength());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMAttributePointer0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Element element0 = new Element("P", "P", "P");
      assertEquals("P", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("P", element0.getNamespaceURI());
      assertEquals("P", element0.getNamespacePrefix());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("P", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("P", element0.getNamespaceURI());
      assertEquals("P", element0.getNamespacePrefix());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals("P", jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      NodeIterator nodeIterator0 = jDOMNodePointer0.namespaceIterator();
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("P", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("P", element0.getNamespaceURI());
      assertEquals("P", element0.getNamespacePrefix());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals("P", jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(0, nodeIterator0.getPosition());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodeIterator0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertNotNull(namespace0);
      
      Element element0 = new Element("Italian", namespace0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("Italian", element0.getName());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("Italian", element0.getName());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      boolean boolean0 = jDOMNodePointer0.isLanguage("");
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("Italian", element0.getName());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Namespace namespace0 = Namespace.getNamespace("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0.getURI());
      assertNotNull(namespace0);
      
      Element element0 = new Element("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0);
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0.getURI());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getNamespacePrefix());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getName());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0.getURI());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getNamespacePrefix());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getName());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      String string0 = jDOMNodePointer0.getNamespaceURI();
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0.getURI());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getNamespacePrefix());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getName());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", string0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0, "xml");
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      String string0 = jDOMNodePointer0.getLanguage();
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0, "xml");
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Object object0 = jDOMNodePointer0.getImmediateNode();
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Object object0 = jDOMNodePointer0.getBaseValue();
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("<<unknown namespace>>");
      assertEquals("<<unknown namespace>>", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertNotNull(namespace0);
      
      String string0 = JDOMNodePointer.findEnclosingAttribute(processingInstructionTest0, "BDa*i", namespace0);
      assertEquals("<<unknown namespace>>", processingInstructionTest0.getTarget());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Comment comment0 = new Comment("");
      assertEquals("", comment0.getValue());
      assertEquals("", comment0.getText());
      assertNotNull(comment0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(comment0, locale0, (String) null);
      assertEquals("", comment0.getValue());
      assertEquals("", comment0.getText());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      QName qName0 = new QName("rD3zT[{8Rcd3\u0000");
      assertEquals("rD3zT[{8Rcd3\u0000", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("rD3zT[{8Rcd3\u0000", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "http://www.w3.org/XML/1998/namespace");
      assertEquals("rD3zT[{8Rcd3\u0000", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("rD3zT[{8Rcd3\u0000", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("rD3zT[{8Rcd3\u0000", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      NodeIterator nodeIterator0 = jDOMNodePointer0.childIterator(nodeNameTest0, false, jDOMNodePointer0);
      assertEquals("", comment0.getValue());
      assertEquals("", comment0.getText());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("rD3zT[{8Rcd3\u0000", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("rD3zT[{8Rcd3\u0000", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("rD3zT[{8Rcd3\u0000", nodeNameTest0.toString());
      assertEquals(0, nodeIterator0.getPosition());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodeIterator0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertNotNull(namespace0);
      
      Element element0 = new Element("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0);
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getName());
      assertNotNull(element0);
      
      Text text0 = new Text("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", text0.getValue());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", text0.getText());
      assertNotNull(text0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(text0, locale0, "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", text0.getValue());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", text0.getText());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      QName qName0 = jDOMNodePointer0.getName();
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", text0.getValue());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", text0.getText());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", text0.getValue());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", text0.getText());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodeNameTest0);
      
      // Undeclared exception!
      try { 
        JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) element0, (NodeTest) nodeNameTest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.NodeNameTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertNotNull(locale0);
      
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertNotNull(namespace0);
      
      Element element0 = new Element("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      QName qName0 = new QName("Class ", (String) null);
      assertNull(qName0.getName());
      assertEquals("Class ", qName0.getPrefix());
      assertEquals("Class :null", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "<<unknown namespace>>");
      assertNull(qName0.getName());
      assertEquals("Class ", qName0.getPrefix());
      assertEquals("Class :null", qName0.toString());
      assertEquals("<<unknown namespace>>", nodeNameTest0.getNamespaceURI());
      assertEquals("Class :null", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.testNode((NodeTest) nodeNameTest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.NodeNameTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CDATA cDATA0 = new CDATA("ZCqPW?1*e9X0y$mp*o$");
      assertEquals("ZCqPW?1*e9X0y$mp*o$", cDATA0.getValue());
      assertEquals("ZCqPW?1*e9X0y$mp*o$", cDATA0.getText());
      assertNotNull(cDATA0);
      
      Locale locale0 = new Locale("Invalid expression type. '");
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("invalid expression type. '", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("invalid expression type. '", locale0.getLanguage());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0, "java.util.Locale@0000000012");
      assertEquals("ZCqPW?1*e9X0y$mp*o$", cDATA0.getValue());
      assertEquals("ZCqPW?1*e9X0y$mp*o$", cDATA0.getText());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("invalid expression type. '", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("invalid expression type. '", locale0.getLanguage());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      QName qName0 = jDOMNodePointer0.getName();
      assertEquals("ZCqPW?1*e9X0y$mp*o$", cDATA0.getValue());
      assertEquals("ZCqPW?1*e9X0y$mp*o$", cDATA0.getText());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("invalid expression type. '", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("invalid expression type. '", locale0.getLanguage());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals("ZCqPW?1*e9X0y$mp*o$", cDATA0.getValue());
      assertEquals("ZCqPW?1*e9X0y$mp*o$", cDATA0.getText());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("invalid expression type. '", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("invalid expression type. '", locale0.getLanguage());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue(variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: null
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Element element0 = new Element("Q", "Q");
      assertEquals("Q", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("Q", element0.getNamespaceURI());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("Q", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("Q", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("Q", jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Document document0 = new Document();
      assertNull(document0.getBaseURI());
      assertEquals(0, document0.getContentSize());
      assertFalse(document0.hasRootElement());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue(document0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("_I%AK1NFzb");
      assertNull(qName0.getPrefix());
      assertEquals("_I%AK1NFzb", qName0.toString());
      assertEquals("_I%AK1NFzb", qName0.getName());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNull(qName0.getPrefix());
      assertEquals("_I%AK1NFzb", qName0.toString());
      assertEquals("_I%AK1NFzb", qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, qName0);
      assertNull(qName0.getPrefix());
      assertEquals("_I%AK1NFzb", qName0.toString());
      assertEquals("_I%AK1NFzb", qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue(nodeTypeTest0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.jxpath.ri.QName cannot be cast to org.jdom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, (Locale) null);
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.isLanguage("http://www.w3.org/XML/1998/namespace");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertNotNull(namespace0);
      
      Element element0 = new Element("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespaceURI());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.getNamespaceURI((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Element element0 = new Element("preserve");
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("preserve", element0.getName());
      assertNotNull(element0);
      
      // Undeclared exception!
      try { 
        JDOMNodePointer.findEnclosingAttribute(element0, "y1]m=;q", (Namespace) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jdom.AttributeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      Element element0 = new Element("Q", "Q");
      assertFalse(element0.isRootElement());
      assertEquals("Q", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("Q", element0.getName());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0, "Q");
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(element0.isRootElement());
      assertEquals("Q", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("Q", element0.getName());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals("Q", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("IeJN^nWUiGiv");
      assertEquals("IeJN^nWUiGiv", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) processingInstructionTest0);
      assertEquals("IeJN^nWUiGiv", processingInstructionTest0.getTarget());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName("IeJN^nWUiGiv");
      assertNull(qName0.getPrefix());
      assertEquals("IeJN^nWUiGiv", qName0.getName());
      assertEquals("IeJN^nWUiGiv", qName0.toString());
      assertNotNull(qName0);
      
      // Undeclared exception!
      jDOMNodePointer1.createChild((JXPathContext) jXPathContextReferenceImpl0, qName0, Integer.MIN_VALUE, (Object) null);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("Ubth.!0sj");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("0Bz~ z+rx p#", locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      QName qName0 = jDOMNodePointer0.getName();
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createChild((JXPathContext) null, qName0, (-1266), object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Element element0 = new Element("Q", "Q");
      assertEquals("Q", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("Q", element0.getNamespaceURI());
      assertNotNull(element0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("Q"));
      assertNotNull(linkedList0);
      
      Document document0 = new Document(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(document0.hasRootElement());
      assertEquals(0, document0.getContentSize());
      assertNull(document0.getBaseURI());
      assertFalse(linkedList0.contains("Q"));
      assertNotNull(document0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, locale0, "Q");
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, linkedList0.size());
      assertFalse(document0.hasRootElement());
      assertEquals(0, document0.getContentSize());
      assertNull(document0.getBaseURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(linkedList0.contains("Q"));
      assertNotNull(jDOMNodePointer0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("Q", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("Q", element0.getNamespaceURI());
      assertEquals(0, linkedList0.size());
      assertFalse(document0.hasRootElement());
      assertEquals(0, document0.getContentSize());
      assertNull(document0.getBaseURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals("Q", jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(linkedList0.contains("Q"));
      assertNotNull(jDOMNodePointer1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName("d/=\"");
      assertEquals("d/=\"", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("d/=\"", qName0.getName());
      assertNotNull(qName0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer1.createChild((JXPathContext) jXPathContextReferenceImpl0, qName0, 1, (Object) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      Element element0 = new Element("Q", "Q");
      assertEquals("Q", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("Q", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0, "Q");
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("Q", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("Q", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals("Q", jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = jDOMNodePointer1.getName();
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("Q", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("Q", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals("Q", jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals("Q", qName0.toString());
      assertEquals("Q", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      
      // Undeclared exception!
      jDOMNodePointer1.createChild((JXPathContext) jXPathContextReferenceImpl0, qName0, Integer.MIN_VALUE);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      QName qName0 = jDOMNodePointer0.getName();
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createChild((JXPathContext) null, qName0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertNotNull(namespace0);
      
      Element element0 = new Element("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0);
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      QName qName0 = new QName("<<unknown namespace>>");
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("<<unknown namespace>>", qName0.toString());
      assertNotNull(qName0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createAttribute((JXPathContext) null, qName0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The name \"<<unknown namespace>>\" is not legal for JDOM/XML attributes: XML names cannot begin with the character \"<\".
         //
         verifyException("org.jdom.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertNotNull(locale0);
      
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertNotNull(namespace0);
      
      Element element0 = new Element("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0);
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getName());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getName());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createAttribute(jXPathContextReferenceImpl0, (QName) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      QName qName0 = new QName("<<unknown namespace>>");
      assertNull(qName0.getPrefix());
      assertEquals("<<unknown namespace>>", qName0.toString());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("<<unknown namespace>>", qName0.toString());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.compareChildNodePointers(variablePointer0, (NodePointer) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: <<unknown namespace>>
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      QName qName0 = new QName("8^SmLFzF`T)@WJM");
      assertEquals("8^SmLFzF`T)@WJM", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("8^SmLFzF`T)@WJM", qName0.toString());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
      assertEquals("8^SmLFzF`T)@WJM", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("8^SmLFzF`T)@WJM", qName0.toString());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0, "8^SmLFzF`T)@WJM");
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.compareChildNodePointers(variablePointer0, variablePointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Element element0 = new Element("r", "r", "r");
      assertEquals("r", element0.getNamespacePrefix());
      assertEquals("r", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("r", element0.getName());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("r", element0.getNamespacePrefix());
      assertEquals("r", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("r", element0.getName());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("r", jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(locale0, locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      Document document0 = new Document();
      assertNull(document0.getBaseURI());
      assertEquals(0, document0.getContentSize());
      assertFalse(document0.hasRootElement());
      assertNotNull(document0);
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(document0, locale0, "v");
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertNull(document0.getBaseURI());
      assertEquals(0, document0.getContentSize());
      assertFalse(document0.hasRootElement());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isNode());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertTrue(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer2);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer2.compareChildNodePointers(jDOMNodePointer0, jDOMNodePointer1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4432);
      assertEquals(4432, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      BasicVariables basicVariables0 = (BasicVariables)jXPathContextReferenceImpl0.getVariables();
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("/processing-instruction('", "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      assertEquals("/processing-instruction(':org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.getName());
      assertEquals("/processing-instruction('", qName0.getPrefix());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("/processing-instruction(':org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.getName());
      assertEquals("/processing-instruction('", qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeTypeTest0, locale0, "&apos;");
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(4432, nodeTypeTest0.getNodeType());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.compareChildNodePointers(variablePointer0, variablePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: '/processing-instruction(':org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("xml");
      assertNotNull(locale_LanguageRange0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale_LanguageRange0, locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("preserve");
      assertEquals("preserve", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      QName qName0 = new QName("\"attribute::\"", "org.apace.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      assertEquals("\"attribute::\":org.apace.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.toString());
      assertEquals("org.apace.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.getName());
      assertEquals("\"attribute::\"", qName0.getPrefix());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals("\"attribute::\":org.apace.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.toString());
      assertEquals("org.apace.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.getName());
      assertEquals("\"attribute::\"", qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
      assertEquals("\"attribute::\":org.apace.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.toString());
      assertEquals("org.apace.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.getName());
      assertEquals("\"attribute::\"", qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodePointer0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.childIterator(processingInstructionTest0, true, nodePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: \"attribute::\":org.apace.commons.jxpath.ri.model.jdom.JDOMNodePointer
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      QName qName0 = new QName((String) null, (String) null);
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(47);
      assertEquals(47, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, qName0);
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isActual());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.childIterator(nodeTypeTest0, false, variablePointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("{VbMZWk]N");
      assertEquals("{VbMZWk]N", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("{VbMZWk]N", qName0.getName());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals("{VbMZWk]N", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("{VbMZWk]N", qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      CDATA cDATA0 = new CDATA((String) null);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      assertNotNull(cDATA0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, cDATA0);
      assertEquals("{VbMZWk]N", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("{VbMZWk]N", qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "vdn]>e=");
      assertEquals("{VbMZWk]N", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("{VbMZWk]N", qName0.getName());
      assertEquals("{VbMZWk]N", nodeNameTest0.toString());
      assertEquals("vdn]>e=", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.childIterator(nodeNameTest0, false, variablePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: '{VbMZWk]N'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertNotNull(namespace0);
      
      Element element0 = new Element("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0);
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.attributeIterator((QName) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMAttributeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Element element0 = new Element("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getNamespaceURI());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getNamespaceURI());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getNamespaceURI());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      // Undeclared exception!
      jDOMNodePointer1.asPath();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<Comment, NodeTypeTest> hashMap0 = new HashMap<Comment, NodeTypeTest>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("preserve", hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("", processingInstruction0.getValue());
      assertEquals("preserve", processingInstruction0.getTarget());
      assertEquals("", processingInstruction0.getData());
      assertNotNull(processingInstruction0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("", processingInstruction0.getValue());
      assertEquals("preserve", processingInstruction0.getTarget());
      assertEquals("", processingInstruction0.getData());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      String string0 = jDOMNodePointer0.asPath();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("", processingInstruction0.getValue());
      assertEquals("preserve", processingInstruction0.getTarget());
      assertEquals("", processingInstruction0.getData());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("/processing-instruction('preserve')[1]", string0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      CDATA cDATA0 = new CDATA("");
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertNotNull(cDATA0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      String string0 = jDOMNodePointer0.asPath();
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("/text()[1]", string0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      String string0 = jDOMNodePointer0.asPath();
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("", string0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      QName qName0 = jDOMNodePointer0.getName();
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      
      Comment comment0 = new Comment("http://www.w3.org/2000/xmlns/");
      assertEquals("http://www.w3.org/2000/xmlns/", comment0.getValue());
      assertEquals("http://www.w3.org/2000/xmlns/", comment0.getText());
      assertNotNull(comment0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) comment0);
      assertEquals("http://www.w3.org/2000/xmlns/", comment0.getValue());
      assertEquals("http://www.w3.org/2000/xmlns/", comment0.getText());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createChild((JXPathContext) jXPathContextReferenceImpl0, qName0, (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: 
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Namespace namespace0 = Namespace.getNamespace("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0.getURI());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0.getPrefix());
      assertNotNull(namespace0);
      
      Element element0 = new Element("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0);
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0.getURI());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getNamespaceURI());
      assertNotNull(element0);
      
      String string0 = JDOMNodePointer.getLocalName(element0);
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0.getURI());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getNamespaceURI());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertNotNull(namespace0);
      
      Element element0 = new Element("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getName());
      assertNotNull(element0);
      
      String string0 = JDOMNodePointer.getPrefix(element0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getName());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNull(processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", (NodeTest) processingInstructionTest0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(processingInstructionTest0.getTarget());
      assertFalse(boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertNotNull(namespace0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      HashMap<NodeNameTest, ProcessingInstructionTest> hashMap0 = new HashMap<NodeNameTest, ProcessingInstructionTest>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(hashMap0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) namespace0, (NodeTest) nodeTypeTest0);
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(linkedList0, locale0);
      assertEquals(0, linkedList0.size());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) linkedList0, (NodeTest) nodeTypeTest0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals(0, linkedList0.size());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
      assertEquals(4, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("org.apachecommons.jxpth.ri.model.jdom.JDOMNodePointer", "org.apachecommons.jxpth.ri.model.jdom.JDOMNodePointer");
      assertEquals("org.apachecommons.jxpth.ri.model.jdom.JDOMNodePointer", processingInstruction0.getValue());
      assertEquals("org.apachecommons.jxpth.ri.model.jdom.JDOMNodePointer", processingInstruction0.getData());
      assertEquals("org.apachecommons.jxpth.ri.model.jdom.JDOMNodePointer", processingInstruction0.getTarget());
      assertNotNull(processingInstruction0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("org.apachecommons.jxpth.ri.model.jdom.JDOMNodePointer", processingInstruction0.getValue());
      assertEquals("org.apachecommons.jxpth.ri.model.jdom.JDOMNodePointer", processingInstruction0.getData());
      assertEquals("org.apachecommons.jxpth.ri.model.jdom.JDOMNodePointer", processingInstruction0.getTarget());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) "org.jdom.Text@0000000002", (NodeTest) nodeTypeTest0);
      assertEquals(4, nodeTypeTest0.getNodeType());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("org.apachecommons.jxpth.ri.model.jdom.JDOMNodePointer", processingInstruction0.getValue());
      assertEquals("org.apachecommons.jxpth.ri.model.jdom.JDOMNodePointer", processingInstruction0.getData());
      assertEquals("org.apachecommons.jxpth.ri.model.jdom.JDOMNodePointer", processingInstruction0.getTarget());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      QName qName0 = new QName((String) null, (String) null);
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("<<unknown namespace>>");
      assertEquals("<<unknown namespace>>", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(47);
      assertEquals(47, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) variablePointer0, (Object) processingInstructionTest0, (NodeTest) nodeTypeTest0);
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals("<<unknown namespace>>", processingInstructionTest0.getTarget());
      assertEquals(47, nodeTypeTest0.getNodeType());
      assertFalse(boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(linkedList0, (Locale) null);
      assertEquals(0, linkedList0.size());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      assertEquals(3, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) null, (NodeTest) nodeTypeTest0);
      assertEquals(0, linkedList0.size());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(3, nodeTypeTest0.getNodeType());
      assertFalse(boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0, (String) null);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      CDATA cDATA0 = new CDATA("<<unknown namespace>>");
      assertEquals("<<unknown namespace>>", cDATA0.getText());
      assertEquals("<<unknown namespace>>", cDATA0.getValue());
      assertNotNull(cDATA0);
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) cDATA0, (NodeTest) nodeTypeTest0);
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("<<unknown namespace>>", cDATA0.getText());
      assertEquals("<<unknown namespace>>", cDATA0.getValue());
      assertTrue(boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Element element0 = new Element("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getNamespaceURI());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      QName qName0 = jDOMNodePointer0.getName();
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.getName());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", nodeNameTest0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodeNameTest0);
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) element0, (NodeTest) nodeNameTest0);
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", nodeNameTest0.toString());
      assertFalse(boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Element element0 = new Element("O");
      assertEquals("O", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertNotNull(element0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertEquals("O", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      QName qName0 = new QName("O", "O");
      assertEquals("O", qName0.getName());
      assertEquals("O", qName0.getPrefix());
      assertEquals("O:O", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "]");
      assertEquals("O", qName0.getName());
      assertEquals("O", qName0.getPrefix());
      assertEquals("O:O", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("O:O", nodeNameTest0.toString());
      assertEquals("]", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) element0, (NodeTest) nodeNameTest0);
      assertEquals("O", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("O", qName0.getName());
      assertEquals("O", qName0.getPrefix());
      assertEquals("O:O", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("O:O", nodeNameTest0.toString());
      assertEquals("]", nodeNameTest0.getNamespaceURI());
      assertFalse(boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      HashMap<Integer, Document> hashMap0 = new HashMap<Integer, Document>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", processingInstruction0.getValue());
      assertEquals("", processingInstruction0.getData());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", processingInstruction0.getTarget());
      assertNotNull(processingInstruction0);
      
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertNotNull(namespace0);
      
      Element element0 = new Element("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getName());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getName());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) processingInstruction0, (NodeTest) null);
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", processingInstruction0.getValue());
      assertEquals("", processingInstruction0.getData());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", processingInstruction0.getTarget());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getName());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("Ubth.!0sj");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      CDATA cDATA0 = new CDATA("<<unknown namespace>>");
      assertEquals("<<unknown namespace>>", cDATA0.getText());
      assertEquals("<<unknown namespace>>", cDATA0.getValue());
      assertNotNull(cDATA0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0, "Ce~!H,3}");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("<<unknown namespace>>", cDATA0.getText());
      assertEquals("<<unknown namespace>>", cDATA0.getValue());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Object object0 = jDOMNodePointer0.getValue();
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("<<unknown namespace>>", cDATA0.getText());
      assertEquals("<<unknown namespace>>", cDATA0.getValue());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("<<unknown namespace>>", object0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertNotNull(namespace0);
      
      Element element0 = new Element("Italian", namespace0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("Italian", element0.getName());
      assertFalse(element0.isRootElement());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("Italian", element0.getName());
      assertFalse(element0.isRootElement());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      String string0 = jDOMNodePointer0.getNamespaceURI("");
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("Italian", element0.getName());
      assertFalse(element0.isRootElement());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals("", string0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LinkedList<NodeTypeTest> linkedList0 = new LinkedList<NodeTypeTest>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Document document0 = new Document(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(document0.hasRootElement());
      assertEquals(0, document0.getContentSize());
      assertNull(document0.getBaseURI());
      assertNotNull(document0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, locale0);
      assertEquals(0, linkedList0.size());
      assertFalse(document0.hasRootElement());
      assertEquals(0, document0.getContentSize());
      assertNull(document0.getBaseURI());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.namespaceIterator();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      QName qName0 = new QName("");
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, "");
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Object object0 = jDOMNodePointer0.getImmediateNode();
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("", object0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Object object0 = jDOMNodePointer0.getBaseValue();
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", object0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CDATA cDATA0 = new CDATA("G\"uUrLJKJDAE32E:_a");
      assertEquals("G\"uUrLJKJDAE32E:_a", cDATA0.getText());
      assertEquals("G\"uUrLJKJDAE32E:_a", cDATA0.getValue());
      assertNotNull(cDATA0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0, "G\"uUrLJKJDAE32E:_a");
      assertEquals("G\"uUrLJKJDAE32E:_a", cDATA0.getText());
      assertEquals("G\"uUrLJKJDAE32E:_a", cDATA0.getValue());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(object0, locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      boolean boolean0 = jDOMNodePointer1.equals(jDOMNodePointer0);
      assertEquals("G\"uUrLJKJDAE32E:_a", cDATA0.getText());
      assertEquals("G\"uUrLJKJDAE32E:_a", cDATA0.getValue());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertFalse(boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("{VbMZWk]N");
      assertEquals("{VbMZWk]N", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("{VbMZWk]N", qName0.getName());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals("{VbMZWk]N", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("{VbMZWk]N", qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      CDATA cDATA0 = new CDATA((String) null);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertNotNull(cDATA0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, cDATA0);
      assertEquals("{VbMZWk]N", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("{VbMZWk]N", qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertFalse(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      boolean boolean0 = jDOMNodePointer0.equals("{VbMZWk]N");
      assertEquals("{VbMZWk]N", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("{VbMZWk]N", qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertFalse(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      boolean boolean0 = jDOMNodePointer0.equals(jDOMNodePointer0);
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer((Object) null, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      boolean boolean0 = jDOMNodePointer0.equals(jDOMNodePointer1);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertTrue(boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      HashMap<Integer, Document> hashMap0 = new HashMap<Integer, Document>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", processingInstruction0.getTarget());
      assertEquals("", processingInstruction0.getData());
      assertEquals("", processingInstruction0.getValue());
      assertNotNull(processingInstruction0);
      
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertNotNull(namespace0);
      
      Element element0 = new Element("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertNotNull(element0);
      
      Element element1 = element0.setContent((Content) processingInstruction0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", processingInstruction0.getTarget());
      assertEquals("", processingInstruction0.getData());
      assertEquals("", processingInstruction0.getValue());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getName());
      assertEquals(1, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("", element1.getNamespaceURI());
      assertFalse(element1.isRootElement());
      assertEquals(1, element1.getContentSize());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element1.getName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) namespace0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", processingInstruction0.getTarget());
      assertEquals("", processingInstruction0.getData());
      assertEquals("", processingInstruction0.getValue());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createChild((JXPathContext) jXPathContextReferenceImpl0, qName0, 1798, (Object) qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: /processing-instruction('org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer')[1]
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      CDATA cDATA0 = new CDATA("Y");
      assertEquals("Y", cDATA0.getValue());
      assertEquals("Y", cDATA0.getText());
      assertNotNull(cDATA0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("Y", cDATA0.getValue());
      assertEquals("Y", cDATA0.getText());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) cDATA0);
      assertEquals("Y", cDATA0.getValue());
      assertEquals("Y", cDATA0.getText());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      Element element0 = new Element("Y", (String) null, "http://www.w3.org/2000/xmlns/");
      assertEquals("http://www.w3.org/2000/xmlns/", element0.getNamespaceURI());
      assertEquals("Y", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertNotNull(element0);
      
      Element element1 = element0.addContent((Content) cDATA0);
      assertEquals("Y", cDATA0.getValue());
      assertEquals("Y", cDATA0.getText());
      assertEquals("http://www.w3.org/2000/xmlns/", element0.getNamespaceURI());
      assertEquals("Y", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(1, element0.getContentSize());
      assertEquals(1, element1.getContentSize());
      assertEquals("http://www.w3.org/2000/xmlns/", element1.getNamespaceURI());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("Y", element1.getName());
      assertFalse(element1.isRootElement());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      QName qName0 = jDOMNodePointer0.getName();
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("Y", cDATA0.getValue());
      assertEquals("Y", cDATA0.getText());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createAttribute(jXPathContextReferenceImpl0, qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot create an attribute for path /text()[1]/@null, operation is not allowed for this type of node
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Namespace namespace0 = Namespace.getNamespace("P", "P");
      assertEquals("P", namespace0.getURI());
      assertEquals("P", namespace0.getPrefix());
      assertNotNull(namespace0);
      
      Element element0 = new Element("P", "P", "P");
      assertFalse(element0.isRootElement());
      assertEquals("P", element0.getName());
      assertEquals("P", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("P", element0.getNamespacePrefix());
      assertNotNull(element0);
      
      Element element1 = new Element("P", namespace0);
      assertEquals("P", namespace0.getURI());
      assertEquals("P", namespace0.getPrefix());
      assertEquals(0, element1.getContentSize());
      assertEquals("P", element1.getName());
      assertEquals("P", element1.getNamespaceURI());
      assertFalse(element1.isRootElement());
      assertEquals("P", element1.getNamespacePrefix());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertFalse(element0.isRootElement());
      assertEquals("P", element0.getName());
      assertEquals("P", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("P", element0.getNamespacePrefix());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("P", jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(element0.equals((Object)element1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element1);
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("P", namespace0.getURI());
      assertEquals("P", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals("P", element0.getName());
      assertEquals("P", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("P", element0.getNamespacePrefix());
      assertEquals(0, element1.getContentSize());
      assertEquals("P", element1.getName());
      assertEquals("P", element1.getNamespaceURI());
      assertFalse(element1.isRootElement());
      assertEquals("P", element1.getNamespacePrefix());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("P", jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals("P", jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      Element element2 = element0.addContent((Content) element1);
      assertEquals("P", namespace0.getURI());
      assertEquals("P", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals(1, element0.getContentSize());
      assertEquals("P", element0.getName());
      assertEquals("P", element0.getNamespaceURI());
      assertEquals("P", element0.getNamespacePrefix());
      assertEquals(0, element1.getContentSize());
      assertEquals("P", element1.getName());
      assertEquals("P", element1.getNamespaceURI());
      assertFalse(element1.isRootElement());
      assertEquals("P", element1.getNamespacePrefix());
      assertEquals(1, element2.getContentSize());
      assertEquals("P", element2.getNamespaceURI());
      assertEquals("P", element2.getNamespacePrefix());
      assertEquals("P", element2.getName());
      assertFalse(element2.isRootElement());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      assertNotNull(element2);
      
      String string0 = jDOMNodePointer1.toString();
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("P", namespace0.getURI());
      assertEquals("P", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals(1, element0.getContentSize());
      assertEquals("P", element0.getName());
      assertEquals("P", element0.getNamespaceURI());
      assertEquals("P", element0.getNamespacePrefix());
      assertEquals(0, element1.getContentSize());
      assertEquals("P", element1.getName());
      assertEquals("P", element1.getNamespaceURI());
      assertFalse(element1.isRootElement());
      assertEquals("P", element1.getNamespacePrefix());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("P", jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals("P", jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element0));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals("/P:P[1]", string0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("", locale0, "[uA.kJtM'%b4)p");
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      String string0 = jDOMNodePointer0.asPath();
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("id('[uA.kJtM&apos;%b4)p')", string0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Element element0 = new Element("org.apache.commons.jxpath.ri.axes.AncestorContext");
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("org.apache.commons.jxpath.ri.axes.AncestorContext", element0.getName());
      assertNotNull(element0);
      
      QName qName0 = new QName(",tE#U6%?Ql9ml{Q,", "http://www.w3.org/2000/xmlns/");
      assertEquals(",tE#U6%?Ql9ml{Q,", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals(",tE#U6%?Ql9ml{Q,:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals(",tE#U6%?Ql9ml{Q,", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals(",tE#U6%?Ql9ml{Q,:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, (Object) null);
      assertEquals(",tE#U6%?Ql9ml{Q,", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals(",tE#U6%?Ql9ml{Q,:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("org.apache.commons.jxpath.ri.axes.AncestorContext", element0.getName());
      assertEquals(",tE#U6%?Ql9ml{Q,", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals(",tE#U6%?Ql9ml{Q,:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      String string0 = jDOMNodePointer1.asPath();
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("org.apache.commons.jxpath.ri.axes.AncestorContext", element0.getName());
      assertEquals(",tE#U6%?Ql9ml{Q,", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals(",tE#U6%?Ql9ml{Q,:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals("$,tE#U6%?Ql9ml{Q,:http://www.w3.org/2000/xmlns/org.apache.commons.jxpath.ri.axes.AncestorContext[1]", string0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertNotNull(locale0);
      
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertNotNull(namespace0);
      
      Element element0 = new Element("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      String string0 = jDOMNodePointer0.asPath();
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("", string0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<Comment, NodeTypeTest> hashMap0 = new HashMap<Comment, NodeTypeTest>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("preserve", hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("", processingInstruction0.getValue());
      assertEquals("preserve", processingInstruction0.getTarget());
      assertEquals("", processingInstruction0.getData());
      assertNotNull(processingInstruction0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("", processingInstruction0.getValue());
      assertEquals("preserve", processingInstruction0.getTarget());
      assertEquals("", processingInstruction0.getData());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.remove();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot remove root JDOM node
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      HashMap<Integer, Document> hashMap0 = new HashMap<Integer, Document>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", processingInstruction0.getValue());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", processingInstruction0.getTarget());
      assertEquals("", processingInstruction0.getData());
      assertNotNull(processingInstruction0);
      
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertNotNull(namespace0);
      
      Element element0 = new Element("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertNotNull(element0);
      
      Element element1 = element0.setContent((Content) processingInstruction0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", processingInstruction0.getValue());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", processingInstruction0.getTarget());
      assertEquals("", processingInstruction0.getData());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(1, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(element1.isRootElement());
      assertEquals("", element1.getNamespaceURI());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals(1, element1.getContentSize());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", element1.getName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", processingInstruction0.getValue());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", processingInstruction0.getTarget());
      assertEquals("", processingInstruction0.getData());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      jDOMNodePointer0.remove();
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", processingInstruction0.getValue());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", processingInstruction0.getTarget());
      assertEquals("", processingInstruction0.getData());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      Element element0 = new Element("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      QName qName0 = jDOMNodePointer0.getName();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) processingInstruction0);
      jDOMNodePointer0.createAttribute(jXPathContext0, qName0);
      NodePointer nodePointer0 = jDOMNodePointer0.createAttribute((JXPathContext) null, qName0);
      assertTrue(nodePointer0.isNode());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      Namespace namespace0 = Namespace.getNamespace("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      Element element0 = new Element("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) element0);
      QName qName0 = jDOMNodePointer0.getName();
      jDOMNodePointer0.createAttribute(jXPathContext0, qName0);
      jDOMNodePointer0.createAttribute(jXPathContext0, qName0);
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer:org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.toString());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      Namespace namespace0 = Namespace.getNamespace("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      Element element0 = new Element("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) element0);
      QName qName0 = new QName("+e,7", "<<unknown namespace>>");
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createAttribute(jXPathContext0, qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown namespace prefix: +e,7
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Comment comment0 = new Comment("<<unknown namespace>>");
      Locale locale0 = Locale.CANADA;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(comment0, locale0);
      boolean boolean0 = jDOMNodePointer0.isLanguage("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      Namespace namespace0 = Namespace.getNamespace("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      Element element0 = new Element("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0);
      Element element1 = new Element("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element1);
      element0.addContent((Content) element1);
      boolean boolean0 = jDOMNodePointer1.isLanguage("java.util.Locale@0000000008");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("http://www.w3.org/XML/1998/namespace");
      String string0 = JDOMNodePointer.getLocalName(processingInstructionTest0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Attribute attribute0 = new Attribute("Fgoc", "org.apache.commonsjxpath.ri.model.jdom.JDOMNodePointer");
      String string0 = JDOMNodePointer.getLocalName(attribute0);
      assertEquals("Fgoc", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Attribute attribute0 = new Attribute("int", "int");
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      attribute0.setNamespace(namespace0);
      String string0 = JDOMNodePointer.getPrefix(attribute0);
      assertEquals("xml", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LinkedList<NodeTypeTest> linkedList0 = new LinkedList<NodeTypeTest>();
      Document document0 = new Document(linkedList0);
      Locale locale0 = Locale.JAPAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, locale0);
      String string0 = JDOMNodePointer.getPrefix(jDOMNodePointer0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Element element0 = new Element("nQ", "nQ", "nQ");
      String string0 = JDOMNodePointer.getPrefix(element0);
      assertEquals("nQ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Attribute attribute0 = new Attribute("int", "int");
      String string0 = JDOMNodePointer.getPrefix(attribute0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      Element element0 = new Element("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      QName qName0 = jDOMNodePointer0.getName();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) processingInstruction0);
      NodePointer nodePointer0 = jDOMNodePointer0.createAttribute(jXPathContext0, qName0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Xr*TW 5PXY");
      boolean boolean0 = JDOMNodePointer.testNode(nodePointer0, (Object) processingInstruction0, (NodeTest) processingInstructionTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      Locale locale0 = Locale.TAIWAN;
      HashMap<NodeNameTest, ProcessingInstructionTest> hashMap0 = new HashMap<NodeNameTest, ProcessingInstructionTest>();
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", hashMap0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
      boolean boolean0 = jDOMNodePointer0.testNode((NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("<<unknown namespace>>", "<<unknown namespace>>");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      Document document0 = new Document();
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) variablePointer0, (Object) document0, (NodeTest) nodeTypeTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      Element element0 = new Element("Q");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0, "{aAktY{");
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) element0, (NodeTest) nodeTypeTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
      Locale locale0 = Locale.TAIWAN;
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("org.apachecommons.jxpth.ri.model.jdom.JDOMNodePointer", "org.apachecommons.jxpth.ri.model.jdom.JDOMNodePointer");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
      boolean boolean0 = jDOMNodePointer0.testNode((NodeTest) nodeTypeTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      Element element0 = new Element("org.apache.commonsjxpath.ri.model.jdom.JDOMNodePointer");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      QName qName0 = jDOMNodePointer0.getName();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "org.apache.commonsjxpath.ri.model.jdom.JDOMNodePointer");
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) element0, (NodeTest) nodeNameTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      Element element0 = new Element("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      QName qName0 = jDOMNodePointer0.getName();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) element0, (NodeTest) nodeNameTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      Element element0 = new Element("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) element0, (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Locale locale0 = Locale.UK;
      Element element0 = new Element("r", "r");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      QName qName0 = new QName("*");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      boolean boolean0 = jDOMNodePointer0.testNode((NodeTest) nodeNameTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      Element element0 = new Element("r", "r");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "*");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      boolean boolean0 = jDOMNodePointer0.testNode((NodeTest) nodeNameTest0);
      assertEquals("r", jDOMNodePointer0.getNamespaceURI());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      QName qName0 = new QName("8^SmLFzF`T)@WJM");
      VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
      Comment comment0 = new Comment("8^SmLFzF`T)@WJM");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) variablePointer0, (Object) comment0, (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      Namespace namespace0 = Namespace.getNamespace("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      Element element0 = new Element("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0);
      Element element1 = new Element("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      Element element2 = element0.setText("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element2, locale0);
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element1);
      jDOMNodePointer1.setValue(element2);
      assertEquals(1, element1.getContentSize());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Element element0 = new Element("Q", "Q");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      DocType docType0 = new DocType("oHecY7");
      Document document0 = new Document(element0, docType0, "http://www.w3.org/XML/1998/namespace");
      jDOMNodePointer0.setValue(document0);
      assertEquals(1, element0.getContentSize());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      Element element0 = new Element("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0);
      LinkedList<NodeNameTest> linkedList0 = new LinkedList<NodeNameTest>();
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      jDOMNodePointer0.setValue(linkedList0);
      assertTrue(jDOMNodePointer0.isNode());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      Namespace namespace0 = Namespace.getNamespace("EZ");
      Element element0 = new Element("EZ", namespace0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      Document document0 = new Document(element0);
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, document0);
      jDOMNodePointer0.setValue(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      Namespace namespace0 = Namespace.getNamespace("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      Element element0 = new Element("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      jDOMNodePointer0.setValue(locale0);
      assertEquals(1, jDOMNodePointer0.getLength());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      HashMap<Integer, Document> hashMap0 = new HashMap<Integer, Document>();
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", hashMap0);
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      Element element0 = new Element("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      jDOMNodePointer0.setValue(processingInstruction0);
      assertTrue(jDOMNodePointer0.isRoot());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      Element element0 = new Element("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      CDATA cDATA0 = new CDATA("http://www.w3.org/XML/1998/namespace");
      jDOMNodePointer0.setValue(cDATA0);
      assertFalse(jDOMNodePointer0.isCollection());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      Locale locale0 = Locale.forLanguageTag("");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CDATA cDATA0 = new CDATA("P\"'-%/{");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, (Locale) null);
      QName qName0 = new QName("");
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, (Object) null);
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(nodePointer0, cDATA0);
      // Undeclared exception!
      try { 
        jDOMNodePointer1.setValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      CDATA cDATA0 = new CDATA("Y");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      jDOMNodePointer0.setValue(jDOMNodePointer0);
      assertEquals("Y", cDATA0.getValue());
      assertEquals("Y", cDATA0.getText());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("org.apachecommons.jxpth.ri.model.jdom.JDOMNodePointer", "org.apachecommons.jxpth.ri.model.jdom.JDOMNodePointer");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
      Object object0 = jDOMNodePointer0.getValue();
      assertEquals("org.apachecommons.jxpth.ri.model.jdom.JDOMNodePointer", object0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Comment comment0 = new Comment("Ln?8WN@14;J,8B!");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, comment0);
      Object object0 = jDOMNodePointer0.getValue();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      Element element0 = new Element("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0);
      Element element1 = element0.setText("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element1, locale0);
      Object object0 = jDOMNodePointer0.getValue();
      assertNotNull(object0);
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", object0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      Namespace namespace0 = Namespace.getNamespace("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      Element element0 = new Element("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0);
      Element element1 = new Element("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      element0.addContent((Content) element1);
      Object object0 = jDOMNodePointer0.getValue();
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      HashMap<Integer, Document> hashMap0 = new HashMap<Integer, Document>();
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", hashMap0);
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      Element element0 = new Element("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0);
      Element element1 = element0.setContent((Content) processingInstruction0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element1, locale0);
      Object object0 = jDOMNodePointer0.getValue();
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("Ubth.!0sj");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("0Bz~ z+rx p#", locale0);
      Object object0 = jDOMNodePointer0.getValue();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<Comment, NodeTypeTest> hashMap0 = new HashMap<Comment, NodeTypeTest>();
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("preserve", hashMap0);
      Locale locale0 = Locale.US;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0, "preserve");
      QName qName0 = jDOMNodePointer0.getName();
      assertEquals("preserve", qName0.toString());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      Document document0 = new Document();
      Element element0 = new Element("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      Document document1 = document0.addContent((Content) element0);
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, document1);
      boolean boolean0 = jDOMNodePointer1.isLeaf();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      LinkedList<NodeTypeTest> linkedList0 = new LinkedList<NodeTypeTest>();
      Document document0 = new Document(linkedList0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, locale0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.isLeaf();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      Element element0 = new Element("nQ", namespace0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      Comment comment0 = new Comment("T%Sv2]X9~'_MD Q65nY");
      jDOMNodePointer0.setValue(comment0);
      boolean boolean0 = jDOMNodePointer0.isLeaf();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Element element0 = new Element("O");
      Locale locale0 = Locale.FRENCH;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      boolean boolean0 = jDOMNodePointer0.isLeaf();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("Ubth.!0sj");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("0Bz~ z+rx p#", locale0);
      boolean boolean0 = jDOMNodePointer0.isLeaf();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      HashMap<Integer, Document> hashMap0 = new HashMap<Integer, Document>();
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", hashMap0);
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      Element element0 = new Element("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0);
      Element element1 = element0.setContent((Content) processingInstruction0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element1, locale0);
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(locale0, locale0);
      int int0 = jDOMNodePointer0.compareChildNodePointers(jDOMNodePointer0, jDOMNodePointer1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      Namespace namespace0 = Namespace.getNamespace("P", "P");
      Element element0 = new Element("P", namespace0);
      Element element1 = new Element("P", namespace0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element1);
      element0.addContent((Content) element1);
      int int0 = jDOMNodePointer0.compareChildNodePointers(jDOMNodePointer0, jDOMNodePointer1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      Namespace namespace0 = Namespace.getNamespace("P", "P");
      Element element0 = new Element("P", "P", "P");
      Element element1 = new Element("P", namespace0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element1);
      element0.addContent((Content) element1);
      int int0 = jDOMNodePointer0.compareChildNodePointers(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      Namespace namespace0 = Namespace.getNamespace("EZ");
      Element element0 = new Element("EZ", namespace0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      Document document0 = new Document(element0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) document0);
      QName qName0 = jDOMNodePointer0.getName();
      assertEquals("EZ", qName0.toString());
      
      NodePointer nodePointer0 = jDOMNodePointer0.createAttribute(jXPathContext0, qName0);
      int int0 = jDOMNodePointer0.compareChildNodePointers(jDOMNodePointer0, nodePointer0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      Element element0 = new Element("r", "r", "r");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(locale0, locale0);
      // Undeclared exception!
      try { 
        jDOMNodePointer1.compareChildNodePointers(jDOMNodePointer0, jDOMNodePointer1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JXPath internal error: compareChildNodes called for en_CA
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      Namespace namespace0 = Namespace.getNamespace("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      Element element0 = new Element("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) element0);
      QName qName0 = jDOMNodePointer0.getName();
      NodePointer nodePointer0 = jDOMNodePointer0.createAttribute(jXPathContext0, qName0);
      int int0 = jDOMNodePointer0.compareChildNodePointers(nodePointer0, jDOMNodePointer0);
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer:org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.toString());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      Element element0 = new Element("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", namespace0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      String string0 = jDOMNodePointer0.getNamespaceURI("w");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      Document document0 = new Document();
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, locale0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.getNamespaceURI("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("xml");
      Locale locale0 = Locale.PRC;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale_LanguageRange0, locale0);
      String string0 = jDOMNodePointer0.getNamespaceURI("xml");
      assertEquals("http://www.w3.org/XML/1998/namespace", string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      QName qName0 = new QName("");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, "");
      String string0 = jDOMNodePointer0.getNamespaceURI("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("org.apachecommons.jxpth.ri.model.jdom.JDOMNodePointer", "org.apachecommons.jxpth.ri.model.jdom.JDOMNodePointer");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
      jDOMNodePointer0.getNamespaceResolver();
      NamespaceResolver namespaceResolver0 = jDOMNodePointer0.getNamespaceResolver();
      assertFalse(namespaceResolver0.isSealed());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("Ubth.!0sj");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("0Bz~ z+rx p#", locale0);
      String string0 = jDOMNodePointer0.getNamespaceURI();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CDATA cDATA0 = new CDATA("G\"uUrLJKJDAE32E:_a");
      Locale locale0 = Locale.ROOT;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0, "G\"uUrLJKJDAE32E:_a");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) cDATA0);
      QName qName0 = new QName("\"|#P9e\"|`G&I", "<<unknown namespace>>");
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createChild(jXPathContext0, qName0, Integer.MIN_VALUE, (Object) jDOMNodePointer0.WHOLE_COLLECTION);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: id('G&quot;uUrLJKJDAE32E:_a')
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0, "<<unknown namespace>>");
      jDOMNodePointer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      QName qName0 = new QName("8^SmLFzF`T)@WJM");
      Locale locale0 = Locale.JAPANESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0, "8^SmLFzF`T)@WJM");
      NodeIterator nodeIterator0 = jDOMNodePointer0.attributeIterator(qName0);
      assertEquals(0, nodeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      Element element0 = new Element("r", "r", "r");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      int int0 = jDOMNodePointer0.compareChildNodePointers(jDOMNodePointer0, jDOMNodePointer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Element element0 = new Element("Q", "Q");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Document document0 = new Document(linkedList0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, locale0, "Q");
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      // Undeclared exception!
      try { 
        jDOMNodePointer1.asPath();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      QName qName0 = new QName("");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, "");
      int int0 = jDOMNodePointer0.getLength();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(346);
      Document document0 = new Document();
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, locale0, "XtH:");
      // Undeclared exception!
      try { 
        jDOMNodePointer0.childIterator(nodeTypeTest0, false, jDOMNodePointer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, (Object) null);
      NodePointer nodePointer0 = jDOMNodePointer0.namespacePointer("]");
      assertFalse(nodePointer0.isAttribute());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      Locale locale0 = new Locale("", "");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      boolean boolean0 = jDOMNodePointer0.isCollection();
      assertFalse(boolean0);
  }
}
