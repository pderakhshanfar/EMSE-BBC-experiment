/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 05:10:19 GMT 2020
 */

package org.apache.commons.jxpath.ri.model.jdom;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.apache.commons.jxpath.ri.model.jdom.JDOMAttributePointer;
import org.apache.commons.jxpath.ri.model.jdom.JDOMNodeIterator;
import org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jdom.Attribute;
import org.jdom.CDATA;
import org.jdom.Comment;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.ProcessingInstruction;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JDOMNodePointer_ESTest extends JDOMNodePointer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      
      Element element0 = new Element("i");
      assertNotNull(element0);
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("i", element0.getName());
      
      CDATA cDATA0 = new CDATA("/Jz[uoQ");
      assertNotNull(cDATA0);
      assertEquals("/Jz[uoQ", cDATA0.getText());
      assertEquals("/Jz[uoQ", cDATA0.getValue());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("/Jz[uoQ", cDATA0.getText());
      assertEquals("/Jz[uoQ", cDATA0.getValue());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertNotNull(jDOMNodePointer1);
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("i", element0.getName());
      assertEquals("/Jz[uoQ", cDATA0.getText());
      assertEquals("/Jz[uoQ", cDATA0.getValue());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = jDOMNodePointer1.asPath();
      assertNotNull(string0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals("/text()[1]/i[1]", string0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("i", element0.getName());
      assertEquals("/Jz[uoQ", cDATA0.getText());
      assertEquals("/Jz[uoQ", cDATA0.getValue());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) locale0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace");
      assertNotNull(qName0);
      assertEquals("http", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertEquals("//www.w3.org/XML/1998/namespace", qName0.getName());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createChild((JXPathContext) jXPathContextReferenceImpl0, qName0, 39, (Object) jXPathContextReferenceImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: 
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Locale locale0 = new Locale("OnF7i");
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("onf7i", locale0.getLanguage());
      assertEquals("onf7i", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      Element element0 = new Element("OnF7i", "OnF7i", "OnF7i");
      assertNotNull(element0);
      assertEquals("OnF7i", element0.getNamespaceURI());
      assertEquals("OnF7i", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("OnF7i", element0.getNamespacePrefix());
      
      Element element1 = new Element("peserve");
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertFalse(element1.isRootElement());
      assertEquals(0, element1.getContentSize());
      assertEquals("peserve", element1.getName());
      assertEquals("", element1.getNamespaceURI());
      assertEquals("", element1.getNamespacePrefix());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element1, locale0);
      assertNotNull(jDOMNodePointer0);
      assertFalse(element1.equals((Object)element0));
      assertEquals("", locale0.getCountry());
      assertEquals("onf7i", locale0.getLanguage());
      assertEquals("onf7i", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertFalse(element1.isRootElement());
      assertEquals(0, element1.getContentSize());
      assertEquals("peserve", element1.getName());
      assertEquals("", element1.getNamespaceURI());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      jDOMNodePointer0.setValue(element0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals("", locale0.getCountry());
      assertEquals("onf7i", locale0.getLanguage());
      assertEquals("onf7i", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("OnF7i", element0.getNamespaceURI());
      assertEquals("OnF7i", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("OnF7i", element0.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertEquals(0, element1.getContentSize());
      assertEquals("peserve", element1.getName());
      assertEquals("", element1.getNamespaceURI());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNotNull(variablePointer0);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, jXPathContextReferenceImpl0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean0 = jDOMNodePointer0.testNode((NodeTest) null);
      assertTrue(boolean0);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0, "t");
      assertNotNull(jDOMNodePointer0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean0 = jDOMNodePointer0.isLanguage("");
      assertTrue(boolean0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      assertNotNull(namespace0);
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      
      Element element0 = new Element("OnF7i", namespace0);
      assertNotNull(element0);
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("OnF7i", element0.getName());
      assertFalse(element0.isRootElement());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("OnF7i", element0.getName());
      assertFalse(element0.isRootElement());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = jDOMNodePointer0.getNamespaceURI("");
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("OnF7i", element0.getName());
      assertFalse(element0.isRootElement());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      Element element0 = new Element("kFi");
      assertNotNull(element0);
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("kFi", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("kFi", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = jDOMNodePointer0.getLanguage();
      assertNull(string0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("kFi", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Object object0 = jDOMNodePointer0.getImmediateNode();
      assertNull(object0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("38]I'bAH3>H");
      assertNotNull(qName0);
      assertEquals("38]I'bAH3>H", qName0.getName());
      assertEquals("38]I'bAH3>H", qName0.toString());
      assertNull(qName0.getPrefix());
      
      basicVariables0.declareVariable("38]I'bAH3>H", qName0);
      assertEquals("38]I'bAH3>H", qName0.getName());
      assertEquals("38]I'bAH3>H", qName0.toString());
      assertNull(qName0.getPrefix());
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNotNull(variablePointer0);
      assertEquals("38]I'bAH3>H", qName0.getName());
      assertEquals("38]I'bAH3>H", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      BeanPointer beanPointer0 = (BeanPointer)variablePointer0.getImmediateValuePointer();
      assertNotNull(beanPointer0);
      assertEquals("38]I'bAH3>H", qName0.getName());
      assertEquals("38]I'bAH3>H", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      CDATA cDATA0 = new CDATA("(");
      assertNotNull(cDATA0);
      assertEquals("(", cDATA0.getText());
      assertEquals("(", cDATA0.getValue());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(beanPointer0, cDATA0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("38]I'bAH3>H", qName0.getName());
      assertEquals("38]I'bAH3>H", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertEquals("(", cDATA0.getText());
      assertEquals("(", cDATA0.getValue());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      CDATA cDATA1 = (CDATA)jDOMNodePointer0.getBaseValue();
      assertNotNull(cDATA1);
      assertSame(cDATA0, cDATA1);
      assertSame(cDATA1, cDATA0);
      assertEquals("38]I'bAH3>H", qName0.getName());
      assertEquals("38]I'bAH3>H", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertEquals("(", cDATA0.getText());
      assertEquals("(", cDATA0.getValue());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("(", cDATA1.getText());
      assertEquals("(", cDATA1.getValue());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CDATA cDATA0 = new CDATA("qX");
      assertNotNull(cDATA0);
      assertEquals("qX", cDATA0.getValue());
      assertEquals("qX", cDATA0.getText());
      
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      assertNotNull(namespace0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      
      String string0 = JDOMNodePointer.findEnclosingAttribute(cDATA0, "org.jdom.Namespace@0000000005", namespace0);
      assertNull(string0);
      assertEquals("qX", cDATA0.getValue());
      assertEquals("qX", cDATA0.getText());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("id('", locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Ec 6Vy`B7f1Q)");
      assertNotNull(processingInstructionTest0);
      assertEquals("Ec 6Vy`B7f1Q)", processingInstructionTest0.getTarget());
      
      QName qName0 = new QName("id('", "c5yG@*%");
      assertNotNull(qName0);
      assertEquals("c5yG@*%", qName0.getName());
      assertEquals("id(':c5yG@*%", qName0.toString());
      assertEquals("id('", qName0.getPrefix());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, locale0, locale0);
      assertNotNull(beanPointer0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("c5yG@*%", qName0.getName());
      assertEquals("id(':c5yG@*%", qName0.toString());
      assertEquals("id('", qName0.getPrefix());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JDOMNodeIterator jDOMNodeIterator0 = (JDOMNodeIterator)jDOMNodePointer0.childIterator(processingInstructionTest0, true, beanPointer0);
      assertNotNull(jDOMNodeIterator0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals("Ec 6Vy`B7f1Q)", processingInstructionTest0.getTarget());
      assertEquals("c5yG@*%", qName0.getName());
      assertEquals("id(':c5yG@*%", qName0.toString());
      assertEquals("id('", qName0.getPrefix());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertEquals(0, jDOMNodeIterator0.getPosition());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      
      Element element0 = new Element("OnF7i", "OnF7i", "OnF7i");
      assertNotNull(element0);
      assertEquals(0, element0.getContentSize());
      assertEquals("OnF7i", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("OnF7i", element0.getNamespacePrefix());
      assertEquals("OnF7i", element0.getNamespaceURI());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0, "OnF7i");
      assertNotNull(jDOMNodePointer0);
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = jDOMNodePointer0.getName();
      assertNotNull(qName0);
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, "<<unknown namespace>>");
      assertNotNull(beanPointer0);
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        JDOMNodePointer.testNode((NodePointer) beanPointer0, (Object) element0, (NodeTest) nodeNameTest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.NodeNameTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      
      Element element0 = new Element("knFi", "knFi");
      assertNotNull(element0);
      assertFalse(element0.isRootElement());
      assertEquals("knFi", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("knFi", element0.getName());
      assertEquals(0, element0.getContentSize());
      
      Document document0 = new Document();
      assertNotNull(document0);
      assertNull(document0.getBaseURI());
      assertEquals(0, document0.getContentSize());
      assertFalse(document0.hasRootElement());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertFalse(element0.isRootElement());
      assertEquals("knFi", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("knFi", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("knFi", jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue(document0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue(locale0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Locale cannot be cast to org.jdom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Document document0 = new Document(linkedList0);
      assertNotNull(document0);
      assertEquals(0, linkedList0.size());
      assertFalse(document0.hasRootElement());
      assertEquals(0, document0.getContentSize());
      assertNull(document0.getBaseURI());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(0, linkedList0.size());
      assertFalse(document0.hasRootElement());
      assertEquals(0, document0.getContentSize());
      assertNull(document0.getBaseURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.namespaceIterator();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.isLanguage((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.getNamespaceURI((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Element element0 = new Element("X", "X", "X");
      assertNotNull(element0);
      assertEquals("X", element0.getNamespaceURI());
      assertEquals("X", element0.getNamespacePrefix());
      assertEquals("X", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      
      // Undeclared exception!
      try { 
        JDOMNodePointer.findEnclosingAttribute(element0, "JXPath: found system property", (Namespace) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jdom.AttributeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      CDATA cDATA0 = new CDATA("http://www.w3.org/XML/1998/namespace");
      assertNotNull(cDATA0);
      assertEquals("http://www.w3.org/XML/1998/namespace", cDATA0.getText());
      assertEquals("http://www.w3.org/XML/1998/namespace", cDATA0.getValue());
      
      QName qName0 = jDOMNodePointer0.getName();
      assertNotNull(qName0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createChild((JXPathContext) null, qName0, Integer.MIN_VALUE, (Object) cDATA0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      
      Element element0 = new Element("m", "m", "m");
      assertNotNull(element0);
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("m", element0.getName());
      assertEquals("m", element0.getNamespacePrefix());
      assertEquals("m", element0.getNamespaceURI());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("m", element0.getName());
      assertEquals("m", element0.getNamespacePrefix());
      assertEquals("m", element0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals("m", jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = new QName("m", "http://www.w3.org/XML/1998/namespace");
      assertNotNull(qName0);
      assertEquals("m:http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getName());
      assertEquals("m", qName0.getPrefix());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "m");
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createAttribute(jXPathContextReferenceImpl0, qName0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The name \"http://www.w3.org/XML/1998/namespace\" is not legal for JDOM/XML attributes: XML names cannot contain the character \"/\".
         //
         verifyException("org.jdom.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      
      Element element0 = new Element("knFi");
      assertNotNull(element0);
      assertEquals(0, element0.getContentSize());
      assertEquals("knFi", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals(0, element0.getContentSize());
      assertEquals("knFi", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) jDOMNodePointer0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals(0, element0.getContentSize());
      assertEquals("knFi", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createAttribute(jXPathContextReferenceImpl0, (QName) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      assertNotNull(variablePointer0);
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, object0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.compareChildNodePointers(variablePointer0, (NodePointer) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: null
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      
      Comment comment0 = new Comment("B");
      assertNotNull(comment0);
      assertEquals("B", comment0.getValue());
      assertEquals("B", comment0.getText());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(comment0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("B", comment0.getValue());
      assertEquals("B", comment0.getText());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.compareChildNodePointers((NodePointer) null, (NodePointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("kni", locale0, "kni");
      assertNotNull(jDOMNodePointer0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("<<unknown namespace>>", "kni");
      assertNotNull(qName0);
      assertEquals("kni", qName0.getName());
      assertEquals("<<unknown namespace>>:kni", qName0.toString());
      assertEquals("<<unknown namespace>>", qName0.getPrefix());
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNotNull(variablePointer0);
      assertEquals("kni", qName0.getName());
      assertEquals("<<unknown namespace>>:kni", qName0.toString());
      assertEquals("<<unknown namespace>>", qName0.getPrefix());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.compareChildNodePointers(variablePointer0, variablePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: '<<unknown namespace>>:kni'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, "Root element not set");
      assertNotNull(jDOMNodePointer0);
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("<<unknown namespace>>");
      assertNotNull(processingInstructionTest0);
      assertEquals("<<unknown namespace>>", processingInstructionTest0.getTarget());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.childIterator(processingInstructionTest0, true, variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: null
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      
      Comment comment0 = new Comment("knrFi");
      assertNotNull(comment0);
      assertEquals("knrFi", comment0.getText());
      assertEquals("knrFi", comment0.getValue());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(comment0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("knrFi", comment0.getText());
      assertEquals("knrFi", comment0.getValue());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NodePointer nodePointer0 = jDOMNodePointer0.namespacePointer((String) null);
      assertNotNull(nodePointer0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("knrFi", comment0.getText());
      assertEquals("knrFi", comment0.getValue());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(nodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isContainer());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isLeaf());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("kFi");
      assertNotNull(processingInstructionTest0);
      assertEquals("kFi", processingInstructionTest0.getTarget());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.childIterator(processingInstructionTest0, true, nodePointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      
      Element element0 = new Element("u", "u");
      assertNotNull(element0);
      assertEquals(0, element0.getContentSize());
      assertEquals("u", element0.getName());
      assertEquals("u", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals(0, element0.getContentSize());
      assertEquals("u", element0.getName());
      assertEquals("u", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("u", jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.attributeIterator((QName) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMAttributeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      
      Element element0 = new Element("knFi", "knFi");
      assertNotNull(element0);
      assertEquals("knFi", element0.getNamespaceURI());
      assertEquals("knFi", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("knFi", locale0, "knFi");
      assertNotNull(jDOMNodePointer0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertNotNull(jDOMNodePointer1);
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("knFi", element0.getNamespaceURI());
      assertEquals("knFi", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals("knFi", jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      jDOMNodePointer1.asPath();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = jDOMNodePointer0.asPath();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      
      Element element0 = new Element("knFi", "knFi", "knFi");
      assertNotNull(element0);
      assertFalse(element0.isRootElement());
      assertEquals("knFi", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("knFi", element0.getNamespacePrefix());
      assertEquals("knFi", element0.getNamespaceURI());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertFalse(element0.isRootElement());
      assertEquals("knFi", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("knFi", element0.getNamespacePrefix());
      assertEquals("knFi", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("knFi", jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = jDOMNodePointer0.asPath();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertFalse(element0.isRootElement());
      assertEquals("knFi", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("knFi", element0.getNamespacePrefix());
      assertEquals("knFi", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("knFi", jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Element element0 = new Element("knFi");
      assertNotNull(element0);
      assertFalse(element0.isRootElement());
      assertEquals("knFi", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      
      String string0 = JDOMNodePointer.getLocalName(element0);
      assertNotNull(string0);
      assertEquals("knFi", string0);
      assertFalse(element0.isRootElement());
      assertEquals("knFi", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Element element0 = new Element("knFi");
      assertNotNull(element0);
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("knFi", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      
      String string0 = JDOMNodePointer.getPrefix(element0);
      assertNull(string0);
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("knFi", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("kFi", "kFi");
      assertNotNull(processingInstruction0);
      assertEquals("kFi", processingInstruction0.getTarget());
      assertEquals("kFi", processingInstruction0.getData());
      assertEquals("kFi", processingInstruction0.getValue());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("kFi", processingInstruction0.getTarget());
      assertEquals("kFi", processingInstruction0.getData());
      assertEquals("kFi", processingInstruction0.getValue());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("<<unknown namespace>>");
      assertNotNull(processingInstructionTest0);
      assertEquals("<<unknown namespace>>", processingInstructionTest0.getTarget());
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) processingInstruction0, (NodeTest) processingInstructionTest0);
      assertFalse(boolean0);
      assertEquals("kFi", processingInstruction0.getTarget());
      assertEquals("kFi", processingInstruction0.getData());
      assertEquals("kFi", processingInstruction0.getValue());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("<<unknown namespace>>", processingInstructionTest0.getTarget());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      assertNotNull(nodeTypeTest0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeTypeTest0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) locale0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) jDOMNodePointer0, (NodeTest) null);
      assertTrue(boolean0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CDATA cDATA0 = new CDATA(">");
      assertNotNull(cDATA0);
      assertEquals(">", cDATA0.getValue());
      assertEquals(">", cDATA0.getText());
      
      Locale locale0 = Locale.forLanguageTag(">");
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(">", cDATA0.getValue());
      assertEquals(">", cDATA0.getText());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Object object0 = jDOMNodePointer0.getValue();
      assertNotNull(object0);
      assertEquals(">", object0);
      assertEquals(">", cDATA0.getValue());
      assertEquals(">", cDATA0.getText());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("t");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("t", qName0.getName());
      assertEquals("t", qName0.toString());
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNotNull(variablePointer0);
      assertNull(qName0.getPrefix());
      assertEquals("t", qName0.getName());
      assertEquals("t", qName0.toString());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, basicVariables0);
      assertNotNull(jDOMNodePointer0);
      assertNull(qName0.getPrefix());
      assertEquals("t", qName0.getName());
      assertEquals("t", qName0.toString());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("dO`&osam1%");
      assertNotNull(processingInstructionTest0);
      assertEquals("dO`&osam1%", processingInstructionTest0.getTarget());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.childIterator(processingInstructionTest0, false, variablePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 't'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0, "_q~s>-hcx1O");
      assertNotNull(jDOMNodePointer0);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Object object0 = jDOMNodePointer0.getBaseValue();
      assertNull(object0);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, jDOMNodePointer0);
      assertNotNull(jDOMNodePointer1);
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean0 = jDOMNodePointer1.equals(jDOMNodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(boolean0);
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(locale0, locale0);
      assertNotNull(jDOMNodePointer1);
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean0 = jDOMNodePointer1.equals(jDOMNodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(boolean0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("OnF7i", "OnF7i");
      assertNotNull(processingInstruction0);
      assertEquals("OnF7i", processingInstruction0.getTarget());
      assertEquals("OnF7i", processingInstruction0.getValue());
      assertEquals("OnF7i", processingInstruction0.getData());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("OnF7i", processingInstruction0.getTarget());
      assertEquals("OnF7i", processingInstruction0.getValue());
      assertEquals("OnF7i", processingInstruction0.getData());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean0 = jDOMNodePointer0.equals(jDOMNodePointer0);
      assertTrue(boolean0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("OnF7i", processingInstruction0.getTarget());
      assertEquals("OnF7i", processingInstruction0.getValue());
      assertEquals("OnF7i", processingInstruction0.getData());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean0 = jDOMNodePointer0.equals(locale0);
      assertFalse(boolean0);
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("<<unknown namespace>>");
      assertNotNull(processingInstructionTest0);
      assertEquals("<<unknown namespace>>", processingInstructionTest0.getTarget());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstructionTest0, locale0, "processing-instruction('http://www.w3.org/2000/xmlns/')");
      assertNotNull(jDOMNodePointer0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("<<unknown namespace>>", processingInstructionTest0.getTarget());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = jDOMNodePointer0.asPath();
      assertNotNull(string0);
      assertEquals("id('processing-instruction(&apos;http://www.w3.org/2000/xmlns/&apos;)')", string0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("<<unknown namespace>>", processingInstructionTest0.getTarget());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("kFi", "kFi");
      assertNotNull(processingInstruction0);
      assertEquals("kFi", processingInstruction0.getData());
      assertEquals("kFi", processingInstruction0.getValue());
      assertEquals("kFi", processingInstruction0.getTarget());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("kFi", processingInstruction0.getData());
      assertEquals("kFi", processingInstruction0.getValue());
      assertEquals("kFi", processingInstruction0.getTarget());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = jDOMNodePointer0.asPath();
      assertNotNull(string0);
      assertEquals("/processing-instruction('kFi')[1]", string0);
      assertEquals("kFi", processingInstruction0.getData());
      assertEquals("kFi", processingInstruction0.getValue());
      assertEquals("kFi", processingInstruction0.getTarget());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CDATA cDATA0 = new CDATA("3");
      assertNotNull(cDATA0);
      assertEquals("3", cDATA0.getValue());
      assertEquals("3", cDATA0.getText());
      
      Locale locale0 = Locale.forLanguageTag("3");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("3", cDATA0.getValue());
      assertEquals("3", cDATA0.getText());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = jDOMNodePointer0.asPath();
      assertNotNull(string0);
      assertEquals("/text()[1]", string0);
      assertEquals("3", cDATA0.getValue());
      assertEquals("3", cDATA0.getText());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      Element element0 = new Element("knFi", "knFi", "knFi");
      assertNotNull(element0);
      assertEquals(0, element0.getContentSize());
      assertEquals("knFi", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("knFi", element0.getNamespacePrefix());
      assertEquals("knFi", element0.getNamespaceURI());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, element0.getContentSize());
      assertEquals("knFi", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("knFi", element0.getNamespacePrefix());
      assertEquals("knFi", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("knFi", jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertNotNull(jDOMNodePointer1);
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, element0.getContentSize());
      assertEquals("knFi", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("knFi", element0.getNamespacePrefix());
      assertEquals("knFi", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("knFi", jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("knFi", jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = jDOMNodePointer1.asPath();
      assertNotNull(string0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals("/knFi:knFi[1]", string0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, element0.getContentSize());
      assertEquals("knFi", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("knFi", element0.getNamespacePrefix());
      assertEquals("knFi", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("knFi", jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("knFi", jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.remove();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot remove root JDOM node
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      
      Element element0 = new Element("m", "m", "m");
      assertNotNull(element0);
      assertEquals("m", element0.getNamespaceURI());
      assertEquals("m", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("m", element0.getName());
      assertFalse(element0.isRootElement());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("m", element0.getNamespaceURI());
      assertEquals("m", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("m", element0.getName());
      assertFalse(element0.isRootElement());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("m", jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = new QName("http://www.w3.org/2000/xmlns/", "<<unknown namespace>>");
      assertNotNull(qName0);
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getPrefix());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("http://www.w3.org/2000/xmlns/:<<unknown namespace>>", qName0.toString());
      
      QName qName1 = new QName("m");
      assertNotNull(qName1);
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("m", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals("m", qName1.getName());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) qName0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertNotSame(qName0, qName1);
      assertFalse(qName0.equals((Object)qName1));
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getPrefix());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("http://www.w3.org/2000/xmlns/:<<unknown namespace>>", qName0.toString());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JDOMAttributePointer jDOMAttributePointer0 = (JDOMAttributePointer)jDOMNodePointer0.createAttribute(jXPathContextReferenceImpl0, qName1);
      assertNotNull(jDOMAttributePointer0);
      assertNotSame(qName0, qName1);
      assertNotSame(qName1, qName0);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("m", element0.getNamespaceURI());
      assertEquals("m", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("m", element0.getName());
      assertFalse(element0.isRootElement());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("m", jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getPrefix());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("http://www.w3.org/2000/xmlns/:<<unknown namespace>>", qName0.toString());
      assertEquals("m", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals("m", qName1.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(jDOMAttributePointer0.isLeaf());
      assertFalse(jDOMAttributePointer0.isAttribute());
      assertNull(jDOMAttributePointer0.getNamespaceURI());
      assertEquals(1, jDOMAttributePointer0.getLength());
      assertFalse(jDOMAttributePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMAttributePointer0.getIndex());
      assertFalse(jDOMAttributePointer0.isRoot());
      assertFalse(jDOMAttributePointer0.isCollection());
      assertTrue(jDOMAttributePointer0.isNode());
      assertTrue(jDOMAttributePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JDOMAttributePointer jDOMAttributePointer1 = (JDOMAttributePointer)jDOMNodePointer0.createAttribute(jXPathContextReferenceImpl0, qName1);
      assertNotNull(jDOMAttributePointer1);
      assertNotSame(qName0, qName1);
      assertNotSame(qName1, qName0);
      assertNotSame(jDOMAttributePointer1, jDOMAttributePointer0);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(qName1.equals((Object)qName0));
      assertTrue(jDOMAttributePointer1.equals((Object)jDOMAttributePointer0));
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("m", element0.getNamespaceURI());
      assertEquals("m", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("m", element0.getName());
      assertFalse(element0.isRootElement());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("m", jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getPrefix());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("http://www.w3.org/2000/xmlns/:<<unknown namespace>>", qName0.toString());
      assertEquals("m", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals("m", qName1.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(jDOMAttributePointer1.getNamespaceURI());
      assertFalse(jDOMAttributePointer1.isContainer());
      assertFalse(jDOMAttributePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMAttributePointer1.getIndex());
      assertTrue(jDOMAttributePointer1.isLeaf());
      assertEquals(1, jDOMAttributePointer1.getLength());
      assertTrue(jDOMAttributePointer1.isNode());
      assertFalse(jDOMAttributePointer1.isRoot());
      assertTrue(jDOMAttributePointer1.isActual());
      assertFalse(jDOMAttributePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      
      Element element0 = new Element("kFi", "kFi", "kFi");
      assertNotNull(element0);
      assertEquals("kFi", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("kFi", element0.getNamespacePrefix());
      assertEquals("kFi", element0.getNamespaceURI());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("kFi", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("kFi", element0.getNamespacePrefix());
      assertEquals("kFi", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("kFi", jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = jDOMNodePointer0.getName();
      assertNotNull(qName0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("kFi", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("kFi", element0.getNamespacePrefix());
      assertEquals("kFi", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("kFi", jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("kFi:kFi", qName0.toString());
      assertEquals("kFi", qName0.getName());
      assertEquals("kFi", qName0.getPrefix());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      CDATA cDATA0 = new CDATA("8ooVb.2PPp6#1[2");
      assertNotNull(cDATA0);
      assertEquals("8ooVb.2PPp6#1[2", cDATA0.getText());
      assertEquals("8ooVb.2PPp6#1[2", cDATA0.getValue());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) cDATA0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals("8ooVb.2PPp6#1[2", cDATA0.getText());
      assertEquals("8ooVb.2PPp6#1[2", cDATA0.getValue());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JDOMAttributePointer jDOMAttributePointer0 = (JDOMAttributePointer)jDOMNodePointer0.createAttribute(jXPathContextReferenceImpl0, qName0);
      assertNotNull(jDOMAttributePointer0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("kFi", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("kFi", element0.getNamespacePrefix());
      assertEquals("kFi", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("kFi", jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("kFi:kFi", qName0.toString());
      assertEquals("kFi", qName0.getName());
      assertEquals("kFi", qName0.getPrefix());
      assertEquals("8ooVb.2PPp6#1[2", cDATA0.getText());
      assertEquals("8ooVb.2PPp6#1[2", cDATA0.getValue());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jDOMAttributePointer0.isAttribute());
      assertFalse(jDOMAttributePointer0.isRoot());
      assertTrue(jDOMAttributePointer0.isNode());
      assertTrue(jDOMAttributePointer0.isActual());
      assertEquals("kFi", jDOMAttributePointer0.getNamespaceURI());
      assertFalse(jDOMAttributePointer0.isCollection());
      assertEquals(1, jDOMAttributePointer0.getLength());
      assertFalse(jDOMAttributePointer0.isContainer());
      assertTrue(jDOMAttributePointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, jDOMAttributePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JDOMAttributePointer jDOMAttributePointer1 = (JDOMAttributePointer)jDOMNodePointer0.createAttribute(jXPathContextReferenceImpl0, qName0);
      assertNotNull(jDOMAttributePointer1);
      assertNotSame(jDOMAttributePointer1, jDOMAttributePointer0);
      assertTrue(jDOMAttributePointer1.equals((Object)jDOMAttributePointer0));
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("kFi", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("kFi", element0.getNamespacePrefix());
      assertEquals("kFi", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("kFi", jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("kFi:kFi", qName0.toString());
      assertEquals("kFi", qName0.getName());
      assertEquals("kFi", qName0.getPrefix());
      assertEquals("8ooVb.2PPp6#1[2", cDATA0.getText());
      assertEquals("8ooVb.2PPp6#1[2", cDATA0.getValue());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(jDOMAttributePointer1.isNode());
      assertTrue(jDOMAttributePointer1.isActual());
      assertFalse(jDOMAttributePointer1.isContainer());
      assertEquals(1, jDOMAttributePointer1.getLength());
      assertFalse(jDOMAttributePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMAttributePointer1.getIndex());
      assertTrue(jDOMAttributePointer1.isLeaf());
      assertEquals("kFi", jDOMAttributePointer1.getNamespaceURI());
      assertFalse(jDOMAttributePointer1.isCollection());
      assertFalse(jDOMAttributePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      
      Element element0 = new Element("knFi");
      assertNotNull(element0);
      assertFalse(element0.isRootElement());
      assertEquals("knFi", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertFalse(element0.isRootElement());
      assertEquals("knFi", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace");
      assertNotNull(qName0);
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertEquals("//www.w3.org/XML/1998/namespace", qName0.getName());
      assertEquals("http", qName0.getPrefix());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createAttribute((JXPathContext) null, qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown namespace prefix: http
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createAttribute((JXPathContext) null, (QName) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot create an attribute for path /@null, operation is not allowed for this type of node
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0, "|!9Znaa7");
      assertNotNull(jDOMNodePointer0);
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createChild((JXPathContext) null, (QName) null, 2109);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      
      Comment comment0 = new Comment("knrFi");
      assertNotNull(comment0);
      assertEquals("knrFi", comment0.getText());
      assertEquals("knrFi", comment0.getValue());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(comment0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("knrFi", comment0.getText());
      assertEquals("knrFi", comment0.getValue());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean0 = jDOMNodePointer0.isLanguage("knrFi");
      assertFalse(boolean0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("knrFi", comment0.getText());
      assertEquals("knrFi", comment0.getValue());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Attribute attribute0 = new Attribute("OnF7i", "OnF7i");
      assertNotNull(attribute0);
      assertEquals("OnF7i", attribute0.getValue());
      assertEquals("", attribute0.getNamespacePrefix());
      assertEquals("", attribute0.getNamespaceURI());
      assertEquals("OnF7i", attribute0.getName());
      assertEquals(0, attribute0.getAttributeType());
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      
      String string0 = JDOMNodePointer.getLocalName(attribute0);
      assertNotNull(string0);
      assertEquals("OnF7i", string0);
      assertEquals("OnF7i", attribute0.getValue());
      assertEquals("", attribute0.getNamespacePrefix());
      assertEquals("", attribute0.getNamespaceURI());
      assertEquals("OnF7i", attribute0.getName());
      assertEquals(0, attribute0.getAttributeType());
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      assertNotNull(namespace0);
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      
      String string0 = JDOMNodePointer.getLocalName(namespace0);
      assertNull(string0);
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Attribute attribute0 = new Attribute("OnF7i", "OnF7i");
      assertNotNull(attribute0);
      assertEquals(0, attribute0.getAttributeType());
      assertEquals("OnF7i", attribute0.getValue());
      assertEquals("OnF7i", attribute0.getName());
      assertEquals("", attribute0.getNamespaceURI());
      assertEquals("", attribute0.getNamespacePrefix());
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      assertNotNull(namespace0);
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      
      Attribute attribute1 = attribute0.setNamespace(namespace0);
      assertNotNull(attribute1);
      assertSame(attribute0, attribute1);
      assertSame(attribute1, attribute0);
      assertEquals(0, attribute0.getAttributeType());
      assertEquals("OnF7i", attribute0.getValue());
      assertEquals("OnF7i", attribute0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", attribute0.getNamespaceURI());
      assertEquals("xml", attribute0.getNamespacePrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("OnF7i", attribute1.getValue());
      assertEquals("xml", attribute1.getNamespacePrefix());
      assertEquals("OnF7i", attribute1.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", attribute1.getNamespaceURI());
      assertEquals(0, attribute1.getAttributeType());
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      
      String string0 = JDOMNodePointer.getPrefix(attribute1);
      assertNotNull(string0);
      assertSame(attribute0, attribute1);
      assertSame(attribute1, attribute0);
      assertEquals("xml", string0);
      assertEquals(0, attribute0.getAttributeType());
      assertEquals("OnF7i", attribute0.getValue());
      assertEquals("OnF7i", attribute0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", attribute0.getNamespaceURI());
      assertEquals("xml", attribute0.getNamespacePrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("OnF7i", attribute1.getValue());
      assertEquals("xml", attribute1.getNamespacePrefix());
      assertEquals("OnF7i", attribute1.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", attribute1.getNamespaceURI());
      assertEquals(0, attribute1.getAttributeType());
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      
      String string0 = JDOMNodePointer.getPrefix(locale0);
      assertNull(string0);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Element element0 = new Element("X", "X", "X");
      assertNotNull(element0);
      assertEquals("X", element0.getName());
      assertEquals("X", element0.getNamespacePrefix());
      assertEquals("X", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      
      String string0 = JDOMNodePointer.getPrefix(element0);
      assertNotNull(string0);
      assertEquals("X", string0);
      assertEquals("X", element0.getName());
      assertEquals("X", element0.getNamespacePrefix());
      assertEquals("X", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Attribute attribute0 = new Attribute("OnF7i", "OnF7i");
      assertNotNull(attribute0);
      assertEquals("OnF7i", attribute0.getValue());
      assertEquals("", attribute0.getNamespacePrefix());
      assertEquals("", attribute0.getNamespaceURI());
      assertEquals("OnF7i", attribute0.getName());
      assertEquals(0, attribute0.getAttributeType());
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      
      String string0 = JDOMNodePointer.getPrefix(attribute0);
      assertNull(string0);
      assertEquals("OnF7i", attribute0.getValue());
      assertEquals("", attribute0.getNamespacePrefix());
      assertEquals("", attribute0.getNamespaceURI());
      assertEquals("OnF7i", attribute0.getName());
      assertEquals(0, attribute0.getAttributeType());
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      
      Element element0 = new Element("w", "w", "w");
      assertNotNull(element0);
      assertEquals("w", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("w", element0.getName());
      assertEquals("w", element0.getNamespacePrefix());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("w", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("w", element0.getName());
      assertEquals("w", element0.getNamespacePrefix());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("w", jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = jDOMNodePointer0.getName();
      assertNotNull(qName0);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("w", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("w", element0.getName());
      assertEquals("w", element0.getNamespacePrefix());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("w", jDOMNodePointer0.getNamespaceURI());
      assertEquals("w", qName0.getName());
      assertEquals("w", qName0.getPrefix());
      assertEquals("w:w", qName0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("w", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("w", element0.getName());
      assertEquals("w", element0.getNamespacePrefix());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("w", jDOMNodePointer0.getNamespaceURI());
      assertEquals("w", qName0.getName());
      assertEquals("w", qName0.getPrefix());
      assertEquals("w:w", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("w:w", nodeNameTest0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) element0, (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("w", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("w", element0.getName());
      assertEquals("w", element0.getNamespacePrefix());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("w", jDOMNodePointer0.getNamespaceURI());
      assertEquals("w", qName0.getName());
      assertEquals("w", qName0.getPrefix());
      assertEquals("w:w", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("w:w", nodeNameTest0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("i", "i");
      assertNotNull(processingInstruction0);
      assertEquals("i", processingInstruction0.getValue());
      assertEquals("i", processingInstruction0.getData());
      assertEquals("i", processingInstruction0.getTarget());
      
      Locale locale0 = new Locale("i", "i", "i");
      assertNotNull(locale0);
      assertEquals("i_I_i", locale0.toString());
      assertEquals("i", locale0.getVariant());
      assertEquals("i", locale0.getLanguage());
      assertEquals("I", locale0.getCountry());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("i", processingInstruction0.getValue());
      assertEquals("i", processingInstruction0.getData());
      assertEquals("i", processingInstruction0.getTarget());
      assertEquals("i_I_i", locale0.toString());
      assertEquals("i", locale0.getVariant());
      assertEquals("i", locale0.getLanguage());
      assertEquals("I", locale0.getCountry());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("http://www.w3.org/XML/1998/namespace");
      assertNotNull(processingInstructionTest0);
      assertEquals("http://www.w3.org/XML/1998/namespace", processingInstructionTest0.getTarget());
      
      boolean boolean0 = jDOMNodePointer0.testNode((NodeTest) processingInstructionTest0);
      assertFalse(boolean0);
      assertEquals("i", processingInstruction0.getValue());
      assertEquals("i", processingInstruction0.getData());
      assertEquals("i", processingInstruction0.getTarget());
      assertEquals("i_I_i", locale0.toString());
      assertEquals("i", locale0.getVariant());
      assertEquals("i", locale0.getLanguage());
      assertEquals("I", locale0.getCountry());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("http://www.w3.org/XML/1998/namespace", processingInstructionTest0.getTarget());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("kni", locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      assertNotNull(nodeTypeTest0);
      assertEquals(2, nodeTypeTest0.getNodeType());
      
      CDATA cDATA0 = new CDATA("kni");
      assertNotNull(cDATA0);
      assertEquals("kni", cDATA0.getText());
      assertEquals("kni", cDATA0.getValue());
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) cDATA0, (NodeTest) nodeTypeTest0);
      assertTrue(boolean0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertEquals("kni", cDATA0.getText());
      assertEquals("kni", cDATA0.getValue());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      assertNotNull(nodeTypeTest0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      
      Element element0 = new Element("xml", ":V<5`CbW8rFq");
      assertNotNull(element0);
      assertEquals(0, element0.getContentSize());
      assertEquals("xml", element0.getName());
      assertEquals(":V<5`CbW8rFq", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("xml", locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) element0, (NodeTest) nodeTypeTest0);
      assertTrue(boolean0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals(0, element0.getContentSize());
      assertEquals("xml", element0.getName());
      assertEquals(":V<5`CbW8rFq", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
      assertNotNull(nodeTypeTest0);
      assertEquals(4, nodeTypeTest0.getNodeType());
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) nodeTypeTest0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(4, nodeTypeTest0.getNodeType());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      assertNotNull(nodeTypeTest0);
      assertEquals(3, nodeTypeTest0.getNodeType());
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("i", locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) nodeTypeTest0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
      assertEquals(3, nodeTypeTest0.getNodeType());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      assertNotNull(nodeTypeTest0);
      assertEquals(2, nodeTypeTest0.getNodeType());
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) nodeTypeTest0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(710);
      assertNotNull(nodeTypeTest0);
      assertEquals(710, nodeTypeTest0.getNodeType());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeTypeTest0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(710, nodeTypeTest0.getNodeType());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, object0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(710, nodeTypeTest0.getNodeType());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("<<unknown namespace>>");
      assertNotNull(processingInstructionTest0);
      assertEquals("<<unknown namespace>>", processingInstructionTest0.getTarget());
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) locale0, (NodeTest) processingInstructionTest0);
      assertFalse(boolean0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("<<unknown namespace>>", processingInstructionTest0.getTarget());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Locale locale0 = new Locale("Lew");
      assertNotNull(locale0);
      assertEquals("lew", locale0.getLanguage());
      assertEquals("lew", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("lew", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      Element element0 = new Element("Lew");
      assertNotNull(element0);
      assertEquals("Lew", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals("lew", locale0.getLanguage());
      assertEquals("lew", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("lew", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("Lew", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = new QName("Lew", "Lew");
      assertNotNull(qName0);
      assertEquals("Lew:Lew", qName0.toString());
      assertEquals("Lew", qName0.getPrefix());
      assertEquals("Lew", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "<<unknown namespace>>");
      assertNotNull(nodeNameTest0);
      assertEquals("Lew:Lew", qName0.toString());
      assertEquals("Lew", qName0.getPrefix());
      assertEquals("Lew", qName0.getName());
      assertEquals("Lew:Lew", nodeNameTest0.toString());
      assertEquals("<<unknown namespace>>", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) element0, (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
      assertEquals("lew", locale0.getLanguage());
      assertEquals("lew", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("lew", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("Lew", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("Lew:Lew", qName0.toString());
      assertEquals("Lew", qName0.getPrefix());
      assertEquals("Lew", qName0.getName());
      assertEquals("Lew:Lew", nodeNameTest0.toString());
      assertEquals("<<unknown namespace>>", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Element element0 = new Element("Lew");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      QName qName0 = jDOMNodePointer0.getName();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "<<unknown namespace>>");
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) element0, (NodeTest) nodeNameTest0);
      assertEquals("Lew", nodeNameTest0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      Element element0 = new Element("u", "u");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      QName qName0 = new QName("u");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "u");
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) element0, (NodeTest) nodeNameTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      Element element0 = new Element("OnF7i", "OnF7i", "OnF7i");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0, "OnF7i");
      QName qName0 = new QName("http://www.w3.org/2000/xmlns/");
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, "<<unknown namespace>>");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      boolean boolean0 = JDOMNodePointer.testNode(nodePointer0, (Object) element0, (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      QName qName0 = jDOMNodePointer0.getName();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) jDOMNodePointer0, (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      Element element0 = new Element("knFi");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      jDOMNodePointer0.setValue("");
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      Element element0 = new Element("knFi");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      jDOMNodePointer0.setValue((Object) null);
      assertFalse(jDOMNodePointer0.isContainer());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      Element element0 = new Element("m", "m", "m");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("m", "m");
      jDOMNodePointer0.setValue(processingInstruction0);
      assertTrue(jDOMNodePointer0.isRoot());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Locale locale0 = new Locale("knFi", "knFi");
      Element element0 = new Element("knFi");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      CDATA cDATA0 = new CDATA("knFi");
      jDOMNodePointer0.setValue(cDATA0);
      assertEquals("knFi", cDATA0.getValue());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CDATA cDATA0 = new CDATA(">");
      Locale locale0 = Locale.forLanguageTag(">");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      jDOMNodePointer0.setValue(">");
      assertEquals(">", cDATA0.getText());
      assertEquals(">", cDATA0.getValue());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CDATA cDATA0 = new CDATA("3");
      Locale locale0 = Locale.forLanguageTag("3");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("i", "i");
      Locale locale0 = Locale.FRANCE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
      Object object0 = jDOMNodePointer0.getValue();
      assertEquals("i", object0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      Comment comment0 = new Comment("B");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(comment0, locale0);
      Object object0 = jDOMNodePointer0.getValue();
      assertEquals("B", object0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      Element element0 = new Element("org.apache.commons.jxpath.ri.compiler.NodeTest");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      Comment comment0 = new Comment("f BB}(81,5_9R9m");
      jDOMNodePointer0.setValue(comment0);
      Object object0 = jDOMNodePointer0.getValue();
      assertNotNull(object0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      Element element0 = new Element("knFi", "knFi");
      Document document0 = new Document(element0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      jDOMNodePointer0.setValue(document0);
      jDOMNodePointer0.getValue();
      assertEquals(1, element0.getContentSize());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      Element element0 = new Element("org.apache.commons.jxpath.ri.compiler.NodeTest");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      jDOMNodePointer0.setValue("org.apache.commons.jxpath.ri.compiler.NodeTest");
      Object object0 = jDOMNodePointer0.getValue();
      assertNotNull(object0);
      assertEquals("org.apache.commons.jxpath.ri.compiler.NodeTest", object0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      Object object0 = jDOMNodePointer0.getValue();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("w", "w");
      Locale locale0 = Locale.ITALIAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
      QName qName0 = jDOMNodePointer0.getName();
      assertEquals("w", qName0.toString());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      Element element0 = new Element("knFi", "knFi");
      Document document0 = new Document(element0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, locale0);
      boolean boolean0 = jDOMNodePointer0.isLeaf();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = new Document();
      Locale locale0 = Locale.JAPAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, locale0, (String) null);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.isLeaf();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      Element element0 = new Element("org.apache.commons.jxpath.ri.compiler.NodeTest");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      jDOMNodePointer0.setValue("org.apache.commons.jxpath.ri.compiler.NodeTest");
      boolean boolean0 = jDOMNodePointer0.isLeaf();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      Element element0 = new Element("knFi");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      boolean boolean0 = jDOMNodePointer0.isLeaf();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Locale locale0 = Locale.US;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      boolean boolean0 = jDOMNodePointer0.isLeaf();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      Element element0 = new Element("knFi", "knFi", "knFi");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      QName qName0 = new QName("http://www.w3.org/2000/xmlns/");
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, "http://www.w3.org/XML/1998/namespace");
      jDOMNodePointer0.setValue(locale0);
      int int0 = jDOMNodePointer0.compareChildNodePointers(nodePointer0, jDOMNodePointer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      Object object0 = new Object();
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(object0, locale0);
      // Undeclared exception!
      try { 
        jDOMNodePointer1.compareChildNodePointers(jDOMNodePointer1, jDOMNodePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JXPath internal error: compareChildNodes called for java.lang.Object@22b5e15e
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Locale locale0 = new Locale("org.apache.commons.jxpath.r.compiler.NodeTest", "org.apache.commons.jxpath.r.compiler.NodeTest");
      Element element0 = new Element("org.apache.commons.jxpath.r.compiler.NodeTest", "org.apache.commons.jxpath.r.compiler.NodeTest", "org.apache.commons.jxpath.r.compiler.NodeTest");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      String string0 = jDOMNodePointer0.getNamespaceURI("org.apache.commons.jxpath.r.compiler.NodeTest");
      assertEquals("org.apache.commons.jxpath.r.compiler.NodeTest", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      Element element0 = new Element("X");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      String string0 = jDOMNodePointer0.getNamespaceURI("X");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = new Document((Element) null);
      Locale locale0 = Locale.ITALY;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, locale0, "kni");
      // Undeclared exception!
      try { 
        jDOMNodePointer0.getNamespaceURI("7SZZCO\"LthXgE");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0, "w");
      String string0 = jDOMNodePointer0.getNamespaceURI("xml");
      assertEquals("http://www.w3.org/XML/1998/namespace", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      String string0 = jDOMNodePointer0.getNamespaceURI("http://www.w3.org/XML/1998/namespace");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      NamespaceResolver namespaceResolver0 = jDOMNodePointer0.getNamespaceResolver();
      NamespaceResolver namespaceResolver1 = jDOMNodePointer0.getNamespaceResolver();
      assertSame(namespaceResolver1, namespaceResolver0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      Element element0 = new Element("m", "m", "m");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      String string0 = jDOMNodePointer0.getNamespaceURI();
      assertEquals("m", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(710);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeTypeTest0, locale0);
      jDOMNodePointer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Locale locale0 = Locale.US;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      String string0 = jDOMNodePointer0.getNamespaceURI();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      QName qName0 = new QName("http://www.w3.org/2000/xmlns/");
      NodeIterator nodeIterator0 = jDOMNodePointer0.attributeIterator(qName0);
      assertEquals(0, nodeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstructionTest0, locale0, "uF\"/YNl_J(");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) processingInstructionTest0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createChild(jXPathContext0, (QName) null, Integer.MIN_VALUE);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: id('uF&quot;/YNl_J(')
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      Locale locale0 = Locale.GERMANY;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeTypeTest0, locale0);
      int int0 = jDOMNodePointer0.compareChildNodePointers(jDOMNodePointer0, jDOMNodePointer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      NodeIterator nodeIterator0 = jDOMNodePointer0.namespaceIterator();
      assertEquals(0, nodeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      int int0 = jDOMNodePointer0.getLength();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(710);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeTypeTest0, locale0);
      Object object0 = jDOMNodePointer0.getImmediateNode();
      assertSame(object0, nodeTypeTest0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      boolean boolean0 = jDOMNodePointer0.isCollection();
      assertFalse(boolean0);
  }
}
