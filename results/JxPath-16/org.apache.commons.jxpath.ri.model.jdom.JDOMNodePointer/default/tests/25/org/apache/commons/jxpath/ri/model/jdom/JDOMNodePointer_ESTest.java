/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 05:09:37 GMT 2020
 */

package org.apache.commons.jxpath.ri.model.jdom;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.apache.commons.jxpath.ri.model.jdom.JDOMAttributePointer;
import org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jdom.Attribute;
import org.jdom.CDATA;
import org.jdom.Comment;
import org.jdom.Content;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.ProcessingInstruction;
import org.jdom.Text;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JDOMNodePointer_ESTest extends JDOMNodePointer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      QName qName0 = new QName("K", "K");
      assertEquals("K", qName0.getPrefix());
      assertEquals("K", qName0.getName());
      assertEquals("K:K", qName0.toString());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      Element element0 = new Element("K", "K", "K");
      assertEquals("K", element0.getNamespaceURI());
      assertEquals("K", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("K", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertNotNull(element0);
      
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, element0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("K", qName0.getPrefix());
      assertEquals("K", qName0.getName());
      assertEquals("K:K", qName0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("K", element0.getNamespaceURI());
      assertEquals("K", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("K", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(nodePointer0.isCollection());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isAttribute());
      assertEquals("K", nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertTrue(nodePointer0.isRoot());
      assertEquals(1, nodePointer0.getLength());
      assertNotNull(nodePointer0);
      
      Element element1 = new Element("org.apache.commons.jxpath.ri.model.beans.BeanPointer", "!3xKvnx>5&< 3R");
      assertFalse(element1.isRootElement());
      assertEquals(0, element1.getContentSize());
      assertEquals("org.apache.commons.jxpath.ri.model.beans.BeanPointer", element1.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("!3xKvnx>5&< 3R", element1.getNamespaceURI());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      
      nodePointer0.setValue(element1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("K", qName0.getPrefix());
      assertEquals("K", qName0.getName());
      assertEquals("K:K", qName0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("K", element0.getNamespaceURI());
      assertEquals("K", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("K", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(nodePointer0.isCollection());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isAttribute());
      assertEquals("K", nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertTrue(nodePointer0.isRoot());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(element1.isRootElement());
      assertEquals(0, element1.getContentSize());
      assertEquals("org.apache.commons.jxpath.ri.model.beans.BeanPointer", element1.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("!3xKvnx>5&< 3R", element1.getNamespaceURI());
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      QName qName0 = new QName("");
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeNameTest0, locale0, "");
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNotNull(jDOMNodePointer0);
      
      boolean boolean0 = jDOMNodePointer0.isLanguage("");
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0, (String) null);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertNotNull(jDOMNodePointer0);
      
      NamespaceResolver namespaceResolver0 = jDOMNodePointer0.getNamespaceResolver();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(namespaceResolver0.isSealed());
      assertNotNull(namespaceResolver0);
      
      namespaceResolver0.seal();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(namespaceResolver0.isSealed());
      
      NamespaceResolver namespaceResolver1 = jDOMNodePointer0.getNamespaceResolver();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(namespaceResolver1.isSealed());
      assertSame(namespaceResolver1, namespaceResolver0);
      assertNotNull(namespaceResolver1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNotNull(jDOMNodePointer0);
      
      String string0 = jDOMNodePointer0.getLanguage();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer((QName) null, locale0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNotNull(beanPointer0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(beanPointer0, (Object) null);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNotNull(jDOMNodePointer0);
      
      Object object0 = jDOMNodePointer0.getImmediateNode();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertNotNull(jDOMNodePointer0);
      
      Object object0 = jDOMNodePointer0.getBaseValue();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CDATA cDATA0 = new CDATA("Yff");
      assertEquals("Yff", cDATA0.getValue());
      assertEquals("Yff", cDATA0.getText());
      assertNotNull(cDATA0);
      
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertNotNull(namespace0);
      
      String string0 = JDOMNodePointer.findEnclosingAttribute(cDATA0, "Yff", namespace0);
      assertEquals("Yff", cDATA0.getValue());
      assertEquals("Yff", cDATA0.getText());
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNotNull(jDOMNodePointer0);
      
      String string0 = jDOMNodePointer0.asPath();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Element element0 = new Element("org.apache.commons.jxpath.MapDynamicPropertyHandler", "org.apache.commons.jxpath.MapDynamicPropertyHandler");
      assertEquals(0, element0.getContentSize());
      assertEquals("org.apache.commons.jxpath.MapDynamicPropertyHandler", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("org.apache.commons.jxpath.MapDynamicPropertyHandler", element0.getNamespaceURI());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("org.apache.commons.jxpath.MapDynamicPropertyHandler", locale0, "org.apache.commons.jxpath.MapDynamicPropertyHandler");
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNotNull(jDOMNodePointer0);
      
      QName qName0 = jDOMNodePointer0.getName();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "http://www.w3.org/XML/1998/namespace");
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      // Undeclared exception!
      try { 
        JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) element0, (NodeTest) nodeNameTest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.NodeNameTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      Element element0 = new Element("org.aphe.commons.jxpathMapDynamicPropertyHandler");
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("org.aphe.commons.jxpathMapDynamicPropertyHandler", element0.getName());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("org.aphe.commons.jxpathMapDynamicPropertyHandler", element0.getName());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNotNull(jDOMNodePointer0);
      
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertNotNull(variablePointer0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue(variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: null
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      QName qName0 = new QName("K", "K");
      assertEquals("K:K", qName0.toString());
      assertEquals("K", qName0.getName());
      assertEquals("K", qName0.getPrefix());
      assertNotNull(qName0);
      
      Locale locale0 = new Locale("K", "K", "K");
      assertEquals("k_K_K", locale0.toString());
      assertEquals("K", locale0.getCountry());
      assertEquals("K", locale0.getVariant());
      assertEquals("k", locale0.getLanguage());
      assertNotNull(locale0);
      
      Element element0 = new Element("K");
      assertEquals("K", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertNotNull(element0);
      
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, element0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("K:K", qName0.toString());
      assertEquals("K", qName0.getName());
      assertEquals("K", qName0.getPrefix());
      assertEquals("k_K_K", locale0.toString());
      assertEquals("K", locale0.getCountry());
      assertEquals("K", locale0.getVariant());
      assertEquals("k", locale0.getLanguage());
      assertEquals("K", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertFalse(nodePointer0.isCollection());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(1, nodePointer0.getLength());
      assertNull(nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertNotNull(nodePointer0);
      
      Document document0 = new Document();
      assertFalse(document0.hasRootElement());
      assertNull(document0.getBaseURI());
      assertEquals(0, document0.getContentSize());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        nodePointer0.setValue(document0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNotNull(jDOMNodePointer0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue(locale0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Locale cannot be cast to org.jdom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = new Document();
      assertEquals(0, document0.getContentSize());
      assertNull(document0.getBaseURI());
      assertFalse(document0.hasRootElement());
      assertNotNull(document0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, locale0, "5;pS6H,kS");
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, document0.getContentSize());
      assertNull(document0.getBaseURI());
      assertFalse(document0.hasRootElement());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertNotNull(jDOMNodePointer0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.namespaceIterator();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("N", (Locale) null);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNotNull(jDOMNodePointer0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.isLanguage("N");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNotNull(jDOMNodePointer0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.getNamespaceURI((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Element element0 = new Element("K", "K", "K");
      assertEquals(0, element0.getContentSize());
      assertEquals("K", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("K", element0.getNamespacePrefix());
      assertEquals("K", element0.getNamespaceURI());
      assertNotNull(element0);
      
      // Undeclared exception!
      try { 
        JDOMNodePointer.findEnclosingAttribute(element0, "<<unknown namespace>>", (Namespace) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jdom.AttributeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("org.apache.commons.jxpath.MapDynamicPropertyHandler", locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNotNull(jDOMNodePointer0);
      
      QName qName0 = new QName("org.apache.commons.jxpath.MapDynamicPropertyHandler");
      assertEquals("org.apache.commons.jxpath.MapDynamicPropertyHandler", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.MapDynamicPropertyHandler", qName0.toString());
      assertNotNull(qName0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createChild((JXPathContext) null, qName0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Element element0 = new Element("org.apache.commons.jxpath.MapDynamicropertyHandler");
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("org.apache.commons.jxpath.MapDynamicropertyHandler", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("org.apache.commons.jxpath.MapDynamicropertyHandler", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNotNull(jDOMNodePointer0);
      
      QName qName0 = new QName("<<unknown namespace>>");
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("<<unknown namespace>>", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createAttribute((JXPathContext) null, qName0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The name \"<<unknown namespace>>\" is not legal for JDOM/XML attributes: XML names cannot begin with the character \"<\".
         //
         verifyException("org.jdom.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Element element0 = new Element("org.apache.commons.jxpath.MapDynamicPropertyHandler", "org.apache.commons.jxpath.MapDynamicPropertyHandler");
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("org.apache.commons.jxpath.MapDynamicPropertyHandler", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("org.apache.commons.jxpath.MapDynamicPropertyHandler", element0.getName());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("org.apache.commons.jxpath.MapDynamicPropertyHandler", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("org.apache.commons.jxpath.MapDynamicPropertyHandler", element0.getName());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("org.apache.commons.jxpath.MapDynamicPropertyHandler", jDOMNodePointer0.getNamespaceURI());
      assertNotNull(jDOMNodePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createAttribute(jXPathContextReferenceImpl0, (QName) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertNotNull(variablePointer0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertNotNull(jDOMNodePointer0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.compareChildNodePointers(variablePointer0, variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: null
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, (Locale) null, "'%rEW|en:&RGVj!|QX6");
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNotNull(jDOMNodePointer0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.compareChildNodePointers((NodePointer) null, (NodePointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNotNull(jDOMNodePointer0);
      
      LinkedList<ProcessingInstruction> linkedList0 = new LinkedList<ProcessingInstruction>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Document document0 = new Document(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(document0.hasRootElement());
      assertEquals(0, document0.getContentSize());
      assertNull(document0.getBaseURI());
      assertNotNull(document0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(document0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(0, linkedList0.size());
      assertFalse(document0.hasRootElement());
      assertEquals(0, document0.getContentSize());
      assertNull(document0.getBaseURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertNotNull(jDOMNodePointer1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      BasicVariables basicVariables0 = (BasicVariables)jXPathContextReferenceImpl0.getVariables();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("F$", "http://www.w3.org/2000/xmlns/");
      assertEquals("F$:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("F$", qName0.getPrefix());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("F$:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("F$", qName0.getPrefix());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertNotNull(variablePointer0);
      
      VariablePointer variablePointer1 = (VariablePointer)variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) document0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, linkedList0.size());
      assertFalse(document0.hasRootElement());
      assertEquals(0, document0.getContentSize());
      assertNull(document0.getBaseURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("F$:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("F$", qName0.getPrefix());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer1.isAttribute());
      assertTrue(variablePointer1.isActual());
      assertTrue(variablePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
      assertTrue(variablePointer1.isContainer());
      assertFalse(variablePointer1.isNode());
      assertSame(variablePointer0, variablePointer1);
      assertSame(variablePointer1, variablePointer0);
      assertNotNull(variablePointer1);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer1.compareChildNodePointers(jDOMNodePointer0, variablePointer1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNotNull(jDOMNodePointer0);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = jDOMNodePointer0.getName();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertNotNull(variablePointer0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.compareChildNodePointers(variablePointer0, variablePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'null'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertNotNull(variablePointer0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, variablePointer0.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNotNull(jDOMNodePointer0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "http://www.w3.org/XML/1998/namespace");
      assertEquals("http://www.w3.org/XML/1998/namespace", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.childIterator(nodeNameTest0, false, variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: null
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNotNull(jDOMNodePointer0);
      
      QName qName0 = new QName("http://www.w3.org/2000/xmlns/", "<<unknown namespace>>");
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/:<<unknown namespace>>", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "http://www.w3.org/2000/xmlns/");
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/:<<unknown namespace>>", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("http://www.w3.org/2000/xmlns/", nodeNameTest0.getNamespaceURI());
      assertEquals("http://www.w3.org/2000/xmlns/:<<unknown namespace>>", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/:<<unknown namespace>>", qName0.toString());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertNotNull(variablePointer0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.childIterator(nodeNameTest0, true, variablePointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = new Document();
      assertFalse(document0.hasRootElement());
      assertEquals(0, document0.getContentSize());
      assertNull(document0.getBaseURI());
      assertNotNull(document0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, locale0, "ipV('");
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(document0.hasRootElement());
      assertEquals(0, document0.getContentSize());
      assertNull(document0.getBaseURI());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNotNull(jDOMNodePointer0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("ipV('");
      assertEquals("ipV('", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.childIterator(processingInstructionTest0, true, (NodePointer) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertNotNull(jDOMNodePointer0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("<<unknown namespace>>");
      assertEquals("<<unknown namespace>>", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = jDOMNodePointer0.getName();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNotNull(variablePointer0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.childIterator(processingInstructionTest0, true, variablePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'null'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertNotNull(locale0);
      
      Element element0 = new Element("org.apache.commons.jxpath.MapDynamicropertyHandler");
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("org.apache.commons.jxpath.MapDynamicropertyHandler", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespaceURI());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("org.apache.commons.jxpath.MapDynamicropertyHandler", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNotNull(jDOMNodePointer0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.attributeIterator((QName) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMAttributeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, (Object) null);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNotNull(jDOMNodePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = jDOMNodePointer0.getName();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNotNull(qName0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createChild((JXPathContext) jXPathContextReferenceImpl0, qName0, 91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: 
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("cEk=51-GHAef\"(fC@p");
      assertEquals("cEk=51-GHAef\"(fC@p", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Locale locale0 = Locale.UK;
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstructionTest0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("cEk=51-GHAef\"(fC@p", processingInstructionTest0.getTarget());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertNotNull(jDOMNodePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) locale0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createChild((JXPathContext) jXPathContextReferenceImpl0, (QName) null, Integer.MIN_VALUE);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: 
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Element element0 = new Element("N", "N", "N");
      assertEquals("N", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("N", element0.getNamespaceURI());
      assertEquals("N", element0.getNamespacePrefix());
      assertNotNull(element0);
      
      String string0 = JDOMNodePointer.getLocalName(element0);
      assertEquals("N", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("N", element0.getNamespaceURI());
      assertEquals("N", element0.getNamespacePrefix());
      assertEquals("N", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Element element0 = new Element("N", "N");
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("N", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("N", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertNotNull(element0);
      
      String string0 = JDOMNodePointer.getPrefix(element0);
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("N", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("N", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("cEk=51-GHAef\"(fC@p");
      assertEquals("cEk=51-GHAef\"(fC@p", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Locale locale0 = Locale.UK;
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstructionTest0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("cEk=51-GHAef\"(fC@p", processingInstructionTest0.getTarget());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertNotNull(jDOMNodePointer0);
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) "cEk=51-GHAef\"(fC@p", (NodeTest) processingInstructionTest0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("cEk=51-GHAef\"(fC@p", processingInstructionTest0.getTarget());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("7C7rwoWhl%=gDe", locale0, "position");
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNotNull(jDOMNodePointer0);
      
      CDATA cDATA0 = new CDATA("http://www.w3.org/XML/1998/namespace");
      assertEquals("http://www.w3.org/XML/1998/namespace", cDATA0.getValue());
      assertEquals("http://www.w3.org/XML/1998/namespace", cDATA0.getText());
      assertNotNull(cDATA0);
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) cDATA0, (NodeTest) nodeTypeTest0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals("http://www.w3.org/XML/1998/namespace", cDATA0.getValue());
      assertEquals("http://www.w3.org/XML/1998/namespace", cDATA0.getText());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Locale locale0 = Locale.US;
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertNotNull(locale0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("C3.#gJ2Tb`7jm");
      assertEquals("C3.#gJ2Tb`7jm", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstructionTest0, locale0, "<<unknown namespace>>");
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("C3.#gJ2Tb`7jm", processingInstructionTest0.getTarget());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertNotNull(jDOMNodePointer0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) locale0, (NodeTest) nodeTypeTest0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("C3.#gJ2Tb`7jm", processingInstructionTest0.getTarget());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, (Object) null);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNotNull(jDOMNodePointer0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1799);
      assertEquals(1799, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) null, (Object) jDOMNodePointer0, (NodeTest) nodeTypeTest0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1799, nodeTypeTest0.getNodeType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Element element0 = new Element("N");
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("N", element0.getName());
      assertNotNull(element0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      QName qName0 = new QName("N", "G|+");
      assertEquals("G|+", qName0.getName());
      assertEquals("N:G|+", qName0.toString());
      assertEquals("N", qName0.getPrefix());
      assertNotNull(qName0);
      
      Comment comment0 = new Comment("space");
      assertEquals("space", comment0.getValue());
      assertEquals("space", comment0.getText());
      assertNotNull(comment0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer((NodePointer) null, qName0, comment0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("G|+", qName0.getName());
      assertEquals("N:G|+", qName0.toString());
      assertEquals("N", qName0.getPrefix());
      assertEquals("space", comment0.getValue());
      assertEquals("space", comment0.getText());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNotNull(beanPointer0);
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) beanPointer0, (Object) element0, (NodeTest) nodeTypeTest0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("N", element0.getName());
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals("G|+", qName0.getName());
      assertEquals("N:G|+", qName0.toString());
      assertEquals("N", qName0.getPrefix());
      assertEquals("space", comment0.getValue());
      assertEquals("space", comment0.getText());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("2!yd/0kR@J*iW\"W[", (Locale) null);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNotNull(jDOMNodePointer0);
      
      HashMap<NodeNameTest, ProcessingInstruction> hashMap0 = new HashMap<NodeNameTest, ProcessingInstruction>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("org.jdom.output.Format", hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("", processingInstruction0.getValue());
      assertEquals("", processingInstruction0.getData());
      assertEquals("org.jdom.output.Format", processingInstruction0.getTarget());
      assertNotNull(processingInstruction0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("http://www.w3.org/2000/xmlns/");
      assertEquals("http://www.w3.org/2000/xmlns/", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) processingInstruction0, (NodeTest) processingInstructionTest0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("", processingInstruction0.getValue());
      assertEquals("", processingInstruction0.getData());
      assertEquals("org.jdom.output.Format", processingInstruction0.getTarget());
      assertEquals("http://www.w3.org/2000/xmlns/", processingInstructionTest0.getTarget());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      QName qName0 = new QName("sae");
      assertNull(qName0.getPrefix());
      assertEquals("sae", qName0.toString());
      assertEquals("sae", qName0.getName());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Element element0 = new Element("sae", "sae", "sae");
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("sae", element0.getNamespacePrefix());
      assertEquals("sae", element0.getNamespaceURI());
      assertEquals("sae", element0.getName());
      assertNotNull(element0);
      
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, element0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(qName0.getPrefix());
      assertEquals("sae", qName0.toString());
      assertEquals("sae", qName0.getName());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("sae", element0.getNamespacePrefix());
      assertEquals("sae", element0.getNamespaceURI());
      assertEquals("sae", element0.getName());
      assertEquals("sae", nodePointer0.getNamespaceURI());
      assertTrue(nodePointer0.isRoot());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertNotNull(nodePointer0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("sae", qName0.toString());
      assertEquals("sae", qName0.getName());
      assertEquals("sae", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      boolean boolean0 = JDOMNodePointer.testNode(nodePointer0, (Object) null, (NodeTest) nodeNameTest0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(qName0.getPrefix());
      assertEquals("sae", qName0.toString());
      assertEquals("sae", qName0.getName());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("sae", element0.getNamespacePrefix());
      assertEquals("sae", element0.getNamespaceURI());
      assertEquals("sae", element0.getName());
      assertEquals("sae", nodePointer0.getNamespaceURI());
      assertTrue(nodePointer0.isRoot());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertEquals("sae", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("cEk=51-GHAef\"(fC@p");
      assertEquals("cEk=51-GHAef\"(fC@p", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Locale locale0 = Locale.UK;
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstructionTest0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("cEk=51-GHAef\"(fC@p", processingInstructionTest0.getTarget());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNotNull(jDOMNodePointer0);
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) "cEk=51-GHAef\"(fC@p", (NodeTest) null);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("cEk=51-GHAef\"(fC@p", processingInstructionTest0.getTarget());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("ejR[7[]emW`z ");
      assertEquals("ejR[7[]emW`z ", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstructionTest0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ejR[7[]emW`z ", processingInstructionTest0.getTarget());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNotNull(jDOMNodePointer0);
      
      ProcessingInstructionTest processingInstructionTest1 = (ProcessingInstructionTest)jDOMNodePointer0.getImmediateNode();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ejR[7[]emW`z ", processingInstructionTest0.getTarget());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("ejR[7[]emW`z ", processingInstructionTest1.getTarget());
      assertSame(processingInstructionTest0, processingInstructionTest1);
      assertSame(processingInstructionTest1, processingInstructionTest0);
      assertNotNull(processingInstructionTest1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      QName qName0 = new QName((String) null, "D");
      assertEquals("D", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("D", qName0.toString());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.forLanguageTag("");
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, "Z5uCW[[rfD=", locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("D", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("D", qName0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertNotNull(beanPointer0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(beanPointer0, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("D", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("D", qName0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNotNull(jDOMNodePointer0);
      
      QName qName1 = (QName)jDOMNodePointer0.getBaseValue();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("D", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("D", qName0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("D", qName1.getName());
      assertEquals("D", qName1.toString());
      assertNull(qName1.getPrefix());
      assertSame(qName0, qName1);
      assertSame(qName1, qName0);
      assertNotNull(qName1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Text text0 = new Text("/teFxt()");
      assertEquals("/teFxt()", text0.getValue());
      assertEquals("/teFxt()", text0.getText());
      assertNotNull(text0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(text0, (Locale) null, "/teFxt()");
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("/teFxt()", text0.getValue());
      assertEquals("/teFxt()", text0.getText());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertNotNull(jDOMNodePointer0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer((Object) null, (Locale) null, "http://www.w3.org/2000/xmlns/");
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertNotNull(jDOMNodePointer1);
      
      boolean boolean0 = jDOMNodePointer0.equals(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("/teFxt()", text0.getValue());
      assertEquals("/teFxt()", text0.getText());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CDATA cDATA0 = new CDATA("x_p5Xi4YG@aE]E+");
      assertNotNull(cDATA0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNotNull(jDOMNodePointer0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(cDATA0, locale0, "http://www.w3.org/XML/1998/namespace");
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertNotNull(jDOMNodePointer1);
      
      boolean boolean0 = jDOMNodePointer0.equals(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CDATA cDATA0 = new CDATA("/teFNt()");
      assertEquals("/teFNt()", cDATA0.getValue());
      assertEquals("/teFNt()", cDATA0.getText());
      assertNotNull(cDATA0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, (Locale) null, "/teFNt()");
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("/teFNt()", cDATA0.getValue());
      assertEquals("/teFNt()", cDATA0.getText());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertNotNull(jDOMNodePointer0);
      
      boolean boolean0 = jDOMNodePointer0.equals(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("/teFNt()", cDATA0.getValue());
      assertEquals("/teFNt()", cDATA0.getText());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeNameTest0, locale0, "u,>~9kd");
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNotNull(jDOMNodePointer0);
      
      boolean boolean0 = jDOMNodePointer0.equals((Object) null);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertNotNull(namespace0);
      
      Element element0 = new Element("k", namespace0);
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("k", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertNotNull(element0);
      
      Text text0 = new Text("veM^$");
      assertEquals("veM^$", text0.getValue());
      assertEquals("veM^$", text0.getText());
      assertNotNull(text0);
      
      Element element1 = element0.addContent((Content) text0);
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(1, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("k", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("veM^$", text0.getValue());
      assertEquals("veM^$", text0.getText());
      assertEquals("", element1.getNamespaceURI());
      assertEquals(1, element1.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("k", element1.getName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element1, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(1, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("k", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("veM^$", text0.getValue());
      assertEquals("veM^$", text0.getText());
      assertEquals("", element1.getNamespaceURI());
      assertEquals(1, element1.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("k", element1.getName());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNotNull(jDOMNodePointer0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, text0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(1, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("k", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("veM^$", text0.getValue());
      assertEquals("veM^$", text0.getText());
      assertEquals("", element1.getNamespaceURI());
      assertEquals(1, element1.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("k", element1.getName());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isContainer());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertNotNull(jDOMNodePointer1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(1, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("k", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("veM^$", text0.getValue());
      assertEquals("veM^$", text0.getText());
      assertEquals("", element1.getNamespaceURI());
      assertEquals(1, element1.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("k", element1.getName());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isContainer());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace");
      assertEquals("//www.w3.org/XML/1998/namespace", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertEquals("http", qName0.getPrefix());
      assertNotNull(qName0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer1.createAttribute(jXPathContextReferenceImpl0, qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot create an attribute for path /text()[1]/@http://www.w3.org/XML/1998/namespace, operation is not allowed for this type of node
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("/processing-instruction('", locale0, "/processing-instruction('");
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNotNull(jDOMNodePointer0);
      
      jDOMNodePointer0.printPointerChain();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("N", "N");
      assertEquals("N", processingInstruction0.getTarget());
      assertEquals("N", processingInstruction0.getData());
      assertEquals("N", processingInstruction0.getValue());
      assertNotNull(processingInstruction0);
      
      Locale locale0 = Locale.UK;
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("N", processingInstruction0.getTarget());
      assertEquals("N", processingInstruction0.getData());
      assertEquals("N", processingInstruction0.getValue());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNotNull(jDOMNodePointer0);
      
      jDOMNodePointer0.printPointerChain();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("N", processingInstruction0.getTarget());
      assertEquals("N", processingInstruction0.getData());
      assertEquals("N", processingInstruction0.getValue());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CDATA cDATA0 = new CDATA("x_p5Xi4YG@aE]E+");
      assertNotNull(cDATA0);
      
      Locale locale0 = Locale.UK;
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertNotNull(jDOMNodePointer0);
      
      String string0 = jDOMNodePointer0.asPath();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("/text()[1]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      QName qName0 = new QName("f", "f");
      assertEquals("f", qName0.getName());
      assertEquals("f", qName0.getPrefix());
      assertEquals("f:f", qName0.toString());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Element element0 = new Element("f");
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("f", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertNotNull(element0);
      
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, element0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("f", qName0.getName());
      assertEquals("f", qName0.getPrefix());
      assertEquals("f:f", qName0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("f", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertTrue(nodePointer0.isRoot());
      assertEquals(1, nodePointer0.getLength());
      assertNull(nodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isContainer());
      assertNotNull(nodePointer0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodePointer0, element0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("f", qName0.getName());
      assertEquals("f", qName0.getPrefix());
      assertEquals("f:f", qName0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("f", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertTrue(nodePointer0.isRoot());
      assertEquals(1, nodePointer0.getLength());
      assertNull(nodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.equals((Object)nodePointer0));
      assertNotNull(jDOMNodePointer0);
      
      jDOMNodePointer0.printPointerChain();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("f", qName0.getName());
      assertEquals("f", qName0.getPrefix());
      assertEquals("f:f", qName0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("f", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertTrue(nodePointer0.isRoot());
      assertEquals(1, nodePointer0.getLength());
      assertNull(nodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer0.equals((Object)nodePointer0));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      QName qName0 = new QName("K", "K");
      assertEquals("K:K", qName0.toString());
      assertEquals("K", qName0.getName());
      assertEquals("K", qName0.getPrefix());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Element element0 = new Element("K", "K", "K");
      assertFalse(element0.isRootElement());
      assertEquals("K", element0.getNamespacePrefix());
      assertEquals("K", element0.getName());
      assertEquals("K", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertNotNull(element0);
      
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, element0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("K:K", qName0.toString());
      assertEquals("K", qName0.getName());
      assertEquals("K", qName0.getPrefix());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(element0.isRootElement());
      assertEquals("K", element0.getNamespacePrefix());
      assertEquals("K", element0.getName());
      assertEquals("K", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertTrue(nodePointer0.isRoot());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isCollection());
      assertEquals("K", nodePointer0.getNamespaceURI());
      assertTrue(nodePointer0.isNode());
      assertNotNull(nodePointer0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodePointer0, element0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("K:K", qName0.toString());
      assertEquals("K", qName0.getName());
      assertEquals("K", qName0.getPrefix());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(element0.isRootElement());
      assertEquals("K", element0.getNamespacePrefix());
      assertEquals("K", element0.getName());
      assertEquals("K", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertTrue(nodePointer0.isRoot());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isCollection());
      assertEquals("K", nodePointer0.getNamespaceURI());
      assertTrue(nodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("K", jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(jDOMNodePointer0.equals((Object)nodePointer0));
      assertNotNull(jDOMNodePointer0);
      
      jDOMNodePointer0.printPointerChain();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("K:K", qName0.toString());
      assertEquals("K", qName0.getName());
      assertEquals("K", qName0.getPrefix());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(element0.isRootElement());
      assertEquals("K", element0.getNamespacePrefix());
      assertEquals("K", element0.getName());
      assertEquals("K", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertTrue(nodePointer0.isRoot());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isCollection());
      assertEquals("K", nodePointer0.getNamespaceURI());
      assertTrue(nodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("K", jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer0.equals((Object)nodePointer0));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Comment comment0 = new Comment("2!yd/0kR@J*iW\"W[");
      assertEquals("2!yd/0kR@J*iW\"W[", comment0.getValue());
      assertEquals("2!yd/0kR@J*iW\"W[", comment0.getText());
      assertNotNull(comment0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(comment0, locale0, "2!yd/0kR@J*iW\"W[");
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("2!yd/0kR@J*iW\"W[", comment0.getValue());
      assertEquals("2!yd/0kR@J*iW\"W[", comment0.getText());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNotNull(jDOMNodePointer0);
      
      String string0 = jDOMNodePointer0.asPath();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("2!yd/0kR@J*iW\"W[", comment0.getValue());
      assertEquals("2!yd/0kR@J*iW\"W[", comment0.getText());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals("id('2!yd/0kR@J*iW&quot;W[')", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      QName qName0 = new QName("K");
      assertEquals("K", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("K", qName0.getName());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Element element0 = new Element("K", "K", "K");
      assertEquals("K", element0.getNamespacePrefix());
      assertEquals("K", element0.getNamespaceURI());
      assertEquals("K", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertNotNull(element0);
      
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, element0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("K", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("K", qName0.getName());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("K", element0.getNamespacePrefix());
      assertEquals("K", element0.getNamespaceURI());
      assertEquals("K", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("K", nodePointer0.getNamespaceURI());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertNotNull(nodePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) element0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("K", element0.getNamespacePrefix());
      assertEquals("K", element0.getNamespaceURI());
      assertEquals("K", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      JDOMAttributePointer jDOMAttributePointer0 = (JDOMAttributePointer)nodePointer0.createAttribute(jXPathContextReferenceImpl0, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("K", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("K", qName0.getName());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("K", element0.getNamespacePrefix());
      assertEquals("K", element0.getNamespaceURI());
      assertEquals("K", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("K", nodePointer0.getNamespaceURI());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(Integer.MIN_VALUE, jDOMAttributePointer0.getIndex());
      assertFalse(jDOMAttributePointer0.isAttribute());
      assertTrue(jDOMAttributePointer0.isLeaf());
      assertNull(jDOMAttributePointer0.getNamespaceURI());
      assertEquals(1, jDOMAttributePointer0.getLength());
      assertTrue(jDOMAttributePointer0.isActual());
      assertTrue(jDOMAttributePointer0.isNode());
      assertFalse(jDOMAttributePointer0.isCollection());
      assertFalse(jDOMAttributePointer0.isRoot());
      assertFalse(jDOMAttributePointer0.isContainer());
      assertNotNull(jDOMAttributePointer0);
      
      JDOMAttributePointer jDOMAttributePointer1 = (JDOMAttributePointer)nodePointer0.createAttribute(jXPathContextReferenceImpl0, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("K", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("K", qName0.getName());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("K", element0.getNamespacePrefix());
      assertEquals("K", element0.getNamespaceURI());
      assertEquals("K", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("K", nodePointer0.getNamespaceURI());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(jDOMAttributePointer1.isActual());
      assertTrue(jDOMAttributePointer1.isNode());
      assertFalse(jDOMAttributePointer1.isContainer());
      assertNull(jDOMAttributePointer1.getNamespaceURI());
      assertEquals(1, jDOMAttributePointer1.getLength());
      assertTrue(jDOMAttributePointer1.isLeaf());
      assertEquals(Integer.MIN_VALUE, jDOMAttributePointer1.getIndex());
      assertFalse(jDOMAttributePointer1.isCollection());
      assertFalse(jDOMAttributePointer1.isRoot());
      assertFalse(jDOMAttributePointer1.isAttribute());
      assertNotSame(jDOMAttributePointer1, jDOMAttributePointer0);
      assertTrue(jDOMAttributePointer1.equals((Object)jDOMAttributePointer0));
      assertNotNull(jDOMAttributePointer1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      QName qName0 = new QName("K", "K");
      assertEquals("K:K", qName0.toString());
      assertEquals("K", qName0.getName());
      assertEquals("K", qName0.getPrefix());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Element element0 = new Element("K", "K", "K");
      assertFalse(element0.isRootElement());
      assertEquals("K", element0.getName());
      assertEquals("K", element0.getNamespaceURI());
      assertEquals("K", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertNotNull(element0);
      
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, element0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("K:K", qName0.toString());
      assertEquals("K", qName0.getName());
      assertEquals("K", qName0.getPrefix());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(element0.isRootElement());
      assertEquals("K", element0.getName());
      assertEquals("K", element0.getNamespaceURI());
      assertEquals("K", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("K", nodePointer0.getNamespaceURI());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertTrue(nodePointer0.isRoot());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isCollection());
      assertNotNull(nodePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) element0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(element0.isRootElement());
      assertEquals("K", element0.getName());
      assertEquals("K", element0.getNamespaceURI());
      assertEquals("K", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      JDOMAttributePointer jDOMAttributePointer0 = (JDOMAttributePointer)nodePointer0.createAttribute(jXPathContextReferenceImpl0, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("K:K", qName0.toString());
      assertEquals("K", qName0.getName());
      assertEquals("K", qName0.getPrefix());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(element0.isRootElement());
      assertEquals("K", element0.getName());
      assertEquals("K", element0.getNamespaceURI());
      assertEquals("K", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("K", nodePointer0.getNamespaceURI());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertTrue(nodePointer0.isRoot());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(jDOMAttributePointer0.isActual());
      assertTrue(jDOMAttributePointer0.isNode());
      assertEquals("K", jDOMAttributePointer0.getNamespaceURI());
      assertEquals(1, jDOMAttributePointer0.getLength());
      assertTrue(jDOMAttributePointer0.isLeaf());
      assertFalse(jDOMAttributePointer0.isAttribute());
      assertFalse(jDOMAttributePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMAttributePointer0.getIndex());
      assertFalse(jDOMAttributePointer0.isCollection());
      assertFalse(jDOMAttributePointer0.isRoot());
      assertNotNull(jDOMAttributePointer0);
      
      JDOMAttributePointer jDOMAttributePointer1 = (JDOMAttributePointer)nodePointer0.createAttribute(jXPathContextReferenceImpl0, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("K:K", qName0.toString());
      assertEquals("K", qName0.getName());
      assertEquals("K", qName0.getPrefix());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(element0.isRootElement());
      assertEquals("K", element0.getName());
      assertEquals("K", element0.getNamespaceURI());
      assertEquals("K", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("K", nodePointer0.getNamespaceURI());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertTrue(nodePointer0.isRoot());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jDOMAttributePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMAttributePointer1.getIndex());
      assertFalse(jDOMAttributePointer1.isCollection());
      assertTrue(jDOMAttributePointer1.isLeaf());
      assertEquals(1, jDOMAttributePointer1.getLength());
      assertTrue(jDOMAttributePointer1.isNode());
      assertTrue(jDOMAttributePointer1.isActual());
      assertEquals("K", jDOMAttributePointer1.getNamespaceURI());
      assertFalse(jDOMAttributePointer1.isAttribute());
      assertFalse(jDOMAttributePointer1.isRoot());
      assertNotSame(jDOMAttributePointer1, jDOMAttributePointer0);
      assertTrue(jDOMAttributePointer1.equals((Object)jDOMAttributePointer0));
      assertNotNull(jDOMAttributePointer1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      QName qName0 = new QName("K", "K");
      assertEquals("K:K", qName0.toString());
      assertEquals("K", qName0.getName());
      assertEquals("K", qName0.getPrefix());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Element element0 = new Element("K", "K");
      assertEquals("K", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("K", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertNotNull(element0);
      
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, element0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("K:K", qName0.toString());
      assertEquals("K", qName0.getName());
      assertEquals("K", qName0.getPrefix());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("K", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("K", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isRoot());
      assertEquals("K", nodePointer0.getNamespaceURI());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isCollection());
      assertNotNull(nodePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) element0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("K", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("K", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      // Undeclared exception!
      try { 
        nodePointer0.createAttribute(jXPathContextReferenceImpl0, qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown namespace prefix: K
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertNotNull(locale0);
      
      Element element0 = new Element("org.apache.commons.jxpath.MapDynamicropertyHandler");
      assertEquals("org.apache.commons.jxpath.MapDynamicropertyHandler", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("org.apache.commons.jxpath.MapDynamicropertyHandler", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNotNull(jDOMNodePointer0);
      
      QName qName0 = jDOMNodePointer0.getName();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("org.apache.commons.jxpath.MapDynamicropertyHandler", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("org.apache.commons.jxpath.MapDynamicropertyHandler", qName0.toString());
      assertEquals("org.apache.commons.jxpath.MapDynamicropertyHandler", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      NodePointer nodePointer0 = jDOMNodePointer0.createAttribute((JXPathContext) null, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("org.apache.commons.jxpath.MapDynamicropertyHandler", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("org.apache.commons.jxpath.MapDynamicropertyHandler", qName0.toString());
      assertEquals("org.apache.commons.jxpath.MapDynamicropertyHandler", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isActual());
      assertTrue(nodePointer0.isNode());
      assertNull(nodePointer0.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isLeaf());
      assertFalse(nodePointer0.isRoot());
      assertNotNull(nodePointer0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNotNull(jDOMNodePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName("http://www.w3.org/2000/xmlns/", "<<unknown namespace>>");
      assertEquals("http://www.w3.org/2000/xmlns/:<<unknown namespace>>", qName0.toString());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getPrefix());
      assertNotNull(qName0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createChild((JXPathContext) jXPathContextReferenceImpl0, qName0, Integer.MIN_VALUE, (Object) "<<unknown namespace>>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: 
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Comment comment0 = new Comment("2!yd/0kR@J*iW\"W[");
      assertEquals("2!yd/0kR@J*iW\"W[", comment0.getValue());
      assertEquals("2!yd/0kR@J*iW\"W[", comment0.getText());
      assertNotNull(comment0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(comment0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("2!yd/0kR@J*iW\"W[", comment0.getValue());
      assertEquals("2!yd/0kR@J*iW\"W[", comment0.getText());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNotNull(jDOMNodePointer0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.remove();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot remove root JDOM node
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Namespace namespace0 = Namespace.getNamespace("N", "N");
      assertEquals("N", namespace0.getURI());
      assertEquals("N", namespace0.getPrefix());
      assertNotNull(namespace0);
      
      Attribute attribute0 = new Attribute("N", "N", namespace0);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals("N", namespace0.getURI());
      assertEquals("N", namespace0.getPrefix());
      assertEquals(0, attribute0.getAttributeType());
      assertEquals("N", attribute0.getName());
      assertEquals("N", attribute0.getValue());
      assertEquals("N", attribute0.getNamespaceURI());
      assertEquals("N", attribute0.getNamespacePrefix());
      assertNotNull(attribute0);
      
      String string0 = JDOMNodePointer.getLocalName(attribute0);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals("N", namespace0.getURI());
      assertEquals("N", namespace0.getPrefix());
      assertEquals(0, attribute0.getAttributeType());
      assertEquals("N", attribute0.getName());
      assertEquals("N", attribute0.getValue());
      assertEquals("N", attribute0.getNamespaceURI());
      assertEquals("N", attribute0.getNamespacePrefix());
      assertEquals("N", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = JDOMNodePointer.getLocalName((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Namespace namespace0 = Namespace.getNamespace("N", "N");
      assertEquals("N", namespace0.getURI());
      assertEquals("N", namespace0.getPrefix());
      assertNotNull(namespace0);
      
      Attribute attribute0 = new Attribute("N", "N", namespace0);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals("N", namespace0.getURI());
      assertEquals("N", namespace0.getPrefix());
      assertEquals("N", attribute0.getValue());
      assertEquals("N", attribute0.getName());
      assertEquals(0, attribute0.getAttributeType());
      assertEquals("N", attribute0.getNamespacePrefix());
      assertEquals("N", attribute0.getNamespaceURI());
      assertNotNull(attribute0);
      
      String string0 = JDOMNodePointer.getPrefix(attribute0);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals("N", namespace0.getURI());
      assertEquals("N", namespace0.getPrefix());
      assertEquals("N", attribute0.getValue());
      assertEquals("N", attribute0.getName());
      assertEquals(0, attribute0.getAttributeType());
      assertEquals("N", attribute0.getNamespacePrefix());
      assertEquals("N", attribute0.getNamespaceURI());
      assertEquals("N", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Attribute attribute0 = new Attribute("org.apache.commons.jxpath.AbstractFactory", "org.apache.commons.jxpath.AbstractFactory");
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals("org.apache.commons.jxpath.AbstractFactory", attribute0.getName());
      assertEquals("org.apache.commons.jxpath.AbstractFactory", attribute0.getValue());
      assertEquals(0, attribute0.getAttributeType());
      assertEquals("", attribute0.getNamespaceURI());
      assertEquals("", attribute0.getNamespacePrefix());
      assertNotNull(attribute0);
      
      String string0 = JDOMNodePointer.getPrefix(attribute0);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals("org.apache.commons.jxpath.AbstractFactory", attribute0.getName());
      assertEquals("org.apache.commons.jxpath.AbstractFactory", attribute0.getValue());
      assertEquals(0, attribute0.getAttributeType());
      assertEquals("", attribute0.getNamespaceURI());
      assertEquals("", attribute0.getNamespacePrefix());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Element element0 = new Element("K", "K", "K");
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("K", element0.getName());
      assertEquals("K", element0.getNamespaceURI());
      assertEquals("K", element0.getNamespacePrefix());
      assertNotNull(element0);
      
      String string0 = JDOMNodePointer.getPrefix(element0);
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("K", element0.getName());
      assertEquals("K", element0.getNamespaceURI());
      assertEquals("K", element0.getNamespacePrefix());
      assertEquals("K", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = JDOMNodePointer.getPrefix("x_p5Xi4YG@aE]E+");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("N", "N");
      assertEquals("N", processingInstruction0.getData());
      assertEquals("N", processingInstruction0.getTarget());
      assertEquals("N", processingInstruction0.getValue());
      assertNotNull(processingInstruction0);
      
      Locale locale0 = new Locale("N");
      assertEquals("n", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("n", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("N", processingInstruction0.getData());
      assertEquals("N", processingInstruction0.getTarget());
      assertEquals("N", processingInstruction0.getValue());
      assertEquals("n", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("n", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNotNull(jDOMNodePointer0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("1/f\u0005X/N^");
      assertEquals("1/f\u0005X/N^", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      boolean boolean0 = jDOMNodePointer0.testNode((NodeTest) processingInstructionTest0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("N", processingInstruction0.getData());
      assertEquals("N", processingInstruction0.getTarget());
      assertEquals("N", processingInstruction0.getValue());
      assertEquals("n", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("n", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("1/f\u0005X/N^", processingInstructionTest0.getTarget());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertNotNull(locale0);
      
      CDATA cDATA0 = new CDATA("53?eC");
      assertEquals("53?eC", cDATA0.getValue());
      assertEquals("53?eC", cDATA0.getText());
      assertNotNull(cDATA0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("53?eC", cDATA0.getValue());
      assertEquals("53?eC", cDATA0.getText());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNotNull(jDOMNodePointer0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      boolean boolean0 = jDOMNodePointer0.testNode((NodeTest) nodeTypeTest0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("53?eC", cDATA0.getValue());
      assertEquals("53?eC", cDATA0.getText());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNotNull(jDOMNodePointer0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
      assertEquals(4, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) locale0, (NodeTest) nodeTypeTest0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(4, nodeTypeTest0.getNodeType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNotNull(jDOMNodePointer0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) jDOMNodePointer0, (NodeTest) nodeTypeTest0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      assertEquals(3, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) null, (Object) null, (NodeTest) nodeTypeTest0);
      assertEquals(3, nodeTypeTest0.getNodeType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      QName qName0 = new QName("K", "K");
      assertEquals("K", qName0.getPrefix());
      assertEquals("K", qName0.getName());
      assertEquals("K:K", qName0.toString());
      assertNotNull(qName0);
      
      Locale locale0 = new Locale("K", "K", "K");
      assertEquals("K", locale0.getVariant());
      assertEquals("k_K_K", locale0.toString());
      assertEquals("k", locale0.getLanguage());
      assertEquals("K", locale0.getCountry());
      assertNotNull(locale0);
      
      Element element0 = new Element("K");
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("K", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertNotNull(element0);
      
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, element0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("K", qName0.getPrefix());
      assertEquals("K", qName0.getName());
      assertEquals("K:K", qName0.toString());
      assertEquals("K", locale0.getVariant());
      assertEquals("k_K_K", locale0.toString());
      assertEquals("k", locale0.getLanguage());
      assertEquals("K", locale0.getCountry());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("K", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertNull(nodePointer0.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertTrue(nodePointer0.isRoot());
      assertNotNull(nodePointer0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "K");
      assertEquals("K", qName0.getPrefix());
      assertEquals("K", qName0.getName());
      assertEquals("K:K", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("K:K", nodeNameTest0.toString());
      assertEquals("K", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      boolean boolean0 = JDOMNodePointer.testNode(nodePointer0, (Object) element0, (NodeTest) nodeNameTest0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("K", qName0.getPrefix());
      assertEquals("K", qName0.getName());
      assertEquals("K:K", qName0.toString());
      assertEquals("K", locale0.getVariant());
      assertEquals("k_K_K", locale0.toString());
      assertEquals("k", locale0.getLanguage());
      assertEquals("K", locale0.getCountry());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("K", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertNull(nodePointer0.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertTrue(nodePointer0.isRoot());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("K:K", nodeNameTest0.toString());
      assertEquals("K", nodeNameTest0.getNamespaceURI());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      Element element0 = new Element("org.apache.commons.jxpath.MapDynamicPropertyHandler", "org.apache.commons.jxpath.MapDynamicPropertyHandler");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      QName qName0 = jDOMNodePointer0.getName();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "http://www.w3.org/XML/1998/namespace");
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) element0, (NodeTest) nodeNameTest0);
      assertEquals("org.apache.commons.jxpath.MapDynamicPropertyHandler", nodeNameTest0.toString());
      assertFalse(boolean0);
      assertEquals("org.apache.commons.jxpath.MapDynamicPropertyHandler", jDOMNodePointer0.getNamespaceURI());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      Element element0 = new Element("org.apache.commons.jxpath.MapDynamicropertyHandler");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      QName qName0 = jDOMNodePointer0.getName();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "http://www.w3.org/XML/1998/namespace");
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) element0, (NodeTest) nodeNameTest0);
      assertTrue(boolean0);
      assertEquals("org.apache.commons.jxpath.MapDynamicropertyHandler", nodeNameTest0.toString());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      Element element0 = new Element("org.apache.commons.jxpath.MapDynamicropertyHandler");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      QName qName0 = new QName("<<unknown namespace>>", "<<unknown namespace>>");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "http://www.w3.org/XML/1998/namespace");
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) element0, (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      Element element0 = new Element("org.apache.commons.jxpath.MapDynamicropertyHandler");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      QName qName0 = jDOMNodePointer0.getName();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) element0, (NodeTest) nodeNameTest0);
      assertEquals("org.apache.commons.jxpath.MapDynamicropertyHandler", nodeNameTest0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Element element0 = new Element("N", "N", "N");
      Locale locale0 = new Locale("N", "N");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "N");
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.testNode((NodeTest) nodeNameTest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.NodeNameTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      Element element0 = new Element("org.apache.commons.jxpath.MapDynamicropertyHandler");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      jDOMNodePointer0.setValue(jDOMNodePointer0);
      assertFalse(jDOMNodePointer0.isCollection());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Element element0 = new Element("N", "N", "N");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, (Locale) null);
      jDOMNodePointer0.setValue((Object) null);
      assertEquals("N", jDOMNodePointer0.getNamespaceURI());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Locale locale0 = Locale.UK;
      Element element0 = new Element("org.apache.commons.jxpath.MapDynamicropertyHandler");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      Comment comment0 = new Comment("f");
      jDOMNodePointer0.setValue(comment0);
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Element element0 = new Element("N", "N");
      Locale locale0 = Locale.UK;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("c", "<<unknown namespace>>");
      jDOMNodePointer0.setValue(processingInstruction0);
      assertEquals("<<unknown namespace>>", processingInstruction0.getData());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      Element element0 = new Element("org.apache.commons.jxpath.MapDynamicropertyHandler");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      CDATA cDATA0 = new CDATA("<<unknown namespace>>");
      jDOMNodePointer0.setValue(cDATA0);
      assertFalse(jDOMNodePointer0.isContainer());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      Locale locale0 = Locale.JAPAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) cDATA0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createPath(jXPathContext0, (Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CDATA cDATA0 = new CDATA("2!yd/0R@J*iW\"[");
      Locale locale0 = Locale.UK;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer("2!yd/0R@J*iW\"[", locale0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue(jDOMNodePointer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CDATA cDATA0 = new CDATA("{m");
      Locale locale0 = Locale.JAPANESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      jDOMNodePointer0.setValue("{m");
      assertEquals("{m", cDATA0.getText());
      assertEquals("{m", cDATA0.getValue());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("N", "N");
      Locale locale0 = Locale.PRC;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
      Object object0 = jDOMNodePointer0.getValue();
      assertEquals("N", object0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Locale locale0 = Locale.US;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      Object object0 = jDOMNodePointer0.getValue();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Comment comment0 = new Comment("2!yd/0kR@J*iW\"W[");
      Locale locale0 = Locale.KOREAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(comment0, locale0, "2!yd/0kR@J*iW\"W[");
      Object object0 = jDOMNodePointer0.getValue();
      assertEquals("2!yd/0kR@J*iW\"W[", object0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      QName qName0 = new QName("K", "K");
      Locale locale0 = new Locale("K", "K", "K");
      Element element0 = new Element("K");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, element0, locale0);
      Document document0 = new Document();
      document0.setRootElement(element0);
      nodePointer0.setValue(document0);
      nodePointer0.getValue();
      assertEquals(1, element0.getContentSize());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Element element0 = new Element("org.pache.commons.jxpath.MapDynamicPropertyHandler", "org.pache.commons.jxpath.MapDynamicPropertyHandler");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      jDOMNodePointer0.setValue("org.pache.commons.jxpath.MapDynamicPropertyHandler");
      Object object0 = jDOMNodePointer0.getValue();
      assertEquals("org.pache.commons.jxpath.MapDynamicPropertyHandler", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CDATA cDATA0 = new CDATA("x_p5Xi4YG@aE]E+");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      Object object0 = jDOMNodePointer0.getValue();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("N", "N");
      Locale locale0 = new Locale("N");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
      QName qName0 = jDOMNodePointer0.getName();
      assertEquals("N", qName0.toString());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      Element element0 = new Element("org.apache.commons.jxpath.MapDynamicropertyHandler", "org.apache.commons.jxpath.MapDynamicropertyHandler");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      QName qName0 = jDOMNodePointer0.getName();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) element0, (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
      assertEquals("org.apache.commons.jxpath.MapDynamicropertyHandler", nodeNameTest0.toString());
      assertEquals("org.apache.commons.jxpath.MapDynamicropertyHandler", jDOMNodePointer0.getNamespaceURI());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Element element0 = new Element("N", "N", "N");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "N");
      QName qName0 = jDOMNodePointer0.getName();
      assertEquals("N:N", qName0.toString());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Element element0 = new Element("N");
      Document document0 = new Document(element0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, locale0);
      boolean boolean0 = jDOMNodePointer0.isLeaf();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = new Document();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, locale0, "id('");
      // Undeclared exception!
      try { 
        jDOMNodePointer0.isLeaf();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Element element0 = new Element("org.apache.commons.jxpath.MapDynamicPropertyHandler", "org.apache.commons.jxpath.MapDynamicPropertyHandler");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      jDOMNodePointer0.setValue("org.apache.commons.jxpath.MapDynamicPropertyHandler");
      boolean boolean0 = jDOMNodePointer0.isLeaf();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Element element0 = new Element("N", "N");
      Locale locale0 = Locale.KOREAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "N");
      boolean boolean0 = jDOMNodePointer0.isLeaf();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Text text0 = new Text("/teFxt()");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(text0, (Locale) null, "/teFxt()");
      boolean boolean0 = jDOMNodePointer0.isLeaf();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Locale locale0 = Locale.UK;
      Element element0 = new Element("org.aphe.commons.jxpathapDynamicPropertyHandler");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      element0.setText("http://www.w3.org/2000/xmlns/");
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
      int int0 = jDOMNodePointer0.compareChildNodePointers(nodePointer0, jDOMNodePointer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      QName qName0 = new QName("N", "N");
      Locale locale0 = Locale.PRC;
      Element element0 = new Element("N", "N", "N");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, element0, locale0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) element0);
      NodePointer nodePointer1 = nodePointer0.createAttribute(jXPathContext0, qName0);
      int int0 = nodePointer0.compareChildNodePointers(nodePointer0, nodePointer1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Locale locale0 = Locale.UK;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0, (String) null);
      NodePointer nodePointer0 = jDOMNodePointer0.namespacePointer((String) null);
      int int0 = jDOMNodePointer0.compareChildNodePointers(nodePointer0, nodePointer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Element element0 = new Element("N", "N", "N");
      Locale locale0 = Locale.KOREA;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      String string0 = jDOMNodePointer0.getNamespaceURI("N");
      assertNotNull(string0);
      assertEquals("N", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Element element0 = new Element("rN");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, (Locale) null, "rN");
      String string0 = jDOMNodePointer0.getNamespaceURI("rN");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      String string0 = jDOMNodePointer0.getNamespaceURI("Ag8Q");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("P@B\"ZG'F?zEM?pV", locale0, "org.apache.commons.jxpath.JXPathAbstractFactoryException");
      String string0 = jDOMNodePointer0.getNamespaceURI("xml");
      assertEquals("http://www.w3.org/XML/1998/namespace", string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = new Document();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, locale0, "id('");
      // Undeclared exception!
      try { 
        jDOMNodePointer0.getNamespaceURI("id('");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0, (String) null);
      NamespaceResolver namespaceResolver0 = jDOMNodePointer0.getNamespaceResolver();
      NamespaceResolver namespaceResolver1 = jDOMNodePointer0.getNamespaceResolver();
      assertSame(namespaceResolver1, namespaceResolver0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Element element0 = new Element("org.apache.commons.jxpath.MapDynamicPropertyHandler", "org.apache.commons.jxpath.MapDynamicPropertyHandler");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      String string0 = jDOMNodePointer0.getNamespaceURI();
      assertNotNull(string0);
      assertEquals("org.apache.commons.jxpath.MapDynamicPropertyHandler", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Element element0 = new Element("org.apache.commons.jxpath.MapDynamicPropertyHandler");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      String string0 = jDOMNodePointer0.getNamespaceURI();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      QName qName0 = new QName("mYC+.^aO");
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createChild((JXPathContext) null, qName0, 1563, (Object) locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Comment comment0 = new Comment("");
      Locale locale0 = new Locale("", "");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(comment0, locale0);
      jDOMNodePointer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Locale locale0 = Locale.US;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      String string0 = jDOMNodePointer0.getNamespaceURI();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Locale locale0 = Locale.US;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace");
      NodeIterator nodeIterator0 = jDOMNodePointer0.attributeIterator(qName0);
      assertEquals(0, nodeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      QName qName0 = jDOMNodePointer0.getName();
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, jDOMNodePointer0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.compareChildNodePointers(nodePointer0, jDOMNodePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JXPath internal error: compareChildNodes called for null
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, (Object) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("<<unknown namespace>>");
      NodeIterator nodeIterator0 = jDOMNodePointer0.childIterator(processingInstructionTest0, false, (NodePointer) null);
      assertEquals(0, nodeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      int int0 = jDOMNodePointer0.getLength();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeNameTest0, locale0, "u,>~9kd");
      NodeIterator nodeIterator0 = jDOMNodePointer0.namespaceIterator();
      assertEquals(0, nodeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CDATA cDATA0 = new CDATA("x_p5Xi4YG@aE]E+");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      boolean boolean0 = jDOMNodePointer0.isLanguage("x_p5Xi4YG@aE]E+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Locale locale0 = Locale.US;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      boolean boolean0 = jDOMNodePointer0.isCollection();
      assertFalse(boolean0);
  }
}
