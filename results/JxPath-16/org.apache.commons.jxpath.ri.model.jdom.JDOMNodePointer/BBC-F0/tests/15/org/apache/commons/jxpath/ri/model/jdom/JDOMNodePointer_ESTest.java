/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 05:07:21 GMT 2020
 */

package org.apache.commons.jxpath.ri.model.jdom;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.PackageFunctions;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.apache.commons.jxpath.ri.model.beans.NullPointer;
import org.apache.commons.jxpath.ri.model.jdom.JDOMAttributePointer;
import org.apache.commons.jxpath.ri.model.jdom.JDOMNamespaceIterator;
import org.apache.commons.jxpath.ri.model.jdom.JDOMNamespacePointer;
import org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jdom.Attribute;
import org.jdom.CDATA;
import org.jdom.Comment;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.ProcessingInstruction;
import org.jdom.Text;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JDOMNodePointer_ESTest extends JDOMNodePointer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      assertNotNull(namespace0);
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      
      Element element0 = new Element("C6", namespace0);
      assertNotNull(element0);
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals("http://www.w3.org/XML/1998/namespace", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      boolean boolean0 = jDOMNodePointer1.isLanguage("C6");
      assertFalse(boolean0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals("http://www.w3.org/XML/1998/namespace", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      String string0 = JDOMNodePointer.getPrefix(element0);
      assertNotNull(string0);
      assertEquals("xml", string0);
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      
      Object object0 = jDOMNodePointer0.getNodeValue();
      assertNull(object0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      assertNotNull(namespace0);
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      
      Element element0 = new Element("C6", namespace0);
      assertNotNull(element0);
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals("http://www.w3.org/XML/1998/namespace", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertNotNull(jDOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals("http://www.w3.org/XML/1998/namespace", jDOMNodePointer2.getNamespaceURI());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      
      String string0 = element0.getTextTrim();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      
      jDOMNodePointer1.setValue(jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals("http://www.w3.org/XML/1998/namespace", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals("http://www.w3.org/XML/1998/namespace", jDOMNodePointer2.getNamespaceURI());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = jDOMNodePointer2.getName();
      assertNotNull(qName0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals("http://www.w3.org/XML/1998/namespace", jDOMNodePointer2.getNamespaceURI());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer2.isRoot());
      assertEquals("xml:C6", qName0.toString());
      assertEquals("xml", qName0.getPrefix());
      assertEquals("C6", qName0.getName());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      
      JDOMAttributePointer jDOMAttributePointer0 = (JDOMAttributePointer)jDOMNodePointer1.createAttribute(jXPathContextReferenceImpl0, qName0);
      assertNotNull(jDOMAttributePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals("http://www.w3.org/XML/1998/namespace", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals("http://www.w3.org/XML/1998/namespace", jDOMNodePointer2.getNamespaceURI());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer2.isRoot());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("xml:C6", qName0.toString());
      assertEquals("xml", qName0.getPrefix());
      assertEquals("C6", qName0.getName());
      assertTrue(jDOMAttributePointer0.isActual());
      assertFalse(jDOMAttributePointer0.isRoot());
      assertFalse(jDOMAttributePointer0.isCollection());
      assertTrue(jDOMAttributePointer0.isNode());
      assertFalse(jDOMAttributePointer0.isAttribute());
      assertTrue(jDOMAttributePointer0.isLeaf());
      assertEquals(1, jDOMAttributePointer0.getLength());
      assertEquals("http://www.w3.org/XML/1998/namespace", jDOMAttributePointer0.getNamespaceURI());
      assertFalse(jDOMAttributePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMAttributePointer0.getIndex());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      
      JDOMNamespacePointer jDOMNamespacePointer0 = (JDOMNamespacePointer)jDOMNodePointer0.namespacePointer("3D|R~>=Fc");
      assertNotNull(jDOMNamespacePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNamespacePointer0.getLength());
      assertTrue(jDOMNamespacePointer0.isNode());
      assertFalse(jDOMNamespacePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNamespacePointer0.getIndex());
      assertFalse(jDOMNamespacePointer0.isAttribute());
      assertTrue(jDOMNamespacePointer0.isLeaf());
      assertFalse(jDOMNamespacePointer0.isContainer());
      assertFalse(jDOMNamespacePointer0.isRoot());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      
      String string1 = namespace0.toString();
      assertNotNull(string1);
      assertEquals("[Namespace: prefix \"xml\" is mapped to URI \"http://www.w3.org/XML/1998/namespace\"]", string1);
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      assertFalse(string1.equals((Object)string0));
      
      int int0 = jDOMNodePointer1.compareChildNodePointers(jDOMNamespacePointer0, jDOMAttributePointer0);
      assertEquals(1, int0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals("http://www.w3.org/XML/1998/namespace", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals("http://www.w3.org/XML/1998/namespace", jDOMNodePointer2.getNamespaceURI());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer2.isRoot());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("xml:C6", qName0.toString());
      assertEquals("xml", qName0.getPrefix());
      assertEquals("C6", qName0.getName());
      assertTrue(jDOMAttributePointer0.isActual());
      assertFalse(jDOMAttributePointer0.isRoot());
      assertFalse(jDOMAttributePointer0.isCollection());
      assertTrue(jDOMAttributePointer0.isNode());
      assertFalse(jDOMAttributePointer0.isAttribute());
      assertTrue(jDOMAttributePointer0.isLeaf());
      assertEquals(1, jDOMAttributePointer0.getLength());
      assertEquals("http://www.w3.org/XML/1998/namespace", jDOMAttributePointer0.getNamespaceURI());
      assertFalse(jDOMAttributePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMAttributePointer0.getIndex());
      assertEquals(1, jDOMNamespacePointer0.getLength());
      assertTrue(jDOMNamespacePointer0.isNode());
      assertFalse(jDOMNamespacePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNamespacePointer0.getIndex());
      assertFalse(jDOMNamespacePointer0.isAttribute());
      assertTrue(jDOMNamespacePointer0.isLeaf());
      assertFalse(jDOMNamespacePointer0.isContainer());
      assertFalse(jDOMNamespacePointer0.isRoot());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createAttribute(jXPathContextReferenceImpl0, qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot create an attribute for path /@xml:C6, operation is not allowed for this type of node
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      assertNotNull(namespace0);
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      
      Attribute attribute0 = new Attribute("X0APB", "Et7z#Glh0/", 6, namespace0);
      assertNotNull(attribute0);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("xml", attribute0.getNamespacePrefix());
      assertEquals(6, attribute0.getAttributeType());
      assertEquals("Et7z#Glh0/", attribute0.getValue());
      assertEquals("http://www.w3.org/XML/1998/namespace", attribute0.getNamespaceURI());
      assertEquals("X0APB", attribute0.getName());
      
      Attribute attribute1 = attribute0.setName("org.apache.commons.jxpath.ri.parser.ParseException");
      assertNotNull(attribute1);
      assertSame(attribute0, attribute1);
      assertSame(attribute1, attribute0);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("xml", attribute0.getNamespacePrefix());
      assertEquals(6, attribute0.getAttributeType());
      assertEquals("org.apache.commons.jxpath.ri.parser.ParseException", attribute0.getName());
      assertEquals("Et7z#Glh0/", attribute0.getValue());
      assertEquals("http://www.w3.org/XML/1998/namespace", attribute0.getNamespaceURI());
      assertEquals(6, attribute1.getAttributeType());
      assertEquals("Et7z#Glh0/", attribute1.getValue());
      assertEquals("org.apache.commons.jxpath.ri.parser.ParseException", attribute1.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", attribute1.getNamespaceURI());
      assertEquals("xml", attribute1.getNamespacePrefix());
      
      Attribute attribute2 = attribute1.setNamespace(namespace0);
      assertNotNull(attribute2);
      assertSame(attribute0, attribute2);
      assertSame(attribute0, attribute1);
      assertSame(attribute1, attribute0);
      assertSame(attribute1, attribute2);
      assertSame(attribute2, attribute1);
      assertSame(attribute2, attribute0);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("xml", attribute0.getNamespacePrefix());
      assertEquals(6, attribute0.getAttributeType());
      assertEquals("org.apache.commons.jxpath.ri.parser.ParseException", attribute0.getName());
      assertEquals("Et7z#Glh0/", attribute0.getValue());
      assertEquals("http://www.w3.org/XML/1998/namespace", attribute0.getNamespaceURI());
      assertEquals(6, attribute1.getAttributeType());
      assertEquals("Et7z#Glh0/", attribute1.getValue());
      assertEquals("org.apache.commons.jxpath.ri.parser.ParseException", attribute1.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", attribute1.getNamespaceURI());
      assertEquals("xml", attribute1.getNamespacePrefix());
      assertEquals("org.apache.commons.jxpath.ri.parser.ParseException", attribute2.getName());
      assertEquals("Et7z#Glh0/", attribute2.getValue());
      assertEquals("xml", attribute2.getNamespacePrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", attribute2.getNamespaceURI());
      assertEquals(6, attribute2.getAttributeType());
      
      String string0 = JDOMNodePointer.getPrefix(attribute2);
      assertNotNull(string0);
      assertEquals("xml", string0);
      assertSame(attribute0, attribute2);
      assertSame(attribute0, attribute1);
      assertSame(attribute1, attribute0);
      assertSame(attribute1, attribute2);
      assertSame(attribute2, attribute1);
      assertSame(attribute2, attribute0);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("xml", attribute0.getNamespacePrefix());
      assertEquals(6, attribute0.getAttributeType());
      assertEquals("org.apache.commons.jxpath.ri.parser.ParseException", attribute0.getName());
      assertEquals("Et7z#Glh0/", attribute0.getValue());
      assertEquals("http://www.w3.org/XML/1998/namespace", attribute0.getNamespaceURI());
      assertEquals(6, attribute1.getAttributeType());
      assertEquals("Et7z#Glh0/", attribute1.getValue());
      assertEquals("org.apache.commons.jxpath.ri.parser.ParseException", attribute1.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", attribute1.getNamespaceURI());
      assertEquals("xml", attribute1.getNamespacePrefix());
      assertEquals("org.apache.commons.jxpath.ri.parser.ParseException", attribute2.getName());
      assertEquals("Et7z#Glh0/", attribute2.getValue());
      assertEquals("xml", attribute2.getNamespacePrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", attribute2.getNamespaceURI());
      assertEquals(6, attribute2.getAttributeType());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace");
      assertNotNull(qName0);
      assertEquals("http", qName0.getPrefix());
      assertEquals("//www.w3.org/XML/1998/namespace", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.toString());
      
      Element element0 = new Element("C6");
      assertNotNull(element0);
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      
      String string0 = jDOMNodePointer0.toString();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      
      NullPointer nullPointer0 = (NullPointer)NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, (Object) null);
      assertNotNull(nullPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals("http", qName0.getPrefix());
      assertEquals("//www.w3.org/XML/1998/namespace", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer0.isRoot());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      
      // Undeclared exception!
      try { 
        nullPointer0.isLeaf();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      
      Element element0 = new Element("C", "C");
      assertNotNull(element0);
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("C", element0.getNamespaceURI());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(element0, locale0, "http://www.w3.org/XML/1998/namespace");
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("C", element0.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals("C", jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer((NodePointer) null, element0);
      assertNotNull(jDOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("C", element0.getNamespaceURI());
      assertTrue(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(jDOMNodePointer2.isCollection());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals("C", jDOMNodePointer2.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      
      String string0 = jDOMNodePointer1.getNamespaceURI();
      assertNotNull(string0);
      assertEquals("C", string0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("C", element0.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals("C", jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      String string1 = jDOMNodePointer2.asPath();
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("C", element0.getNamespaceURI());
      assertTrue(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(jDOMNodePointer2.isCollection());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals("C", jDOMNodePointer2.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      
      QName qName0 = new QName("http://www.w3.org/2000/xmlns/");
      assertNotNull(qName0);
      assertEquals("http", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("//www.w3.org/2000/xmlns/", qName0.getName());
      
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      assertNotNull(namespace0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      
      Element element0 = new Element("C6", namespace0);
      assertNotNull(element0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      
      Element element1 = element0.setAttributes((List) null);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element1.getName());
      assertEquals("", element1.getNamespaceURI());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, element1);
      assertNotNull(nodePointer0);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("http", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("//www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element1.getName());
      assertEquals("", element1.getNamespaceURI());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertNull(nodePointer0.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isCollection());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(nodePointer0, element0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("http", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("//www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element1.getName());
      assertEquals("", element1.getNamespaceURI());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertNull(nodePointer0.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isCollection());
      assertTrue(nodePointer0.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      jDOMNodePointer1.printPointerChain();
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("http", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("//www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element1.getName());
      assertEquals("", element1.getNamespaceURI());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertNull(nodePointer0.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isCollection());
      assertTrue(nodePointer0.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      jDOMNodePointer1.setValue(cDATA0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("http", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("//www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("C6", element0.getName());
      assertEquals(1, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element1.getName());
      assertEquals("", element1.getNamespaceURI());
      assertEquals(1, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertNull(nodePointer0.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isCollection());
      assertTrue(nodePointer0.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      int int0 = jDOMNodePointer0.getLength();
      assertEquals(1, int0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      
      int int1 = jDOMNodePointer1.compareChildNodePointers(jDOMNodePointer0, nodePointer0);
      assertEquals(0, int1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("http", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("//www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("C6", element0.getName());
      assertEquals(1, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element1.getName());
      assertEquals("", element1.getNamespaceURI());
      assertEquals(1, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertNull(nodePointer0.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isCollection());
      assertTrue(nodePointer0.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(int1 == int0);
      
      String string0 = jDOMNodePointer0.getNamespaceURI("http://www.w3.org/XML/1998/namespace");
      assertNull(string0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      Namespace namespace0 = Namespace.getNamespace("C6");
      assertNotNull(namespace0);
      assertEquals("C6", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      
      Element element0 = new Element("C6", namespace0);
      assertNotNull(element0);
      assertEquals("C6", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      
      Element element1 = element0.setName("C6");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("C6", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertEquals("C6", element1.getName());
      assertEquals("C6", element1.getNamespaceURI());
      assertEquals(0, element1.getContentSize());
      
      Document document0 = new Document(element1);
      assertNotNull(document0);
      assertEquals("C6", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(0, element0.getContentSize());
      assertTrue(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals("C6", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertTrue(element1.isRootElement());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("C6", element1.getName());
      assertEquals("C6", element1.getNamespaceURI());
      assertEquals(0, element1.getContentSize());
      assertEquals(1, document0.getContentSize());
      assertTrue(document0.hasRootElement());
      assertNull(document0.getBaseURI());
      
      Integer integer0 = new Integer(1261);
      assertNotNull(integer0);
      assertEquals(1261, (int)integer0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(integer0, locale0, "preceding::");
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      QName qName0 = jDOMNodePointer0.getName();
      assertNotNull(qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(element0, locale0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("C6", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(0, element0.getContentSize());
      assertTrue(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals("C6", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals("C6", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      CDATA cDATA0 = new CDATA("http://www.w3.org/2000/xmlns/");
      assertNotNull(cDATA0);
      assertEquals("http://www.w3.org/2000/xmlns/", cDATA0.getValue());
      assertEquals("http://www.w3.org/2000/xmlns/", cDATA0.getText());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) cDATA0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("http://www.w3.org/2000/xmlns/", cDATA0.getValue());
      assertEquals("http://www.w3.org/2000/xmlns/", cDATA0.getText());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      jXPathContextReferenceImpl0.registerNamespace("C6", "`ulpn");
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("http://www.w3.org/2000/xmlns/", cDATA0.getValue());
      assertEquals("http://www.w3.org/2000/xmlns/", cDATA0.getText());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer1.createChild((JXPathContext) jXPathContextReferenceImpl0, qName0, 1, (Object) "C6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: 
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/2000/xmlns/");
      assertNotNull(qName0);
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      
      Element element0 = new Element("C", "C");
      assertNotNull(element0);
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("C", element0.getNamespaceURI());
      assertEquals("C", element0.getName());
      
      Element element1 = new Element("C");
      assertNotNull(element1);
      assertEquals("", element1.getNamespacePrefix());
      assertEquals(0, element1.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("C", element1.getName());
      assertEquals("", element1.getNamespaceURI());
      assertFalse(element1.equals((Object)element0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(element1, locale0, "http://www.w3.org/XML/1998/namespace");
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals(0, element1.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("C", element1.getName());
      assertEquals("", element1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(element1.equals((Object)element0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(jDOMNodePointer1, element0);
      assertNotNull(jDOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("C", element0.getNamespaceURI());
      assertEquals("C", element0.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals(0, element1.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("C", element1.getName());
      assertEquals("", element1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer2.isRoot());
      assertTrue(jDOMNodePointer2.isNode());
      assertEquals("C", jDOMNodePointer2.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      
      QName qName1 = jDOMNodePointer1.getName();
      assertNotNull(qName1);
      assertNotSame(element1, element0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals(0, element1.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("C", element1.getName());
      assertEquals("", element1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals("C", qName1.toString());
      assertEquals("C", qName1.getName());
      assertNull(qName1.getPrefix());
      assertFalse(element1.equals((Object)element0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(qName1.equals((Object)qName0));
      
      String string0 = jDOMNodePointer1.getNamespaceURI();
      assertNull(string0);
      assertNotSame(element1, element0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals(0, element1.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("C", element1.getName());
      assertEquals("", element1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(element1.equals((Object)element0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      // Undeclared exception!
      jDOMNodePointer2.asPath();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      
      QName qName0 = new QName("http://www.w3.org/2000/xmlns/");
      assertNotNull(qName0);
      assertEquals("//www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http", qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "java.util.Locale@0000000003");
      assertNotNull(nodeNameTest0);
      assertEquals("//www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      Element element0 = new Element("X0APB");
      assertNotNull(element0);
      assertFalse(element0.isRootElement());
      assertEquals("X0APB", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) "java.util.Locale@0000000003", (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("//www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
      assertNotNull(nodeTypeTest0);
      assertEquals(4, nodeTypeTest0.getNodeType());
      
      String string0 = nodeTypeTest0.toString();
      assertNotNull(string0);
      assertEquals("processing-instruction()", string0);
      assertEquals(4, nodeTypeTest0.getNodeType());
      
      boolean boolean1 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) nodeTypeTest0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(4, nodeTypeTest0.getNodeType());
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=hi-;$fnNrjpvJ");
      assertFalse(boolean0);
      
      Element element0 = new Element("C6", (String) null);
      assertNotNull(element0);
      assertEquals("", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/XML/1998/namespace");
      assertNotNull(qName0);
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/XML/1998/namespace", qName0.toString());
      
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("C6", "C6");
      assertNotNull(processingInstruction0);
      assertEquals("C6", processingInstruction0.getData());
      assertEquals("C6", processingInstruction0.getValue());
      assertEquals("C6", processingInstruction0.getTarget());
      
      HashMap<CDATA, Comment> hashMap0 = new HashMap<CDATA, Comment>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ProcessingInstruction processingInstruction1 = processingInstruction0.setData((Map) hashMap0);
      assertNotNull(processingInstruction1);
      assertSame(processingInstruction0, processingInstruction1);
      assertSame(processingInstruction1, processingInstruction0);
      assertEquals("", processingInstruction0.getValue());
      assertEquals("", processingInstruction0.getData());
      assertEquals("C6", processingInstruction0.getTarget());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", processingInstruction1.getValue());
      assertEquals("", processingInstruction1.getData());
      assertEquals("C6", processingInstruction1.getTarget());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, processingInstruction1);
      assertNotNull(beanPointer0);
      assertSame(processingInstruction0, processingInstruction1);
      assertSame(processingInstruction1, processingInstruction0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertEquals("", processingInstruction0.getValue());
      assertEquals("", processingInstruction0.getData());
      assertEquals("C6", processingInstruction0.getTarget());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", processingInstruction1.getValue());
      assertEquals("", processingInstruction1.getData());
      assertEquals("C6", processingInstruction1.getTarget());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isRoot());
      
      QName qName1 = jDOMNodePointer0.getName();
      assertNotNull(qName1);
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("C6", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals("C6", qName1.getName());
      assertFalse(qName1.equals((Object)qName0));
      
      Document document0 = new Document(element0);
      assertNotNull(document0);
      assertEquals("", element0.getNamespaceURI());
      assertTrue(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals(1, document0.getContentSize());
      assertTrue(document0.hasRootElement());
      assertNull(document0.getBaseURI());
      
      Document document1 = document0.getDocument();
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", element0.getNamespaceURI());
      assertTrue(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals(1, document0.getContentSize());
      assertTrue(document0.hasRootElement());
      assertNull(document0.getBaseURI());
      assertTrue(document1.hasRootElement());
      assertEquals(1, document1.getContentSize());
      assertNull(document1.getBaseURI());
      
      jDOMNodePointer0.setValue(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(1, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertTrue(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, document0.getContentSize());
      assertTrue(document0.hasRootElement());
      assertNull(document0.getBaseURI());
      assertTrue(document1.hasRootElement());
      assertEquals(1, document1.getContentSize());
      assertNull(document1.getBaseURI());
      
      String string0 = (String)jDOMNodePointer0.getValue();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(1, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertTrue(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      
      NamespaceResolver namespaceResolver0 = jDOMNodePointer0.getNamespaceResolver();
      assertNotNull(namespaceResolver0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(1, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertTrue(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(namespaceResolver0.isSealed());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      
      QName qName0 = jDOMNodePointer0.getName();
      assertNotNull(qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "C6");
      assertFalse(boolean0);
      
      Element element0 = new Element("C6", "C6");
      assertNotNull(element0);
      assertEquals("C6", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, element0);
      assertNotNull(nodePointer0);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertEquals("C6", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isContainer());
      assertEquals("C6", nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isCollection());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      
      QName qName1 = nodePointer0.getName();
      assertNotNull(qName1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(qName0, qName1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertEquals("C6", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isContainer());
      assertEquals("C6", nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isCollection());
      assertTrue(nodePointer0.isNode());
      assertEquals("C6", qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals("C6", qName1.toString());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertFalse(qName1.equals((Object)qName0));
      
      Document document0 = new Document();
      assertNotNull(document0);
      assertNull(document0.getBaseURI());
      assertEquals(0, document0.getContentSize());
      assertFalse(document0.hasRootElement());
      
      // Undeclared exception!
      try { 
        nodePointer0.setValue(document0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace");
      assertNotNull(qName0);
      assertEquals("http", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertEquals("//www.w3.org/XML/1998/namespace", qName0.getName());
      
      Namespace namespace0 = Namespace.getNamespace("", "http://www.w3.org/2000/xmlns/");
      assertNotNull(namespace0);
      assertEquals("http://www.w3.org/2000/xmlns/", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      
      Element element0 = new Element("C6", namespace0);
      assertNotNull(element0);
      assertEquals("http://www.w3.org/2000/xmlns/", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element0.getName());
      
      NodeIterator nodeIterator0 = jDOMNodePointer0.namespaceIterator();
      assertNotNull(nodeIterator0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(0, nodeIterator0.getPosition());
      
      Element element1 = element0.setAttributes((List) null);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("http://www.w3.org/2000/xmlns/", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals("C6", element1.getName());
      assertEquals(0, element1.getContentSize());
      assertEquals("http://www.w3.org/2000/xmlns/", element1.getNamespaceURI());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, element1);
      assertNotNull(nodePointer0);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("http", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertEquals("//www.w3.org/XML/1998/namespace", qName0.getName());
      assertEquals("http://www.w3.org/2000/xmlns/", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals("C6", element1.getName());
      assertEquals(0, element1.getContentSize());
      assertEquals("http://www.w3.org/2000/xmlns/", element1.getNamespaceURI());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isContainer());
      assertFalse(nodePointer0.isRoot());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isNode());
      assertEquals("http://www.w3.org/2000/xmlns/", nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      
      Element element2 = element0.setAttributes((List) null);
      assertNotNull(element2);
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element0);
      assertSame(element2, element1);
      assertEquals("http://www.w3.org/2000/xmlns/", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals("C6", element2.getName());
      assertEquals("", element2.getNamespacePrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", element2.getNamespaceURI());
      assertEquals(0, element2.getContentSize());
      assertFalse(element2.isRootElement());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer((NodePointer) null, qName0, namespace0);
      assertNotNull(beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("http", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertEquals("//www.w3.org/XML/1998/namespace", qName0.getName());
      assertEquals("http://www.w3.org/2000/xmlns/", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      
      Document document0 = new Document(element2);
      assertNotNull(document0);
      assertEquals("http://www.w3.org/2000/xmlns/", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", element0.getNamespaceURI());
      assertTrue(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals("C6", element2.getName());
      assertEquals("", element2.getNamespacePrefix());
      assertTrue(element2.isRootElement());
      assertEquals("http://www.w3.org/2000/xmlns/", element2.getNamespaceURI());
      assertEquals(0, element2.getContentSize());
      assertEquals(1, document0.getContentSize());
      assertNull(document0.getBaseURI());
      assertTrue(document0.hasRootElement());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(document0, locale0, "ZC");
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("http://www.w3.org/2000/xmlns/", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", element0.getNamespaceURI());
      assertTrue(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals("C6", element2.getName());
      assertEquals("", element2.getNamespacePrefix());
      assertTrue(element2.isRootElement());
      assertEquals("http://www.w3.org/2000/xmlns/", element2.getNamespaceURI());
      assertEquals(0, element2.getContentSize());
      assertEquals(1, document0.getContentSize());
      assertNull(document0.getBaseURI());
      assertTrue(document0.hasRootElement());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)nodePointer0));
      
      boolean boolean0 = jDOMNodePointer1.isLeaf();
      assertFalse(boolean0);
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element0);
      assertSame(element2, element1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("http://www.w3.org/2000/xmlns/", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", element0.getNamespaceURI());
      assertTrue(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals("C6", element2.getName());
      assertEquals("", element2.getNamespacePrefix());
      assertTrue(element2.isRootElement());
      assertEquals("http://www.w3.org/2000/xmlns/", element2.getNamespaceURI());
      assertEquals(0, element2.getContentSize());
      assertEquals(1, document0.getContentSize());
      assertNull(document0.getBaseURI());
      assertTrue(document0.hasRootElement());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)nodePointer0));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      
      Locale locale0 = new Locale("");
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace");
      assertNotNull(qName0);
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertEquals("http", qName0.getPrefix());
      assertEquals("//www.w3.org/XML/1998/namespace", qName0.getName());
      
      Namespace namespace0 = Namespace.getNamespace("", "http://www.w3.org/2000/xmlns/");
      assertNotNull(namespace0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", namespace0.getURI());
      
      Element element0 = new Element("C6", namespace0);
      assertNotNull(element0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", namespace0.getURI());
      assertFalse(element0.isRootElement());
      assertEquals("http://www.w3.org/2000/xmlns/", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      
      NodeIterator nodeIterator0 = jDOMNodePointer0.namespaceIterator();
      assertNotNull(nodeIterator0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(0, nodeIterator0.getPosition());
      
      Element element1 = element0.setAttributes((List) null);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", namespace0.getURI());
      assertFalse(element0.isRootElement());
      assertEquals("http://www.w3.org/2000/xmlns/", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element1.getContentSize());
      assertEquals("http://www.w3.org/2000/xmlns/", element1.getNamespaceURI());
      assertEquals("C6", element1.getName());
      assertFalse(element1.isRootElement());
      assertEquals("", element1.getNamespacePrefix());
      
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, element1);
      assertNotNull(nodePointer0);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertEquals("http", qName0.getPrefix());
      assertEquals("//www.w3.org/XML/1998/namespace", qName0.getName());
      assertEquals("", namespace0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", namespace0.getURI());
      assertFalse(element0.isRootElement());
      assertEquals("http://www.w3.org/2000/xmlns/", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element1.getContentSize());
      assertEquals("http://www.w3.org/2000/xmlns/", element1.getNamespaceURI());
      assertEquals("C6", element1.getName());
      assertFalse(element1.isRootElement());
      assertEquals("", element1.getNamespacePrefix());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isAttribute());
      assertEquals("http://www.w3.org/2000/xmlns/", nodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      
      Element element2 = element0.setAttributes((List) null);
      assertNotNull(element2);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element2, element0);
      assertSame(element2, element1);
      assertEquals("", namespace0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", namespace0.getURI());
      assertFalse(element0.isRootElement());
      assertEquals("http://www.w3.org/2000/xmlns/", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element2.getContentSize());
      assertEquals("", element2.getNamespacePrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", element2.getNamespaceURI());
      assertEquals("C6", element2.getName());
      assertFalse(element2.isRootElement());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer((NodePointer) null, qName0, namespace0);
      assertNotNull(beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertEquals("http", qName0.getPrefix());
      assertEquals("//www.w3.org/XML/1998/namespace", qName0.getName());
      assertEquals("", namespace0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", namespace0.getURI());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      
      Document document0 = new Document();
      assertNotNull(document0);
      assertEquals(0, document0.getContentSize());
      assertFalse(document0.hasRootElement());
      assertNull(document0.getBaseURI());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(document0, locale0, "ZC");
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(0, document0.getContentSize());
      assertFalse(document0.hasRootElement());
      assertNull(document0.getBaseURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      // Undeclared exception!
      try { 
        jDOMNodePointer1.isLeaf();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      
      Object object0 = jDOMNodePointer0.getNodeValue();
      assertNull(object0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      
      Namespace namespace0 = Namespace.getNamespace("BcvKn5(wLkh:/}$:");
      assertNotNull(namespace0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      
      Element element0 = new Element("C6", namespace0);
      assertNotNull(element0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals("BcvKn5(wLkh:/}$:", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      jDOMNodePointer1.setValue(cDATA0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(1, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals("BcvKn5(wLkh:/}$:", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      int int0 = jDOMNodePointer1.getLength();
      assertEquals(1, int0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(1, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals("BcvKn5(wLkh:/}$:", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      Object object1 = jDOMNodePointer1.getValue();
      assertNotNull(object1);
      assertEquals("", object1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(1, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals("BcvKn5(wLkh:/}$:", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      Integer integer0 = new Integer(636);
      assertNotNull(integer0);
      assertEquals(636, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      String string0 = JDOMNodePointer.findEnclosingAttribute(integer0, "BcvKn5(wLkh:/}$:", namespace0);
      assertNull(string0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertFalse(integer0.equals((Object)int0));
      
      Document document0 = new Document(element0);
      assertNotNull(document0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertTrue(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(1, element0.getContentSize());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals(1, document0.getContentSize());
      assertTrue(document0.hasRootElement());
      assertNull(document0.getBaseURI());
      
      jDOMNodePointer1.setValue(document0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertTrue(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(1, element0.getContentSize());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals("BcvKn5(wLkh:/}$:", jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, document0.getContentSize());
      assertTrue(document0.hasRootElement());
      assertNull(document0.getBaseURI());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) locale0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      HashMap<NodeNameTest, JDOMNodePointer> hashMap0 = new HashMap<NodeNameTest, JDOMNodePointer>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Attribute attribute0 = new Attribute("spXcT", "spXcT", (Namespace) null);
      assertNotNull(attribute0);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals("spXcT", attribute0.getName());
      assertEquals("spXcT", attribute0.getValue());
      assertEquals(0, attribute0.getAttributeType());
      assertEquals("", attribute0.getNamespacePrefix());
      assertEquals("", attribute0.getNamespaceURI());
      
      Document document0 = new Document();
      assertNotNull(document0);
      assertEquals(0, document0.getContentSize());
      assertFalse(document0.hasRootElement());
      assertNull(document0.getBaseURI());
      
      Locale locale1 = Locale.forLanguageTag("spXcT");
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("spxct", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("spxct", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertFalse(locale1.equals((Object)locale0));
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, locale1, "spXcT");
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, document0.getContentSize());
      assertFalse(document0.hasRootElement());
      assertNull(document0.getBaseURI());
      assertEquals("spxct", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("spxct", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(locale1.equals((Object)locale0));
      
      String string0 = jDOMNodePointer0.asPath();
      assertNotNull(string0);
      assertEquals("id('spXcT')", string0);
      assertNotSame(locale1, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, document0.getContentSize());
      assertFalse(document0.hasRootElement());
      assertNull(document0.getBaseURI());
      assertEquals("spxct", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("spxct", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(locale1.equals((Object)locale0));
      
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      assertNotNull(namespaceResolver0);
      assertFalse(namespaceResolver0.isSealed());
      
      jDOMNodePointer0.setNamespaceResolver(namespaceResolver0);
      assertNotSame(locale1, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, document0.getContentSize());
      assertFalse(document0.hasRootElement());
      assertNull(document0.getBaseURI());
      assertEquals("spxct", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("spxct", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(namespaceResolver0.isSealed());
      assertFalse(locale1.equals((Object)locale0));
      
      boolean boolean0 = jDOMNodePointer0.isLanguage(",'r[jPT6;}'`");
      assertFalse(boolean0);
      assertNotSame(locale1, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, document0.getContentSize());
      assertFalse(document0.hasRootElement());
      assertNull(document0.getBaseURI());
      assertEquals("spxct", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("spxct", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(locale1.equals((Object)locale0));
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.namespaceIterator();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/2000/xmlns/");
      assertNotNull(qName0);
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Element element0 = new Element("C", "C");
      assertNotNull(element0);
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("C", element0.getName());
      
      Element element1 = new Element("C");
      assertNotNull(element1);
      assertEquals("C", element1.getName());
      assertEquals("", element1.getNamespaceURI());
      assertEquals(0, element1.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.equals((Object)element0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(element1, locale0, "http://www.w3.org/XML/1998/namespace");
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("C", element1.getName());
      assertEquals("", element1.getNamespaceURI());
      assertEquals(0, element1.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(element1.equals((Object)element0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(jDOMNodePointer1, element0);
      assertNotNull(jDOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("C", element0.getName());
      assertEquals("C", element1.getName());
      assertEquals("", element1.getNamespaceURI());
      assertEquals(0, element1.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer2.isRoot());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isCollection());
      assertEquals("C", jDOMNodePointer2.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      
      QName qName1 = jDOMNodePointer2.getName();
      assertNotNull(qName1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("C", element0.getName());
      assertEquals("C", element1.getName());
      assertEquals("", element1.getNamespaceURI());
      assertEquals(0, element1.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer2.isRoot());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isCollection());
      assertEquals("C", jDOMNodePointer2.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertEquals("C", qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals("C", qName1.toString());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(qName1.equals((Object)qName0));
      
      String string0 = jDOMNodePointer1.getNamespaceURI();
      assertNull(string0);
      assertNotSame(element1, element0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("C", element1.getName());
      assertEquals("", element1.getNamespaceURI());
      assertEquals(0, element1.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(element1.equals((Object)element0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      assertNotNull(nodeNameTest0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("C", element0.getName());
      assertEquals("C", element1.getName());
      assertEquals("", element1.getNamespaceURI());
      assertEquals(0, element1.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer2.isRoot());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isCollection());
      assertEquals("C", jDOMNodePointer2.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertEquals("C", qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals("C", qName1.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("C", nodeNameTest0.toString());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(qName1.equals((Object)qName0));
      
      boolean boolean1 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer1, (Object) element1, (NodeTest) nodeNameTest0);
      assertTrue(boolean1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("C", element0.getName());
      assertEquals("C", element1.getName());
      assertEquals("", element1.getNamespaceURI());
      assertEquals(0, element1.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer2.isRoot());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isCollection());
      assertEquals("C", jDOMNodePointer2.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertEquals("C", qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals("C", qName1.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("C", nodeNameTest0.toString());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(boolean1 == boolean0);
      
      String string1 = JDOMNodePointer.XML_NAMESPACE_URI;
      assertNotNull(string1);
      assertEquals("http://www.w3.org/XML/1998/namespace", string1);
      
      QName qName2 = new QName("http://www.w3.org/2000/xmlns/", "count");
      assertNotNull(qName2);
      assertEquals("count", qName2.getName());
      assertEquals("http://www.w3.org/2000/xmlns/:count", qName2.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName2.getPrefix());
      assertFalse(qName2.equals((Object)qName1));
      assertFalse(qName2.equals((Object)qName0));
      
      VariablePointer variablePointer0 = new VariablePointer(qName2);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertEquals("count", qName2.getName());
      assertEquals("http://www.w3.org/2000/xmlns/:count", qName2.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName2.getPrefix());
      assertFalse(qName2.equals((Object)qName1));
      assertFalse(qName2.equals((Object)qName0));
      
      NodePointer nodePointer0 = variablePointer0.namespacePointer("<<unknown namespace>>");
      assertNull(nodePointer0);
      assertNotSame(qName2, qName1);
      assertNotSame(qName2, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertEquals("count", qName2.getName());
      assertEquals("http://www.w3.org/2000/xmlns/:count", qName2.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName2.getPrefix());
      assertFalse(qName2.equals((Object)qName1));
      assertFalse(qName2.equals((Object)qName0));
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "http://www.w3.org/2000/xmlns/");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) fileSystemHandling0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      // Undeclared exception!
      try { 
        jXPathContextReferenceImpl0.getRelativeContext(variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: http://www.w3.org/2000/xmlns/:count
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      
      Object object0 = jDOMNodePointer0.getNodeValue();
      assertNull(object0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      assertNotNull(namespace0);
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      
      Element element0 = new Element("C6", (Namespace) null);
      assertNotNull(element0);
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertTrue(jDOMNodePointer1.isNode());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      QName qName0 = jDOMNodePointer1.getName();
      assertNotNull(qName0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertTrue(jDOMNodePointer1.isNode());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertNull(qName0.getPrefix());
      assertEquals("C6", qName0.getName());
      assertEquals("C6", qName0.toString());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      String string0 = locale0.getDisplayVariant();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      int int0 = jDOMNodePointer1.getLength();
      assertEquals(1, int0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertTrue(jDOMNodePointer1.isNode());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      QName qName1 = jDOMNodePointer0.getName();
      assertNotNull(qName1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(qName1.getPrefix());
      assertNull(qName1.toString());
      assertNull(qName1.getName());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("http://www.w3.org/2000/xmlns/");
      assertNotNull(processingInstructionTest0);
      assertEquals("http://www.w3.org/2000/xmlns/", processingInstructionTest0.getTarget());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer(jDOMNodePointer1, qName1, processingInstructionTest0);
      assertNotNull(beanPointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertTrue(jDOMNodePointer1.isNode());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertNull(qName1.getPrefix());
      assertNull(qName1.toString());
      assertNull(qName1.getName());
      assertEquals("http://www.w3.org/2000/xmlns/", processingInstructionTest0.getTarget());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      Locale locale1 = Locale.ENGLISH;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertFalse(locale1.equals((Object)locale0));
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(locale1, locale0, "Dd\"2oe1");
      assertNotNull(jDOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isNode());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertTrue(jDOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isContainer());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "]");
      assertNotNull(nodeNameTest0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertTrue(jDOMNodePointer1.isNode());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertNull(qName0.getPrefix());
      assertEquals("C6", qName0.getName());
      assertEquals("C6", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("C6", nodeNameTest0.toString());
      assertEquals("]", nodeNameTest0.getNamespaceURI());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(qName0.equals((Object)qName1));
      
      CDATA cDATA1 = (CDATA)cDATA0.setText("PqTCBgxF,nLe^");
      assertNotNull(cDATA1);
      assertSame(cDATA1, cDATA0);
      assertSame(cDATA0, cDATA1);
      assertEquals("PqTCBgxF,nLe^", cDATA1.getValue());
      assertEquals("PqTCBgxF,nLe^", cDATA1.getText());
      assertEquals("PqTCBgxF,nLe^", cDATA0.getValue());
      assertEquals("PqTCBgxF,nLe^", cDATA0.getText());
      
      JDOMNodePointer jDOMNodePointer3 = new JDOMNodePointer(jDOMNodePointer2, beanPointer0);
      assertNotNull(jDOMNodePointer3);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(1, jDOMNodePointer3.getLength());
      assertNull(jDOMNodePointer3.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer3.getIndex());
      assertFalse(jDOMNodePointer3.isContainer());
      assertTrue(jDOMNodePointer3.isNode());
      assertFalse(jDOMNodePointer3.isRoot());
      assertFalse(jDOMNodePointer3.isCollection());
      assertFalse(jDOMNodePointer3.isAttribute());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertTrue(jDOMNodePointer1.isNode());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertNull(qName1.getPrefix());
      assertNull(qName1.toString());
      assertNull(qName1.getName());
      assertEquals("http://www.w3.org/2000/xmlns/", processingInstructionTest0.getTarget());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isNode());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertTrue(jDOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isContainer());
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer0));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer3, (Object) element0, (NodeTest) nodeNameTest0);
      assertTrue(boolean0);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer0);
      assertNotSame(locale0, locale1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(qName0, qName1);
      assertNotSame(qName1, qName0);
      assertNotSame(locale1, locale0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(1, jDOMNodePointer3.getLength());
      assertNull(jDOMNodePointer3.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer3.getIndex());
      assertFalse(jDOMNodePointer3.isContainer());
      assertTrue(jDOMNodePointer3.isNode());
      assertFalse(jDOMNodePointer3.isRoot());
      assertFalse(jDOMNodePointer3.isCollection());
      assertFalse(jDOMNodePointer3.isAttribute());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertTrue(jDOMNodePointer1.isNode());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertNull(qName0.getPrefix());
      assertEquals("C6", qName0.getName());
      assertEquals("C6", qName0.toString());
      assertNull(qName1.getPrefix());
      assertNull(qName1.toString());
      assertNull(qName1.getName());
      assertEquals("http://www.w3.org/2000/xmlns/", processingInstructionTest0.getTarget());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isNode());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertTrue(jDOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isContainer());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("C6", nodeNameTest0.toString());
      assertEquals("]", nodeNameTest0.getNamespaceURI());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer0));
      
      CDATA cDATA2 = (CDATA)cDATA0.setText("lL*s@/?b_X%XHz");
      assertNotNull(cDATA2);
      assertSame(cDATA0, cDATA1);
      assertSame(cDATA0, cDATA2);
      assertSame(cDATA2, cDATA0);
      assertSame(cDATA2, cDATA1);
      assertEquals("lL*s@/?b_X%XHz", cDATA0.getValue());
      assertEquals("lL*s@/?b_X%XHz", cDATA0.getText());
      assertEquals("lL*s@/?b_X%XHz", cDATA2.getValue());
      assertEquals("lL*s@/?b_X%XHz", cDATA2.getText());
      
      boolean boolean1 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer1, (Object) cDATA2, (NodeTest) nodeNameTest0);
      assertFalse(boolean1);
      assertSame(cDATA0, cDATA1);
      assertSame(cDATA0, cDATA2);
      assertNotSame(locale0, locale1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertSame(cDATA2, cDATA0);
      assertSame(cDATA2, cDATA1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(qName0, qName1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("lL*s@/?b_X%XHz", cDATA0.getValue());
      assertEquals("lL*s@/?b_X%XHz", cDATA0.getText());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("lL*s@/?b_X%XHz", cDATA2.getValue());
      assertEquals("lL*s@/?b_X%XHz", cDATA2.getText());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertTrue(jDOMNodePointer1.isNode());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertNull(qName0.getPrefix());
      assertEquals("C6", qName0.getName());
      assertEquals("C6", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("C6", nodeNameTest0.toString());
      assertEquals("]", nodeNameTest0.getNamespaceURI());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(boolean1 == boolean0);
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(qName0.equals((Object)qName1));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      Object object0 = jDOMNodePointer0.getNodeValue();
      assertNull(object0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      Namespace namespace0 = Namespace.getNamespace("", "");
      assertNotNull(namespace0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      
      Element element0 = new Element("C6", (Namespace) null);
      assertNotNull(element0);
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertNotNull(jDOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isRoot());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isContainer());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      
      Element element1 = element0.setAttributes((List) null);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element1.getNamespaceURI());
      assertEquals("C6", element1.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertEquals(0, element1.getContentSize());
      
      String string0 = element0.getTextTrim();
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(element0, element1);
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      
      jDOMNodePointer1.setValue(jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertSame(element0, element1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer2.isRoot());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isContainer());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      
      NodePointer nodePointer0 = jDOMNodePointer0.getImmediateValuePointer();
      assertNotNull(nodePointer0);
      assertSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer2);
      assertSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isRoot());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertNull(nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer2));
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = jDOMNodePointer2.getName();
      assertNotNull(qName0);
      assertSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertSame(element0, element1);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer2, nodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isRoot());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals("C6", qName0.toString());
      assertEquals("C6", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)nodePointer0));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      
      JDOMAttributePointer jDOMAttributePointer0 = (JDOMAttributePointer)jDOMNodePointer1.createAttribute(jXPathContextReferenceImpl0, qName0);
      assertNotNull(jDOMAttributePointer0);
      assertSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertSame(element0, element1);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer2, nodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer2.isRoot());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("C6", qName0.toString());
      assertEquals("C6", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(jDOMAttributePointer0.getNamespaceURI());
      assertEquals(1, jDOMAttributePointer0.getLength());
      assertFalse(jDOMAttributePointer0.isCollection());
      assertFalse(jDOMAttributePointer0.isAttribute());
      assertTrue(jDOMAttributePointer0.isActual());
      assertTrue(jDOMAttributePointer0.isNode());
      assertFalse(jDOMAttributePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMAttributePointer0.getIndex());
      assertFalse(jDOMAttributePointer0.isContainer());
      assertTrue(jDOMAttributePointer0.isLeaf());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)nodePointer0));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      
      JDOMNamespacePointer jDOMNamespacePointer0 = (JDOMNamespacePointer)jDOMNodePointer0.namespacePointer("3D|R~>=Fc");
      assertNotNull(jDOMNamespacePointer0);
      assertSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNamespacePointer0.isRoot());
      assertTrue(jDOMNamespacePointer0.isNode());
      assertFalse(jDOMNamespacePointer0.isCollection());
      assertFalse(jDOMNamespacePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNamespacePointer0.getIndex());
      assertEquals(1, jDOMNamespacePointer0.getLength());
      assertTrue(jDOMNamespacePointer0.isLeaf());
      assertFalse(jDOMNamespacePointer0.isContainer());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      
      boolean boolean0 = jDOMNodePointer2.isLanguage(";hu`.2O&@CJw");
      assertFalse(boolean0);
      assertSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertSame(element0, element1);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer2, nodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isRoot());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isContainer());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)nodePointer0));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      
      JDOMAttributePointer jDOMAttributePointer1 = (JDOMAttributePointer)jDOMNodePointer2.createAttribute(jXPathContextReferenceImpl0, qName0);
      assertNotNull(jDOMAttributePointer1);
      assertNotSame(jDOMAttributePointer1, jDOMAttributePointer0);
      assertSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertSame(element0, element1);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer2, nodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(jDOMAttributePointer1.isActual());
      assertTrue(jDOMAttributePointer1.isNode());
      assertFalse(jDOMAttributePointer1.isRoot());
      assertFalse(jDOMAttributePointer1.isAttribute());
      assertFalse(jDOMAttributePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMAttributePointer1.getIndex());
      assertFalse(jDOMAttributePointer1.isContainer());
      assertNull(jDOMAttributePointer1.getNamespaceURI());
      assertEquals(1, jDOMAttributePointer1.getLength());
      assertTrue(jDOMAttributePointer1.isLeaf());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isRoot());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("C6", qName0.toString());
      assertEquals("C6", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(jDOMAttributePointer1.equals((Object)jDOMAttributePointer0));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)nodePointer0));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createAttribute(jXPathContextReferenceImpl0, qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot create an attribute for path /@C6, operation is not allowed for this type of node
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      
      Object object0 = jDOMNodePointer0.getNodeValue();
      assertNull(object0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      assertNotNull(namespace0);
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      
      Element element0 = new Element("C6", (Namespace) null);
      assertNotNull(element0);
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      QName qName0 = jDOMNodePointer1.getName();
      assertNotNull(qName0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals("C6", qName0.toString());
      assertEquals("C6", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      String string0 = locale0.getDisplayVariant();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      
      int int0 = jDOMNodePointer1.getLength();
      assertEquals(1, int0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2325));
      assertNotNull(nodeTypeTest0);
      assertEquals((-2325), nodeTypeTest0.getNodeType());
      
      String string1 = nodeTypeTest0.toString();
      assertNotNull(string1);
      assertEquals("UNKNOWN()", string1);
      assertEquals((-2325), nodeTypeTest0.getNodeType());
      assertFalse(string1.equals((Object)string0));
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "zL6@LoGJ.f3%C,");
      assertNotNull(nodeNameTest0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals("C6", qName0.toString());
      assertEquals("C6", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("zL6@LoGJ.f3%C,", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("C6", nodeNameTest0.toString());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      boolean boolean0 = jDOMNodePointer1.testNode((NodeTest) nodeNameTest0);
      assertTrue(boolean0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals("C6", qName0.toString());
      assertEquals("C6", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("zL6@LoGJ.f3%C,", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("C6", nodeNameTest0.toString());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      String string2 = jDOMNodePointer0.getNamespaceURI("http://www.w3.org/2000/xmlns/");
      assertNull(string2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      
      boolean boolean1 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) "UNKNOWN()", (NodeTest) nodeNameTest0);
      assertFalse(boolean1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals("C6", qName0.toString());
      assertEquals("C6", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("zL6@LoGJ.f3%C,", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("C6", nodeNameTest0.toString());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer1.remove();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot remove root JDOM node
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0, "The name \"");
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) locale0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      HashMap<NodeNameTest, JDOMNodePointer> hashMap0 = new HashMap<NodeNameTest, JDOMNodePointer>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("space", hashMap0);
      assertNotNull(processingInstruction0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("space", processingInstruction0.getTarget());
      assertEquals("", processingInstruction0.getData());
      assertEquals("", processingInstruction0.getValue());
      
      HashMap hashMap1 = (HashMap)hashMap0.clone();
      assertNotNull(hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      ProcessingInstruction processingInstruction1 = processingInstruction0.setPseudoAttribute("http://www.w3.org/2000/xmlns/", "<<unknown namespace>>");
      assertNotNull(processingInstruction1);
      assertSame(processingInstruction0, processingInstruction1);
      assertSame(processingInstruction1, processingInstruction0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("http://www.w3.org/2000/xmlns/=\"<<unknown namespace>>\"", processingInstruction0.getValue());
      assertEquals("http://www.w3.org/2000/xmlns/=\"<<unknown namespace>>\"", processingInstruction0.getData());
      assertEquals("space", processingInstruction0.getTarget());
      assertEquals("space", processingInstruction1.getTarget());
      assertEquals("http://www.w3.org/2000/xmlns/=\"<<unknown namespace>>\"", processingInstruction1.getData());
      assertEquals("http://www.w3.org/2000/xmlns/=\"<<unknown namespace>>\"", processingInstruction1.getValue());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(processingInstruction1, locale0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("http://www.w3.org/2000/xmlns/=\"<<unknown namespace>>\"", processingInstruction0.getValue());
      assertEquals("http://www.w3.org/2000/xmlns/=\"<<unknown namespace>>\"", processingInstruction0.getData());
      assertEquals("space", processingInstruction0.getTarget());
      assertEquals("space", processingInstruction1.getTarget());
      assertEquals("http://www.w3.org/2000/xmlns/=\"<<unknown namespace>>\"", processingInstruction1.getData());
      assertEquals("http://www.w3.org/2000/xmlns/=\"<<unknown namespace>>\"", processingInstruction1.getValue());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      jDOMNodePointer1.printPointerChain();
      assertSame(processingInstruction0, processingInstruction1);
      assertSame(processingInstruction1, processingInstruction0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("http://www.w3.org/2000/xmlns/=\"<<unknown namespace>>\"", processingInstruction0.getValue());
      assertEquals("http://www.w3.org/2000/xmlns/=\"<<unknown namespace>>\"", processingInstruction0.getData());
      assertEquals("space", processingInstruction0.getTarget());
      assertEquals("space", processingInstruction1.getTarget());
      assertEquals("http://www.w3.org/2000/xmlns/=\"<<unknown namespace>>\"", processingInstruction1.getData());
      assertEquals("http://www.w3.org/2000/xmlns/=\"<<unknown namespace>>\"", processingInstruction1.getValue());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      boolean boolean0 = jDOMNodePointer0.isLeaf();
      assertTrue(boolean0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      
      boolean boolean1 = jDOMNodePointer0.isCollection();
      assertFalse(boolean1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      
      Text text0 = new Text("");
      assertNotNull(text0);
      assertEquals("", text0.getText());
      assertEquals("", text0.getValue());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, text0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertEquals("", text0.getText());
      assertEquals("", text0.getValue());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      
      CDATA cDATA1 = new CDATA("<<unknown namespace>>");
      assertNotNull(cDATA1);
      assertEquals("<<unknown namespace>>", cDATA1.getValue());
      assertEquals("<<unknown namespace>>", cDATA1.getText());
      assertFalse(cDATA1.equals((Object)cDATA0));
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue(variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: 
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LinkedList<ProcessingInstruction> linkedList0 = new LinkedList<ProcessingInstruction>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Document document0 = new Document(linkedList0);
      assertNotNull(document0);
      assertEquals(0, linkedList0.size());
      assertNull(document0.getBaseURI());
      assertEquals(0, document0.getContentSize());
      assertFalse(document0.hasRootElement());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, (Locale) null, "org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest@0000000011");
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, linkedList0.size());
      assertNull(document0.getBaseURI());
      assertEquals(0, document0.getContentSize());
      assertFalse(document0.hasRootElement());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.getNamespaceURI(" No root element");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      Locale locale1 = Locale.US;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("US", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en_US", locale1.toString());
      assertEquals("USA", locale1.getISO3Country());
      assertFalse(locale1.equals((Object)locale0));
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1436021352));
      assertNotNull(nodeTypeTest0);
      assertEquals((-1436021352), nodeTypeTest0.getNodeType());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeTypeTest0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals((-1436021352), nodeTypeTest0.getNodeType());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(locale0.equals((Object)locale1));
      
      Comment comment0 = new Comment("]q0GAH`)J-6g-8B");
      assertNotNull(comment0);
      assertEquals("]q0GAH`)J-6g-8B", comment0.getValue());
      assertEquals("]q0GAH`)J-6g-8B", comment0.getText());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, comment0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals((-1436021352), nodeTypeTest0.getNodeType());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("]q0GAH`)J-6g-8B", comment0.getValue());
      assertEquals("]q0GAH`)J-6g-8B", comment0.getText());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(jDOMNodePointer0, jDOMNodePointer1);
      assertNotNull(jDOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals((-1436021352), nodeTypeTest0.getNodeType());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("]q0GAH`)J-6g-8B", comment0.getValue());
      assertEquals("]q0GAH`)J-6g-8B", comment0.getText());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isContainer());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      
      QName qName0 = new QName("<<unknown namespace>>");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("<<unknown namespace>>", qName0.toString());
      
      HashMap<NodeTypeTest, String> hashMap0 = new HashMap<NodeTypeTest, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("org.apache.commons.jxpath.ri.parser.TokenMgrError", hashMap0);
      assertNotNull(processingInstruction0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", processingInstruction0.getValue());
      assertEquals("", processingInstruction0.getData());
      assertEquals("org.apache.commons.jxpath.ri.parser.TokenMgrError", processingInstruction0.getTarget());
      
      ProcessingInstruction processingInstruction1 = processingInstruction0.setData("XWh");
      assertNotNull(processingInstruction1);
      assertSame(processingInstruction0, processingInstruction1);
      assertSame(processingInstruction1, processingInstruction0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("XWh", processingInstruction0.getData());
      assertEquals("XWh", processingInstruction0.getValue());
      assertEquals("org.apache.commons.jxpath.ri.parser.TokenMgrError", processingInstruction0.getTarget());
      assertEquals("XWh", processingInstruction1.getValue());
      assertEquals("org.apache.commons.jxpath.ri.parser.TokenMgrError", processingInstruction1.getTarget());
      assertEquals("XWh", processingInstruction1.getData());
      
      ProcessingInstruction processingInstruction2 = processingInstruction1.setData((Map) hashMap0);
      assertNotNull(processingInstruction2);
      assertSame(processingInstruction0, processingInstruction2);
      assertSame(processingInstruction0, processingInstruction1);
      assertSame(processingInstruction1, processingInstruction0);
      assertSame(processingInstruction1, processingInstruction2);
      assertSame(processingInstruction2, processingInstruction0);
      assertSame(processingInstruction2, processingInstruction1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", processingInstruction0.getValue());
      assertEquals("", processingInstruction0.getData());
      assertEquals("org.apache.commons.jxpath.ri.parser.TokenMgrError", processingInstruction0.getTarget());
      assertEquals("", processingInstruction1.getData());
      assertEquals("", processingInstruction1.getValue());
      assertEquals("org.apache.commons.jxpath.ri.parser.TokenMgrError", processingInstruction1.getTarget());
      assertEquals("", processingInstruction2.getValue());
      assertEquals("", processingInstruction2.getData());
      assertEquals("org.apache.commons.jxpath.ri.parser.TokenMgrError", processingInstruction2.getTarget());
      
      ProcessingInstruction processingInstruction3 = processingInstruction2.setPseudoAttribute("http://www.w3.org/XML/1998/namespace", "_=>XQi");
      assertNotNull(processingInstruction3);
      assertSame(processingInstruction0, processingInstruction2);
      assertSame(processingInstruction0, processingInstruction1);
      assertSame(processingInstruction0, processingInstruction3);
      assertSame(processingInstruction1, processingInstruction0);
      assertSame(processingInstruction1, processingInstruction2);
      assertSame(processingInstruction1, processingInstruction3);
      assertSame(processingInstruction2, processingInstruction0);
      assertSame(processingInstruction2, processingInstruction1);
      assertSame(processingInstruction2, processingInstruction3);
      assertSame(processingInstruction3, processingInstruction0);
      assertSame(processingInstruction3, processingInstruction1);
      assertSame(processingInstruction3, processingInstruction2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("http://www.w3.org/XML/1998/namespace=\"_=>XQi\"", processingInstruction0.getData());
      assertEquals("http://www.w3.org/XML/1998/namespace=\"_=>XQi\"", processingInstruction0.getValue());
      assertEquals("org.apache.commons.jxpath.ri.parser.TokenMgrError", processingInstruction0.getTarget());
      assertEquals("http://www.w3.org/XML/1998/namespace=\"_=>XQi\"", processingInstruction1.getValue());
      assertEquals("org.apache.commons.jxpath.ri.parser.TokenMgrError", processingInstruction1.getTarget());
      assertEquals("http://www.w3.org/XML/1998/namespace=\"_=>XQi\"", processingInstruction1.getData());
      assertEquals("http://www.w3.org/XML/1998/namespace=\"_=>XQi\"", processingInstruction2.getData());
      assertEquals("http://www.w3.org/XML/1998/namespace=\"_=>XQi\"", processingInstruction2.getValue());
      assertEquals("org.apache.commons.jxpath.ri.parser.TokenMgrError", processingInstruction2.getTarget());
      assertEquals("http://www.w3.org/XML/1998/namespace=\"_=>XQi\"", processingInstruction3.getData());
      assertEquals("http://www.w3.org/XML/1998/namespace=\"_=>XQi\"", processingInstruction3.getValue());
      assertEquals("org.apache.commons.jxpath.ri.parser.TokenMgrError", processingInstruction3.getTarget());
      
      Locale locale2 = Locale.ITALY;
      assertNotNull(locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("it", locale2.getLanguage());
      assertEquals("IT", locale2.getCountry());
      assertEquals("it_IT", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("ita", locale2.getISO3Language());
      assertEquals("ITA", locale2.getISO3Country());
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      
      JDOMNodePointer jDOMNodePointer3 = new JDOMNodePointer(processingInstruction3, locale2);
      assertNotNull(jDOMNodePointer3);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("http://www.w3.org/XML/1998/namespace=\"_=>XQi\"", processingInstruction0.getData());
      assertEquals("http://www.w3.org/XML/1998/namespace=\"_=>XQi\"", processingInstruction0.getValue());
      assertEquals("org.apache.commons.jxpath.ri.parser.TokenMgrError", processingInstruction0.getTarget());
      assertEquals("http://www.w3.org/XML/1998/namespace=\"_=>XQi\"", processingInstruction1.getValue());
      assertEquals("org.apache.commons.jxpath.ri.parser.TokenMgrError", processingInstruction1.getTarget());
      assertEquals("http://www.w3.org/XML/1998/namespace=\"_=>XQi\"", processingInstruction1.getData());
      assertEquals("http://www.w3.org/XML/1998/namespace=\"_=>XQi\"", processingInstruction2.getData());
      assertEquals("http://www.w3.org/XML/1998/namespace=\"_=>XQi\"", processingInstruction2.getValue());
      assertEquals("org.apache.commons.jxpath.ri.parser.TokenMgrError", processingInstruction2.getTarget());
      assertEquals("http://www.w3.org/XML/1998/namespace=\"_=>XQi\"", processingInstruction3.getData());
      assertEquals("http://www.w3.org/XML/1998/namespace=\"_=>XQi\"", processingInstruction3.getValue());
      assertEquals("org.apache.commons.jxpath.ri.parser.TokenMgrError", processingInstruction3.getTarget());
      assertEquals("it", locale2.getLanguage());
      assertEquals("IT", locale2.getCountry());
      assertEquals("it_IT", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("ita", locale2.getISO3Language());
      assertEquals("ITA", locale2.getISO3Country());
      assertTrue(jDOMNodePointer3.isNode());
      assertFalse(jDOMNodePointer3.isCollection());
      assertFalse(jDOMNodePointer3.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer3.getIndex());
      assertEquals(1, jDOMNodePointer3.getLength());
      assertFalse(jDOMNodePointer3.isContainer());
      assertNull(jDOMNodePointer3.getNamespaceURI());
      assertTrue(jDOMNodePointer3.isRoot());
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer0));
      
      Object object0 = jDOMNodePointer3.getValue();
      assertNotNull(object0);
      assertEquals("http://www.w3.org/XML/1998/namespace=\"_=>XQi\"", object0);
      assertSame(processingInstruction0, processingInstruction2);
      assertSame(processingInstruction0, processingInstruction1);
      assertSame(processingInstruction0, processingInstruction3);
      assertSame(processingInstruction1, processingInstruction0);
      assertSame(processingInstruction1, processingInstruction2);
      assertSame(processingInstruction1, processingInstruction3);
      assertSame(processingInstruction2, processingInstruction0);
      assertSame(processingInstruction2, processingInstruction1);
      assertSame(processingInstruction2, processingInstruction3);
      assertSame(processingInstruction3, processingInstruction0);
      assertSame(processingInstruction3, processingInstruction1);
      assertSame(processingInstruction3, processingInstruction2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("http://www.w3.org/XML/1998/namespace=\"_=>XQi\"", processingInstruction0.getData());
      assertEquals("http://www.w3.org/XML/1998/namespace=\"_=>XQi\"", processingInstruction0.getValue());
      assertEquals("org.apache.commons.jxpath.ri.parser.TokenMgrError", processingInstruction0.getTarget());
      assertEquals("http://www.w3.org/XML/1998/namespace=\"_=>XQi\"", processingInstruction1.getValue());
      assertEquals("org.apache.commons.jxpath.ri.parser.TokenMgrError", processingInstruction1.getTarget());
      assertEquals("http://www.w3.org/XML/1998/namespace=\"_=>XQi\"", processingInstruction1.getData());
      assertEquals("http://www.w3.org/XML/1998/namespace=\"_=>XQi\"", processingInstruction2.getData());
      assertEquals("http://www.w3.org/XML/1998/namespace=\"_=>XQi\"", processingInstruction2.getValue());
      assertEquals("org.apache.commons.jxpath.ri.parser.TokenMgrError", processingInstruction2.getTarget());
      assertEquals("http://www.w3.org/XML/1998/namespace=\"_=>XQi\"", processingInstruction3.getData());
      assertEquals("http://www.w3.org/XML/1998/namespace=\"_=>XQi\"", processingInstruction3.getValue());
      assertEquals("org.apache.commons.jxpath.ri.parser.TokenMgrError", processingInstruction3.getTarget());
      assertEquals("it", locale2.getLanguage());
      assertEquals("IT", locale2.getCountry());
      assertEquals("it_IT", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("ita", locale2.getISO3Language());
      assertEquals("ITA", locale2.getISO3Country());
      assertTrue(jDOMNodePointer3.isNode());
      assertFalse(jDOMNodePointer3.isCollection());
      assertFalse(jDOMNodePointer3.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer3.getIndex());
      assertEquals(1, jDOMNodePointer3.getLength());
      assertFalse(jDOMNodePointer3.isContainer());
      assertNull(jDOMNodePointer3.getNamespaceURI());
      assertTrue(jDOMNodePointer3.isRoot());
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer0));
      
      String string0 = jDOMNodePointer1.asPath();
      assertNotNull(string0);
      assertEquals("", string0);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer3);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals((-1436021352), nodeTypeTest0.getNodeType());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("]q0GAH`)J-6g-8B", comment0.getValue());
      assertEquals("]q0GAH`)J-6g-8B", comment0.getText());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(string0.equals((Object)object0));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer3));
      
      Object object1 = jDOMNodePointer0.getValue();
      assertNull(object1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals((-1436021352), nodeTypeTest0.getNodeType());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "]q0GAH`)J-6g-8B");
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("hIXSle01`9,wb*/^uwy");
      assertNotNull(processingInstructionTest0);
      assertEquals("hIXSle01`9,wb*/^uwy", processingInstructionTest0.getTarget());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createChild((JXPathContext) jXPathContextReferenceImpl0, qName0, Integer.MIN_VALUE, (Object) processingInstructionTest0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: 
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      Locale.setDefault(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      Object object0 = jDOMNodePointer0.getNodeValue();
      assertNull(object0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      assertNotNull(namespace0);
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      
      Element element0 = new Element("C6", namespace0);
      assertNotNull(element0);
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("C6", element0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      
      QName qName0 = jDOMNodePointer0.getName();
      assertNotNull(qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, element0);
      assertNotNull(nodePointer0);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("C6", element0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isContainer());
      assertEquals("http://www.w3.org/XML/1998/namespace", nodePointer0.getNamespaceURI());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(nodePointer0, jDOMNodePointer0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("C6", element0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isContainer());
      assertEquals("http://www.w3.org/XML/1998/namespace", nodePointer0.getNamespaceURI());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)nodePointer0));
      
      QName qName1 = jDOMNodePointer0.getName();
      assertNotNull(qName1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(qName1.getPrefix());
      assertNull(qName1.getName());
      assertNull(qName1.toString());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      
      String string0 = jDOMNodePointer1.getNamespaceURI();
      assertNull(string0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(qName0, qName1);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("C6", element0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isContainer());
      assertEquals("http://www.w3.org/XML/1998/namespace", nodePointer0.getNamespaceURI());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)nodePointer0));
      
      QName qName2 = jDOMNodePointer1.getName();
      assertNotNull(qName2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(qName0, qName2);
      assertNotSame(qName0, qName1);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertNotSame(qName2, qName0);
      assertNotSame(qName2, qName1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("C6", element0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isContainer());
      assertEquals("http://www.w3.org/XML/1998/namespace", nodePointer0.getNamespaceURI());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertNull(qName2.getPrefix());
      assertNull(qName2.getName());
      assertNull(qName2.toString());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)nodePointer0));
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName2, "u/");
      assertNotNull(nodeNameTest0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("C6", element0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isContainer());
      assertEquals("http://www.w3.org/XML/1998/namespace", nodePointer0.getNamespaceURI());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertNull(qName2.getPrefix());
      assertNull(qName2.getName());
      assertNull(qName2.toString());
      assertNull(nodeNameTest0.toString());
      assertEquals("u/", nodeNameTest0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)nodePointer0));
      
      // Undeclared exception!
      try { 
        JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) element0, (NodeTest) nodeNameTest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.NodeNameTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/2000/xmlns/");
      assertNotNull(qName0);
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Namespace namespace0 = Namespace.getNamespace("BcvKn5(wLkh:/}$:");
      assertNotNull(namespace0);
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      
      Element element0 = new Element("C6", "C6");
      assertNotNull(element0);
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals("C6", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, element0);
      assertNotNull(nodePointer0);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals("C6", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      
      CDATA cDATA0 = new CDATA("http://www.w3.org/XML/1998/namespace");
      assertNotNull(cDATA0);
      assertEquals("http://www.w3.org/XML/1998/namespace", cDATA0.getValue());
      assertEquals("http://www.w3.org/XML/1998/namespace", cDATA0.getText());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(nodePointer0, cDATA0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals("C6", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertEquals("http://www.w3.org/XML/1998/namespace", cDATA0.getValue());
      assertEquals("http://www.w3.org/XML/1998/namespace", cDATA0.getText());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertTrue(jDOMNodePointer1.isNode());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)nodePointer0));
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) namespace0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      // Undeclared exception!
      jDOMNodePointer1.createAttribute(jXPathContextReferenceImpl0, qName0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CDATA cDATA0 = new CDATA("lang");
      assertNotNull(cDATA0);
      assertEquals("lang", cDATA0.getValue());
      assertEquals("lang", cDATA0.getText());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      
      Comment comment0 = new Comment("spm.=]^g");
      assertNotNull(comment0);
      assertEquals("spm.=]^g", comment0.getText());
      assertEquals("spm.=]^g", comment0.getValue());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("lang", locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      
      HashMap<Text, CDATA> hashMap0 = new HashMap<Text, CDATA>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("D", hashMap0);
      assertNotNull(processingInstruction0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", processingInstruction0.getValue());
      assertEquals("", processingInstruction0.getData());
      assertEquals("D", processingInstruction0.getTarget());
      
      ProcessingInstruction processingInstruction1 = processingInstruction0.setData("org.apache.commons.jxpath.ri.QName@0000000007");
      assertNotNull(processingInstruction1);
      assertSame(processingInstruction0, processingInstruction1);
      assertSame(processingInstruction1, processingInstruction0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("D", processingInstruction0.getTarget());
      assertEquals("D", processingInstruction1.getTarget());
      
      ProcessingInstruction processingInstruction2 = processingInstruction1.setTarget("lang");
      assertNotNull(processingInstruction2);
      assertSame(processingInstruction0, processingInstruction1);
      assertSame(processingInstruction0, processingInstruction2);
      assertSame(processingInstruction1, processingInstruction2);
      assertSame(processingInstruction1, processingInstruction0);
      assertSame(processingInstruction2, processingInstruction0);
      assertSame(processingInstruction2, processingInstruction1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("lang", processingInstruction0.getTarget());
      assertEquals("lang", processingInstruction1.getTarget());
      assertEquals("lang", processingInstruction2.getTarget());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(processingInstruction2, locale0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("lang", processingInstruction0.getTarget());
      assertEquals("lang", processingInstruction1.getTarget());
      assertEquals("lang", processingInstruction2.getTarget());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertTrue(jDOMNodePointer1.isNode());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      QName qName0 = jDOMNodePointer1.getName();
      assertNotNull(qName0);
      assertSame(processingInstruction0, processingInstruction1);
      assertSame(processingInstruction0, processingInstruction2);
      assertSame(processingInstruction1, processingInstruction2);
      assertSame(processingInstruction1, processingInstruction0);
      assertSame(processingInstruction2, processingInstruction0);
      assertSame(processingInstruction2, processingInstruction1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("lang", processingInstruction0.getTarget());
      assertEquals("lang", processingInstruction1.getTarget());
      assertEquals("lang", processingInstruction2.getTarget());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertTrue(jDOMNodePointer1.isNode());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals("lang", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("lang", qName0.getName());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      Object object0 = jDOMNodePointer0.getValue();
      assertNull(object0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      
      String string0 = jDOMNodePointer0.asPath();
      assertNotNull(string0);
      assertEquals("", string0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/2000/xmlns/");
      assertNotNull(qName0);
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Namespace namespace0 = Namespace.getNamespace("BcvKn5(wLkh:/}$:");
      assertNotNull(namespace0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      
      Element element0 = new Element("C6", "C6");
      assertNotNull(element0);
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      
      Element element1 = element0.setAttributes((List) null);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("C6", element1.getNamespaceURI());
      assertFalse(element1.isRootElement());
      assertEquals("C6", element1.getName());
      assertEquals(0, element1.getContentSize());
      
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, element1);
      assertNotNull(nodePointer0);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("C6", element1.getNamespaceURI());
      assertFalse(element1.isRootElement());
      assertEquals("C6", element1.getName());
      assertEquals(0, element1.getContentSize());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isNode());
      assertEquals("C6", nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(nodePointer0, element0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("C6", element1.getNamespaceURI());
      assertFalse(element1.isRootElement());
      assertEquals("C6", element1.getName());
      assertEquals(0, element1.getContentSize());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isNode());
      assertEquals("C6", nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals("C6", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      
      QName qName1 = nodePointer0.getName();
      assertNotNull(qName1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(qName0, qName1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("C6", element1.getNamespaceURI());
      assertFalse(element1.isRootElement());
      assertEquals("C6", element1.getName());
      assertEquals(0, element1.getContentSize());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isNode());
      assertEquals("C6", nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertNull(qName1.getPrefix());
      assertEquals("C6", qName1.toString());
      assertEquals("C6", qName1.getName());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertFalse(qName1.equals((Object)qName0));
      
      String string0 = nodePointer0.getNamespaceURI();
      assertNotNull(string0);
      assertEquals("C6", string0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(qName0, qName1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("C6", element1.getNamespaceURI());
      assertFalse(element1.isRootElement());
      assertEquals("C6", element1.getName());
      assertEquals(0, element1.getContentSize());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isNode());
      assertEquals("C6", nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(qName0.equals((Object)qName1));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1, "http://www.w3.org/2000/xmlns/");
      assertNotNull(nodeNameTest0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("C6", element1.getNamespaceURI());
      assertFalse(element1.isRootElement());
      assertEquals("C6", element1.getName());
      assertEquals(0, element1.getContentSize());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isNode());
      assertEquals("C6", nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertNull(qName1.getPrefix());
      assertEquals("C6", qName1.toString());
      assertEquals("C6", qName1.getName());
      assertEquals("http://www.w3.org/2000/xmlns/", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("C6", nodeNameTest0.toString());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(qName0.equals((Object)qName1));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertFalse(qName1.equals((Object)qName0));
      
      boolean boolean1 = JDOMNodePointer.testNode(nodePointer0, (Object) element1, (NodeTest) nodeNameTest0);
      assertFalse(boolean1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(qName0, qName1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("C6", element1.getNamespaceURI());
      assertFalse(element1.isRootElement());
      assertEquals("C6", element1.getName());
      assertEquals(0, element1.getContentSize());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isNode());
      assertEquals("C6", nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertNull(qName1.getPrefix());
      assertEquals("C6", qName1.toString());
      assertEquals("C6", qName1.getName());
      assertEquals("http://www.w3.org/2000/xmlns/", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("C6", nodeNameTest0.toString());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(qName0.equals((Object)qName1));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertFalse(qName1.equals((Object)qName0));
      assertTrue(boolean1 == boolean0);
      
      String string1 = JDOMNodePointer.getPrefix(locale0);
      assertNull(string1);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      
      QName qName2 = jDOMNodePointer1.getName();
      assertNotNull(qName2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(qName0, qName1);
      assertNotSame(qName0, qName2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertNotSame(qName2, qName0);
      assertNotSame(qName2, qName1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("C6", element1.getNamespaceURI());
      assertFalse(element1.isRootElement());
      assertEquals("C6", element1.getName());
      assertEquals(0, element1.getContentSize());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isNode());
      assertEquals("C6", nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals("C6", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals("C6", qName2.toString());
      assertEquals("C6", qName2.getName());
      assertNull(qName2.getPrefix());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(qName0.equals((Object)qName1));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      assertTrue(qName2.equals((Object)qName1));
      assertFalse(qName2.equals((Object)qName0));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      
      QName qName0 = jDOMNodePointer0.getName();
      assertNotNull(qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Comment comment0 = new Comment("3El6a%[oi");
      assertNotNull(comment0);
      assertEquals("3El6a%[oi", comment0.getText());
      assertEquals("3El6a%[oi", comment0.getValue());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(comment0, locale0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("3El6a%[oi", comment0.getText());
      assertEquals("3El6a%[oi", comment0.getValue());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      QName qName1 = jDOMNodePointer1.getName();
      assertNotNull(qName1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("3El6a%[oi", comment0.getText());
      assertEquals("3El6a%[oi", comment0.getValue());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isRoot());
      assertNull(qName1.toString());
      assertNull(qName1.getName());
      assertNull(qName1.getPrefix());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      Object object0 = jDOMNodePointer1.getValue();
      assertNotNull(object0);
      assertEquals("3El6a%[oi", object0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("3El6a%[oi", comment0.getText());
      assertEquals("3El6a%[oi", comment0.getValue());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      String string0 = jDOMNodePointer0.asPath();
      assertNotNull(string0);
      assertEquals("", string0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(string0.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/2000/xmlns/");
      assertNotNull(qName0);
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Namespace namespace0 = Namespace.getNamespace("BcvKn5(wLkh:/}$:");
      assertNotNull(namespace0);
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      
      Element element0 = new Element("C6", namespace0);
      assertNotNull(element0);
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      
      Element element1 = element0.setAttributes((List) null);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertFalse(element1.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("C6", element1.getName());
      
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, element1);
      assertNotNull(nodePointer0);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertFalse(element1.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("C6", element1.getName());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(nodePointer0, element0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertFalse(element1.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("C6", element1.getName());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isRoot());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals("BcvKn5(wLkh:/}$:", jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      
      jDOMNodePointer1.setValue(cDATA0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals(1, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertFalse(element1.isRootElement());
      assertEquals(1, element1.getContentSize());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("C6", element1.getName());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isRoot());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals("BcvKn5(wLkh:/}$:", jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) element1);
      assertNotNull(jXPathContextReferenceImpl0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals(1, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertFalse(element1.isRootElement());
      assertEquals(1, element1.getContentSize());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("C6", element1.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      // Undeclared exception!
      nodePointer0.createChild((JXPathContext) jXPathContextReferenceImpl0, qName0, Integer.MIN_VALUE);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      Object object0 = jDOMNodePointer0.getNodeValue();
      assertNull(object0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/2000/xmlns/");
      assertNotNull(qName0);
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      
      Namespace namespace0 = Namespace.getNamespace("BcvKn5(wLkh:/}$:");
      assertNotNull(namespace0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      
      Element element0 = new Element("C6", namespace0);
      assertNotNull(element0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      
      Element element1 = element0.getChild("http://www.w3.org/2000/xmlns/");
      assertNull(element1);
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      
      NullPointer nullPointer0 = (NullPointer)NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, (Object) null);
      assertNotNull(nullPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isRoot());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isNode());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isActual());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isCollection());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer((NodePointer) null, element0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals("BcvKn5(wLkh:/}$:", jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      // Undeclared exception!
      try { 
        nullPointer0.getName();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      
      Object object0 = jDOMNodePointer0.getNodeValue();
      assertNull(object0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      assertNotNull(namespace0);
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      
      Element element0 = new Element("C6", namespace0);
      assertNotNull(element0);
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("http://www.w3.org/XML/1998/namespace", jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertNotNull(jDOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer2.isRoot());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertEquals("http://www.w3.org/XML/1998/namespace", jDOMNodePointer2.getNamespaceURI());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      
      Comment comment0 = new Comment("http://www.w3.org/XML/1998/namespace");
      assertNotNull(comment0);
      assertEquals("http://www.w3.org/XML/1998/namespace", comment0.getText());
      assertEquals("http://www.w3.org/XML/1998/namespace", comment0.getValue());
      
      Comment comment1 = comment0.setText("<<unknown namespace>>");
      assertNotNull(comment1);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
      assertEquals("<<unknown namespace>>", comment0.getValue());
      assertEquals("<<unknown namespace>>", comment0.getText());
      assertEquals("<<unknown namespace>>", comment1.getText());
      assertEquals("<<unknown namespace>>", comment1.getValue());
      
      jDOMNodePointer1.setValue(comment1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("C6", element0.getName());
      assertEquals(1, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("http://www.w3.org/XML/1998/namespace", jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals("<<unknown namespace>>", comment0.getValue());
      assertEquals("<<unknown namespace>>", comment0.getText());
      assertEquals("<<unknown namespace>>", comment1.getText());
      assertEquals("<<unknown namespace>>", comment1.getValue());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      
      Namespace namespace1 = Namespace.getNamespace("");
      assertNotNull(namespace1);
      assertNotSame(namespace1, namespace0);
      assertEquals("", namespace1.getPrefix());
      assertEquals("", namespace1.getURI());
      assertFalse(namespace1.equals((Object)namespace0));
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(192);
      assertNotNull(nodeTypeTest0);
      assertEquals(192, nodeTypeTest0.getNodeType());
      
      String string0 = nodeTypeTest0.toString();
      assertNotNull(string0);
      assertEquals("UNKNOWN()", string0);
      assertEquals(192, nodeTypeTest0.getNodeType());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer2.remove();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot remove root JDOM node
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CDATA cDATA0 = new CDATA("]2<.D@Nkg");
      assertNotNull(cDATA0);
      assertEquals("]2<.D@Nkg", cDATA0.getText());
      assertEquals("]2<.D@Nkg", cDATA0.getValue());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, (Locale) null);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      
      Object object0 = jDOMNodePointer0.getNodeValue();
      assertNull(object0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace");
      assertNotNull(qName0);
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertEquals("//www.w3.org/XML/1998/namespace", qName0.getName());
      assertEquals("http", qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "http://www.w3.org/2000/xmlns/");
      assertNotNull(nodeNameTest0);
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertEquals("//www.w3.org/XML/1998/namespace", qName0.getName());
      assertEquals("http", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("http://www.w3.org/XML/1998/namespace", nodeNameTest0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", nodeNameTest0.getNamespaceURI());
      
      Namespace namespace0 = Namespace.getNamespace("CcKn5(wLh:/};:");
      assertNotNull(namespace0);
      assertEquals("CcKn5(wLh:/};:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      
      Element element0 = new Element("C6", namespace0);
      assertNotNull(element0);
      assertEquals("CcKn5(wLh:/};:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("CcKn5(wLh:/};:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      
      Element element1 = element0.setAttributes((List) null);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("CcKn5(wLh:/};:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("CcKn5(wLh:/};:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertEquals("CcKn5(wLh:/};:", element1.getNamespaceURI());
      assertEquals("C6", element1.getName());
      assertEquals(0, element1.getContentSize());
      
      String string0 = element0.getTextTrim();
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(element0, element1);
      assertEquals("CcKn5(wLh:/};:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("CcKn5(wLh:/};:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("CcKn5(wLh:/};:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("CcKn5(wLh:/};:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals("CcKn5(wLh:/};:", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      jDOMNodePointer1.setValue(cDATA0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertSame(element0, element1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("]2<.D@Nkg", cDATA0.getText());
      assertEquals("]2<.D@Nkg", cDATA0.getValue());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("CcKn5(wLh:/};:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(1, element0.getContentSize());
      assertEquals("CcKn5(wLh:/};:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals("CcKn5(wLh:/};:", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) jDOMNodePointer1);
      assertNotNull(jXPathContextReferenceImpl0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertSame(element0, element1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("CcKn5(wLh:/};:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(1, element0.getContentSize());
      assertEquals("CcKn5(wLh:/};:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals("CcKn5(wLh:/};:", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      // Undeclared exception!
      try { 
        jDOMNodePointer1.createAttribute(jXPathContextReferenceImpl0, qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown namespace prefix: http
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("Factory could not create a child node for path: ", locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      
      boolean boolean0 = jDOMNodePointer0.isLanguage("Factory could not create a child node for path: ");
      assertFalse(boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      
      String string0 = jDOMNodePointer0.getNamespaceURI("Factory could not create a child node for path: ");
      assertNull(string0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      
      String string1 = jDOMNodePointer0.getNamespaceURI("Cannot remove root JDOM node");
      assertNull(string1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      
      NamespaceResolver namespaceResolver0 = jDOMNodePointer0.getNamespaceResolver();
      assertNotNull(namespaceResolver0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(namespaceResolver0.isSealed());
      
      QName qName0 = jDOMNodePointer0.getName();
      assertNotNull(qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      
      String string2 = jDOMNodePointer0.asPath();
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      
      NodePointer nodePointer0 = jDOMNodePointer0.namespacePointer((String) null);
      assertNotNull(nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isLeaf());
      assertFalse(nodePointer0.isCollection());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.childIterator(nodeNameTest0, false, nodePointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      CDATA cDATA1 = new CDATA("");
      assertNotNull(cDATA1);
      assertEquals("", cDATA1.getValue());
      assertEquals("", cDATA1.getText());
      assertFalse(cDATA1.equals((Object)cDATA0));
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA1, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", cDATA1.getValue());
      assertEquals("", cDATA1.getText());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(cDATA1.equals((Object)cDATA0));
      
      Locale locale1 = Locale.forLanguageTag("http://www.w3.org/2000/xmlns/");
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.toString());
      assertFalse(locale1.equals((Object)locale0));
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      
      Object object0 = jDOMNodePointer0.getNodeValue();
      assertNull(object0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      assertNotNull(namespace0);
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      
      Element element0 = new Element("C6", namespace0);
      assertNotNull(element0);
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("http://www.w3.org/XML/1998/namespace", jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)64;
      Element element1 = element0.setAttributes((List) null);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", element1.getNamespaceURI());
      assertEquals("xml", element1.getNamespacePrefix());
      assertEquals("C6", element1.getName());
      assertEquals(0, element1.getContentSize());
      assertFalse(element1.isRootElement());
      
      String string0 = element1.getTextTrim();
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", element1.getNamespaceURI());
      assertEquals("xml", element1.getNamespacePrefix());
      assertEquals("C6", element1.getName());
      assertEquals(0, element1.getContentSize());
      assertFalse(element1.isRootElement());
      
      CDATA cDATA1 = new CDATA("C6");
      assertNotNull(cDATA1);
      assertEquals("C6", cDATA1.getText());
      assertEquals("C6", cDATA1.getValue());
      assertFalse(cDATA1.equals((Object)cDATA0));
      
      jDOMNodePointer1.setValue("");
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertSame(element0, element1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("http://www.w3.org/XML/1998/namespace", jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = jDOMNodePointer1.getName();
      assertNotNull(qName0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertSame(element0, element1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("C6", qName0.getName());
      assertEquals("xml", qName0.getPrefix());
      assertEquals("xml:C6", qName0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("http://www.w3.org/XML/1998/namespace", jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      JDOMAttributePointer jDOMAttributePointer0 = (JDOMAttributePointer)jDOMNodePointer1.createAttribute(jXPathContextReferenceImpl0, qName0);
      assertNotNull(jDOMAttributePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertSame(element0, element1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("C6", qName0.getName());
      assertEquals("xml", qName0.getPrefix());
      assertEquals("xml:C6", qName0.toString());
      assertFalse(jDOMAttributePointer0.isContainer());
      assertEquals(1, jDOMAttributePointer0.getLength());
      assertFalse(jDOMAttributePointer0.isCollection());
      assertTrue(jDOMAttributePointer0.isActual());
      assertFalse(jDOMAttributePointer0.isAttribute());
      assertFalse(jDOMAttributePointer0.isRoot());
      assertTrue(jDOMAttributePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMAttributePointer0.getIndex());
      assertEquals("http://www.w3.org/XML/1998/namespace", jDOMAttributePointer0.getNamespaceURI());
      assertTrue(jDOMAttributePointer0.isLeaf());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("http://www.w3.org/XML/1998/namespace", jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.remove();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot remove root JDOM node
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      Object object0 = jDOMNodePointer0.getNodeValue();
      assertNull(object0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      assertNotNull(namespace0);
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      
      Element element0 = new Element("C6", namespace0);
      assertNotNull(element0);
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals("xml", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals("xml", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals("http://www.w3.org/XML/1998/namespace", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-97);
      Element element1 = element0.setAttributes((List) null);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals("xml", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("http://www.w3.org/XML/1998/namespace", element1.getNamespaceURI());
      assertEquals("xml", element1.getNamespacePrefix());
      assertEquals("C6", element1.getName());
      assertEquals(0, element1.getContentSize());
      assertFalse(element1.isRootElement());
      
      String string0 = element1.getTextTrim();
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals("xml", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("http://www.w3.org/XML/1998/namespace", element1.getNamespaceURI());
      assertEquals("xml", element1.getNamespacePrefix());
      assertEquals("C6", element1.getName());
      assertEquals(0, element1.getContentSize());
      assertFalse(element1.isRootElement());
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(jDOMNodePointer1, "");
      assertNotNull(jDOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals("xml", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals("http://www.w3.org/XML/1998/namespace", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isCollection());
      assertTrue(jDOMNodePointer2.isNode());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(jDOMNodePointer2.isContainer());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      
      CDATA cDATA1 = new CDATA("http://www.w3.org/2000/xmlns/");
      assertNotNull(cDATA1);
      assertEquals("http://www.w3.org/2000/xmlns/", cDATA1.getValue());
      assertEquals("http://www.w3.org/2000/xmlns/", cDATA1.getText());
      assertFalse(cDATA1.equals((Object)cDATA0));
      
      jDOMNodePointer1.setValue(cDATA1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertSame(element0, element1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(cDATA1, cDATA0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals("xml", element0.getNamespacePrefix());
      assertEquals(1, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals("http://www.w3.org/XML/1998/namespace", jDOMNodePointer1.getNamespaceURI());
      assertEquals("http://www.w3.org/2000/xmlns/", cDATA1.getValue());
      assertEquals("http://www.w3.org/2000/xmlns/", cDATA1.getText());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(cDATA1.equals((Object)cDATA0));
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = jDOMNodePointer0.getName();
      assertNotNull(qName0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      
      // Undeclared exception!
      try { 
        jDOMNodePointer1.createAttribute(jXPathContextReferenceImpl0, qName0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The name \"null\" is not legal for JDOM/XML attributes: XML names cannot be null or empty.
         //
         verifyException("org.jdom.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      
      Object object0 = jDOMNodePointer0.getNodeValue();
      assertNull(object0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      
      QName qName0 = jDOMNodePointer0.getName();
      assertNotNull(qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      
      Namespace namespace0 = Namespace.getNamespace("BcvKn5(wLkh:/}$:");
      assertNotNull(namespace0);
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      
      Element element0 = new Element("C6", namespace0);
      assertNotNull(element0);
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      
      Element element1 = element0.setAttributes((List) null);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals("C6", element1.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertEquals(0, element1.getContentSize());
      
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, element1);
      assertNotNull(nodePointer0);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals("C6", element1.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertEquals(0, element1.getContentSize());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isContainer());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      
      // Undeclared exception!
      try { 
        nodePointer0.testNode((NodeTest) nodeNameTest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.NodeNameTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      CDATA cDATA1 = new CDATA("");
      assertNotNull(cDATA1);
      assertEquals("", cDATA1.getValue());
      assertEquals("", cDATA1.getText());
      assertFalse(cDATA1.equals((Object)cDATA0));
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA1, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", cDATA1.getValue());
      assertEquals("", cDATA1.getText());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(cDATA1.equals((Object)cDATA0));
      
      Locale locale1 = Locale.forLanguageTag("]");
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertFalse(locale1.equals((Object)locale0));
      
      jDOMNodePointer0.setValue("]");
      assertNotSame(locale0, locale1);
      assertNotSame(cDATA1, cDATA0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("]", cDATA1.getValue());
      assertEquals("]", cDATA1.getText());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(cDATA1.equals((Object)cDATA0));
      
      Namespace namespace0 = Namespace.getNamespace((String) null);
      assertNotNull(namespace0);
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      
      QName qName0 = new QName("xml:lang", "org.apache.commons.jxpath.ri.compiler.NodeNameTest@0000000004");
      assertNotNull(qName0);
      assertEquals("xml:lang", qName0.getPrefix());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("xml:lang", qName0.getPrefix());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("|(CGnf!vV=h");
      assertNotNull(processingInstructionTest0);
      assertEquals("|(CGnf!vV=h", processingInstructionTest0.getTarget());
      
      HashMap<Element, Integer> hashMap0 = new HashMap<Element, Integer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", hashMap0);
      assertNotNull(processingInstruction0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("", processingInstruction0.getData());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", processingInstruction0.getTarget());
      assertEquals("", processingInstruction0.getValue());
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) variablePointer0, (Object) processingInstruction0, (NodeTest) processingInstructionTest0);
      assertFalse(boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("xml:lang", qName0.getPrefix());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertEquals("|(CGnf!vV=h", processingInstructionTest0.getTarget());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("", processingInstruction0.getData());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", processingInstruction0.getTarget());
      assertEquals("", processingInstruction0.getValue());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/2000/xmlns/");
      assertNotNull(qName0);
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      assertNotNull(nodeNameTest0);
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Namespace namespace0 = Namespace.getNamespace("BcvKn5(wLkh:/}$:");
      assertNotNull(namespace0);
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      
      Element element0 = new Element("C6", namespace0);
      assertNotNull(element0);
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      
      int int0 = jDOMNodePointer0.getLength();
      assertEquals(1, int0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2888);
      assertNotNull(nodeTypeTest0);
      assertEquals(2888, nodeTypeTest0.getNodeType());
      
      String string0 = nodeTypeTest0.toString();
      assertNotNull(string0);
      assertEquals("UNKNOWN()", string0);
      assertEquals(2888, nodeTypeTest0.getNodeType());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("@(#) $RCSfile: JDOMException.java,v $ $Revision: 1.23 $ $Date: 2004/02/27 11:32:57 $ $Name: jdom_1_0 $");
      assertNotNull(processingInstructionTest0);
      assertEquals("@(#) $RCSfile: JDOMException.java,v $ $Revision: 1.23 $ $Date: 2004/02/27 11:32:57 $ $Name: jdom_1_0 $", processingInstructionTest0.getTarget());
      
      boolean boolean0 = jDOMNodePointer0.testNode((NodeTest) processingInstructionTest0);
      assertFalse(boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("@(#) $RCSfile: JDOMException.java,v $ $Revision: 1.23 $ $Date: 2004/02/27 11:32:57 $ $Name: jdom_1_0 $", processingInstructionTest0.getTarget());
      
      LinkedList<Element> linkedList0 = new LinkedList<Element>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(element0));
      
      Element element1 = element0.setAttributes(linkedList0);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals(0, linkedList0.size());
      assertFalse(element1.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals("C6", element1.getName());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(linkedList0.contains(element1));
      
      boolean boolean1 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) element1, (NodeTest) nodeNameTest0);
      assertFalse(boolean1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals(0, linkedList0.size());
      assertFalse(element1.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals("C6", element1.getName());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertTrue(boolean1 == boolean0);
      assertFalse(linkedList0.contains(element1));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "";
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      
      EvoSuiteFile evoSuiteFile0 = null;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      
      Object object0 = jDOMNodePointer0.getNodeValue();
      assertNull(object0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      assertNotNull(namespace0);
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      
      Element element0 = new Element("C6", namespace0);
      assertNotNull(element0);
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals("http://www.w3.org/XML/1998/namespace", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte) (-88);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)39, (byte)27, (byte)64, (byte) (-97), (byte) (-84), (byte) (-88)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      QName qName0 = jDOMNodePointer0.getName();
      assertNotNull(qName0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      
      Locale locale1 = Locale.TAIWAN;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertFalse(locale1.equals((Object)locale0));
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer((NodePointer) jDOMNodePointer0, (Object) locale1);
      assertNotNull(jDOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isCollection());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      
      String string1 = jDOMNodePointer1.getNamespaceURI();
      assertNotNull(string1);
      assertEquals("http://www.w3.org/XML/1998/namespace", string1);
      assertNotSame(locale0, locale1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals("http://www.w3.org/XML/1998/namespace", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      
      String string2 = jDOMNodePointer1.asPath();
      assertNotNull(string2);
      assertEquals("/xml:C6[1]", string2);
      assertNotSame(locale0, locale1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals("http://www.w3.org/XML/1998/namespace", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      
      Document document0 = new Document();
      assertNotNull(document0);
      assertFalse(document0.hasRootElement());
      assertEquals(0, document0.getContentSize());
      assertNull(document0.getBaseURI());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer2.setValue(document0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Locale cannot be cast to org.jdom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/2000/xmlns/");
      assertNotNull(qName0);
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      assertNotNull(nodeNameTest0);
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Namespace namespace0 = Namespace.getNamespace("BcvKn5(wLkh:/}$:");
      assertNotNull(namespace0);
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      
      Element element0 = new Element("C6", namespace0);
      assertNotNull(element0);
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      
      Element element1 = element0.setAttributes((List) null);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element1.getName());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, element1);
      assertNotNull(nodePointer0);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element1.getName());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isContainer());
      assertFalse(nodePointer0.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(nodePointer0, element0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element1.getName());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isContainer());
      assertFalse(nodePointer0.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals("BcvKn5(wLkh:/}$:", jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      jDOMNodePointer1.setValue(object0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(1, element0.getContentSize());
      assertEquals("C6", element1.getName());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals(1, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isContainer());
      assertFalse(nodePointer0.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals("BcvKn5(wLkh:/}$:", jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      int int0 = nodePointer0.getLength();
      assertEquals(1, int0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(1, element0.getContentSize());
      assertEquals("C6", element1.getName());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals(1, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isContainer());
      assertFalse(nodePointer0.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      
      Element element2 = element1.getChild("http://www.w3.org/XML/1998/namespace", namespace0);
      assertNull(element2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(1, element0.getContentSize());
      assertEquals("C6", element1.getName());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals(1, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      
      String string0 = JDOMNodePointer.getPrefix((Object) null);
      assertNull(string0);
      
      jDOMNodePointer1.setValue(nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element1.getName());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isContainer());
      assertFalse(nodePointer0.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals("BcvKn5(wLkh:/}$:", jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      boolean boolean0 = nodePointer0.isLeaf();
      assertTrue(boolean0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element1.getName());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isContainer());
      assertFalse(nodePointer0.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      CDATA cDATA0 = new CDATA(",h=vXt");
      assertNotNull(cDATA0);
      assertEquals(",h=vXt", cDATA0.getValue());
      assertEquals(",h=vXt", cDATA0.getText());
      
      CDATA cDATA1 = (CDATA)cDATA0.setText(",h=vXt");
      assertNotNull(cDATA1);
      assertSame(cDATA0, cDATA1);
      assertSame(cDATA1, cDATA0);
      assertEquals(",h=vXt", cDATA0.getValue());
      assertEquals(",h=vXt", cDATA0.getText());
      assertEquals(",h=vXt", cDATA1.getText());
      assertEquals(",h=vXt", cDATA1.getValue());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      String string0 = locale0.getDisplayVariant();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(",h=vXt", cDATA0.getValue());
      assertEquals(",h=vXt", cDATA0.getText());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      
      int int0 = jDOMNodePointer0.getLength();
      assertEquals(1, int0);
      assertSame(cDATA0, cDATA1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(",h=vXt", cDATA0.getValue());
      assertEquals(",h=vXt", cDATA0.getText());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      assertNotNull(nodeTypeTest0);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      
      String string1 = jDOMNodePointer0.getNamespaceURI("?2|");
      assertNull(string1);
      assertSame(cDATA0, cDATA1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(",h=vXt", cDATA0.getValue());
      assertEquals(",h=vXt", cDATA0.getText());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      
      String string2 = jDOMNodePointer0.getNamespaceURI("");
      assertNull(string2);
      assertSame(cDATA0, cDATA1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(",h=vXt", cDATA0.getValue());
      assertEquals(",h=vXt", cDATA0.getText());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) jDOMNodePointer0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
      assertSame(cDATA0, cDATA1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(",h=vXt", cDATA0.getValue());
      assertEquals(",h=vXt", cDATA0.getText());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      
      Comment comment0 = new Comment("C[.an4fZ#B8G$(8sF");
      assertNotNull(comment0);
      assertEquals("C[.an4fZ#B8G$(8sF", comment0.getValue());
      assertEquals("C[.an4fZ#B8G$(8sF", comment0.getText());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(comment0, locale0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("C[.an4fZ#B8G$(8sF", comment0.getValue());
      assertEquals("C[.an4fZ#B8G$(8sF", comment0.getText());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      jDOMNodePointer0.setValue(jDOMNodePointer1);
      assertSame(cDATA0, cDATA1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("C[.an4fZ#B8G$(8sF", cDATA0.getText());
      assertEquals("C[.an4fZ#B8G$(8sF", cDATA0.getValue());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals("C[.an4fZ#B8G$(8sF", comment0.getValue());
      assertEquals("C[.an4fZ#B8G$(8sF", comment0.getText());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      boolean boolean1 = jDOMNodePointer0.isLeaf();
      assertTrue(boolean1);
      assertSame(cDATA0, cDATA1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("C[.an4fZ#B8G$(8sF", cDATA0.getText());
      assertEquals("C[.an4fZ#B8G$(8sF", cDATA0.getValue());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      
      Object object0 = jDOMNodePointer0.getNodeValue();
      assertNull(object0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/2000/xmlns/");
      assertNotNull(qName0);
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      
      Namespace namespace0 = Namespace.getNamespace((String) null);
      assertNotNull(namespace0);
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      
      Element element0 = new Element("C6", namespace0);
      assertNotNull(element0);
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      int int0 = jDOMNodePointer1.getLength();
      assertEquals(1, int0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      assertNotNull(nodeTypeTest0);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      
      String string0 = jDOMNodePointer1.getNamespaceURI("");
      assertNotNull(string0);
      assertEquals("", string0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      String string1 = jDOMNodePointer0.getNamespaceURI("");
      assertNull(string1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer("", locale0);
      assertNotNull(jDOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertTrue(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isContainer());
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer2, (Object) "Namespace prefixes cannot begin with a hyphen (-)", (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertTrue(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isContainer());
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      
      boolean boolean1 = jDOMNodePointer0.isLeaf();
      assertTrue(boolean1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      assertNotNull(nodeTypeTest0);
      assertEquals(3, nodeTypeTest0.getNodeType());
      
      CDATA cDATA0 = new CDATA("zcJtt|A!Dv");
      assertNotNull(cDATA0);
      assertEquals("zcJtt|A!Dv", cDATA0.getText());
      assertEquals("zcJtt|A!Dv", cDATA0.getValue());
      
      QName qName0 = new QName("Cannot convert value of class ");
      assertNotNull(qName0);
      assertEquals("Cannot convert value of class ", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("Cannot convert value of class ", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("Cannot convert value of class ", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("Cannot convert value of class ", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Cannot convert value of class ", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("Cannot convert value of class ", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("Cannot convert value of class ", qName0.toString());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isActual());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("<<unknown namespace>>");
      assertNotNull(processingInstructionTest0);
      assertEquals("<<unknown namespace>>", processingInstructionTest0.getTarget());
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) variablePointer0, (Object) processingInstructionTest0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(3, nodeTypeTest0.getNodeType());
      assertEquals("Cannot convert value of class ", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("Cannot convert value of class ", qName0.toString());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isActual());
      assertEquals("<<unknown namespace>>", processingInstructionTest0.getTarget());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      
      Object object0 = jDOMNodePointer0.getNodeValue();
      assertNull(object0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/2000/xmlns/");
      assertNotNull(qName0);
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      assertNotNull(nodeNameTest0);
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Namespace namespace0 = Namespace.getNamespace("BcvKn5(wLkh:/}$:");
      assertNotNull(namespace0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      
      Element element0 = new Element("C6", namespace0);
      assertNotNull(element0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      
      Element element1 = element0.setAttributes((List) null);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element1.getName());
      assertFalse(element1.isRootElement());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals(0, element1.getContentSize());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      
      String string0 = element0.getTextTrim();
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(element0, element1);
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      jDOMNodePointer1.setValue(cDATA0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertSame(element0, element1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals(1, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      int int0 = jDOMNodePointer1.getLength();
      assertEquals(1, int0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertSame(element0, element1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals(1, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      Object object1 = jDOMNodePointer1.getValue();
      assertNotNull(object1);
      assertEquals("", object1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertSame(element0, element1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals(1, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(object1.equals((Object)string0));
      
      boolean boolean0 = jDOMNodePointer1.isLeaf();
      assertFalse(boolean0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertSame(element0, element1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals(1, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      
      Object object0 = jDOMNodePointer0.getNodeValue();
      assertNull(object0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      
      NodePointer nodePointer0 = jDOMNodePointer0.getImmediateValuePointer();
      assertNotNull(nodePointer0);
      assertSame(jDOMNodePointer0, nodePointer0);
      assertSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isRoot());
      assertEquals(1, nodePointer0.getLength());
      assertNull(nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isContainer());
      assertFalse(nodePointer0.isCollection());
      assertTrue(nodePointer0.isNode());
      
      Namespace namespace0 = Namespace.getNamespace((String) null);
      assertNotNull(namespace0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      
      Element element0 = new Element("C6", namespace0);
      assertNotNull(element0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)nodePointer0));
      
      int int0 = jDOMNodePointer1.getLength();
      assertEquals(1, int0);
      assertSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)nodePointer0));
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      assertNotNull(nodeTypeTest0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      
      String string0 = nodeTypeTest0.toString();
      assertNotNull(string0);
      assertEquals("node()", string0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      
      boolean boolean0 = jDOMNodePointer1.testNode((NodeTest) nodeTypeTest0);
      assertTrue(boolean0);
      assertSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)nodePointer0));
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer((Object) null, locale0, "");
      assertNotNull(jDOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isCollection());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isContainer());
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer2.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      
      JDOMNodePointer jDOMNodePointer3 = new JDOMNodePointer(jDOMNodePointer2, locale0, "{J$p_z}Rc");
      assertNotNull(jDOMNodePointer3);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isCollection());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isContainer());
      assertTrue(jDOMNodePointer3.isRoot());
      assertFalse(jDOMNodePointer3.isAttribute());
      assertFalse(jDOMNodePointer3.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer3.getIndex());
      assertFalse(jDOMNodePointer3.isCollection());
      assertTrue(jDOMNodePointer3.isNode());
      assertEquals(1, jDOMNodePointer3.getLength());
      assertNull(jDOMNodePointer3.getNamespaceURI());
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer2.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer3.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer0));
      
      String string1 = jDOMNodePointer3.getNamespaceURI("http://www.w3.org/XML/1998/namespace");
      assertNull(string1);
      assertNotSame(jDOMNodePointer2, nodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer3, nodePointer0);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isCollection());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isContainer());
      assertTrue(jDOMNodePointer3.isRoot());
      assertFalse(jDOMNodePointer3.isAttribute());
      assertFalse(jDOMNodePointer3.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer3.getIndex());
      assertFalse(jDOMNodePointer3.isCollection());
      assertTrue(jDOMNodePointer3.isNode());
      assertEquals(1, jDOMNodePointer3.getLength());
      assertNull(jDOMNodePointer3.getNamespaceURI());
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer3));
      assertTrue(jDOMNodePointer2.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer3.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer0));
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("null filter not allowed");
      assertNotNull(processingInstructionTest0);
      assertEquals("null filter not allowed", processingInstructionTest0.getTarget());
      
      boolean boolean1 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) jDOMNodePointer0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertFalse(boolean1 == boolean0);
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      
      String string2 = jDOMNodePointer2.getNamespaceURI();
      assertNull(string2);
      assertNotSame(jDOMNodePointer2, nodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isCollection());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isContainer());
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer3));
      assertTrue(jDOMNodePointer2.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      
      Object object0 = jDOMNodePointer0.getNodeValue();
      assertNull(object0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      
      Namespace namespace0 = Namespace.getNamespace((String) null);
      assertNotNull(namespace0);
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      
      Element element0 = new Element("C6", namespace0);
      assertNotNull(element0);
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespaceURI());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      QName qName0 = jDOMNodePointer0.getName();
      assertNotNull(qName0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      
      // Undeclared exception!
      try { 
        jDOMNodePointer1.attributeIterator(qName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMAttributeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      
      Object object0 = jDOMNodePointer0.getNodeValue();
      assertNull(object0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/2000/xmlns/");
      assertNotNull(qName0);
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      
      Namespace namespace0 = Namespace.getNamespace((String) null);
      assertNotNull(namespace0);
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      
      Element element0 = new Element("C6", namespace0);
      assertNotNull(element0);
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      
      Element element1 = element0.setAttributes((List) null);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element1.getNamespaceURI());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals(0, element1.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("C6", element1.getName());
      
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, element1);
      assertNotNull(nodePointer0);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element1.getNamespaceURI());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals(0, element1.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("C6", element1.getName());
      assertFalse(nodePointer0.isCollection());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertNull(nodePointer0.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(nodePointer0, element0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element1.getNamespaceURI());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals(0, element1.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("C6", element1.getName());
      assertFalse(nodePointer0.isCollection());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertNull(nodePointer0.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      jDOMNodePointer1.setValue(cDATA0);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(1, element0.getContentSize());
      assertEquals("", element1.getNamespaceURI());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals(1, element1.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("C6", element1.getName());
      assertFalse(nodePointer0.isCollection());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertNull(nodePointer0.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      String string0 = cDATA0.getTextNormalize();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<<unknown namespace>>");
      assertFalse(boolean0);
      
      String string1 = nodePointer0.getNamespaceURI("@lowW`Kp");
      assertNull(string1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(1, element0.getContentSize());
      assertEquals("", element1.getNamespaceURI());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals(1, element1.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("C6", element1.getName());
      assertFalse(nodePointer0.isCollection());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertNull(nodePointer0.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      
      Text text0 = cDATA0.setText(").FoU");
      assertNotNull(text0);
      assertSame(cDATA0, text0);
      assertSame(text0, cDATA0);
      assertEquals(").FoU", cDATA0.getText());
      assertEquals(").FoU", cDATA0.getValue());
      assertEquals(").FoU", text0.getValue());
      assertEquals(").FoU", text0.getText());
      
      boolean boolean1 = jDOMNodePointer1.equals(text0);
      assertFalse(boolean1);
      assertSame(cDATA0, text0);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertSame(text0, cDATA0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(").FoU", cDATA0.getText());
      assertEquals(").FoU", cDATA0.getValue());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(1, element0.getContentSize());
      assertEquals("", element1.getNamespaceURI());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals(1, element1.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("C6", element1.getName());
      assertFalse(nodePointer0.isCollection());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertNull(nodePointer0.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(").FoU", text0.getValue());
      assertEquals(").FoU", text0.getText());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(boolean1 == boolean0);
      
      String string2 = JDOMNodePointer.getPrefix(element1);
      assertNull(string2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(1, element0.getContentSize());
      assertEquals("", element1.getNamespaceURI());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals(1, element1.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("C6", element1.getName());
      
      nodePointer0.setValue(element1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element1.getNamespaceURI());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals(0, element1.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("C6", element1.getName());
      assertFalse(nodePointer0.isCollection());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertNull(nodePointer0.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      
      boolean boolean2 = jDOMNodePointer1.isLeaf();
      assertTrue(boolean2);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element1.getNamespaceURI());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals(0, element1.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("C6", element1.getName());
      assertFalse(nodePointer0.isCollection());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertNull(nodePointer0.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      
      Object object0 = jDOMNodePointer0.getNodeValue();
      assertNull(object0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/2000/xmlns/");
      assertNotNull(qName0);
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      assertNotNull(nodeNameTest0);
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      Namespace namespace0 = Namespace.getNamespace("BcvKn5(wLkh:/}$:");
      assertNotNull(namespace0);
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      
      Element element0 = new Element("C6", namespace0);
      assertNotNull(element0);
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      
      Element element1 = element0.setAttributes((List) null);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element1.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertEquals(0, element1.getContentSize());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, element1);
      assertNotNull(nodePointer0);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element1.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertEquals(0, element1.getContentSize());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(nodePointer0, element0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element1.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertEquals(0, element1.getContentSize());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals("BcvKn5(wLkh:/}$:", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      
      boolean boolean0 = nodePointer0.testNode((NodeTest) nodeNameTest0);
      assertFalse(boolean0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element1.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertEquals(0, element1.getContentSize());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      
      QName qName1 = nodePointer0.getName();
      assertNotNull(qName1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(qName0, qName1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element1.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertEquals(0, element1.getContentSize());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertEquals("C6", qName1.toString());
      assertEquals("C6", qName1.getName());
      assertNull(qName1.getPrefix());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertFalse(qName1.equals((Object)qName0));
      
      String string0 = nodePointer0.getNamespaceURI();
      assertNotNull(string0);
      assertEquals("BcvKn5(wLkh:/}$:", string0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(qName0, qName1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element1.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertEquals(0, element1.getContentSize());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(qName0.equals((Object)qName1));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("lwga@eBx78Eg(z}E>R");
      assertNotNull(processingInstructionTest0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) nodePointer0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(qName0, qName1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element1.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertEquals(0, element1.getContentSize());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(qName0.equals((Object)qName1));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      
      PackageFunctions packageFunctions0 = new PackageFunctions("q,hoCcvo1$?", "<<unknown namespace>>");
      assertNotNull(packageFunctions0);
      
      jXPathContextReferenceImpl0.setFunctions(packageFunctions0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(qName0, qName1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element1.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertEquals(0, element1.getContentSize());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(qName0.equals((Object)qName1));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)jXPathContextReferenceImpl0.getRelativeContext(jDOMNodePointer1);
      assertNotNull(jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(qName0, qName1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element1.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertEquals(0, element1.getContentSize());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals("BcvKn5(wLkh:/}$:", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(qName0.equals((Object)qName1));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      
      // Undeclared exception!
      nodePointer0.createChild((JXPathContext) jXPathContextReferenceImpl1, qName1, 1262, (Object) jDOMNodePointer1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      
      Object object0 = jDOMNodePointer0.getNodeValue();
      assertNull(object0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/2000/xmlns/");
      assertNotNull(qName0);
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      assertNotNull(nodeNameTest0);
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", nodeNameTest0.toString());
      
      Namespace namespace0 = Namespace.getNamespace("BcvKn5(wLkh:/}$:");
      assertNotNull(namespace0);
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      
      Element element0 = new Element("C6", namespace0);
      assertNotNull(element0);
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      
      Element element1 = element0.setAttributes((List) null);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals(0, element1.getContentSize());
      assertEquals("C6", element1.getName());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals("BcvKn5(wLkh:/}$:", jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      boolean boolean0 = jDOMNodePointer0.testNode((NodeTest) nodeNameTest0);
      assertFalse(boolean0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", nodeNameTest0.toString());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      
      QName qName1 = jDOMNodePointer0.getName();
      assertNotNull(qName1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertNull(qName1.toString());
      assertNull(qName1.getName());
      assertNull(qName1.getPrefix());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      
      String string0 = jDOMNodePointer0.getNamespaceURI();
      assertNull(string0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      
      // Undeclared exception!
      jDOMNodePointer1.asPath();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      
      Object object0 = jDOMNodePointer0.getNodeValue();
      assertNull(object0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/2000/xmlns/");
      assertNotNull(qName0);
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      assertNotNull(nodeNameTest0);
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      Namespace namespace0 = Namespace.getNamespace("BcvKn5(wLkh:/}$:");
      assertNotNull(namespace0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      
      Element element0 = new Element("C6", namespace0);
      assertNotNull(element0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      
      Element element1 = element0.setAttributes((List) null);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals(0, element1.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals("C6", element1.getName());
      
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, element1);
      assertNotNull(nodePointer0);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals(0, element1.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals("C6", element1.getName());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      
      NodePointer nodePointer1 = nodePointer0.getImmediateValuePointer();
      assertNotNull(nodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertSame(nodePointer0, nodePointer1);
      assertNotSame(nodePointer1, jDOMNodePointer0);
      assertSame(nodePointer1, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals(0, element1.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals("C6", element1.getName());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer1.getNamespaceURI());
      assertFalse(nodePointer1.isCollection());
      assertFalse(nodePointer1.isAttribute());
      assertFalse(nodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, nodePointer1.getIndex());
      assertFalse(nodePointer1.isContainer());
      assertEquals(1, nodePointer1.getLength());
      assertTrue(nodePointer1.isNode());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertFalse(nodePointer1.equals((Object)jDOMNodePointer0));
      
      String string0 = element0.getAttributeValue((String) null, "KXbZq_1bm");
      assertNotNull(string0);
      assertEquals("KXbZq_1bm", string0);
      assertSame(element0, element1);
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      
      String string1 = element0.getTextTrim();
      assertNotNull(string1);
      assertEquals("", string1);
      assertSame(element0, element1);
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertFalse(string1.equals((Object)string0));
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(nodePointer0, element0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals(0, element1.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals("C6", element1.getName());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer1));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      
      jDOMNodePointer1.setValue(cDATA0);
      assertNotSame(jDOMNodePointer0, nodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertSame(nodePointer0, nodePointer1);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, nodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals(1, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals(1, element1.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals("C6", element1.getName());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer1));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      
      String string2 = jDOMNodePointer1.getNamespaceURI("");
      assertNotNull(string2);
      assertEquals("BcvKn5(wLkh:/}$:", string2);
      assertNotSame(jDOMNodePointer0, nodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertSame(nodePointer0, nodePointer1);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, nodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals(1, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals(1, element1.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals("C6", element1.getName());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer1));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) cDATA0, (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
      assertNotSame(jDOMNodePointer0, nodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      
      Object object0 = jDOMNodePointer0.getNodeValue();
      assertNull(object0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/2000/xmlns/");
      assertNotNull(qName0);
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      assertNotNull(nodeNameTest0);
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", nodeNameTest0.toString());
      
      Namespace namespace0 = Namespace.getNamespace((String) null);
      assertNotNull(namespace0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      
      Element element0 = new Element("C6", namespace0);
      assertNotNull(element0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      
      Element element1 = element0.setAttributes((List) null);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespaceURI());
      assertEquals("C6", element1.getName());
      assertFalse(element1.isRootElement());
      assertEquals("", element1.getNamespacePrefix());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isContainer());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      QName qName1 = jDOMNodePointer0.getName();
      assertNotNull(qName1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(qName1.toString());
      assertNull(qName1.getName());
      assertNull(qName1.getPrefix());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      
      Locale locale1 = Locale.TAIWAN;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TW", locale1.getCountry());
      assertEquals("TWN", locale1.getISO3Country());
      assertFalse(locale1.equals((Object)locale0));
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer((NodePointer) jDOMNodePointer0, (Object) locale1);
      assertNotNull(jDOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TW", locale1.getCountry());
      assertEquals("TWN", locale1.getISO3Country());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      
      String string0 = jDOMNodePointer1.getNamespaceURI();
      assertNull(string0);
      assertNotSame(locale0, locale1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertSame(element0, element1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isContainer());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      
      String string1 = jDOMNodePointer1.asPath();
      assertNotNull(string1);
      assertEquals("/C6[1]", string1);
      assertNotSame(locale0, locale1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertSame(element0, element1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isContainer());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      
      Document document0 = new Document();
      assertNotNull(document0);
      assertEquals(0, document0.getContentSize());
      assertNull(document0.getBaseURI());
      assertFalse(document0.hasRootElement());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer2.setValue(document0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Locale cannot be cast to org.jdom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      Object object0 = jDOMNodePointer0.getNodeValue();
      assertNull(object0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/2000/xmlns/");
      assertNotNull(qName0);
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      
      Namespace namespace0 = Namespace.getNamespace((String) null);
      assertNotNull(namespace0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      
      Element element0 = new Element("C6", namespace0);
      assertNotNull(element0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      
      Element element1 = element0.setAttributes((List) null);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element1.getName());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespaceURI());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, element1);
      assertNotNull(nodePointer0);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element1.getName());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespaceURI());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertFalse(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertNull(nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(nodePointer0, element0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element1.getName());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespaceURI());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertFalse(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertNull(nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      
      jDOMNodePointer1.setValue(cDATA0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(1, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element1.getName());
      assertEquals(1, element1.getContentSize());
      assertEquals("", element1.getNamespaceURI());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertFalse(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertNull(nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      
      String string0 = cDATA0.getTextNormalize();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<<unknown namespace>>");
      assertFalse(boolean0);
      
      Namespace namespace1 = Namespace.getNamespace("lg");
      assertNotNull(namespace1);
      assertNotSame(namespace1, namespace0);
      assertEquals("", namespace1.getPrefix());
      assertEquals("lg", namespace1.getURI());
      assertFalse(namespace1.equals((Object)namespace0));
      
      String string1 = nodePointer0.getNamespaceURI("@lowW`Kp");
      assertNull(string1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(namespace0, namespace1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(1, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element1.getName());
      assertEquals(1, element1.getContentSize());
      assertEquals("", element1.getNamespaceURI());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertFalse(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertNull(nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(namespace0.equals((Object)namespace1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("http://www.w3.org/XML/1998/namespace");
      assertNotNull(processingInstructionTest0);
      assertEquals("http://www.w3.org/XML/1998/namespace", processingInstructionTest0.getTarget());
      
      jDOMNodePointer1.setValue(processingInstructionTest0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(namespace0, namespace1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(1, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element1.getName());
      assertEquals(1, element1.getContentSize());
      assertEquals("", element1.getNamespaceURI());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertFalse(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertNull(nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals("http://www.w3.org/XML/1998/namespace", processingInstructionTest0.getTarget());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(namespace0.equals((Object)namespace1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      
      int int0 = jDOMNodePointer1.getLength();
      assertEquals(1, int0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(namespace0, namespace1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(1, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element1.getName());
      assertEquals(1, element1.getContentSize());
      assertEquals("", element1.getNamespaceURI());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertFalse(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertNull(nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(namespace0.equals((Object)namespace1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      
      boolean boolean1 = jDOMNodePointer1.testNode((NodeTest) processingInstructionTest0);
      assertFalse(boolean1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(namespace0, namespace1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(1, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element1.getName());
      assertEquals(1, element1.getContentSize());
      assertEquals("", element1.getNamespaceURI());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertFalse(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertNull(nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals("http://www.w3.org/XML/1998/namespace", processingInstructionTest0.getTarget());
      assertTrue(boolean1 == boolean0);
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(namespace0.equals((Object)namespace1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      
      boolean boolean2 = jDOMNodePointer0.isLanguage(" xmlns");
      assertFalse(boolean2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      QName qName0 = new QName("org.apache.commons.jxpath.ri.JXPathCompiledExpression", "lg");
      assertNotNull(qName0);
      assertEquals("lg", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.JXPathCompiledExpression", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.JXPathCompiledExpression:lg", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "lg");
      assertNotNull(nodeNameTest0);
      assertEquals("lg", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.JXPathCompiledExpression", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.JXPathCompiledExpression:lg", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("lg", nodeNameTest0.getNamespaceURI());
      assertEquals("org.apache.commons.jxpath.ri.JXPathCompiledExpression:lg", nodeNameTest0.toString());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1494);
      assertNotNull(nodeTypeTest0);
      assertEquals(1494, nodeTypeTest0.getNodeType());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, nodeTypeTest0, locale0);
      assertNotNull(beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("lg", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.JXPathCompiledExpression", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.JXPathCompiledExpression:lg", qName0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(1494, nodeTypeTest0.getNodeType());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(beanPointer0, "lg");
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("lg", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.JXPathCompiledExpression", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.JXPathCompiledExpression:lg", qName0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(1494, nodeTypeTest0.getNodeType());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale1);
      assertSame(locale1, locale0);
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(Integer.MIN_VALUE);
      assertNotNull(nodeTypeTest1);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest1.getNodeType());
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(nodeTypeTest1, locale1, "id('");
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals(Integer.MIN_VALUE, nodeTypeTest1.getNodeType());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "lg");
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(qName0, locale1, "<<unknown namespace>>");
      assertNotNull(jDOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("lg", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.JXPathCompiledExpression", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.JXPathCompiledExpression:lg", qName0.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertTrue(jDOMNodePointer2.isNode());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertTrue(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      
      QName qName1 = jDOMNodePointer2.getName();
      assertNotNull(qName1);
      assertNotSame(qName0, qName1);
      assertSame(locale1, locale0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("lg", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.JXPathCompiledExpression", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.JXPathCompiledExpression:lg", qName0.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertTrue(jDOMNodePointer2.isNode());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertTrue(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isCollection());
      assertNull(qName1.getName());
      assertNull(qName1.getPrefix());
      assertNull(qName1.toString());
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      
      String string0 = locale0.getDisplayVariant();
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(locale0, locale1);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      Locale locale2 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("TWN", locale2.getISO3Country());
      assertEquals("zh_TW", locale2.toString());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("TW", locale2.getCountry());
      assertEquals("zho", locale2.getISO3Language());
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      
      JDOMNodePointer jDOMNodePointer3 = new JDOMNodePointer("", locale2, ", the target object is null");
      assertNotNull(jDOMNodePointer3);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("TWN", locale2.getISO3Country());
      assertEquals("zh_TW", locale2.toString());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("TW", locale2.getCountry());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals(1, jDOMNodePointer3.getLength());
      assertFalse(jDOMNodePointer3.isContainer());
      assertTrue(jDOMNodePointer3.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer3.getIndex());
      assertFalse(jDOMNodePointer3.isCollection());
      assertFalse(jDOMNodePointer3.isAttribute());
      assertTrue(jDOMNodePointer3.isNode());
      assertNull(jDOMNodePointer3.getNamespaceURI());
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer1));
      
      int int0 = jDOMNodePointer3.getLength();
      assertEquals(1, int0);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("TWN", locale2.getISO3Country());
      assertEquals("zh_TW", locale2.toString());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("TW", locale2.getCountry());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals(1, jDOMNodePointer3.getLength());
      assertFalse(jDOMNodePointer3.isContainer());
      assertTrue(jDOMNodePointer3.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer3.getIndex());
      assertFalse(jDOMNodePointer3.isCollection());
      assertFalse(jDOMNodePointer3.isAttribute());
      assertTrue(jDOMNodePointer3.isNode());
      assertNull(jDOMNodePointer3.getNamespaceURI());
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer1));
      
      NodeTypeTest nodeTypeTest2 = new NodeTypeTest((-2451));
      assertNotNull(nodeTypeTest2);
      assertEquals((-2451), nodeTypeTest2.getNodeType());
      assertFalse(nodeTypeTest2.equals((Object)nodeTypeTest1));
      assertFalse(nodeTypeTest2.equals((Object)nodeTypeTest0));
      
      String string1 = nodeTypeTest2.toString();
      assertNotNull(string1);
      assertEquals("UNKNOWN()", string1);
      assertNotSame(nodeTypeTest2, nodeTypeTest1);
      assertNotSame(nodeTypeTest2, nodeTypeTest0);
      assertEquals((-2451), nodeTypeTest2.getNodeType());
      assertFalse(nodeTypeTest2.equals((Object)nodeTypeTest1));
      assertFalse(nodeTypeTest2.equals((Object)nodeTypeTest0));
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = jDOMNodePointer2.testNode((NodeTest) nodeTypeTest2);
      assertFalse(boolean0);
      assertNotSame(nodeTypeTest2, nodeTypeTest1);
      assertNotSame(nodeTypeTest2, nodeTypeTest0);
      assertNotSame(qName0, qName1);
      assertSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals((-2451), nodeTypeTest2.getNodeType());
      assertEquals("lg", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.JXPathCompiledExpression", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.JXPathCompiledExpression:lg", qName0.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertTrue(jDOMNodePointer2.isNode());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertTrue(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(nodeTypeTest2.equals((Object)nodeTypeTest1));
      assertFalse(nodeTypeTest2.equals((Object)nodeTypeTest0));
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      
      String string2 = jDOMNodePointer1.getNamespaceURI("xml");
      assertNotNull(string2);
      assertEquals("http://www.w3.org/XML/1998/namespace", string2);
      assertSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(nodeTypeTest1, nodeTypeTest2);
      assertNotSame(nodeTypeTest1, nodeTypeTest0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer3);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals(Integer.MIN_VALUE, nodeTypeTest1.getNodeType());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest2));
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer3));
      
      boolean boolean1 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer1, (Object) jDOMNodePointer0, (NodeTest) nodeTypeTest1);
      assertFalse(boolean1);
      assertNotSame(qName0, qName1);
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(nodeTypeTest0, nodeTypeTest1);
      assertNotSame(nodeTypeTest0, nodeTypeTest2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(nodeTypeTest1, nodeTypeTest2);
      assertNotSame(nodeTypeTest1, nodeTypeTest0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer3);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("lg", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.JXPathCompiledExpression", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.JXPathCompiledExpression:lg", qName0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(1494, nodeTypeTest0.getNodeType());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals(Integer.MIN_VALUE, nodeTypeTest1.getNodeType());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(nodeTypeTest0.equals((Object)nodeTypeTest1));
      assertFalse(nodeTypeTest0.equals((Object)nodeTypeTest2));
      assertTrue(boolean1 == boolean0);
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest2));
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer3));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      
      Object object0 = jDOMNodePointer0.getNodeValue();
      assertNull(object0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/2000/xmlns/");
      assertNotNull(qName0);
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      assertNotNull(nodeNameTest0);
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Namespace namespace0 = Namespace.getNamespace("BcvKn5(wLkh:/}$:");
      assertNotNull(namespace0);
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      
      Element element0 = new Element("C6", namespace0);
      assertNotNull(element0);
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      
      Element element1 = element0.setAttributes((List) null);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals(0, element1.getContentSize());
      assertEquals("C6", element1.getName());
      assertFalse(element1.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, element1);
      assertNotNull(nodePointer0);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals(0, element1.getContentSize());
      assertEquals("C6", element1.getName());
      assertFalse(element1.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isContainer());
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(nodePointer0, element0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals(0, element1.getContentSize());
      assertEquals("C6", element1.getName());
      assertFalse(element1.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isContainer());
      assertEquals("BcvKn5(wLkh:/}$:", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      
      jDOMNodePointer1.setValue(cDATA0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(1, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals(1, element1.getContentSize());
      assertEquals("C6", element1.getName());
      assertFalse(element1.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isContainer());
      assertEquals("BcvKn5(wLkh:/}$:", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      
      int int0 = jDOMNodePointer1.getLength();
      assertEquals(1, int0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(1, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals(1, element1.getContentSize());
      assertEquals("C6", element1.getName());
      assertFalse(element1.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isContainer());
      assertEquals("BcvKn5(wLkh:/}$:", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      
      boolean boolean0 = nodePointer0.testNode((NodeTest) nodeNameTest0);
      assertFalse(boolean0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(1, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals(1, element1.getContentSize());
      assertEquals("C6", element1.getName());
      assertFalse(element1.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      
      QName qName1 = nodePointer0.getName();
      assertNotNull(qName1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(qName0, qName1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(1, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals(1, element1.getContentSize());
      assertEquals("C6", element1.getName());
      assertFalse(element1.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isContainer());
      assertNull(qName1.getPrefix());
      assertEquals("C6", qName1.toString());
      assertEquals("C6", qName1.getName());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(qName1.equals((Object)qName0));
      
      String string0 = nodePointer0.getNamespaceURI();
      assertNotNull(string0);
      assertEquals("BcvKn5(wLkh:/}$:", string0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(qName0, qName1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(1, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals(1, element1.getContentSize());
      assertEquals("C6", element1.getName());
      assertFalse(element1.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      
      // Undeclared exception!
      jDOMNodePointer1.asPath();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Locale locale0 = new Locale(",h=vXt");
      assertNotNull(locale0);
      assertEquals(",h=vxt", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(",h=vxt", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(",h=vXt", locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(",h=vxt", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(",h=vxt", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      
      NodePointer nodePointer0 = jDOMNodePointer0.getValuePointer();
      assertNotNull(nodePointer0);
      assertSame(jDOMNodePointer0, nodePointer0);
      assertSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(",h=vxt", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(",h=vxt", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isContainer());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertTrue(nodePointer0.isNode());
      assertTrue(nodePointer0.isRoot());
      assertEquals(1, nodePointer0.getLength());
      assertNull(nodePointer0.getNamespaceURI());
      
      Locale locale1 = Locale.GERMANY;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("de", locale1.getLanguage());
      assertEquals("DE", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("de_DE", locale1.toString());
      assertEquals("deu", locale1.getISO3Language());
      assertFalse(locale1.equals((Object)locale0));
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer((Object) null, locale1, "http://www.w3.org/2000/xmlns/");
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("de", locale1.getLanguage());
      assertEquals("DE", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("de_DE", locale1.toString());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertTrue(jDOMNodePointer1.isNode());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jDOMNodePointer1.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(",h=vXt", locale1);
      assertNotNull(jDOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("de", locale1.getLanguage());
      assertEquals("DE", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("de_DE", locale1.toString());
      assertEquals("deu", locale1.getISO3Language());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isNode());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertTrue(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      
      boolean boolean0 = jDOMNodePointer2.equals(nodePointer0);
      assertFalse(boolean0);
      assertNotSame(locale0, locale1);
      assertSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer2);
      assertSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(locale1, locale0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer2, nodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(",h=vxt", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(",h=vxt", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isContainer());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertTrue(nodePointer0.isNode());
      assertTrue(nodePointer0.isRoot());
      assertEquals(1, nodePointer0.getLength());
      assertNull(nodePointer0.getNamespaceURI());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("de", locale1.getLanguage());
      assertEquals("DE", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("de_DE", locale1.toString());
      assertEquals("deu", locale1.getISO3Language());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isNode());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertTrue(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      
      Object object0 = jDOMNodePointer0.getNodeValue();
      assertNull(object0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/2000/xmlns/");
      assertNotNull(qName0);
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      
      Namespace namespace0 = Namespace.getNamespace((String) null);
      assertNotNull(namespace0);
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      
      Element element0 = new Element("C6", namespace0);
      assertNotNull(element0);
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      
      Element element1 = element0.setAttributes((List) null);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("C6", element1.getName());
      assertFalse(element1.isRootElement());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespaceURI());
      assertEquals("", element1.getNamespacePrefix());
      
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, element1);
      assertNotNull(nodePointer0);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("C6", element1.getName());
      assertFalse(element1.isRootElement());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespaceURI());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertNull(nodePointer0.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isContainer());
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(nodePointer0, element0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("C6", element1.getName());
      assertFalse(element1.isRootElement());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespaceURI());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertNull(nodePointer0.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isContainer());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      
      jDOMNodePointer1.setValue(cDATA0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(1, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("C6", element1.getName());
      assertFalse(element1.isRootElement());
      assertEquals(1, element1.getContentSize());
      assertEquals("", element1.getNamespaceURI());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertNull(nodePointer0.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isContainer());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      
      String string0 = cDATA0.getTextNormalize();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer((Object) null, locale0, "Factory is not set on the JXPathContext - cannot create path: ");
      assertNotNull(jDOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(jDOMNodePointer2.isRoot());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isContainer());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isCollection());
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      
      // Undeclared exception!
      try { 
        jDOMNodePointer1.createAttribute((JXPathContext) null, qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown namespace prefix: http://www.w3.org/XML/1998/namespace
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CDATA cDATA0 = new CDATA("xml");
      assertNotNull(cDATA0);
      assertEquals("xml", cDATA0.getValue());
      assertEquals("xml", cDATA0.getText());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      
      Namespace namespace0 = Namespace.getNamespace("mod");
      assertNotNull(namespace0);
      assertEquals("mod", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      
      Element element0 = new Element("xml", namespace0);
      assertNotNull(element0);
      assertEquals("mod", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("mod", element0.getNamespaceURI());
      assertEquals("xml", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      
      Element element1 = element0.setAttributes((List) null);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("mod", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("mod", element0.getNamespaceURI());
      assertEquals("xml", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertEquals("mod", element1.getNamespaceURI());
      assertEquals("xml", element1.getName());
      
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Element element2 = element1.addContent((Collection) linkedList0);
      assertNotNull(element2);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element1, element2);
      assertSame(element1, element0);
      assertSame(element2, element0);
      assertSame(element2, element1);
      assertEquals("mod", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("mod", element0.getNamespaceURI());
      assertEquals("xml", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertEquals("mod", element1.getNamespaceURI());
      assertEquals("xml", element1.getName());
      assertEquals(0, linkedList0.size());
      assertFalse(element2.isRootElement());
      assertEquals("mod", element2.getNamespaceURI());
      assertEquals("xml", element2.getName());
      assertEquals(0, element2.getContentSize());
      assertEquals("", element2.getNamespacePrefix());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("mod", locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      
      String string0 = JDOMNodePointer.getLocalName(element1);
      assertNotNull(string0);
      assertEquals("xml", string0);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element1, element2);
      assertSame(element1, element0);
      assertEquals("mod", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("mod", element0.getNamespaceURI());
      assertEquals("xml", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertEquals("mod", element1.getNamespaceURI());
      assertEquals("xml", element1.getName());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      
      Object object0 = jDOMNodePointer0.getNodeValue();
      assertNull(object0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/2000/xmlns/");
      assertNotNull(qName0);
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      assertNotNull(nodeNameTest0);
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      Namespace namespace0 = Namespace.getNamespace("BcvKn5(wLkh:/}$:");
      assertNotNull(namespace0);
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      
      Element element0 = new Element("C6", namespace0);
      assertNotNull(element0);
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      
      Element element1 = element0.setAttributes((List) null);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals("C6", element1.getName());
      
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, element1);
      assertNotNull(nodePointer0);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals("C6", element1.getName());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      
      String string0 = element0.getTextTrim();
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(element0, element1);
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(nodePointer0, element0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals("C6", element1.getName());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      
      jDOMNodePointer1.setValue(cDATA0);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals(1, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals(1, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals("C6", element1.getName());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      
      int int0 = jDOMNodePointer1.getLength();
      assertEquals(1, int0);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals(1, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals(1, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals("C6", element1.getName());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      
      Object object1 = jDOMNodePointer1.getValue();
      assertNotNull(object1);
      assertEquals("", object1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals(1, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals(1, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals("C6", element1.getName());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      assertTrue(object1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      
      Object object0 = jDOMNodePointer0.getNodeValue();
      assertNull(object0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/2000/xmlns/");
      assertNotNull(qName0);
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      assertNotNull(nodeNameTest0);
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Namespace namespace0 = Namespace.getNamespace((String) null);
      assertNotNull(namespace0);
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      
      Element element0 = new Element("C6", namespace0);
      assertNotNull(element0);
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      
      Element element1 = element0.setAttributes((List) null);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals(0, element1.getContentSize());
      assertEquals("C6", element1.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("", element1.getNamespaceURI());
      
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, element1);
      assertNotNull(nodePointer0);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals(0, element1.getContentSize());
      assertEquals("C6", element1.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("", element1.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertNull(nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(nodePointer0, element0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals(0, element1.getContentSize());
      assertEquals("C6", element1.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("", element1.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertNull(nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      
      jDOMNodePointer1.setValue(cDATA0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals(1, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertFalse(element1.isRootElement());
      assertEquals(1, element1.getContentSize());
      assertEquals("C6", element1.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("", element1.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertNull(nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      
      String string0 = cDATA0.getTextNormalize();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<<unknown namespace>>");
      assertFalse(boolean0);
      
      String string1 = nodePointer0.getNamespaceURI("@lowW`Kp");
      assertNull(string1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals(1, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertFalse(element1.isRootElement());
      assertEquals(1, element1.getContentSize());
      assertEquals("C6", element1.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("", element1.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertNull(nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isNode());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      
      NodeIterator nodeIterator0 = jDOMNodePointer0.namespaceIterator();
      assertNotNull(nodeIterator0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(0, nodeIterator0.getPosition());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      
      Text text0 = cDATA0.setText(").FoU");
      assertNotNull(text0);
      assertSame(text0, cDATA0);
      assertSame(cDATA0, text0);
      assertEquals(").FoU", text0.getText());
      assertEquals(").FoU", text0.getValue());
      assertEquals(").FoU", cDATA0.getText());
      assertEquals(").FoU", cDATA0.getValue());
      
      boolean boolean1 = jDOMNodePointer1.equals(text0);
      assertFalse(boolean1);
      assertSame(text0, cDATA0);
      assertSame(cDATA0, text0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(").FoU", text0.getText());
      assertEquals(").FoU", text0.getValue());
      assertEquals(").FoU", cDATA0.getText());
      assertEquals(").FoU", cDATA0.getValue());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals(1, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertFalse(element1.isRootElement());
      assertEquals(1, element1.getContentSize());
      assertEquals("C6", element1.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("", element1.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertNull(nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertTrue(boolean1 == boolean0);
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      
      String string2 = JDOMNodePointer.getPrefix(element1);
      assertNull(string2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals(1, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertFalse(element1.isRootElement());
      assertEquals(1, element1.getContentSize());
      assertEquals("C6", element1.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("", element1.getNamespaceURI());
      
      nodePointer0.setValue(element1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals(0, element1.getContentSize());
      assertEquals("C6", element1.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("", element1.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertNull(nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isNode());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      
      Object object0 = jDOMNodePointer0.getNodeValue();
      assertNull(object0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/2000/xmlns/");
      assertNotNull(qName0);
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      assertNotNull(nodeNameTest0);
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      Namespace namespace0 = Namespace.getNamespace((String) null);
      assertNotNull(namespace0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      
      Element element0 = new Element("C6", namespace0);
      assertNotNull(element0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      
      Element element1 = element0.setAttributes((List) null);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals("", element1.getNamespaceURI());
      assertEquals(0, element1.getContentSize());
      assertEquals("C6", element1.getName());
      assertFalse(element1.isRootElement());
      assertEquals("", element1.getNamespacePrefix());
      
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, element1);
      assertNotNull(nodePointer0);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals("", element1.getNamespaceURI());
      assertEquals(0, element1.getContentSize());
      assertEquals("C6", element1.getName());
      assertFalse(element1.isRootElement());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(nodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isNode());
      assertNull(nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(nodePointer0, element0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals("", element1.getNamespaceURI());
      assertEquals(0, element1.getContentSize());
      assertEquals("C6", element1.getName());
      assertFalse(element1.isRootElement());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(nodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isNode());
      assertNull(nodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      jDOMNodePointer1.setValue(cDATA0);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(1, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals("", element1.getNamespaceURI());
      assertEquals(1, element1.getContentSize());
      assertEquals("C6", element1.getName());
      assertFalse(element1.isRootElement());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(nodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isNode());
      assertNull(nodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<<unknown namespace>>");
      assertFalse(boolean0);
      
      String string0 = nodePointer0.getNamespaceURI("@lowW`Kp");
      assertNull(string0);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(1, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals("", element1.getNamespaceURI());
      assertEquals(1, element1.getContentSize());
      assertEquals("C6", element1.getName());
      assertFalse(element1.isRootElement());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(nodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isNode());
      assertNull(nodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      
      NodeIterator nodeIterator0 = jDOMNodePointer0.namespaceIterator();
      assertNotNull(nodeIterator0);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(0, nodeIterator0.getPosition());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      
      Text text0 = cDATA0.setText(").FoU");
      assertNotNull(text0);
      assertSame(cDATA0, text0);
      assertSame(text0, cDATA0);
      assertEquals(").FoU", cDATA0.getText());
      assertEquals(").FoU", cDATA0.getValue());
      assertEquals(").FoU", text0.getValue());
      assertEquals(").FoU", text0.getText());
      
      boolean boolean1 = jDOMNodePointer1.equals(text0);
      assertFalse(boolean1);
      assertSame(cDATA0, text0);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertSame(text0, cDATA0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(").FoU", cDATA0.getText());
      assertEquals(").FoU", cDATA0.getValue());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(1, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals("", element1.getNamespaceURI());
      assertEquals(1, element1.getContentSize());
      assertEquals("C6", element1.getName());
      assertFalse(element1.isRootElement());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(nodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isNode());
      assertNull(nodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(").FoU", text0.getValue());
      assertEquals(").FoU", text0.getText());
      assertTrue(boolean1 == boolean0);
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      String string1 = JDOMNodePointer.getPrefix(element1);
      assertNull(string1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(1, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals("", element1.getNamespaceURI());
      assertEquals(1, element1.getContentSize());
      assertEquals("C6", element1.getName());
      assertFalse(element1.isRootElement());
      assertEquals("", element1.getNamespacePrefix());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      
      Object object0 = jDOMNodePointer0.getNodeValue();
      assertNull(object0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/2000/xmlns/");
      assertNotNull(qName0);
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      assertNotNull(nodeNameTest0);
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Namespace namespace0 = Namespace.getNamespace((String) null);
      assertNotNull(namespace0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      
      Element element0 = new Element("C6", namespace0);
      assertNotNull(element0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      
      Element element1 = element0.setAttributes((List) null);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element1.getName());
      assertEquals("", element1.getNamespaceURI());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, element1);
      assertNotNull(nodePointer0);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element1.getName());
      assertEquals("", element1.getNamespaceURI());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isAttribute());
      assertNull(nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(nodePointer0, element0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element1.getName());
      assertEquals("", element1.getNamespaceURI());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isAttribute());
      assertNull(nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      jDOMNodePointer1.setValue(cDATA0);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals(1, element0.getContentSize());
      assertEquals(1, element1.getContentSize());
      assertEquals("C6", element1.getName());
      assertEquals("", element1.getNamespaceURI());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isAttribute());
      assertNull(nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<<unknown namespace>>");
      assertFalse(boolean0);
      
      boolean boolean1 = jDOMNodePointer0.testNode((NodeTest) nodeNameTest0);
      assertFalse(boolean1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(boolean1 == boolean0);
      
      String string0 = nodePointer0.getNamespaceURI();
      assertNull(string0);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals(1, element0.getContentSize());
      assertEquals(1, element1.getContentSize());
      assertEquals("C6", element1.getName());
      assertEquals("", element1.getNamespaceURI());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isAttribute());
      assertNull(nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("'K[:9C");
      assertNotNull(processingInstructionTest0);
      assertEquals("'K[:9C", processingInstructionTest0.getTarget());
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(processingInstructionTest0, locale0);
      assertNotNull(jDOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertTrue(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertTrue(jDOMNodePointer2.isNode());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("'K[:9C", processingInstructionTest0.getTarget());
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      
      boolean boolean2 = jDOMNodePointer2.isLanguage("http://www.w3.org/XML/1998/namespace");
      assertFalse(boolean2);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer2, nodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertTrue(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertTrue(jDOMNodePointer2.isNode());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("'K[:9C", processingInstructionTest0.getTarget());
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      
      Object object0 = jDOMNodePointer0.getNodeValue();
      assertNull(object0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/2000/xmlns/");
      assertNotNull(qName0);
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      assertNotNull(nodeNameTest0);
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      Namespace namespace0 = Namespace.getNamespace("BcvKn5(wLkh:/}$:");
      assertNotNull(namespace0);
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      
      String string0 = namespace0.toString();
      assertNotNull(string0);
      assertEquals("[Namespace: prefix \"\" is mapped to URI \"BcvKn5(wLkh:/}$:\"]", string0);
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      
      Element element0 = new Element("C6", namespace0);
      assertNotNull(element0);
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      
      Element element1 = element0.setAttributes((List) null);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals(0, element1.getContentSize());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals("C6", element1.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, element1);
      assertNotNull(nodePointer0);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals(0, element1.getContentSize());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals("C6", element1.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isNode());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      
      Comment comment0 = new Comment("http://www.w3.org/XML/1998/namespace");
      assertNotNull(comment0);
      assertEquals("http://www.w3.org/XML/1998/namespace", comment0.getValue());
      assertEquals("http://www.w3.org/XML/1998/namespace", comment0.getText());
      
      Comment comment1 = comment0.setText("http://www.w3.org/XML/1998/namespace");
      assertNotNull(comment1);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
      assertEquals("http://www.w3.org/XML/1998/namespace", comment0.getValue());
      assertEquals("http://www.w3.org/XML/1998/namespace", comment0.getText());
      assertEquals("http://www.w3.org/XML/1998/namespace", comment1.getText());
      assertEquals("http://www.w3.org/XML/1998/namespace", comment1.getValue());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(nodePointer0, comment1);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals(0, element1.getContentSize());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals("C6", element1.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isNode());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isRoot());
      assertEquals("http://www.w3.org/XML/1998/namespace", comment0.getValue());
      assertEquals("http://www.w3.org/XML/1998/namespace", comment0.getText());
      assertEquals("http://www.w3.org/XML/1998/namespace", comment1.getText());
      assertEquals("http://www.w3.org/XML/1998/namespace", comment1.getValue());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)nodePointer0));
      
      nodePointer0.setValue((Object) null);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals(0, element1.getContentSize());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals("C6", element1.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isNode());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer1));
      
      int int0 = jDOMNodePointer1.getLength();
      assertEquals(1, int0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals(0, element1.getContentSize());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals("C6", element1.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isNode());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isRoot());
      assertEquals("http://www.w3.org/XML/1998/namespace", comment0.getValue());
      assertEquals("http://www.w3.org/XML/1998/namespace", comment0.getText());
      assertEquals("http://www.w3.org/XML/1998/namespace", comment1.getText());
      assertEquals("http://www.w3.org/XML/1998/namespace", comment1.getValue());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)nodePointer0));
      
      boolean boolean0 = jDOMNodePointer0.testNode((NodeTest) nodeNameTest0);
      assertFalse(boolean0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      
      String string1 = nodePointer0.getNamespaceURI();
      assertNotNull(string1);
      assertEquals("BcvKn5(wLkh:/}$:", string1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals(0, element1.getContentSize());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals("C6", element1.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isNode());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isRoot());
      assertFalse(string1.equals((Object)string0));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer1));
      
      // Undeclared exception!
      try { 
        nodePointer0.isLanguage((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Locale locale0 = new Locale(";Ov=bP8oAKt");
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(";ov=bp8oakt", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(";ov=bp8oakt", locale0.getLanguage());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(",h=vXt", locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(";ov=bp8oakt", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(";ov=bp8oakt", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      
      NodePointer nodePointer0 = jDOMNodePointer0.getValuePointer();
      assertNotNull(nodePointer0);
      assertSame(jDOMNodePointer0, nodePointer0);
      assertSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(";ov=bp8oakt", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(";ov=bp8oakt", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isRoot());
      assertEquals(1, nodePointer0.getLength());
      assertNull(nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isCollection());
      assertTrue(nodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      
      Locale locale1 = Locale.GERMANY;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("DE", locale1.getCountry());
      assertEquals("de_DE", locale1.toString());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.getLanguage());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertFalse(locale1.equals((Object)locale0));
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer((Object) null, locale1, "http://www.w3.org/2000/xmlns/");
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("DE", locale1.getCountry());
      assertEquals("de_DE", locale1.toString());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.getLanguage());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)nodePointer0));
      
      Locale locale2 = Locale.GERMAN;
      assertNotNull(locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("", locale2.getCountry());
      assertEquals("de", locale2.getLanguage());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getISO3Country());
      assertEquals("de", locale2.toString());
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      
      boolean boolean0 = jDOMNodePointer0.equals(nodePointer0);
      assertTrue(boolean0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(";ov=bp8oakt", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(";ov=bp8oakt", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isRoot());
      assertEquals(1, nodePointer0.getLength());
      assertNull(nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isCollection());
      assertTrue(nodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer1));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      
      Object object0 = jDOMNodePointer0.getNodeValue();
      assertNull(object0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/2000/xmlns/");
      assertNotNull(qName0);
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      assertNotNull(nodeNameTest0);
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Namespace namespace0 = Namespace.getNamespace("BcvKn5(wLkh:/}$:");
      assertNotNull(namespace0);
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      
      Element element0 = new Element("C6", namespace0);
      assertNotNull(element0);
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      
      Element element1 = element0.setAttributes((List) null);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("C6", element1.getName());
      assertFalse(element1.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals(0, element1.getContentSize());
      
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, element1);
      assertNotNull(nodePointer0);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("C6", element1.getName());
      assertFalse(element1.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals(0, element1.getContentSize());
      assertFalse(nodePointer0.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertTrue(nodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(nodePointer0, element0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("C6", element1.getName());
      assertFalse(element1.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals(0, element1.getContentSize());
      assertFalse(nodePointer0.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertTrue(nodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      jDOMNodePointer1.setValue(cDATA0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(1, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("C6", element1.getName());
      assertFalse(element1.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals(1, element1.getContentSize());
      assertFalse(nodePointer0.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertTrue(nodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      int int0 = jDOMNodePointer1.getLength();
      assertEquals(1, int0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(1, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("C6", element1.getName());
      assertFalse(element1.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals(1, element1.getContentSize());
      assertFalse(nodePointer0.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertTrue(nodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      String string0 = JDOMNodePointer.getLocalName(qName0);
      assertNull(string0);
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      
      int int1 = nodePointer0.compareChildNodePointers(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(0, int1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(1, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("C6", element0.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("C6", element1.getName());
      assertFalse(element1.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals(1, element1.getContentSize());
      assertFalse(nodePointer0.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertTrue(nodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      Object object0 = jDOMNodePointer0.getNodeValue();
      assertNull(object0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/2000/xmlns/");
      assertNotNull(qName0);
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      assertNotNull(nodeNameTest0);
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", nodeNameTest0.toString());
      
      Namespace namespace0 = Namespace.getNamespace("BcvKn5(wLkh:/}$:");
      assertNotNull(namespace0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      
      Element element0 = new Element("C6", namespace0);
      assertNotNull(element0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      
      Element element1 = element0.setAttributes((List) null);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals("C6", element1.getName());
      
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, element1);
      assertNotNull(nodePointer0);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals("C6", element1.getName());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isAttribute());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(nodePointer0, element0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals("C6", element1.getName());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isAttribute());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      jDOMNodePointer1.setValue(cDATA0);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertFalse(element0.isRootElement());
      assertEquals(1, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals(1, element1.getContentSize());
      assertEquals("C6", element1.getName());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isAttribute());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      int int0 = jDOMNodePointer1.getLength();
      assertEquals(1, int0);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertFalse(element0.isRootElement());
      assertEquals(1, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals(1, element1.getContentSize());
      assertEquals("C6", element1.getName());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isAttribute());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<<unknown namespace>>");
      assertFalse(boolean0);
      
      String string0 = nodePointer0.getNamespaceURI("@lowW`Kp");
      assertNull(string0);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertFalse(element0.isRootElement());
      assertEquals(1, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertEquals(1, element1.getContentSize());
      assertEquals("C6", element1.getName());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isAttribute());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      
      Object object0 = jDOMNodePointer0.getNodeValue();
      assertNull(object0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/2000/xmlns/");
      assertNotNull(qName0);
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      assertNotNull(nodeNameTest0);
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Namespace namespace0 = Namespace.getNamespace("BcvKn5(wLkh:/}$:");
      assertNotNull(namespace0);
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      
      Element element0 = new Element("C6", namespace0);
      assertNotNull(element0);
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      
      Element element1 = element0.setAttributes((List) null);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("C6", element1.getName());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, element1);
      assertNotNull(nodePointer0);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("C6", element1.getName());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isNode());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      
      Comment comment0 = new Comment("http://www.w3.org/XML/1998/namespace");
      assertNotNull(comment0);
      assertEquals("http://www.w3.org/XML/1998/namespace", comment0.getValue());
      assertEquals("http://www.w3.org/XML/1998/namespace", comment0.getText());
      
      Comment comment1 = comment0.setText("http://www.w3.org/XML/1998/namespace");
      assertNotNull(comment1);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
      assertEquals("http://www.w3.org/XML/1998/namespace", comment0.getValue());
      assertEquals("http://www.w3.org/XML/1998/namespace", comment0.getText());
      assertEquals("http://www.w3.org/XML/1998/namespace", comment1.getText());
      assertEquals("http://www.w3.org/XML/1998/namespace", comment1.getValue());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(nodePointer0, comment1);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("C6", element1.getName());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isNode());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertEquals("http://www.w3.org/XML/1998/namespace", comment0.getValue());
      assertEquals("http://www.w3.org/XML/1998/namespace", comment0.getText());
      assertEquals("http://www.w3.org/XML/1998/namespace", comment1.getText());
      assertEquals("http://www.w3.org/XML/1998/namespace", comment1.getValue());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      nodePointer0.setValue((Object) null);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("C6", element1.getName());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isNode());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer1));
      
      int int0 = jDOMNodePointer1.getLength();
      assertEquals(1, int0);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("C6", element1.getName());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isNode());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertEquals("http://www.w3.org/XML/1998/namespace", comment0.getValue());
      assertEquals("http://www.w3.org/XML/1998/namespace", comment0.getText());
      assertEquals("http://www.w3.org/XML/1998/namespace", comment1.getText());
      assertEquals("http://www.w3.org/XML/1998/namespace", comment1.getValue());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      boolean boolean0 = jDOMNodePointer0.testNode((NodeTest) nodeNameTest0);
      assertFalse(boolean0);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      
      QName qName1 = nodePointer0.getName();
      assertNotNull(qName1);
      assertNotSame(qName1, qName0);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(qName0, qName1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("C6", qName1.toString());
      assertEquals("C6", qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals("C6", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("C6", element1.getName());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isNode());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer1));
      
      // Undeclared exception!
      try { 
        nodePointer0.isLanguage((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("oO}n");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      Comment comment0 = new Comment("%{q.4A):YRvF");
      assertNotNull(comment0);
      assertEquals("%{q.4A):YRvF", comment0.getText());
      assertEquals("%{q.4A):YRvF", comment0.getValue());
      
      Comment comment1 = comment0.setText("]fS.s/f");
      assertNotNull(comment1);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
      assertEquals("]fS.s/f", comment0.getValue());
      assertEquals("]fS.s/f", comment0.getText());
      assertEquals("]fS.s/f", comment1.getText());
      assertEquals("]fS.s/f", comment1.getValue());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(comment1, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("]fS.s/f", comment0.getValue());
      assertEquals("]fS.s/f", comment0.getText());
      assertEquals("]fS.s/f", comment1.getText());
      assertEquals("]fS.s/f", comment1.getValue());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      
      QName qName0 = new QName("%{q.4A):YRvF", "xFjr1L+^");
      assertNotNull(qName0);
      assertEquals("%{q.4A):YRvF:xFjr1L+^", qName0.toString());
      assertEquals("%{q.4A):YRvF", qName0.getPrefix());
      assertEquals("xFjr1L+^", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, " K3+}'picr:8)Yb");
      assertNotNull(nodeNameTest0);
      assertEquals("%{q.4A):YRvF:xFjr1L+^", qName0.toString());
      assertEquals("%{q.4A):YRvF", qName0.getPrefix());
      assertEquals("xFjr1L+^", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(" K3+}'picr:8)Yb", nodeNameTest0.getNamespaceURI());
      assertEquals("%{q.4A):YRvF:xFjr1L+^", nodeNameTest0.toString());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, "]fS.s/f");
      assertNotNull(beanPointer0);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("]fS.s/f", comment0.getValue());
      assertEquals("]fS.s/f", comment0.getText());
      assertEquals("]fS.s/f", comment1.getText());
      assertEquals("]fS.s/f", comment1.getValue());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("%{q.4A):YRvF:xFjr1L+^", qName0.toString());
      assertEquals("%{q.4A):YRvF", qName0.getPrefix());
      assertEquals("xFjr1L+^", qName0.getName());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.remove();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot remove root JDOM node
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      
      NodePointer nodePointer0 = variablePointer0.namespacePointer("$4`J{E.");
      assertNull(nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, (Object) null);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      NodePointer nodePointer1 = jDOMNodePointer0.getValuePointer();
      assertNotNull(nodePointer1);
      assertSame(jDOMNodePointer0, nodePointer1);
      assertSame(nodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, nodePointer1.getLength());
      assertNull(nodePointer1.getNamespaceURI());
      assertFalse(nodePointer1.isCollection());
      assertFalse(nodePointer1.isAttribute());
      assertTrue(nodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, nodePointer1.getIndex());
      assertTrue(nodePointer1.isRoot());
      assertFalse(nodePointer1.isContainer());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, locale0, "http://www.w3.org/XML/1998/namespace");
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)nodePointer1));
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer((Object) variablePointer0, locale0);
      assertNotNull(jDOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertTrue(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isContainer());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)nodePointer1));
      
      boolean boolean0 = jDOMNodePointer1.equals(jDOMNodePointer0);
      assertFalse(boolean0);
      assertSame(jDOMNodePointer0, nodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, nodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)nodePointer1));
      
      Object object0 = jDOMNodePointer0.getImmediateNode();
      assertNull(object0);
      assertSame(jDOMNodePointer0, nodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      
      int int0 = jDOMNodePointer2.compareChildNodePointers(jDOMNodePointer1, jDOMNodePointer1);
      assertEquals(0, int0);
      assertSame(jDOMNodePointer0, nodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, nodePointer1);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer2, nodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertTrue(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isContainer());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)nodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)nodePointer1));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      Object object0 = jDOMNodePointer0.getNodeValue();
      assertNull(object0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/2000/xmlns/");
      assertNotNull(qName0);
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      assertNotNull(nodeNameTest0);
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Namespace namespace0 = Namespace.getNamespace("BcvKn5(wLkh:/}$:");
      assertNotNull(namespace0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      
      Element element0 = new Element("C6", namespace0);
      assertNotNull(element0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element0.getName());
      
      Element element1 = element0.setAttributes((List) null);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertFalse(element1.isRootElement());
      assertEquals("C6", element1.getName());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, element1);
      assertNotNull(nodePointer0);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertFalse(element1.isRootElement());
      assertEquals("C6", element1.getName());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertTrue(nodePointer0.isNode());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(nodePointer0, element0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertFalse(element1.isRootElement());
      assertEquals("C6", element1.getName());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertTrue(nodePointer0.isNode());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      
      jDOMNodePointer1.setValue(cDATA0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals(1, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertFalse(element1.isRootElement());
      assertEquals(1, element1.getContentSize());
      assertEquals("C6", element1.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertTrue(nodePointer0.isNode());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      
      int int0 = jDOMNodePointer1.getLength();
      assertEquals(1, int0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals(1, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertFalse(element1.isRootElement());
      assertEquals(1, element1.getContentSize());
      assertEquals("C6", element1.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertTrue(nodePointer0.isNode());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      
      boolean boolean0 = jDOMNodePointer1.testNode((NodeTest) nodeNameTest0);
      assertFalse(boolean0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals(1, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertFalse(element1.isRootElement());
      assertEquals(1, element1.getContentSize());
      assertEquals("C6", element1.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertTrue(nodePointer0.isNode());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      
      QName qName1 = jDOMNodePointer1.getName();
      assertNotNull(qName1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(qName0, qName1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals(1, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertFalse(element1.isRootElement());
      assertEquals(1, element1.getContentSize());
      assertEquals("C6", element1.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertTrue(nodePointer0.isNode());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("BcvKn5(wLkh:/}$:", jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertNull(qName1.getPrefix());
      assertEquals("C6", qName1.getName());
      assertEquals("C6", qName1.toString());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      assertFalse(qName1.equals((Object)qName0));
      
      boolean boolean1 = nodePointer0.isLanguage("wG|T");
      assertFalse(boolean1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(qName0, qName1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertNotSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("", namespace0.getPrefix());
      assertEquals("BcvKn5(wLkh:/}$:", namespace0.getURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("BcvKn5(wLkh:/}$:", element0.getNamespaceURI());
      assertEquals(1, element0.getContentSize());
      assertEquals("C6", element0.getName());
      assertEquals("BcvKn5(wLkh:/}$:", element1.getNamespaceURI());
      assertFalse(element1.isRootElement());
      assertEquals(1, element1.getContentSize());
      assertEquals("C6", element1.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertTrue(nodePointer0.isNode());
      assertEquals("BcvKn5(wLkh:/}$:", nodePointer0.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(nodePointer0.equals((Object)jDOMNodePointer0));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CDATA cDATA0 = new CDATA("lang");
      assertNotNull(cDATA0);
      assertEquals("lang", cDATA0.getText());
      assertEquals("lang", cDATA0.getValue());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("lang", cDATA0.getText());
      assertEquals("lang", cDATA0.getValue());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      
      NamespaceResolver namespaceResolver0 = jDOMNodePointer0.getNamespaceResolver();
      assertNotNull(namespaceResolver0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("lang", cDATA0.getText());
      assertEquals("lang", cDATA0.getValue());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(namespaceResolver0.isSealed());
      
      Locale locale1 = Locale.forLanguageTag("]");
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.toString());
      assertFalse(locale1.equals((Object)locale0));
      
      jDOMNodePointer0.setValue("lang");
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("lang", cDATA0.getText());
      assertEquals("lang", cDATA0.getValue());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(locale0.equals((Object)locale1));
      
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      
      NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
      assertNotNull(nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      
      NamespaceResolver namespaceResolver1 = jDOMNodePointer0.getNamespaceResolver();
      assertNotNull(namespaceResolver1);
      assertNotSame(locale0, locale1);
      assertSame(namespaceResolver1, namespaceResolver0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("lang", cDATA0.getText());
      assertEquals("lang", cDATA0.getValue());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(namespaceResolver1.isSealed());
      assertFalse(locale0.equals((Object)locale1));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      NamespaceResolver namespaceResolver2 = new NamespaceResolver();
      assertNotNull(namespaceResolver2);
      assertFalse(namespaceResolver2.isSealed());
      assertFalse(namespaceResolver2.equals((Object)namespaceResolver0));
      assertFalse(namespaceResolver2.equals((Object)namespaceResolver1));
      
      NamespaceResolver namespaceResolver3 = new NamespaceResolver();
      assertNotNull(namespaceResolver3);
      assertFalse(namespaceResolver3.isSealed());
      assertFalse(namespaceResolver3.equals((Object)namespaceResolver0));
      assertFalse(namespaceResolver3.equals((Object)namespaceResolver2));
      assertFalse(namespaceResolver3.equals((Object)namespaceResolver1));
      
      variablePointer0.setNamespaceResolver(namespaceResolver3);
      assertNotSame(namespaceResolver3, namespaceResolver0);
      assertNotSame(namespaceResolver3, namespaceResolver2);
      assertNotSame(namespaceResolver3, namespaceResolver1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(namespaceResolver3.isSealed());
      assertFalse(namespaceResolver3.equals((Object)namespaceResolver0));
      assertFalse(namespaceResolver3.equals((Object)namespaceResolver2));
      assertFalse(namespaceResolver3.equals((Object)namespaceResolver1));
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertNotSame(locale0, locale1);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(set0.contains("]"));
      
      Comment comment0 = new Comment("http://www.w3.org/XML/1998/namespace");
      assertNotNull(comment0);
      assertEquals("http://www.w3.org/XML/1998/namespace", comment0.getValue());
      assertEquals("http://www.w3.org/XML/1998/namespace", comment0.getText());
      
      jDOMNodePointer0.setValue(object0);
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(locale0.equals((Object)locale1));
      
      Object object1 = jDOMNodePointer0.getValue();
      assertNotNull(object1);
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(locale0.equals((Object)locale1));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, (Object) null);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      
      Object object0 = jDOMNodePointer0.getValue();
      assertNull(object0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      
      QName qName0 = jDOMNodePointer0.getName();
      assertNotNull(qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      
      String string0 = jDOMNodePointer0.getNamespaceURI("\"?fbL_#S.|");
      assertNull(string0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createChild((JXPathContext) null, qName0, 2320);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{[HEUpi&itE(ISnYgTM");
      assertFalse(boolean0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      
      CDATA cDATA1 = (CDATA)jDOMNodePointer0.getNodeValue();
      assertNotNull(cDATA1);
      assertSame(cDATA0, cDATA1);
      assertSame(cDATA1, cDATA0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals("", cDATA1.getText());
      assertEquals("", cDATA1.getValue());
      
      Locale locale1 = new Locale("G'-FNeRS", "", "java.lang.Object@0000000006");
      assertNotNull(locale1);
      assertEquals("g'-fners", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertFalse(locale1.equals((Object)locale0));
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer("", locale1, "http://www.w3.org/XML/1998/namespace");
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("g'-fners", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(jDOMNodePointer0, (Object) null);
      assertNotNull(jDOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertTrue(jDOMNodePointer2.isNode());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      
      int int0 = jDOMNodePointer1.getLength();
      assertEquals(1, int0);
      assertNotSame(locale1, locale0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("g'-fners", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      
      boolean boolean1 = jDOMNodePointer1.testNode((NodeTest) null);
      assertTrue(boolean1);
      assertNotSame(locale1, locale0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("g'-fners", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{[HEUpi&itE(ISnYgTM");
      assertFalse(boolean0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      
      QName qName0 = jDOMNodePointer0.getName();
      assertNotNull(qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      
      CDATA cDATA1 = (CDATA)jDOMNodePointer0.getNodeValue();
      assertNotNull(cDATA1);
      assertSame(cDATA0, cDATA1);
      assertSame(cDATA1, cDATA0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals("", cDATA1.getText());
      assertEquals("", cDATA1.getValue());
      
      boolean boolean1 = jDOMNodePointer0.isLanguage("");
      assertTrue(boolean1);
      assertSame(cDATA0, cDATA1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(boolean1 == boolean0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, cDATA0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(cDATA0, locale0);
      assertNotNull(jDOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertTrue(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isNode());
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      
      String string0 = JDOMNodePointer.getLocalName(jDOMNodePointer0);
      assertNull(string0);
      assertSame(cDATA0, cDATA1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName1 = new QName("H`*Z!2");
      assertNotNull(qName1);
      assertEquals("H`*Z!2", qName1.getName());
      assertEquals("H`*Z!2", qName1.toString());
      assertNull(qName1.getPrefix());
      assertFalse(qName1.equals((Object)qName0));
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName1);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("H`*Z!2", qName1.getName());
      assertEquals("H`*Z!2", qName1.toString());
      assertNull(qName1.getPrefix());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(qName1.equals((Object)qName0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      QName qName2 = jDOMNodePointer1.getName();
      assertNotNull(qName2);
      assertSame(cDATA0, cDATA1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(qName2, qName0);
      assertNotSame(qName2, qName1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertNull(qName2.toString());
      assertNull(qName2.getName());
      assertNull(qName2.getPrefix());
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName2, "");
      assertNotNull(nodeNameTest0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertNull(qName2.toString());
      assertNull(qName2.getName());
      assertNull(qName2.getPrefix());
      assertNull(nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      
      boolean boolean2 = JDOMNodePointer.testNode((NodePointer) variablePointer0, object0, (NodeTest) nodeNameTest0);
      assertFalse(boolean2);
      assertSame(cDATA0, cDATA1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(qName1, qName2);
      assertNotSame(qName1, qName0);
      assertNotSame(qName2, qName0);
      assertNotSame(qName2, qName1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals("H`*Z!2", qName1.getName());
      assertEquals("H`*Z!2", qName1.toString());
      assertNull(qName1.getPrefix());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNull(qName2.toString());
      assertNull(qName2.getName());
      assertNull(qName2.getPrefix());
      assertNull(nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(qName1.equals((Object)qName2));
      assertFalse(qName1.equals((Object)qName0));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      String string0 = "{[HEUpi&itE(ISnYgTM";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{[HEUpi&itE(ISnYgTM");
      assertFalse(boolean0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      
      CDATA cDATA1 = (CDATA)jDOMNodePointer0.getNodeValue();
      assertNotNull(cDATA1);
      assertSame(cDATA0, cDATA1);
      assertSame(cDATA1, cDATA0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("", cDATA1.getText());
      assertEquals("", cDATA1.getValue());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CDATA cDATA0 = new CDATA("lang");
      assertNotNull(cDATA0);
      assertEquals("lang", cDATA0.getValue());
      assertEquals("lang", cDATA0.getText());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("lang", cDATA0.getValue());
      assertEquals("lang", cDATA0.getText());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      Locale locale1 = Locale.forLanguageTag("]");
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertFalse(locale1.equals((Object)locale0));
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace");
      assertNotNull(qName0);
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertEquals("http", qName0.getPrefix());
      assertEquals("//www.w3.org/XML/1998/namespace", qName0.getName());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer((Object) null, locale1, "The name \"");
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      QName qName1 = new QName("_=;", "S@tG}h(s`^iU$.4U");
      assertNotNull(qName1);
      assertEquals("S@tG}h(s`^iU$.4U", qName1.getName());
      assertEquals("_=;", qName1.getPrefix());
      assertEquals("_=;:S@tG}h(s`^iU$.4U", qName1.toString());
      assertFalse(qName1.equals((Object)qName0));
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Mo?(kwkHh/yd&.H*Fcd");
      assertNotNull(nodeNameTest0);
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertEquals("http", qName0.getPrefix());
      assertEquals("//www.w3.org/XML/1998/namespace", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Mo?(kwkHh/yd&.H*Fcd", nodeNameTest0.getNamespaceURI());
      assertFalse(qName0.equals((Object)qName1));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      jDOMNodePointer0.setValue(object0);
      assertNotSame(locale0, locale1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      
      int int0 = jDOMNodePointer1.getLength();
      assertEquals(1, int0);
      assertNotSame(locale1, locale0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      boolean boolean0 = jDOMNodePointer1.testNode((NodeTest) nodeNameTest0);
      assertFalse(boolean0);
      assertNotSame(locale1, locale0);
      assertNotSame(qName0, qName1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertEquals("http", qName0.getPrefix());
      assertEquals("//www.w3.org/XML/1998/namespace", qName0.getName());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals("http://www.w3.org/XML/1998/namespace", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Mo?(kwkHh/yd&.H*Fcd", nodeNameTest0.getNamespaceURI());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      NodeIterator nodeIterator0 = jDOMNodePointer0.attributeIterator(qName0);
      assertNotNull(nodeIterator0);
      assertNotSame(locale0, locale1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(qName0, qName1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertEquals("http", qName0.getPrefix());
      assertEquals("//www.w3.org/XML/1998/namespace", qName0.getName());
      assertEquals(0, nodeIterator0.getPosition());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(qName0.equals((Object)qName1));
      
      Object object1 = jDOMNodePointer1.getBaseValue();
      assertNull(object1);
      assertNotSame(locale1, locale0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      Comment comment0 = new Comment("http://www.w3.org/XML/1998/namespace");
      assertNotNull(comment0);
      assertEquals("http://www.w3.org/XML/1998/namespace", comment0.getValue());
      assertEquals("http://www.w3.org/XML/1998/namespace", comment0.getText());
      
      boolean boolean1 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) comment0, (NodeTest) nodeNameTest0);
      assertFalse(boolean1);
      assertNotSame(locale0, locale1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(qName0, qName1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertEquals("http", qName0.getPrefix());
      assertEquals("//www.w3.org/XML/1998/namespace", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Mo?(kwkHh/yd&.H*Fcd", nodeNameTest0.getNamespaceURI());
      assertEquals("http://www.w3.org/XML/1998/namespace", comment0.getValue());
      assertEquals("http://www.w3.org/XML/1998/namespace", comment0.getText());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(qName0.equals((Object)qName1));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "]";
      QName qName0 = new QName("]", "]");
      assertNotNull(qName0);
      assertEquals("]:]", qName0.toString());
      assertEquals("]", qName0.getName());
      assertEquals("]", qName0.getPrefix());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("]:]", qName0.toString());
      assertEquals("]", qName0.getName());
      assertEquals("]", qName0.getPrefix());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      
      NodeTest nodeTest0 = null;
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) variablePointer0, (Object) "]", (NodeTest) null);
      assertTrue(boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("]:]", qName0.toString());
      assertEquals("]", qName0.getName());
      assertEquals("]", qName0.getPrefix());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.util.Locale@0000000003");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("]", locale0, "<<unknown namespace>>");
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue(variablePointer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.jdom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{[HEUpi&itE(ISnYgTM");
      assertFalse(boolean0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      
      CDATA cDATA1 = (CDATA)jDOMNodePointer0.getNodeValue();
      assertNotNull(cDATA1);
      assertSame(cDATA0, cDATA1);
      assertSame(cDATA1, cDATA0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("", cDATA1.getText());
      assertEquals("", cDATA1.getValue());
      
      Locale locale1 = new Locale("G'-FNeRS", "", "java.lang.Object@0000000006");
      assertNotNull(locale1);
      assertEquals("", locale1.getCountry());
      assertEquals("g'-fners", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertFalse(locale1.equals((Object)locale0));
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer("", locale1, "http://www.w3.org/XML/1998/namespace");
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale1.getCountry());
      assertEquals("g'-fners", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(jDOMNodePointer0, (Object) null);
      assertNotNull(jDOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer2.isCollection());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      
      Comment comment0 = new Comment("http://www.w3.org/XML/1998/namespace");
      assertNotNull(comment0);
      assertEquals("http://www.w3.org/XML/1998/namespace", comment0.getValue());
      assertEquals("http://www.w3.org/XML/1998/namespace", comment0.getText());
      
      Object object0 = jDOMNodePointer1.getValue();
      assertNull(object0);
      assertNotSame(locale1, locale0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale1.getCountry());
      assertEquals("g'-fners", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1180);
      assertNotNull(nodeTypeTest0);
      assertEquals(1180, nodeTypeTest0.getNodeType());
      
      boolean boolean1 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) "G'-FNeRS", (NodeTest) nodeTypeTest0);
      assertFalse(boolean1);
      assertSame(cDATA0, cDATA1);
      assertNotSame(locale0, locale1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1180, nodeTypeTest0.getNodeType());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(object0, locale1, "m,['NI|*qWv8");
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      
      QName qName0 = new QName("<<unknown namespace>>");
      assertNotNull(qName0);
      assertEquals("<<unknown namespace>>", qName0.toString());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertNull(qName0.getPrefix());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, jDOMNodePointer0);
      assertNotNull(beanPointer0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("<<unknown namespace>>", qName0.toString());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isRoot());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      
      Object object1 = jDOMNodePointer0.getValue();
      assertNull(object1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      
      boolean boolean0 = jDOMNodePointer0.equals(locale0);
      assertFalse(boolean0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      
      CDATA cDATA0 = new CDATA("http://www.w3.org/2000/xmlns/");
      assertNotNull(cDATA0);
      assertEquals("http://www.w3.org/2000/xmlns/", cDATA0.getValue());
      assertEquals("http://www.w3.org/2000/xmlns/", cDATA0.getText());
      
      CDATA cDATA1 = (CDATA)cDATA0.setText("<<unknown namespace>>");
      assertNotNull(cDATA1);
      assertSame(cDATA0, cDATA1);
      assertSame(cDATA1, cDATA0);
      assertEquals("<<unknown namespace>>", cDATA0.getValue());
      assertEquals("<<unknown namespace>>", cDATA0.getText());
      assertEquals("<<unknown namespace>>", cDATA1.getText());
      assertEquals("<<unknown namespace>>", cDATA1.getValue());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) cDATA1);
      assertNotNull(jXPathContextReferenceImpl0);
      assertSame(cDATA0, cDATA1);
      assertSame(cDATA1, cDATA0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("<<unknown namespace>>", cDATA0.getValue());
      assertEquals("<<unknown namespace>>", cDATA0.getText());
      assertEquals("<<unknown namespace>>", cDATA1.getText());
      assertEquals("<<unknown namespace>>", cDATA1.getValue());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)jXPathContextReferenceImpl0.getRelativeContext(jDOMNodePointer0);
      assertNotNull(jXPathContextReferenceImpl1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertSame(cDATA0, cDATA1);
      assertSame(cDATA1, cDATA0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("<<unknown namespace>>", cDATA0.getValue());
      assertEquals("<<unknown namespace>>", cDATA0.getText());
      assertEquals("<<unknown namespace>>", cDATA1.getText());
      assertEquals("<<unknown namespace>>", cDATA1.getValue());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = (JXPathContextReferenceImpl)jXPathContextReferenceImpl1.getParentContext();
      assertNotNull(jXPathContextReferenceImpl2);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertSame(cDATA0, cDATA1);
      assertSame(cDATA1, cDATA0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("<<unknown namespace>>", cDATA0.getValue());
      assertEquals("<<unknown namespace>>", cDATA0.getText());
      assertEquals("<<unknown namespace>>", cDATA1.getText());
      assertEquals("<<unknown namespace>>", cDATA1.getValue());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3253);
      assertNotNull(nodeTypeTest0);
      assertEquals(3253, nodeTypeTest0.getNodeType());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createChild((JXPathContext) jXPathContextReferenceImpl2, qName0, 2817, (Object) nodeTypeTest0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: id('m,[&apos;NI|*qWv8')
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      
      QName qName0 = new QName("{[HEUpi&itE(ISnYgTM");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("{[HEUpi&itE(ISnYgTM", qName0.toString());
      assertEquals("{[HEUpi&itE(ISnYgTM", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("{[HEUpi&itE(ISnYgTM", qName0.toString());
      assertEquals("{[HEUpi&itE(ISnYgTM", qName0.getName());
      assertEquals("{[HEUpi&itE(ISnYgTM", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeNameTest0, locale0, "?H*2a#f.rDcwyESi");
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("{[HEUpi&itE(ISnYgTM", qName0.toString());
      assertEquals("{[HEUpi&itE(ISnYgTM", qName0.getName());
      assertEquals("{[HEUpi&itE(ISnYgTM", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      boolean boolean0 = jDOMNodePointer0.isCollection();
      assertFalse(boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("{[HEUpi&itE(ISnYgTM", qName0.toString());
      assertEquals("{[HEUpi&itE(ISnYgTM", qName0.getName());
      assertEquals("{[HEUpi&itE(ISnYgTM", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      boolean boolean1 = jDOMNodePointer0.isCollection();
      assertFalse(boolean1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("{[HEUpi&itE(ISnYgTM", qName0.toString());
      assertEquals("{[HEUpi&itE(ISnYgTM", qName0.getName());
      assertEquals("{[HEUpi&itE(ISnYgTM", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(boolean1 == boolean0);
      
      NamespaceResolver namespaceResolver0 = jDOMNodePointer0.getNamespaceResolver();
      assertNotNull(namespaceResolver0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("{[HEUpi&itE(ISnYgTM", qName0.toString());
      assertEquals("{[HEUpi&itE(ISnYgTM", qName0.getName());
      assertEquals("{[HEUpi&itE(ISnYgTM", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(namespaceResolver0.isSealed());
      
      QName qName1 = jDOMNodePointer0.getName();
      assertNotNull(qName1);
      assertNotSame(qName0, qName1);
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("{[HEUpi&itE(ISnYgTM", qName0.toString());
      assertEquals("{[HEUpi&itE(ISnYgTM", qName0.getName());
      assertEquals("{[HEUpi&itE(ISnYgTM", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(qName1.getName());
      assertNull(qName1.getPrefix());
      assertNull(qName1.toString());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, object0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("{[HEUpi&itE(ISnYgTM", qName0.toString());
      assertEquals("{[HEUpi&itE(ISnYgTM", qName0.getName());
      assertEquals("{[HEUpi&itE(ISnYgTM", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      CDATA cDATA0 = new CDATA("{[HEUpi&itE(ISnYgTM");
      assertNotNull(cDATA0);
      assertEquals("{[HEUpi&itE(ISnYgTM", cDATA0.getValue());
      assertEquals("{[HEUpi&itE(ISnYgTM", cDATA0.getText());
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(cDATA0, locale0, "No write method");
      assertNotNull(jDOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      assertEquals("{[HEUpi&itE(ISnYgTM", cDATA0.getValue());
      assertEquals("{[HEUpi&itE(ISnYgTM", cDATA0.getText());
      assertFalse(jDOMNodePointer2.isCollection());
      assertTrue(jDOMNodePointer2.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertTrue(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(jDOMNodePointer2.isContainer());
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      
      // Undeclared exception!
      try { 
        jDOMNodePointer2.createChild((JXPathContext) null, qName1, Integer.MIN_VALUE, (Object) "Cy1t");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CDATA cDATA0 = new CDATA("lang");
      assertNotNull(cDATA0);
      assertEquals("lang", cDATA0.getValue());
      assertEquals("lang", cDATA0.getText());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("lang", cDATA0.getValue());
      assertEquals("lang", cDATA0.getText());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      
      QName qName0 = new QName("<<unknown namespace>>");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("<<unknown namespace>>", qName0.toString());
      
      String string0 = jDOMNodePointer0.asPath();
      assertNotNull(string0);
      assertEquals("/text()[1]", string0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("lang", cDATA0.getValue());
      assertEquals("lang", cDATA0.getText());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "3/");
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("<<unknown namespace>>", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("<<unknown namespace>>", nodeNameTest0.toString());
      assertEquals("3/", nodeNameTest0.getNamespaceURI());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, qName0);
      assertNotNull(beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("lang", cDATA0.getValue());
      assertEquals("lang", cDATA0.getText());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(qName0.getPrefix());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("<<unknown namespace>>", qName0.toString());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.remove();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot remove root JDOM node
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      QName qName0 = new QName("{[HEUpi&itE(ISnYgTM");
      assertNotNull(qName0);
      assertEquals("{[HEUpi&itE(ISnYgTM", qName0.getName());
      assertEquals("{[HEUpi&itE(ISnYgTM", qName0.toString());
      assertNull(qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("{[HEUpi&itE(ISnYgTM", qName0.getName());
      assertEquals("{[HEUpi&itE(ISnYgTM", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("{[HEUpi&itE(ISnYgTM", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeNameTest0, locale0, "?H*2a#f.rDcwyESi");
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("{[HEUpi&itE(ISnYgTM", qName0.getName());
      assertEquals("{[HEUpi&itE(ISnYgTM", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("{[HEUpi&itE(ISnYgTM", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      
      boolean boolean0 = jDOMNodePointer0.isCollection();
      assertFalse(boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("{[HEUpi&itE(ISnYgTM", qName0.getName());
      assertEquals("{[HEUpi&itE(ISnYgTM", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("{[HEUpi&itE(ISnYgTM", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      
      boolean boolean1 = jDOMNodePointer0.isCollection();
      assertFalse(boolean1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("{[HEUpi&itE(ISnYgTM", qName0.getName());
      assertEquals("{[HEUpi&itE(ISnYgTM", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("{[HEUpi&itE(ISnYgTM", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(boolean1 == boolean0);
      
      NamespaceResolver namespaceResolver0 = jDOMNodePointer0.getNamespaceResolver();
      assertNotNull(namespaceResolver0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("{[HEUpi&itE(ISnYgTM", qName0.getName());
      assertEquals("{[HEUpi&itE(ISnYgTM", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("{[HEUpi&itE(ISnYgTM", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(namespaceResolver0.isSealed());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Cy1t");
      assertNotNull(processingInstructionTest0);
      assertEquals("Cy1t", processingInstructionTest0.getTarget());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("{[HEUpi&itE(ISnYgTM", qName0.getName());
      assertEquals("{[HEUpi&itE(ISnYgTM", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      
      NodeIterator nodeIterator0 = jDOMNodePointer0.attributeIterator(qName0);
      assertNotNull(nodeIterator0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("{[HEUpi&itE(ISnYgTM", qName0.getName());
      assertEquals("{[HEUpi&itE(ISnYgTM", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("{[HEUpi&itE(ISnYgTM", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(0, nodeIterator0.getPosition());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.compareChildNodePointers(variablePointer0, variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: {[HEUpi&itE(ISnYgTM
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      QName qName0 = new QName("d_{0m63n$+NT");
      assertNotNull(qName0);
      assertEquals("d_{0m63n$+NT", qName0.getName());
      assertEquals("d_{0m63n$+NT", qName0.toString());
      assertNull(qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("d_{0m63n$+NT", qName0.getName());
      assertEquals("d_{0m63n$+NT", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("d_{0m63n$+NT", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CDATA cDATA0 = new CDATA("?H*2a#f.rDcwyESi");
      assertNotNull(cDATA0);
      assertEquals("?H*2a#f.rDcwyESi", cDATA0.getValue());
      assertEquals("?H*2a#f.rDcwyESi", cDATA0.getText());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0, "YNk+1;_kKh\"/q[I`$td");
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("?H*2a#f.rDcwyESi", cDATA0.getValue());
      assertEquals("?H*2a#f.rDcwyESi", cDATA0.getText());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      
      boolean boolean0 = jDOMNodePointer0.isCollection();
      assertFalse(boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("?H*2a#f.rDcwyESi", cDATA0.getValue());
      assertEquals("?H*2a#f.rDcwyESi", cDATA0.getText());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      
      boolean boolean1 = jDOMNodePointer0.isCollection();
      assertFalse(boolean1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("?H*2a#f.rDcwyESi", cDATA0.getValue());
      assertEquals("?H*2a#f.rDcwyESi", cDATA0.getText());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(boolean1 == boolean0);
      
      NamespaceResolver namespaceResolver0 = jDOMNodePointer0.getNamespaceResolver();
      assertNotNull(namespaceResolver0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("?H*2a#f.rDcwyESi", cDATA0.getValue());
      assertEquals("?H*2a#f.rDcwyESi", cDATA0.getText());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(namespaceResolver0.isSealed());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(".,/$j,u");
      assertNotNull(processingInstructionTest0);
      assertEquals(".,/$j,u", processingInstructionTest0.getTarget());
      
      String string0 = processingInstructionTest0.toString();
      assertNotNull(string0);
      assertEquals("processing-instruction('.,/$j,u')", string0);
      assertEquals(".,/$j,u", processingInstructionTest0.getTarget());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer("org.apache.commons.jxpath.ri.compiler.NameAttributeTest", locale0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      boolean boolean2 = jDOMNodePointer1.equals(jDOMNodePointer0);
      assertFalse(boolean2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("?H*2a#f.rDcwyESi", cDATA0.getValue());
      assertEquals("?H*2a#f.rDcwyESi", cDATA0.getText());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{[HEUpi&itE(ISnYgTM");
      assertFalse(boolean0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      
      CDATA cDATA1 = (CDATA)jDOMNodePointer0.getNodeValue();
      assertNotNull(cDATA1);
      assertSame(cDATA0, cDATA1);
      assertSame(cDATA1, cDATA0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals("", cDATA1.getText());
      assertEquals("", cDATA1.getValue());
      
      Locale locale1 = new Locale("G'-FNeRS", "", "java.lang.Object@0000000006");
      assertNotNull(locale1);
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("g'-fners", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer("", locale1, "http://www.w3.org/XML/1998/namespace");
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("g'-fners", locale1.getLanguage());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(jDOMNodePointer0, (Object) null);
      assertNotNull(jDOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer2.isContainer());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      
      Comment comment0 = new Comment("http://www.w3.org/XML/1998/namespace");
      assertNotNull(comment0);
      assertEquals("http://www.w3.org/XML/1998/namespace", comment0.getText());
      assertEquals("http://www.w3.org/XML/1998/namespace", comment0.getValue());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer2.setValue(comment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Locale locale0 = new Locale("ifWs", "0zI");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("0ZI", locale0.getCountry());
      assertEquals("ifws_0ZI", locale0.toString());
      assertEquals("ifws", locale0.getLanguage());
      
      NullPointer nullPointer0 = (NullPointer)NodePointer.newNodePointer((QName) null, (Object) null, locale0);
      assertNotNull(nullPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("0ZI", locale0.getCountry());
      assertEquals("ifws_0ZI", locale0.toString());
      assertEquals("ifws", locale0.getLanguage());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isLeaf());
      
      CDATA cDATA0 = new CDATA("i}&s");
      assertNotNull(cDATA0);
      assertEquals("i}&s", cDATA0.getValue());
      assertEquals("i}&s", cDATA0.getText());
      
      String string0 = "jqAq,Wh8H\"L^Tsxw";
      CDATA cDATA1 = (CDATA)cDATA0.setText("jqAq,Wh8H\"L^Tsxw");
      assertNotNull(cDATA1);
      assertSame(cDATA0, cDATA1);
      assertSame(cDATA1, cDATA0);
      assertEquals("jqAq,Wh8H\"L^Tsxw", cDATA0.getValue());
      assertEquals("jqAq,Wh8H\"L^Tsxw", cDATA0.getText());
      assertEquals("jqAq,Wh8H\"L^Tsxw", cDATA1.getValue());
      assertEquals("jqAq,Wh8H\"L^Tsxw", cDATA1.getText());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nullPointer0, cDATA1);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("0ZI", locale0.getCountry());
      assertEquals("ifws_0ZI", locale0.toString());
      assertEquals("ifws", locale0.getLanguage());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isLeaf());
      assertEquals("jqAq,Wh8H\"L^Tsxw", cDATA0.getValue());
      assertEquals("jqAq,Wh8H\"L^Tsxw", cDATA0.getText());
      assertEquals("jqAq,Wh8H\"L^Tsxw", cDATA1.getValue());
      assertEquals("jqAq,Wh8H\"L^Tsxw", cDATA1.getText());
      assertFalse(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      
      CDATA cDATA2 = (CDATA)jDOMNodePointer0.getImmediateNode();
      assertNotNull(cDATA2);
      assertSame(cDATA0, cDATA1);
      assertSame(cDATA0, cDATA2);
      assertSame(cDATA1, cDATA0);
      assertSame(cDATA1, cDATA2);
      assertSame(cDATA2, cDATA1);
      assertSame(cDATA2, cDATA0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("0ZI", locale0.getCountry());
      assertEquals("ifws_0ZI", locale0.toString());
      assertEquals("ifws", locale0.getLanguage());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isLeaf());
      assertEquals("jqAq,Wh8H\"L^Tsxw", cDATA0.getValue());
      assertEquals("jqAq,Wh8H\"L^Tsxw", cDATA0.getText());
      assertEquals("jqAq,Wh8H\"L^Tsxw", cDATA1.getValue());
      assertEquals("jqAq,Wh8H\"L^Tsxw", cDATA1.getText());
      assertFalse(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("jqAq,Wh8H\"L^Tsxw", cDATA2.getText());
      assertEquals("jqAq,Wh8H\"L^Tsxw", cDATA2.getValue());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      assertNotNull(nodeTypeTest0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      
      String string1 = nodeTypeTest0.toString();
      assertNotNull(string1);
      assertEquals("node()", string1);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) nodeTypeTest0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
      assertSame(cDATA0, cDATA1);
      assertSame(cDATA0, cDATA2);
      assertSame(cDATA1, cDATA0);
      assertSame(cDATA1, cDATA2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("0ZI", locale0.getCountry());
      assertEquals("ifws_0ZI", locale0.toString());
      assertEquals("ifws", locale0.getLanguage());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isLeaf());
      assertEquals("jqAq,Wh8H\"L^Tsxw", cDATA0.getValue());
      assertEquals("jqAq,Wh8H\"L^Tsxw", cDATA0.getText());
      assertEquals("jqAq,Wh8H\"L^Tsxw", cDATA1.getValue());
      assertEquals("jqAq,Wh8H\"L^Tsxw", cDATA1.getText());
      assertFalse(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, nodeTypeTest0.getNodeType());
      
      String string2 = JDOMNodePointer.findEnclosingAttribute("jqAq,Wh8H\"L^Tsxw", "Byjh", (Namespace) null);
      assertNull(string2);
      
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      assertNotNull(namespace0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      
      String string3 = namespace0.toString();
      assertNotNull(string3);
      assertEquals("[Namespace: prefix \"\" is mapped to URI \"\"]", string3);
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = namespace0.toString();
      assertNotNull(string4);
      assertEquals("[Namespace: prefix \"\" is mapped to URI \"\"]", string4);
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = JDOMNodePointer.findEnclosingAttribute((Object) null, (String) null, namespace0);
      assertNull(string5);
      assertEquals("", namespace0.getPrefix());
      assertEquals("", namespace0.getURI());
      
      JDOMNamespaceIterator jDOMNamespaceIterator0 = (JDOMNamespaceIterator)jDOMNodePointer0.namespaceIterator();
      assertNotNull(jDOMNamespaceIterator0);
      assertSame(cDATA0, cDATA1);
      assertSame(cDATA0, cDATA2);
      assertSame(cDATA1, cDATA0);
      assertSame(cDATA1, cDATA2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("0ZI", locale0.getCountry());
      assertEquals("ifws_0ZI", locale0.toString());
      assertEquals("ifws", locale0.getLanguage());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isLeaf());
      assertEquals("jqAq,Wh8H\"L^Tsxw", cDATA0.getValue());
      assertEquals("jqAq,Wh8H\"L^Tsxw", cDATA0.getText());
      assertEquals("jqAq,Wh8H\"L^Tsxw", cDATA1.getValue());
      assertEquals("jqAq,Wh8H\"L^Tsxw", cDATA1.getText());
      assertFalse(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(0, jDOMNamespaceIterator0.getPosition());
      
      ProcessingInstruction processingInstruction0 = null;
      try {
        processingInstruction0 = new ProcessingInstruction("", "http://www.w3.org/2000/xmlns/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The target \"\" is not legal for JDOM/XML Processing Instructions: XML names cannot be null or empty.
         //
         verifyException("org.jdom.ProcessingInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CDATA cDATA0 = new CDATA("lang");
      assertNotNull(cDATA0);
      assertEquals("lang", cDATA0.getValue());
      assertEquals("lang", cDATA0.getText());
      
      String string0 = JDOMNodePointer.getPrefix("org.apache.commons.jxpath.ri.model.jdom.JDOMzodIPointer");
      assertNull(string0);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale1);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(locale1.equals((Object)locale0));
      
      QName qName0 = new QName("<<unknown namespace>>");
      assertNotNull(qName0);
      assertEquals("<<unknown namespace>>", qName0.toString());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertNull(qName0.getPrefix());
      
      int int0 = jDOMNodePointer0.getLength();
      assertEquals(1, int0);
      assertNotSame(locale1, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(locale1.equals((Object)locale0));
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "l,^M.vde&Ut(|/I~K8");
      assertNotNull(nodeNameTest0);
      assertEquals("<<unknown namespace>>", qName0.toString());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("<<unknown namespace>>", nodeNameTest0.toString());
      assertEquals("l,^M.vde&Ut(|/I~K8", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      String string1 = JDOMNodePointer.getLocalName(nodeNameTest0);
      assertNull(string1);
      assertEquals("<<unknown namespace>>", qName0.toString());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("<<unknown namespace>>", nodeNameTest0.toString());
      assertEquals("l,^M.vde&Ut(|/I~K8", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      Comment comment0 = new Comment("DL4;UUs;NL#F8y@");
      assertNotNull(comment0);
      assertEquals("DL4;UUs;NL#F8y@", comment0.getText());
      assertEquals("DL4;UUs;NL#F8y@", comment0.getValue());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) comment0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("DL4;UUs;NL#F8y@", comment0.getText());
      assertEquals("DL4;UUs;NL#F8y@", comment0.getValue());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createChild((JXPathContext) jXPathContextReferenceImpl0, qName0, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: 
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      QName qName0 = null;
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      
      NodePointer nodePointer0 = variablePointer0.namespacePointer("$4`J{E.");
      assertNull(nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, (Object) null);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.AbstractFactory");
      assertNotNull(processingInstructionTest0);
      assertEquals("org.apache.commons.jxpath.AbstractFactory", processingInstructionTest0.getTarget());
      
      NodePointer nodePointer1 = jDOMNodePointer0.namespacePointer("<<unknown namespace>>");
      assertNotNull(nodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(nodePointer1.isRoot());
      assertTrue(nodePointer1.isNode());
      assertFalse(nodePointer1.isCollection());
      assertFalse(nodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, nodePointer1.getIndex());
      assertEquals(1, nodePointer1.getLength());
      assertTrue(nodePointer1.isLeaf());
      assertFalse(nodePointer1.isContainer());
      
      String string0 = jDOMNodePointer0.getLanguage();
      assertNull(string0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      Object object0 = jDOMNodePointer0.getValue();
      assertNull(object0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1783));
      assertNotNull(nodeTypeTest0);
      assertEquals((-1783), nodeTypeTest0.getNodeType());
      
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(Integer.MIN_VALUE);
      assertNotNull(nodeTypeTest1);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest1.getNodeType());
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      
      String string1 = nodeTypeTest1.toString();
      assertNotNull(string1);
      assertEquals("UNKNOWN()", string1);
      assertNotSame(nodeTypeTest1, nodeTypeTest0);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest1.getNodeType());
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      
      String string2 = jDOMNodePointer0.asPath();
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(string2.equals((Object)string1));
      
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      assertNotNull(namespace0);
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      
      String string3 = null;
      Element element0 = null;
      try {
        element0 = new Element((String) null, (Namespace) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The name \"null\" is not legal for JDOM/XML elements: XML names cannot be null or empty.
         //
         verifyException("org.jdom.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CDATA cDATA0 = new CDATA("lang");
      assertNotNull(cDATA0);
      assertEquals("lang", cDATA0.getValue());
      assertEquals("lang", cDATA0.getText());
      
      String string0 = JDOMNodePointer.getPrefix("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      assertNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      Locale locale1 = Locale.PRC;
      assertNotNull(locale1);
      assertSame(locale1, locale0);
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      
      String string1 = locale0.getDisplayScript(locale1);
      assertNotNull(string1);
      assertEquals("", string1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale1);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("lang", cDATA0.getValue());
      assertEquals("lang", cDATA0.getText());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      
      String string2 = jDOMNodePointer0.getLanguage();
      assertNull(string2);
      assertSame(locale1, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("lang", cDATA0.getValue());
      assertEquals("lang", cDATA0.getText());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      
      jDOMNodePointer0.setValue(locale0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      
      NodePointer nodePointer0 = jDOMNodePointer0.getValuePointer();
      assertNotNull(nodePointer0);
      assertSame(locale1, locale0);
      assertSame(jDOMNodePointer0, nodePointer0);
      assertSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(nodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(1, nodePointer0.getLength());
      assertNull(nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isCollection());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isContainer());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      assertNotNull(nodeTypeTest0);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      
      boolean boolean0 = jDOMNodePointer0.testNode((NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
      assertSame(locale1, locale0);
      assertSame(jDOMNodePointer0, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      
      NodePointer nodePointer1 = jDOMNodePointer0.getValuePointer();
      assertNotNull(nodePointer1);
      assertSame(locale1, locale0);
      assertSame(jDOMNodePointer0, nodePointer0);
      assertSame(jDOMNodePointer0, nodePointer1);
      assertSame(nodePointer1, jDOMNodePointer0);
      assertSame(nodePointer1, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(nodePointer1.isCollection());
      assertTrue(nodePointer1.isNode());
      assertFalse(nodePointer1.isAttribute());
      assertFalse(nodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer1.getIndex());
      assertTrue(nodePointer1.isRoot());
      assertNull(nodePointer1.getNamespaceURI());
      assertEquals(1, nodePointer1.getLength());
      
      jDOMNodePointer0.setIndex(1629);
      assertSame(locale1, locale0);
      assertSame(jDOMNodePointer0, nodePointer0);
      assertSame(jDOMNodePointer0, nodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(1629, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      
      boolean boolean1 = nodePointer1.testNode((NodeTest) nodeTypeTest0);
      assertFalse(boolean1);
      assertSame(locale1, locale0);
      assertSame(jDOMNodePointer0, nodePointer0);
      assertSame(jDOMNodePointer0, nodePointer1);
      assertSame(nodePointer1, jDOMNodePointer0);
      assertSame(nodePointer1, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(1629, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertFalse(nodePointer1.isCollection());
      assertTrue(nodePointer1.isNode());
      assertFalse(nodePointer1.isAttribute());
      assertFalse(nodePointer1.isContainer());
      assertTrue(nodePointer1.isRoot());
      assertNull(nodePointer1.getNamespaceURI());
      assertEquals(1, nodePointer1.getLength());
      assertEquals(1629, nodePointer1.getIndex());
      assertTrue(boolean1 == boolean0);
      
      Element element0 = new Element("lang");
      assertNotNull(element0);
      assertEquals("lang", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "lang");
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)jXPathContextReferenceImpl0.getRelativeContext(nodePointer1);
      assertNotNull(jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(locale1, locale0);
      assertSame(jDOMNodePointer0, nodePointer0);
      assertSame(jDOMNodePointer0, nodePointer1);
      assertSame(nodePointer1, jDOMNodePointer0);
      assertSame(nodePointer1, nodePointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(1629, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(nodePointer1.isCollection());
      assertTrue(nodePointer1.isNode());
      assertFalse(nodePointer1.isAttribute());
      assertFalse(nodePointer1.isContainer());
      assertTrue(nodePointer1.isRoot());
      assertNull(nodePointer1.getNamespaceURI());
      assertEquals(1, nodePointer1.getLength());
      assertEquals(1629, nodePointer1.getIndex());
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      QName qName0 = new QName("^Bd]m=F", "");
      assertNotNull(qName0);
      assertEquals("^Bd]m=F:", qName0.toString());
      assertEquals("^Bd]m=F", qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      // Undeclared exception!
      try { 
        nodePointer0.createChild((JXPathContext) jXPathContextReferenceImpl1, qName0, Integer.MIN_VALUE);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: /text()[1]
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      
      CDATA cDATA0 = new CDATA((String) null);
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      
      String string0 = Text.normalizeString((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertNotNull(set0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertFalse(locale1.equals((Object)locale0));
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(set0, locale1, "C7%nX:>:fm!_");
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      
      String string1 = cDATA0.toString();
      assertNotNull(string1);
      assertEquals("[CDATA: ]", string1);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertFalse(string1.equals((Object)string0));
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, ".");
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      NodePointer nodePointer0 = jDOMNodePointer1.namespacePointer("java.util.Locale@0000000003");
      assertNotNull(nodePointer0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isCollection());
      assertTrue(nodePointer0.isNode());
      assertTrue(nodePointer0.isLeaf());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isContainer());
      assertFalse(nodePointer0.isRoot());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      String string2 = jDOMNodePointer1.getLanguage();
      assertNull(string2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      Object object0 = jDOMNodePointer0.getValue();
      assertNull(object0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1880));
      assertNotNull(nodeTypeTest0);
      assertEquals((-1880), nodeTypeTest0.getNodeType());
      
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest((-2337));
      assertNotNull(nodeTypeTest1);
      assertEquals((-2337), nodeTypeTest1.getNodeType());
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      
      String string3 = nodeTypeTest1.toString();
      assertNotNull(string3);
      assertEquals("UNKNOWN()", string3);
      assertNotSame(nodeTypeTest1, nodeTypeTest0);
      assertEquals((-2337), nodeTypeTest1.getNodeType());
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = jDOMNodePointer1.asPath();
      assertNotNull(string4);
      assertEquals("id('C7%nX:>:fm!_')", string4);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      assertNotNull(namespace0);
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("xml", namespace0.getPrefix());
      
      Element element0 = null;
      try {
        element0 = new Element((String) null, namespace0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The name \"null\" is not legal for JDOM/XML elements: XML names cannot be null or empty.
         //
         verifyException("org.jdom.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CDATA cDATA0 = new CDATA("lang");
      assertNotNull(cDATA0);
      assertEquals("lang", cDATA0.getValue());
      assertEquals("lang", cDATA0.getText());
      
      Text text0 = cDATA0.setText("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      assertNotNull(text0);
      assertSame(cDATA0, text0);
      assertSame(text0, cDATA0);
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", cDATA0.getValue());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", cDATA0.getText());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", text0.getText());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", text0.getValue());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(text0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", cDATA0.getValue());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", cDATA0.getText());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", text0.getText());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", text0.getValue());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      
      Locale locale1 = Locale.forLanguageTag("]");
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(object0, locale1);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertTrue(jDOMNodePointer1.isNode());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace");
      assertNotNull(qName0);
      assertEquals("http", qName0.getPrefix());
      assertEquals("//www.w3.org/XML/1998/namespace", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.toString());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, "lang", locale1);
      assertNotNull(beanPointer0);
      assertNotSame(locale1, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("http", qName0.getPrefix());
      assertEquals("//www.w3.org/XML/1998/namespace", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(locale1.equals((Object)locale0));
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.compareChildNodePointers(beanPointer0, jDOMNodePointer1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JXPath internal error: compareChildNodes called for [CDATA: org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer]
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      
      NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
      assertNotNull(nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodePointer0, "");
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      
      QName qName1 = new QName("o/@c2L8#\"U-", "http://www.w3.org/XML/1998/namespace");
      assertNotNull(qName1);
      assertEquals("http://www.w3.org/XML/1998/namespace", qName1.getName());
      assertEquals("o/@c2L8#\"U-", qName1.getPrefix());
      assertEquals("o/@c2L8#\"U-:http://www.w3.org/XML/1998/namespace", qName1.toString());
      assertFalse(qName1.equals((Object)qName0));
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      assertNotNull(nodeNameTest0);
      assertEquals("http://www.w3.org/XML/1998/namespace", qName1.getName());
      assertEquals("o/@c2L8#\"U-", qName1.getPrefix());
      assertEquals("o/@c2L8#\"U-:http://www.w3.org/XML/1998/namespace", qName1.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("o/@c2L8#\"U-:http://www.w3.org/XML/1998/namespace", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(qName1.equals((Object)qName0));
      
      Locale locale0 = Locale.forLanguageTag("http://www.w3.org/XML/1998/namespace");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(locale0, locale0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      CDATA cDATA0 = new CDATA("azk~XwuGDKt~!4");
      assertNotNull(cDATA0);
      assertEquals("azk~XwuGDKt~!4", cDATA0.getValue());
      assertEquals("azk~XwuGDKt~!4", cDATA0.getText());
      
      Text text0 = cDATA0.setText("http://www.w3.org/2000/xmlns/");
      assertNotNull(text0);
      assertSame(cDATA0, text0);
      assertSame(text0, cDATA0);
      assertEquals("http://www.w3.org/2000/xmlns/", cDATA0.getText());
      assertEquals("http://www.w3.org/2000/xmlns/", cDATA0.getValue());
      assertEquals("http://www.w3.org/2000/xmlns/", text0.getValue());
      assertEquals("http://www.w3.org/2000/xmlns/", text0.getText());
      
      Text text1 = text0.setText("GtYA?j\"#v}A7w'fO");
      assertNotNull(text1);
      assertSame(cDATA0, text1);
      assertSame(cDATA0, text0);
      assertSame(text0, text1);
      assertSame(text0, cDATA0);
      assertSame(text1, text0);
      assertSame(text1, cDATA0);
      assertEquals("GtYA?j\"#v}A7w'fO", cDATA0.getText());
      assertEquals("GtYA?j\"#v}A7w'fO", cDATA0.getValue());
      assertEquals("GtYA?j\"#v}A7w'fO", text0.getValue());
      assertEquals("GtYA?j\"#v}A7w'fO", text0.getText());
      assertEquals("GtYA?j\"#v}A7w'fO", text1.getText());
      assertEquals("GtYA?j\"#v}A7w'fO", text1.getValue());
      
      NodePointer nodePointer1 = variablePointer0.getImmediateValuePointer();
      assertNotNull(nodePointer1);
      assertNotSame(qName0, qName1);
      assertNotSame(nodePointer1, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(qName0.equals((Object)qName1));
      assertTrue(nodePointer1.equals((Object)nodePointer0));
      
      // Undeclared exception!
      try { 
        jDOMNodePointer1.compareChildNodePointers(jDOMNodePointer0, (NodePointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Locale locale0 = new Locale("The namespace xmlns", "The namespace xmlns", "Zc");
      assertNotNull(locale0);
      assertEquals("the namespace xmlns", locale0.getLanguage());
      assertEquals("THE NAMESPACE XMLNS", locale0.getCountry());
      assertEquals("the namespace xmlns_THE NAMESPACE XMLNS_Zc", locale0.toString());
      assertEquals("Zc", locale0.getVariant());
      
      String string0 = JDOMNodePointer.getLocalName("d_{0m63n$+NT");
      assertNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(object0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("the namespace xmlns", locale0.getLanguage());
      assertEquals("THE NAMESPACE XMLNS", locale0.getCountry());
      assertEquals("the namespace xmlns_THE NAMESPACE XMLNS_Zc", locale0.toString());
      assertEquals("Zc", locale0.getVariant());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      String string1 = jDOMNodePointer0.getNamespaceURI();
      assertNull(string1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("the namespace xmlns", locale0.getLanguage());
      assertEquals("THE NAMESPACE XMLNS", locale0.getCountry());
      assertEquals("the namespace xmlns_THE NAMESPACE XMLNS_Zc", locale0.toString());
      assertEquals("Zc", locale0.getVariant());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      int int0 = jDOMNodePointer0.getLength();
      assertEquals(1, int0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("the namespace xmlns", locale0.getLanguage());
      assertEquals("THE NAMESPACE XMLNS", locale0.getCountry());
      assertEquals("the namespace xmlns_THE NAMESPACE XMLNS_Zc", locale0.toString());
      assertEquals("Zc", locale0.getVariant());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      QName qName0 = new QName("<<unknown namespace>>");
      assertNotNull(qName0);
      assertEquals("<<unknown namespace>>", qName0.toString());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertNull(qName0.getPrefix());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("<<unknown namespace>>", qName0.toString());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("<<unknown namespace>>", qName0.toString());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("<<unknown namespace>>", nodeNameTest0.toString());
      
      Locale locale1 = Locale.forLanguageTag("Cannot set value of an element of a ");
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer((Object) jDOMNodePointer0, locale0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("the namespace xmlns", locale0.getLanguage());
      assertEquals("THE NAMESPACE XMLNS", locale0.getCountry());
      assertEquals("the namespace xmlns_THE NAMESPACE XMLNS_Zc", locale0.toString());
      assertEquals("Zc", locale0.getVariant());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      QName qName1 = new QName("<<unknown namespace>>", "");
      assertNotNull(qName1);
      assertEquals("<<unknown namespace>>", qName1.getPrefix());
      assertEquals("<<unknown namespace>>:", qName1.toString());
      assertEquals("", qName1.getName());
      assertFalse(qName1.equals((Object)qName0));
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName1, object0, locale1);
      assertNotNull(beanPointer0);
      assertNotSame(locale1, locale0);
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("<<unknown namespace>>", qName1.getPrefix());
      assertEquals("<<unknown namespace>>:", qName1.toString());
      assertEquals("", qName1.getName());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(qName1.equals((Object)qName0));
      
      Comment comment0 = new Comment("http://www.w3.org/XML/1998/namespace");
      assertNotNull(comment0);
      assertEquals("http://www.w3.org/XML/1998/namespace", comment0.getText());
      assertEquals("http://www.w3.org/XML/1998/namespace", comment0.getValue());
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(variablePointer0, comment0);
      assertNotNull(jDOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("<<unknown namespace>>", qName0.toString());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertEquals("http://www.w3.org/XML/1998/namespace", comment0.getText());
      assertEquals("http://www.w3.org/XML/1998/namespace", comment0.getValue());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isContainer());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isRoot());
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      
      // Undeclared exception!
      try { 
        jDOMNodePointer2.compareChildNodePointers(jDOMNodePointer1, variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: <<unknown namespace>>
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      QName qName0 = new QName("oO}n", "!");
      assertNotNull(qName0);
      assertEquals("oO}n:!", qName0.toString());
      assertEquals("!", qName0.getName());
      assertEquals("oO}n", qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "oO}n");
      assertNotNull(nodeNameTest0);
      assertEquals("oO}n:!", qName0.toString());
      assertEquals("!", qName0.getName());
      assertEquals("oO}n", qName0.getPrefix());
      assertEquals("oO}n", nodeNameTest0.getNamespaceURI());
      assertEquals("oO}n:!", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      NullPointer nullPointer0 = (NullPointer)NodePointer.newNodePointer(qName0, (Object) null, locale0);
      assertNotNull(nullPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("oO}n:!", qName0.toString());
      assertEquals("!", qName0.getName());
      assertEquals("oO}n", qName0.getPrefix());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isAttribute());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nullPointer0, (Object) null);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("oO}n:!", qName0.toString());
      assertEquals("!", qName0.getName());
      assertEquals("oO}n", qName0.getPrefix());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer((Object) nullPointer0, locale1);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("oO}n:!", qName0.toString());
      assertEquals("!", qName0.getName());
      assertEquals("oO}n", qName0.getPrefix());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isAttribute());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) nullPointer0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("oO}n:!", qName0.toString());
      assertEquals("!", qName0.getName());
      assertEquals("oO}n", qName0.getPrefix());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName1 = jDOMNodePointer1.getName();
      assertNotNull(qName1);
      assertNotSame(qName0, qName1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("oO}n:!", qName0.toString());
      assertEquals("!", qName0.getName());
      assertEquals("oO}n", qName0.getPrefix());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isAttribute());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertNull(qName1.toString());
      assertNull(qName1.getName());
      assertNull(qName1.getPrefix());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(nullPointer0, jDOMNodePointer0);
      assertNotNull(jDOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("oO}n:!", qName0.toString());
      assertEquals("!", qName0.getName());
      assertEquals("oO}n", qName0.getPrefix());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertTrue(jDOMNodePointer2.isNode());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createChild((JXPathContext) jXPathContextReferenceImpl0, qName1, Integer.MIN_VALUE, (Object) jDOMNodePointer2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: null()
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CDATA cDATA0 = new CDATA("lang");
      assertNotNull(cDATA0);
      assertEquals("lang", cDATA0.getText());
      assertEquals("lang", cDATA0.getValue());
      
      String string0 = JDOMNodePointer.getPrefix("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      assertNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      Locale locale1 = Locale.PRC;
      assertNotNull(locale1);
      assertSame(locale1, locale0);
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      
      String string1 = locale0.getDisplayScript(locale1);
      assertNotNull(string1);
      assertEquals("", string1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale1);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("lang", cDATA0.getText());
      assertEquals("lang", cDATA0.getValue());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      String string2 = jDOMNodePointer0.getLanguage();
      assertNull(string2);
      assertSame(locale1, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("lang", cDATA0.getText());
      assertEquals("lang", cDATA0.getValue());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      jDOMNodePointer0.setValue(locale0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      NodePointer nodePointer0 = jDOMNodePointer0.getValuePointer();
      assertNotNull(nodePointer0);
      assertSame(locale1, locale0);
      assertSame(jDOMNodePointer0, nodePointer0);
      assertSame(nodePointer0, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertTrue(nodePointer0.isRoot());
      assertFalse(nodePointer0.isAttribute());
      assertNull(nodePointer0.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isCollection());
      assertTrue(nodePointer0.isNode());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      assertNotNull(nodeTypeTest0);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      
      boolean boolean0 = jDOMNodePointer0.testNode((NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
      assertSame(locale1, locale0);
      assertSame(jDOMNodePointer0, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      
      NodePointer nodePointer1 = jDOMNodePointer0.getValuePointer();
      assertNotNull(nodePointer1);
      assertSame(locale1, locale0);
      assertSame(jDOMNodePointer0, nodePointer1);
      assertSame(jDOMNodePointer0, nodePointer0);
      assertSame(nodePointer1, nodePointer0);
      assertSame(nodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nodePointer1.getIndex());
      assertTrue(nodePointer1.isRoot());
      assertFalse(nodePointer1.isCollection());
      assertFalse(nodePointer1.isAttribute());
      assertEquals(1, nodePointer1.getLength());
      assertTrue(nodePointer1.isNode());
      assertNull(nodePointer1.getNamespaceURI());
      assertFalse(nodePointer1.isContainer());
      
      jDOMNodePointer0.setIndex(1629);
      assertSame(locale1, locale0);
      assertSame(jDOMNodePointer0, nodePointer1);
      assertSame(jDOMNodePointer0, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(1629, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      NodePointer nodePointer2 = jDOMNodePointer0.namespacePointer("");
      assertNotNull(nodePointer2);
      assertSame(locale1, locale0);
      assertSame(jDOMNodePointer0, nodePointer1);
      assertSame(jDOMNodePointer0, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(1629, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(nodePointer2.isAttribute());
      assertTrue(nodePointer2.isLeaf());
      assertFalse(nodePointer2.isCollection());
      assertTrue(nodePointer2.isNode());
      assertFalse(nodePointer2.isRoot());
      assertEquals(1, nodePointer2.getLength());
      assertFalse(nodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer2.getIndex());
      
      NamespaceResolver namespaceResolver0 = jDOMNodePointer0.getNamespaceResolver();
      assertNotNull(namespaceResolver0);
      assertSame(locale1, locale0);
      assertSame(jDOMNodePointer0, nodePointer1);
      assertSame(jDOMNodePointer0, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(1629, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(namespaceResolver0.isSealed());
      
      String string3 = jDOMNodePointer0.getNamespaceURI();
      assertNull(string3);
      assertSame(locale1, locale0);
      assertSame(jDOMNodePointer0, nodePointer1);
      assertSame(jDOMNodePointer0, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(1629, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      NodeIterator nodeIterator0 = jDOMNodePointer0.namespaceIterator();
      assertNotNull(nodeIterator0);
      assertSame(locale1, locale0);
      assertSame(jDOMNodePointer0, nodePointer1);
      assertSame(jDOMNodePointer0, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, nodeIterator0.getPosition());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(1629, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      jDOMNodePointer0.hashCode();
      assertSame(locale1, locale0);
      assertSame(jDOMNodePointer0, nodePointer1);
      assertSame(jDOMNodePointer0, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(1629, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      jDOMNodePointer0.setValue(nodePointer1);
      assertSame(locale1, locale0);
      assertSame(jDOMNodePointer0, nodePointer1);
      assertSame(jDOMNodePointer0, nodePointer0);
      assertSame(nodePointer1, nodePointer0);
      assertSame(nodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(1629, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(nodePointer1.isRoot());
      assertFalse(nodePointer1.isCollection());
      assertFalse(nodePointer1.isAttribute());
      assertEquals(1, nodePointer1.getLength());
      assertEquals(1629, nodePointer1.getIndex());
      assertTrue(nodePointer1.isNode());
      assertNull(nodePointer1.getNamespaceURI());
      assertFalse(nodePointer1.isContainer());
      
      boolean boolean1 = jDOMNodePointer0.equals((Object) null);
      assertFalse(boolean1);
      assertSame(locale1, locale0);
      assertSame(jDOMNodePointer0, nodePointer1);
      assertSame(jDOMNodePointer0, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(1629, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(boolean1 == boolean0);
      
      Object object1 = jDOMNodePointer0.getValue();
      assertNotNull(object1);
      assertSame(locale1, locale0);
      assertSame(jDOMNodePointer0, nodePointer1);
      assertSame(jDOMNodePointer0, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(1629, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(object1.equals((Object)string1));
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = null;
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(nodePointer0, cDATA0);
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(1629, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isRoot());
      assertFalse(nodePointer0.isAttribute());
      assertNull(nodePointer0.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(1629, nodePointer0.getIndex());
      assertFalse(nodePointer0.isCollection());
      assertTrue(nodePointer0.isNode());
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer1));
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) jDOMNodePointer1);
      assertNotNull(jXPathContextReferenceImpl0);
      assertSame(locale1, locale0);
      assertSame(jDOMNodePointer0, nodePointer1);
      assertSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, nodePointer1);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertSame(nodePointer0, jDOMNodePointer0);
      assertSame(nodePointer0, nodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(1629, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isRoot());
      assertFalse(nodePointer0.isAttribute());
      assertNull(nodePointer0.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(1629, nodePointer0.getIndex());
      assertFalse(nodePointer0.isCollection());
      assertTrue(nodePointer0.isNode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer1));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      
      VariablePointer variablePointer1 = (VariablePointer)variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0);
      assertNotNull(variablePointer1);
      assertSame(locale1, locale0);
      assertSame(jDOMNodePointer0, nodePointer1);
      assertSame(jDOMNodePointer0, nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertSame(variablePointer0, variablePointer1);
      assertNotSame(jDOMNodePointer1, nodePointer1);
      assertNotSame(jDOMNodePointer1, nodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(nodePointer0, jDOMNodePointer1);
      assertSame(nodePointer0, jDOMNodePointer0);
      assertSame(nodePointer0, nodePointer1);
      assertSame(variablePointer1, variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(1629, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isRoot());
      assertFalse(nodePointer0.isAttribute());
      assertNull(nodePointer0.getNamespaceURI());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(1629, nodePointer0.getIndex());
      assertFalse(nodePointer0.isCollection());
      assertTrue(nodePointer0.isNode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(variablePointer1.isNode());
      assertTrue(variablePointer1.isContainer());
      assertFalse(variablePointer1.isAttribute());
      assertTrue(variablePointer1.isRoot());
      assertTrue(variablePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)nodePointer1));
      assertTrue(nodePointer0.equals((Object)jDOMNodePointer1));
      
      // Undeclared exception!
      try { 
        variablePointer0.namespacePointer("v4c#Z?D:-w</[(F^s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{[HEUpi&itE(ISnYgTM");
      assertFalse(boolean0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      CDATA cDATA1 = (CDATA)jDOMNodePointer0.getNodeValue();
      assertNotNull(cDATA1);
      assertSame(cDATA0, cDATA1);
      assertSame(cDATA1, cDATA0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("", cDATA1.getText());
      assertEquals("", cDATA1.getValue());
      
      boolean boolean1 = jDOMNodePointer0.isLeaf();
      assertTrue(boolean1);
      assertSame(cDATA0, cDATA1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(boolean1 == boolean0);
      
      String string0 = JDOMNodePointer.getLocalName(cDATA0);
      assertNull(string0);
      assertSame(cDATA0, cDATA1);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Text.normalizeString("pPL.PIx*ngo=");
      Locale locale0 = Locale.ITALIAN;
      locale0.getExtensionKeys();
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("The namespace xmlns", locale0, "xml");
      CDATA cDATA0 = new CDATA("<<unknown namespace>>");
      cDATA0.toString();
      jDOMNodePointer0.namespacePointer("xml");
      jDOMNodePointer0.getLanguage();
      jDOMNodePointer0.getValue();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      nodeTypeTest0.toString();
      Object object0 = new Object();
      JXPathContext jXPathContext0 = JXPathContext.newContext(object0);
      Variables variables0 = jXPathContext0.getVariables();
      QName qName0 = jDOMNodePointer0.getName();
      VariablePointer variablePointer0 = new VariablePointer(variables0, qName0);
      NodePointer nodePointer0 = variablePointer0.createPath(jXPathContext0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.childIterator(nodeTypeTest0, false, nodePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'null'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Locale locale0 = new Locale("The namespace xmlns", "The namespace xmlns", "')");
      JDOMNodePointer.getLocalName("d_{0m63n$+NT");
      Object object0 = new Object();
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(object0, locale0);
      jDOMNodePointer0.getNamespaceURI();
      jDOMNodePointer0.getLength();
      QName qName0 = new QName("<<unknown namespace>>");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) nodeTypeTest0);
      // Undeclared exception!
      try { 
        variablePointer0.createPath(jXPathContext0, (Object) "')");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: $<<unknown namespace>>
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-159));
      Locale locale0 = Locale.forLanguageTag("5|$");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeTypeTest0, locale0);
      QName qName0 = jDOMNodePointer0.getName();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "S^5");
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, "http://www.w3.org/XML/1998/namespace");
      BasicVariables basicVariables0 = new BasicVariables();
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((JXPathContext) null, (Object) "An Attribute name may not be \"xmlns\"; use the Namespace class to manage namespaces");
      jXPathContext0.getParentContext();
      NodePointer nodePointer1 = variablePointer0.createPath((JXPathContext) null);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.compareChildNodePointers(nodePointer0, nodePointer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'null'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CDATA cDATA0 = new CDATA("lang");
      Text text0 = cDATA0.setText("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(text0, locale0);
      QName qName0 = new QName("http://www.w3.org/2000/xmlns/", "ifWs");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "preserve");
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(nodeNameTest0, locale0, "$~R_cqC");
      Comment comment0 = new Comment("$P=O]J[IOFb+JE");
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(jDOMNodePointer0, comment0);
      // Undeclared exception!
      try { 
        jDOMNodePointer2.createAttribute((JXPathContext) null, qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot create an attribute for path /text()[1]/@http://www.w3.org/2000/xmlns/:ifWs, operation is not allowed for this type of node
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CDATA cDATA0 = new CDATA("lang");
      String string0 = "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer";
      cDATA0.setText("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", locale0);
      Comment comment0 = new Comment("<<unknown namespace>>");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) comment0);
      comment0.clone();
      QName qName0 = new QName("");
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createAttribute(jXPathContext0, qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot create an attribute for path /@, operation is not allowed for this type of node
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Object object0 = new Object();
      Locale locale0 = Locale.CHINA;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(object0, locale0, "");
      QName qName0 = new QName("2'>vx|", "!");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "http://www.w3.org/XML/1998/namespace");
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(100);
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(nodeTypeTest0, locale0, "15aX3rw:%~JQ!w5\"{N");
      // Undeclared exception!
      try { 
        jDOMNodePointer1.createAttribute((JXPathContext) null, qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot create an attribute for path id('15aX3rw:%~JQ!w5&quot;{N')/@2'>vx|:!, operation is not allowed for this type of node
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      QName qName0 = new QName("oO}n", "!");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "oO}n");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, (Object) null, locale0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodePointer0, (Object) null);
      jDOMNodePointer0.isLanguage("5@u%ajD^8%ze/oA{");
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, "oO}n");
      jDOMNodePointer1.isCollection();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("oO}n");
      jDOMNodePointer1.testNode((NodeTest) nodeNameTest0);
      Element element0 = null;
      try {
        element0 = new Element("The name \"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The name \"The name \"\" is not legal for JDOM/XML elements: XML names cannot contain the character \" \".
         //
         verifyException("org.jdom.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = null;
      QName qName0 = new QName((String) null, "WiS:0#, X2u&+:u<");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      Object object0 = new Object();
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, object0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      nodeTypeTest0.toString();
      jDOMNodePointer0.setIndex(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.childIterator(nodeTypeTest0, true, variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: WiS:0#, X2u&+:u<
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = "";
      QName qName0 = new QName("", "");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodePointer0, "");
      String string1 = "";
      CDATA cDATA0 = new CDATA("");
      nodePointer0.getBaseValue();
      jDOMNodePointer0.equals(cDATA0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.getNamespaceURI((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Object object0 = new Object();
      Locale locale0 = Locale.FRENCH;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(object0, locale0);
      jDOMNodePointer0.getBaseValue();
      JXPathContext jXPathContext0 = null;
      jDOMNodePointer0.getName();
      int int0 = 6;
      ProcessingInstruction processingInstruction0 = null;
      try {
        processingInstruction0 = new ProcessingInstruction("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/XML/1998/namespace");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The target \"http://www.w3.org/XML/1998/namespace\" is not legal for JDOM/XML Processing Instructions: XML names cannot contain the character \"/\".
         //
         verifyException("org.jdom.ProcessingInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Object object0 = new Object();
      Locale locale0 = Locale.CHINA;
      String string0 = "";
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(object0, locale0, "");
      jDOMNodePointer0.isLeaf();
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer((Object) null, locale0);
      jDOMNodePointer1.getValue();
      jDOMNodePointer0.compareChildNodePointers(jDOMNodePointer1, jDOMNodePointer1);
      jDOMNodePointer1.getNamespaceURI("i}&s");
      jDOMNodePointer0.getLength();
      String string1 = "acHZ9+NYwM";
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("acHZ9+NYwM", "http://www.w3.org/XML/1998/namespace");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The name \"acHZ9+NYwM\" is not legal for JDOM/XML attributes: XML names cannot contain the character \"+\".
         //
         verifyException("org.jdom.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CDATA cDATA0 = new CDATA("ezYs");
      Text text0 = cDATA0.setText("ezYs");
      text0.detach();
      Text text1 = text0.setText("Factory is not set on the JXPathContext - cannot create path: ");
      Locale locale0 = Locale.ENGLISH;
      text1.clone();
      Text.normalizeString("S@tG}h(s`^iU$.4U");
      locale0.getExtensionKeys();
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(text1, locale0, "ezYs");
      cDATA0.toString();
      NodePointer nodePointer0 = jDOMNodePointer0.namespacePointer("The name \"");
      jDOMNodePointer0.getLanguage();
      jDOMNodePointer0.getValue();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1966);
      nodeTypeTest0.toString();
      jDOMNodePointer0.childIterator(nodeTypeTest0, true, nodePointer0);
      jDOMNodePointer0.asPath();
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      Element element0 = null;
      try {
        element0 = new Element("78:gWyanZ", namespace0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The name \"78:gWyanZ\" is not legal for JDOM/XML elements: XML names cannot begin with the character \"7\".
         //
         verifyException("org.jdom.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      Locale locale0 = Locale.JAPANESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      boolean boolean0 = jDOMNodePointer0.isLeaf();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Object object0 = new Object();
      JDOMNodePointer.getLocalName(object0);
      Locale locale0 = Locale.PRC;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(object0, locale0, (String) null);
      JXPathContext jXPathContext0 = null;
      JXPathContext.newContext((JXPathContext) null, (Object) null);
      Locale locale1 = Locale.ENGLISH;
      QName qName0 = new QName((String) null, "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      int int0 = (-1328);
      locale1.getDisplayLanguage();
      ProcessingInstruction processingInstruction0 = null;
      try {
        processingInstruction0 = new ProcessingInstruction("", "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The target \"\" is not legal for JDOM/XML Processing Instructions: XML names cannot be null or empty.
         //
         verifyException("org.jdom.ProcessingInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = "@{Pv\"";
      QName qName0 = new QName("", "@{Pv\"");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      JDOMNodePointer.getPrefix(nodeNameTest0);
      Object object0 = new Object();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      locale0.getDisplayScript((Locale) null);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(object0, locale0);
      jDOMNodePointer0.getLanguage();
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.jdom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Comment comment0 = new Comment("E%G%?1ZH1YU9'");
      Comment comment1 = comment0.setText("E%G%?1ZH1YU9'");
      Locale locale0 = Locale.US;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(comment1, locale0, "E%G%?1ZH1YU9'");
      boolean boolean0 = jDOMNodePointer0.isCollection();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Locale locale0 = Locale.ITALY;
      processingInstructionTest0.toString();
      processingInstructionTest0.toString();
      String string0 = "a6j";
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstructionTest0, locale0, "a6j");
      JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) locale0, (NodeTest) processingInstructionTest0);
      jDOMNodePointer0.equals("");
      jDOMNodePointer0.isLanguage("IDPQXs&9vuV");
      jDOMNodePointer0.namespaceIterator();
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("IDPQXs&9vuV", "{@U(OX5\u0001", Integer.MIN_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The name \"IDPQXs&9vuV\" is not legal for JDOM/XML attributes: XML names cannot contain the character \"&\".
         //
         verifyException("org.jdom.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CDATA cDATA0 = new CDATA("lang");
      Text text0 = cDATA0.setText("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(text0, locale0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      QName qName0 = jDOMNodePointer0.getName();
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createChild(jXPathContext0, qName0, (-1576), (Object) locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: /text()[1]
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      QName qName0 = new QName("oO}n", "!");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "oO}n");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeNameTest0, locale0, "!");
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createAttribute((JXPathContext) null, qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot create an attribute for path id('!')/@oO}n:!, operation is not allowed for this type of node
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, (Object) null);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.isLanguage("Rfw7\"5l9\"&");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-159));
      Locale locale0 = Locale.forLanguageTag("5|$");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeTypeTest0, locale0);
      QName qName0 = jDOMNodePointer0.getName();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "S^5");
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, "http://www.w3.org/XML/1998/namespace");
      jDOMNodePointer0.childIterator(nodeNameTest0, false, nodePointer0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.remove();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot remove root JDOM node
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Locale locale0 = Locale.KOREAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeTypeTest0, locale0, (String) null);
      Object object0 = jDOMNodePointer0.getValue();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      QName qName0 = new QName("", "null filter not allowed");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Locale locale0 = Locale.forLanguageTag("org.jdom.CDATA");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeNameTest0, locale0);
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
      int int0 = jDOMNodePointer0.compareChildNodePointers(nodePointer0, nodePointer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      NodePointer nodePointer0 = null;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, (Object) null);
      Locale locale0 = Locale.ROOT;
      locale0.getDisplayLanguage();
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, locale0, "<<unknown namespace>>");
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("http://www.w3.org/2000/xmlns/", "http://www.w3.org/2000/xmlns/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The name \"http://www.w3.org/2000/xmlns/\" is not legal for JDOM/XML attributes: XML names cannot contain the character \"/\".
         //
         verifyException("org.jdom.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Locale locale0 = new Locale("The namespace xmlns", "The namespace xmlns", "')");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("d_{0m63n$+NT", locale0, ">b");
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue("')");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.jdom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = "";
      CDATA cDATA0 = new CDATA("");
      Text text0 = cDATA0.setText("");
      Locale locale0 = Locale.TAIWAN;
      cDATA0.getTextNormalize();
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(text0, locale0, "");
      jDOMNodePointer0.getNamespaceURI("");
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("http://www.w3.org/2000/xmlns/", "http://www.w3.org/2000/xmlns/");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      LinkedList<Text> linkedList0 = new LinkedList<Text>();
      Document document0 = new Document(linkedList0);
      // Undeclared exception!
      try { 
        document0.toString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }
}
