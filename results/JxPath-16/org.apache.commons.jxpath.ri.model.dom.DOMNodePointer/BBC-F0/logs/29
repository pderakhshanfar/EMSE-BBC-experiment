* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0
* Going to generate test cases for class: org.apache.commons.jxpath.ri.model.dom.DOMNodePointer
* Starting Client-0
* Connecting to master process on port 3201
* Analyzing classpath: 
  - subjects/buggy-versions/JxPath-16/target/classes
  - subjects/buggy-versions/JxPath-16/src/java
  - subjects/buggy-versions/JxPath-16/target/lib/commons-beanutils-1.7.0.jar
  - subjects/buggy-versions/JxPath-16/target/lib/commons-logging-1.1.jar
  - subjects/buggy-versions/JxPath-16/target/lib/jdom-1.0.jar
  - subjects/buggy-versions/JxPath-16/target/lib/jsp-api-2.0.jar
  - subjects/buggy-versions/JxPath-16/target/lib/junit-3.8.2.jar
  - subjects/buggy-versions/JxPath-16/target/lib/mockrunner-0.4.1.jar
  - subjects/buggy-versions/JxPath-16/target/lib/servletapi-2.4.jar
  - subjects/buggy-versions/JxPath-16/target/lib/xerces-2.4.0.jar
  - subjects/buggy-versions/JxPath-16/target/lib/xml-apis-2.0.2.jar
* Finished analyzing classpath
* Generating tests for class org.apache.commons.jxpath.ri.model.dom.DOMNodePointer
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2205
* Using seed 2771082497
* Starting evolution
* Initial Number of Goals in DynaMOSA = 489 / 2205
[MASTER] 04:54:26.033 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 04:57:50.377 [logback-1] WARN  TestUsageChecker - class org.apache.xerces.dom.CharacterDataImpl$1 looks like an anonymous class, ignoring it (although reflection says false) CharacterDataImpl$1
* Search finished after 302s and 238 generations, 181319 statements, best individual has fitness: 533.0
* Minimizing test suite
[MASTER] 04:59:01.381 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 84%
* Total number of goals: 358
* Number of covered goals: 299
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 77%
* Total number of goals: 327
* Number of covered goals: 251
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 43
* Number of covered goals: 43
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 79%
* Total number of goals: 999
* Number of covered goals: 794
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 43%
* Total number of goals: 120
* Number of covered goals: 52
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 37
* Number of covered goals: 37
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 95%
* Total number of goals: 37
* Number of covered goals: 35
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 76%
* Total number of goals: 327
* Number of covered goals: 249
* Generated 165 tests with total length 3095
* Resulting test suite's coverage: 76% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 04:59:48.549 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.66805% of time used, but only 45/165 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 16%
* Compiling and checking tests
[MASTER] 05:00:28.765 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_141_1605589228634/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer_141_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_141_1605589228634/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer_141_tmp__ESTest_scaffolding.java]]
[MASTER] 05:00:28.766 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/JxPath-16/target/classes:subjects/buggy-versions/JxPath-16/src/java:subjects/buggy-versions/JxPath-16/target/lib/commons-beanutils-1.7.0.jar:subjects/buggy-versions/JxPath-16/target/lib/commons-logging-1.1.jar:subjects/buggy-versions/JxPath-16/target/lib/jdom-1.0.jar:subjects/buggy-versions/JxPath-16/target/lib/jsp-api-2.0.jar:subjects/buggy-versions/JxPath-16/target/lib/junit-3.8.2.jar:subjects/buggy-versions/JxPath-16/target/lib/mockrunner-0.4.1.jar:subjects/buggy-versions/JxPath-16/target/lib/servletapi-2.4.jar:subjects/buggy-versions/JxPath-16/target/lib/xerces-2.4.0.jar:subjects/buggy-versions/JxPath-16/target/lib/xml-apis-2.0.2.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/JxPath-16/target/classes:/experiment/subjects/buggy-versions/JxPath-16/src/java:/experiment/subjects/buggy-versions/JxPath-16/target/lib/commons-beanutils-1.7.0.jar:/experiment/subjects/buggy-versions/JxPath-16/target/lib/commons-logging-1.1.jar:/experiment/subjects/buggy-versions/JxPath-16/target/lib/jdom-1.0.jar:/experiment/subjects/buggy-versions/JxPath-16/target/lib/jsp-api-2.0.jar:/experiment/subjects/buggy-versions/JxPath-16/target/lib/junit-3.8.2.jar:/experiment/subjects/buggy-versions/JxPath-16/target/lib/mockrunner-0.4.1.jar:/experiment/subjects/buggy-versions/JxPath-16/target/lib/servletapi-2.4.jar:/experiment/subjects/buggy-versions/JxPath-16/target/lib/xerces-2.4.0.jar:/experiment/subjects/buggy-versions/JxPath-16/target/lib/xml-apis-2.0.2.jar
[MASTER] 05:00:28.766 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/JxPath-16/target/classes:/experiment/subjects/buggy-versions/JxPath-16/src/java:/experiment/subjects/buggy-versions/JxPath-16/target/lib/commons-beanutils-1.7.0.jar:/experiment/subjects/buggy-versions/JxPath-16/target/lib/commons-logging-1.1.jar:/experiment/subjects/buggy-versions/JxPath-16/target/lib/jdom-1.0.jar:/experiment/subjects/buggy-versions/JxPath-16/target/lib/jsp-api-2.0.jar:/experiment/subjects/buggy-versions/JxPath-16/target/lib/junit-3.8.2.jar:/experiment/subjects/buggy-versions/JxPath-16/target/lib/mockrunner-0.4.1.jar:/experiment/subjects/buggy-versions/JxPath-16/target/lib/servletapi-2.4.jar:/experiment/subjects/buggy-versions/JxPath-16/target/lib/xerces-2.4.0.jar:/experiment/subjects/buggy-versions/JxPath-16/target/lib/xml-apis-2.0.2.jar
[MASTER] 05:00:28.785 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: org.apache.commons.jxpath.ri.model.beans.NullPointer cannot be converted to org.apache.commons.jxpath.ri.model.dom.DOMNodePointer: 276
[MASTER] 05:00:28.788 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_141_1605589228634/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer_141_tmp__ESTest.java uses or overrides a deprecated API.: -1
[MASTER] 05:00:28.788 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:deprecation for details.: -1
[MASTER] 05:00:28.790 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_141_1605589228634/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer_141_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 05:00:28 GMT 2020
4:  */
5: 
6: package org.apache.commons.jxpath.ri.model.dom;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import java.util.Locale;
12: import org.apache.commons.jxpath.ri.QName;
13: import org.apache.commons.jxpath.ri.model.NodePointer;
14: import org.apache.commons.jxpath.ri.model.VariablePointer;
15: import org.apache.commons.jxpath.ri.model.beans.NullPointer;
16: import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
17: import org.apache.html.dom.HTMLDocumentImpl;
18: import org.apache.html.dom.HTMLFrameSetElementImpl;
19: import org.apache.html.dom.HTMLObjectElementImpl;
20: import org.apache.html.dom.HTMLTableElementImpl;
21: import org.apache.xerces.dom.DocumentTypeImpl;
22: import org.apache.xerces.dom.ElementDefinitionImpl;
23: import org.apache.xerces.dom.EntityImpl;
24: import org.evosuite.runtime.EvoRunner;
25: import org.evosuite.runtime.EvoRunnerParameters;
26: import org.junit.runner.RunWith;
27: 
28: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
29: public class DOMNodePointer_141_tmp__ESTest extends DOMNodePointer_141_tmp__ESTest_scaffolding {
30: 
31:   @Test(timeout = 4000)
32:   public void test0()  throws Throwable  {
33:       HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
34:       assertNull(hTMLDocumentImpl0.getURL());
35:       assertNull(hTMLDocumentImpl0.getDomain());
36:       assertNull(hTMLDocumentImpl0.getReferrer());
37:       assertNull(hTMLDocumentImpl0.getCookie());
38:       assertNotNull(hTMLDocumentImpl0);
39:       
40:       Locale locale0 = Locale.TRADITIONAL_CHINESE;
41:       assertEquals("TW", locale0.getCountry());
42:       assertEquals("", locale0.getVariant());
43:       assertEquals("zho", locale0.getISO3Language());
44:       assertEquals("TWN", locale0.getISO3Country());
45:       assertEquals("zh", locale0.getLanguage());
46:       assertEquals("zh_TW", locale0.toString());
47:       assertNotNull(locale0);
48:       
49:       HTMLObjectElementImpl hTMLObjectElementImpl0 = new HTMLObjectElementImpl(hTMLDocumentImpl0, "");
50:       assertNull(hTMLDocumentImpl0.getURL());
51:       assertNull(hTMLDocumentImpl0.getDomain());
52:       assertNull(hTMLDocumentImpl0.getReferrer());
53:       assertNull(hTMLDocumentImpl0.getCookie());
54:       assertNotNull(hTMLObjectElementImpl0);
55:       
56:       String string0 = "/_2D)uW";
57:       EntityImpl entityImpl0 = new EntityImpl(hTMLDocumentImpl0, "English");
58:       assertNull(hTMLDocumentImpl0.getURL());
59:       assertNull(hTMLDocumentImpl0.getDomain());
60:       assertNull(hTMLDocumentImpl0.getReferrer());
61:       assertNull(hTMLDocumentImpl0.getCookie());
62:       assertNotNull(entityImpl0);
63:       
64:       DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "Factory could not create a child node for path: ");
65:       assertNull(hTMLDocumentImpl0.getURL());
66:       assertNull(hTMLDocumentImpl0.getDomain());
67:       assertNull(hTMLDocumentImpl0.getReferrer());
68:       assertNull(hTMLDocumentImpl0.getCookie());
69:       assertEquals("TW", locale0.getCountry());
70:       assertEquals("", locale0.getVariant());
71:       assertEquals("zho", locale0.getISO3Language());
72:       assertEquals("TWN", locale0.getISO3Country());
73:       assertEquals("zh", locale0.getLanguage());
74:       assertEquals("zh_TW", locale0.toString());
75:       assertTrue(dOMNodePointer0.isNode());
76:       assertEquals(1, dOMNodePointer0.getLength());
77:       assertFalse(dOMNodePointer0.isAttribute());
78:       assertFalse(dOMNodePointer0.isCollection());
79:       assertTrue(dOMNodePointer0.isActual());
80:       assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
81:       assertFalse(dOMNodePointer0.isContainer());
82:       assertTrue(dOMNodePointer0.isRoot());
83:       assertNotNull(dOMNodePointer0);
84:       assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
85:       
86:       QName qName0 = dOMNodePointer0.getName();
87:       assertNull(hTMLDocumentImpl0.getURL());
88:       assertNull(hTMLDocumentImpl0.getDomain());
89:       assertNull(hTMLDocumentImpl0.getReferrer());
90:       assertNull(hTMLDocumentImpl0.getCookie());
91:       assertEquals("TW", locale0.getCountry());
92:       assertEquals("", locale0.getVariant());
93:       assertEquals("zho", locale0.getISO3Language());
94:       assertEquals("TWN", locale0.getISO3Country());
95:       assertEquals("zh", locale0.getLanguage());
96:       assertEquals("zh_TW", locale0.toString());
97:       assertTrue(dOMNodePointer0.isNode());
98:       assertEquals(1, dOMNodePointer0.getLength());
99:       assertFalse(dOMNodePointer0.isAttribute());
100:       assertFalse(dOMNodePointer0.isCollection());
101:       assertTrue(dOMNodePointer0.isActual());
102:       assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
103:       assertFalse(dOMNodePointer0.isContainer());
104:       assertTrue(dOMNodePointer0.isRoot());
105:       assertNull(qName0.getPrefix());
106:       assertNull(qName0.getName());
107:       assertNull(qName0.toString());
108:       assertNotNull(qName0);
109:       assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
110:       
111:       ElementDefinitionImpl elementDefinitionImpl0 = new ElementDefinitionImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
112:       assertNull(hTMLDocumentImpl0.getURL());
113:       assertNull(hTMLDocumentImpl0.getDomain());
114:       assertNull(hTMLDocumentImpl0.getReferrer());
115:       assertNull(hTMLDocumentImpl0.getCookie());
116:       assertNotNull(elementDefinitionImpl0);
117:       
118:       NullPointer nullPointer0 = (NullPointer)NodePointer.newNodePointer(qName0, (Object) null, locale0);
119:       assertNull(hTMLDocumentImpl0.getURL());
120:       assertNull(hTMLDocumentImpl0.getDomain());
121:       assertNull(hTMLDocumentImpl0.getReferrer());
122:       assertNull(hTMLDocumentImpl0.getCookie());
123:       assertEquals("TW", locale0.getCountry());
124:       assertEquals("", locale0.getVariant());
125:       assertEquals("zho", locale0.getISO3Language());
126:       assertEquals("TWN", locale0.getISO3Country());
127:       assertEquals("zh", locale0.getLanguage());
128:       assertEquals("zh_TW", locale0.toString());
129:       assertTrue(dOMNodePointer0.isNode());
130:       assertEquals(1, dOMNodePointer0.getLength());
131:       assertFalse(dOMNodePointer0.isAttribute());
132:       assertFalse(dOMNodePointer0.isCollection());
133:       assertTrue(dOMNodePointer0.isActual());
134:       assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
135:       assertFalse(dOMNodePointer0.isContainer());
136:       assertTrue(dOMNodePointer0.isRoot());
137:       assertNull(qName0.getPrefix());
138:       assertNull(qName0.getName());
139:       assertNull(qName0.toString());
140:       assertFalse(nullPointer0.isContainer());
141:       assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
142:       assertTrue(nullPointer0.isRoot());
143:       assertTrue(nullPointer0.isLeaf());
144:       assertFalse(nullPointer0.isCollection());
145:       assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
146:       assertTrue(nullPointer0.isNode());
147:       assertFalse(nullPointer0.isActual());
148:       assertFalse(nullPointer0.isAttribute());
149:       assertEquals(0, nullPointer0.getLength());
150:       assertNotNull(nullPointer0);
151:       assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
152:       assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
153:       
154:       DOMNodePointer dOMNodePointer1 = (DOMNodePointer)NodePointer.newChildNodePointer(nullPointer0, qName0, entityImpl0);
155:       assertNull(hTMLDocumentImpl0.getURL());
156:       assertNull(hTMLDocumentImpl0.getDomain());
157:       assertNull(hTMLDocumentImpl0.getReferrer());
158:       assertNull(hTMLDocumentImpl0.getCookie());
159:       assertEquals("TW", locale0.getCountry());
160:       assertEquals("", locale0.getVariant());
161:       assertEquals("zho", locale0.getISO3Language());
162:       assertEquals("TWN", locale0.getISO3Country());
163:       assertEquals("zh", locale0.getLanguage());
164:       assertEquals("zh_TW", locale0.toString());
165:       assertTrue(dOMNodePointer0.isNode());
166:       assertEquals(1, dOMNodePointer0.getLength());
167:       assertFalse(dOMNodePointer0.isAttribute());
168:       assertFalse(dOMNodePointer0.isCollection());
169:       assertTrue(dOMNodePointer0.isActual());
170:       assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
171:       assertFalse(dOMNodePointer0.isContainer());
172:       assertTrue(dOMNodePointer0.isRoot());
173:       assertNull(qName0.getPrefix());
174:       assertNull(qName0.getName());
175:       assertNull(qName0.toString());
176:       assertFalse(nullPointer0.isContainer());
177:       assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
178:       assertTrue(nullPointer0.isRoot());
179:       assertTrue(nullPointer0.isLeaf());
180:       assertFalse(nullPointer0.isCollection());
181:       assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
182:       assertTrue(nullPointer0.isNode());
183:       assertFalse(nullPointer0.isActual());
184:       assertFalse(nullPointer0.isAttribute());
185:       assertEquals(0, nullPointer0.getLength());
186:       assertTrue(dOMNodePointer1.isActual());
187:       assertFalse(dOMNodePointer1.isCollection());
188:       assertFalse(dOMNodePointer1.isContainer());
189:       assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
190:       assertFalse(dOMNodePointer1.isRoot());
191:       assertFalse(dOMNodePointer1.isAttribute());
192:       assertTrue(dOMNodePointer1.isNode());
193:       assertEquals(1, dOMNodePointer1.getLength());
194:       assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
195:       assertNotNull(dOMNodePointer1);
196:       assertNotSame(dOMNodePointer0, dOMNodePointer1);
197:       assertNotSame(dOMNodePointer1, dOMNodePointer0);
198:       assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
199:       assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
200:       assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
201:       
202:       HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
203:       assertNull(hTMLDocumentImpl0.getURL());
204:       assertNull(hTMLDocumentImpl0.getDomain());
205:       assertNull(hTMLDocumentImpl0.getReferrer());
206:       assertNull(hTMLDocumentImpl0.getCookie());
207:       assertNotNull(hTMLTableElementImpl0);
208:       
209:       DOMNodePointer dOMNodePointer2 = new DOMNodePointer(dOMNodePointer1, hTMLDocumentImpl0);
210:       assertNull(hTMLDocumentImpl0.getURL());
211:       assertNull(hTMLDocumentImpl0.getDomain());
212:       assertNull(hTMLDocumentImpl0.getReferrer());
213:       assertNull(hTMLDocumentImpl0.getCookie());
214:       assertEquals("TW", locale0.getCountry());
215:       assertEquals("", locale0.getVariant());
216:       assertEquals("zho", locale0.getISO3Language());
217:       assertEquals("TWN", locale0.getISO3Country());
218:       assertEquals("zh", locale0.getLanguage());
219:       assertEquals("zh_TW", locale0.toString());
220:       assertTrue(dOMNodePointer0.isNode());
221:       assertEquals(1, dOMNodePointer0.getLength());
222:       assertFalse(dOMNodePointer0.isAttribute());
223:       assertFalse(dOMNodePointer0.isCollection());
224:       assertTrue(dOMNodePointer0.isActual());
225:       assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
226:       assertFalse(dOMNodePointer0.isContainer());
227:       assertTrue(dOMNodePointer0.isRoot());
228:       assertNull(qName0.getPrefix());
229:       assertNull(qName0.getName());
230:       assertNull(qName0.toString());
231:       assertFalse(nullPointer0.isContainer());
232:       assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
233:       assertTrue(nullPointer0.isRoot());
234:       assertTrue(nullPointer0.isLeaf());
235:       assertFalse(nullPointer0.isCollection());
236:       assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
237:       assertTrue(nullPointer0.isNode());
238:       assertFalse(nullPointer0.isActual());
239:       assertFalse(nullPointer0.isAttribute());
240:       assertEquals(0, nullPointer0.getLength());
241:       assertTrue(dOMNodePointer1.isActual());
242:       assertFalse(dOMNodePointer1.isCollection());
243:       assertFalse(dOMNodePointer1.isContainer());
244:       assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
245:       assertFalse(dOMNodePointer1.isRoot());
246:       assertFalse(dOMNodePointer1.isAttribute());
247:       assertTrue(dOMNodePointer1.isNode());
248:       assertEquals(1, dOMNodePointer1.getLength());
249:       assertTrue(dOMNodePointer2.isActual());
250:       assertFalse(dOMNodePointer2.isContainer());
251:       assertFalse(dOMNodePointer2.isAttribute());
252:       assertFalse(dOMNodePointer2.isRoot());
253:       assertTrue(dOMNodePointer2.isNode());
254:       assertEquals(1, dOMNodePointer2.getLength());
255:       assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
256:       assertFalse(dOMNodePointer2.isCollection());
257:       assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
258:       assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
259:       assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
260:       assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
261:       assertNotNull(dOMNodePointer2);
262:       assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
263:       assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
264:       assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
265:       assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
266:       
267:       DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
268:       assertNull(hTMLDocumentImpl0.getURL());
269:       assertNull(hTMLDocumentImpl0.getDomain());
270:       assertNull(hTMLDocumentImpl0.getReferrer());
271:       assertNull(hTMLDocumentImpl0.getCookie());
272:       assertNotNull(documentTypeImpl0);
273:       
274:       // Undeclared exception!
275:       try { 
276:         ((DOMNodePointer) nullPointer0).isLanguage("/_2D)uW");
277:         fail("Expecting exception: IllegalArgumentException");
278:       
279:       } catch(IllegalArgumentException e) {
280:       }
281:   }
282: }
RegularFileObject[/tmp/EvoSuite_141_1605589228634/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer_141_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 05:00:28 GMT 2020
5:  */
6: 
7: package org.apache.commons.jxpath.ri.model.dom;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class DOMNodePointer_141_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(DOMNodePointer_141_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "org.apache.commons.jxpath.Variables",
82:       "org.apache.html.dom.HTMLLinkElementImpl",
83:       "org.apache.html.dom.HTMLPreElementImpl",
84:       "org.apache.wml.dom.WMLEmElementImpl",
85:       "org.apache.commons.jxpath.ri.model.beans.PropertyPointer",
86:       "org.apache.commons.jxpath.ri.model.beans.BeanPointer",
87:       "org.apache.commons.jxpath.util.BasicTypeConverter",
88:       "org.apache.wml.dom.WMLPrevElementImpl",
89:       "org.apache.wml.WMLUElement",
90:       "org.apache.html.dom.HTMLTextAreaElementImpl",
91:       "org.apache.wml.WMLIElement",
92:       "org.apache.html.dom.HTMLHeadingElementImpl",
93:       "org.apache.html.dom.HTMLLIElementImpl",
94:       "org.apache.commons.jxpath.ri.model.NodeIterator",
95:       "org.apache.html.dom.HTMLFrameSetElementImpl",
96:       "org.apache.commons.jxpath.ri.compiler.CoreOperationCompare",
97:       "org.apache.commons.jxpath.ExpressionContext",
98:       "org.apache.commons.jxpath.ri.model.dom.DOMAttributePointer",
99:       "org.apache.wml.dom.WMLAccessElementImpl",
100:       "org.apache.html.dom.HTMLBodyElementImpl",
101:       "org.apache.wml.dom.WMLHeadElementImpl",
102:       "org.apache.commons.jxpath.ri.model.beans.CollectionPointer",
103:       "org.jdom.Parent",
104:       "org.apache.wml.WMLCardElement",
105:       "org.apache.wml.WMLOneventElement",
106:       "org.apache.commons.jxpath.JXPathContext",
107:       "org.apache.html.dom.HTMLTableSectionElementImpl",
108:       "org.apache.wml.WMLNoopElement",
109:       "org.apache.wml.WMLBrElement",
110:       "org.apache.commons.jxpath.ri.compiler.TreeCompiler",
111:       "org.apache.html.dom.HTMLHeadElementImpl",
112:       "org.apache.wml.dom.WMLOptionElementImpl",
113:       "org.apache.wml.dom.WMLNoopElementImpl",
114:       "org.jdom.Comment",
115:       "org.apache.commons.jxpath.ri.model.dom.DOMNodeIterator",
116:       "org.apache.commons.jxpath.ri.model.beans.NullPointer",
117:       "org.apache.html.dom.HTMLElementImpl",
118:       "org.apache.commons.jxpath.ri.compiler.NodeTest",
119:       "org.apache.wml.WMLElement",
120:       "org.apache.commons.jxpath.KeyManager",
121:       "org.apache.wml.WMLAElement",
122:       "org.apache.wml.dom.WMLImgElementImpl",
123:       "org.apache.html.dom.HTMLScriptElementImpl",
124:       "org.apache.html.dom.HTMLBaseElementImpl",
125:       "org.apache.wml.WMLTimerElement",
126:       "org.apache.commons.jxpath.ri.model.NodePointerFactory",
127:       "org.apache.html.dom.HTMLMenuElementImpl",
128:       "org.apache.html.dom.HTMLFormControl",
129:       "org.apache.wml.dom.WMLSetvarElementImpl",
130:       "org.apache.commons.jxpath.ri.model.beans.BeanPropertyPointer",
131:       "org.apache.wml.WMLBigElement",
132:       "org.apache.html.dom.HTMLOptionElementImpl",
133:       "org.apache.html.dom.HTMLFrameElementImpl",
134:       "org.jdom.IllegalAddException",
135:       "org.apache.commons.jxpath.ri.model.dynabeans.DynaBeanPointer",
136:       "org.apache.wml.dom.WMLSelectElementImpl",
137:       "org.apache.commons.jxpath.ri.model.beans.CollectionPointerFactory",
138:       "org.jdom.Element",
139:       "org.apache.html.dom.HTMLDirectoryElementImpl",
140:       "org.apache.html.dom.HTMLTableCaptionElementImpl",
141:       "org.apache.html.dom.HTMLObjectElementImpl",
142:       "org.apache.commons.jxpath.BasicVariables",
143:       "org.apache.wml.WMLDoElement",
144:       "org.apache.html.dom.HTMLFormElementImpl",
145:       "org.apache.commons.jxpath.JXPathAbstractFactoryException",
146:       "org.apache.commons.jxpath.JXPathInvalidAccessException",
147:       "org.apache.commons.jxpath.ri.compiler.CoreOperationEqual",
148:       "org.apache.html.dom.HTMLSelectElementImpl",
149:       "org.apache.commons.jxpath.ri.model.NodePointer",
150:       "org.apache.commons.jxpath.ri.model.VariablePointer$1",
151:       "org.apache.commons.jxpath.ri.compiler.CoreOperation",
152:       "org.apache.html.dom.HTMLAppletElementImpl",
153:       "org.apache.wml.dom.WMLPostfieldElementImpl",
154:       "org.apache.wml.dom.WMLRefreshElementImpl",
155:       "org.apache.wml.WMLTdElement",
156:       "org.apache.wml.WMLWmlElement",
157:       "org.apache.html.dom.HTMLStyleElementImpl",
158:       "org.apache.wml.WMLMetaElement",
159:       "org.apache.commons.jxpath.ri.model.container.ContainerPointer",
160:       "org.apache.html.dom.HTMLHtmlElementImpl",
161:       "org.apache.html.dom.HTMLImageElementImpl",
162:       "org.apache.wml.dom.WMLMetaElementImpl",
163:       "org.apache.commons.jxpath.ri.axes.RootContext",
164:       "org.apache.commons.jxpath.ri.axes.InitialContext",
165:       "org.apache.html.dom.HTMLAnchorElementImpl",
166:       "org.apache.commons.beanutils.DynaBean",
167:       "org.apache.html.dom.HTMLMapElementImpl",
168:       "org.apache.wml.dom.WMLInputElementImpl",
169:       "org.apache.commons.jxpath.MapDynamicPropertyHandler",
170:       "org.apache.commons.jxpath.ri.JXPathContextReferenceImpl",
171:       "org.apache.wml.dom.WMLBrElementImpl",
172:       "org.apache.commons.jxpath.util.TypeUtils$1",
173:       "org.apache.commons.jxpath.IdentityManager",
174:       "org.apache.wml.dom.WMLOneventElementImpl",
175:       "org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator",
176:       "org.apache.html.dom.HTMLUListElementImpl",
177:       "org.apache.wml.dom.WMLWmlElementImpl",
178:       "org.apache.wml.WMLInputElement",
179:       "org.apache.wml.WMLPrevElement",
180:       "org.apache.html.dom.HTMLLabelElementImpl",
181:       "org.apache.wml.WMLAnchorElement",
182:       "org.apache.html.dom.HTMLTableColElementImpl",
183:       "org.apache.wml.WMLAccessElement",
184:       "org.apache.commons.jxpath.ri.model.VariablePointerFactory",
185:       "org.apache.commons.jxpath.ri.model.dom.DOMPointerFactory",
186:       "org.apache.commons.jxpath.util.TypeUtils",
187:       "org.apache.html.dom.HTMLAreaElementImpl",
188:       "org.apache.commons.jxpath.JXPathTypeConversionException",
189:       "org.apache.wml.WMLTrElement",
190:       "org.apache.wml.WMLFieldsetElement",
191:       "org.apache.commons.jxpath.JXPathBasicBeanInfo",
192:       "org.apache.wml.WMLRefreshElement",
193:       "org.apache.wml.WMLOptgroupElement",
194:       "org.apache.commons.jxpath.ri.compiler.NodeNameTest",
195:       "org.apache.wml.WMLTableElement",
196:       "org.apache.wml.dom.WMLCardElementImpl",
197:       "org.apache.wml.WMLHeadElement",
198:       "org.apache.commons.jxpath.Pointer",
199:       "org.apache.commons.jxpath.ri.compiler.Expression",
200:       "org.apache.wml.dom.WMLAnchorElementImpl",
201:       "org.apache.wml.dom.WMLTrElementImpl",
202:       "org.apache.wml.dom.WMLStrongElementImpl",
203:       "org.apache.commons.jxpath.Function",
204:       "org.apache.commons.jxpath.JXPathBeanInfo",
205:       "org.apache.html.dom.HTMLHRElementImpl",
206:       "org.apache.wml.WMLPostfieldElement",
207:       "org.apache.html.dom.HTMLOptGroupElementImpl",
208:       "org.apache.commons.jxpath.ri.model.dynabeans.DynaBeanPointerFactory",
209:       "org.apache.wml.WMLDocument",
210:       "org.apache.commons.jxpath.JXPathInvalidSyntaxException",
211:       "org.apache.wml.dom.WMLUElementImpl",
212:       "org.apache.wml.WMLOptionElement",
213:       "org.jdom.Document",
214:       "org.apache.commons.jxpath.ri.model.dynamic.DynamicPointer",
215:       "org.apache.wml.dom.WMLBElementImpl",
216:       "org.apache.wml.dom.WMLTableElementImpl",
217:       "org.apache.wml.WMLPElement",
218:       "org.apache.html.dom.HTMLTableRowElementImpl",
219:       "org.apache.commons.jxpath.ri.model.VariablePointerFactory$VariableContextWrapper",
220:       "org.apache.html.dom.HTMLButtonElementImpl",
221:       "org.apache.html.dom.HTMLModElementImpl",
222:       "org.apache.commons.jxpath.ri.model.VariablePointer",
223:       "org.apache.wml.WMLSmallElement",
224:       "org.apache.commons.jxpath.ri.model.dynamic.DynamicPointerFactory",
225:       "org.apache.html.dom.HTMLDListElementImpl",
226:       "org.apache.commons.jxpath.JXPathContextFactory",
227:       "org.apache.commons.jxpath.ri.QName",
228:       "org.apache.wml.dom.WMLDocumentImpl",
229:       "org.apache.html.dom.HTMLBRElementImpl",
230:       "org.apache.commons.jxpath.CompiledExpression",
231:       "org.apache.commons.jxpath.NodeSet",
232:       "org.apache.html.dom.HTMLIFrameElementImpl",
233:       "org.apache.wml.dom.WMLIElementImpl",
234:       "org.apache.html.dom.HTMLTableElementImpl",
235:       "org.apache.wml.WMLGoElement",
236:       "org.apache.html.dom.HTMLLegendElementImpl",
237:       "org.apache.wml.dom.WMLTimerElementImpl",
238:       "org.apache.commons.jxpath.JXPathNotFoundException",
239:       "org.apache.commons.jxpath.ri.model.dom.NamespacePointer",
240:       "org.apache.html.dom.HTMLFontElementImpl",
241:       "org.apache.commons.jxpath.JXPathIntrospector",
242:       "org.apache.wml.WMLEmElement",
243:       "org.apache.html.dom.HTMLQuoteElementImpl",
244:       "org.apache.html.dom.HTMLDocumentImpl",
245:       "org.apache.commons.jxpath.util.TypeConverter",
246:       "org.apache.wml.WMLStrongElement",
247:       "org.apache.html.dom.HTMLParamElementImpl",
248:       "org.apache.commons.jxpath.ri.compiler.NameAttributeTest",
249:       "org.apache.commons.jxpath.ri.JXPathContextReferenceImpl$1",
250:       "org.apache.commons.jxpath.DynamicPropertyHandler",
251:       "org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest",
252:       "org.apache.wml.dom.WMLDoElementImpl",
253:       "org.apache.wml.dom.WMLSmallElementImpl",
254:       "org.apache.wml.dom.WMLGoElementImpl",
255:       "org.apache.wml.WMLImgElement",
256:       "org.apache.commons.jxpath.Container",
257:       "org.apache.html.dom.HTMLFieldSetElementImpl",
258:       "org.apache.commons.jxpath.ri.NamespaceResolver",
259:       "org.apache.html.dom.HTMLTableCellElementImpl",
260:       "org.apache.wml.WMLSetvarElement",
261:       "org.apache.commons.jxpath.AbstractFactory",
262:       "org.apache.wml.WMLSelectElement",
263:       "org.jdom.ContentList",
264:       "org.apache.wml.WMLTemplateElement",
265:       "org.apache.wml.dom.WMLTemplateElementImpl",
266:       "org.apache.commons.jxpath.ri.Compiler",
267:       "org.apache.wml.dom.WMLFieldsetElementImpl",
268:       "org.apache.wml.dom.WMLBigElementImpl",
269:       "org.apache.html.dom.HTMLDivElementImpl",
270:       "org.apache.wml.dom.WMLOptgroupElementImpl",
271:       "org.apache.html.dom.HTMLMetaElementImpl",
272:       "org.apache.commons.jxpath.Functions",
273:       "org.apache.commons.jxpath.ri.model.beans.BeanPointerFactory",
274:       "org.apache.commons.jxpath.ri.JXPathContextFactoryReferenceImpl",
275:       "org.apache.html.dom.HTMLInputElementImpl",
276:       "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer",
277:       "org.apache.commons.jxpath.ri.compiler.NodeTypeTest",
278:       "org.apache.html.dom.HTMLOListElementImpl",
279:       "org.apache.commons.jxpath.util.ValueUtils",
280:       "org.apache.wml.dom.WMLAElementImpl",
281:       "org.apache.commons.jxpath.ClassFunctions",
282:       "org.apache.wml.dom.WMLPElementImpl",
283:       "org.apache.commons.jxpath.JXPathException",
284:       "org.apache.commons.jxpath.ri.model.beans.PropertyOwnerPointer",
285:       "org.apache.html.dom.HTMLIsIndexElementImpl",
286:       "org.apache.wml.dom.WMLElementImpl",
287:       "org.apache.commons.jxpath.PackageFunctions",
288:       "org.jdom.Content",
289:       "org.apache.wml.dom.WMLTdElementImpl",
290:       "org.apache.html.dom.HTMLParagraphElementImpl",
291:       "org.apache.html.dom.HTMLTitleElementImpl",
292:       "org.apache.commons.jxpath.JXPathContextFactoryConfigurationError",
293:       "org.jdom.DocType",
294:       "org.apache.commons.jxpath.ri.model.dom.DOMNamespaceIterator",
295:       "org.apache.wml.WMLBElement",
296:       "org.jdom.ProcessingInstruction",
297:       "org.apache.html.dom.HTMLBaseFontElementImpl",
298:       "org.apache.commons.jxpath.ri.EvalContext",
299:       "org.apache.commons.jxpath.JXPathFunctionNotFoundException",
300:       "org.apache.commons.jxpath.ri.model.container.ContainerPointerFactory",
301:       "org.apache.commons.jxpath.ri.model.dom.DOMNodePointer",
302:       "org.apache.commons.jxpath.ri.compiler.Operation",
303:       "org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory",
304:       "org.apache.commons.jxpath.ri.model.beans.NullPropertyPointer"
305:     );
306:   } 
307: 
308:   private static void resetClasses() {
309:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(DOMNodePointer_141_tmp__ESTest_scaffolding.class.getClassLoader()); 
310: 
311:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
312:       "org.apache.commons.jxpath.ri.model.NodePointer",
313:       "org.apache.commons.jxpath.ri.model.dom.DOMNodePointer",
314:       "org.apache.commons.jxpath.util.BasicTypeConverter",
315:       "org.apache.commons.jxpath.util.TypeUtils$1",
316:       "org.apache.commons.jxpath.util.TypeUtils",
317:       "org.apache.html.dom.HTMLDocumentImpl",
318:       "org.apache.html.dom.HTMLElementImpl",
319:       "org.apache.html.dom.HTMLSelectElementImpl",
320:       "org.apache.wml.dom.WMLElementImpl",
321:       "org.apache.wml.dom.WMLBElementImpl",
322:       "org.apache.wml.dom.WMLNoopElementImpl",
323:       "org.apache.wml.dom.WMLAElementImpl",
324:       "org.apache.wml.dom.WMLSetvarElementImpl",
325:       "org.apache.wml.dom.WMLAccessElementImpl",
326:       "org.apache.wml.dom.WMLStrongElementImpl",
327:       "org.apache.wml.dom.WMLPostfieldElementImpl",
328:       "org.apache.wml.dom.WMLDoElementImpl",
329:       "org.apache.wml.dom.WMLWmlElementImpl",
330:       "org.apache.wml.dom.WMLTrElementImpl",
331:       "org.apache.wml.dom.WMLGoElementImpl",
332:       "org.apache.wml.dom.WMLBigElementImpl",
333:       "org.apache.wml.dom.WMLAnchorElementImpl",
334:       "org.apache.wml.dom.WMLTimerElementImpl",
335:       "org.apache.wml.dom.WMLSmallElementImpl",
336:       "org.apache.wml.dom.WMLOptgroupElementImpl",
337:       "org.apache.wml.dom.WMLHeadElementImpl",
338:       "org.apache.wml.dom.WMLTdElementImpl",
339:       "org.apache.wml.dom.WMLFieldsetElementImpl",
340:       "org.apache.wml.dom.WMLImgElementImpl",
341:       "org.apache.wml.dom.WMLRefreshElementImpl",
342:       "org.apache.wml.dom.WMLOneventElementImpl",
343:       "org.apache.wml.dom.WMLInputElementImpl",
344:       "org.apache.wml.dom.WMLPrevElementImpl",
345:       "org.apache.wml.dom.WMLTableElementImpl",
346:       "org.apache.wml.dom.WMLMetaElementImpl",
347:       "org.apache.wml.dom.WMLTemplateElementImpl",
348:       "org.apache.wml.dom.WMLBrElementImpl",
349:       "org.apache.wml.dom.WMLOptionElementImpl",
350:       "org.apache.wml.dom.WMLUElementImpl",
351:       "org.apache.wml.dom.WMLPElementImpl",
352:       "org.apache.wml.dom.WMLSelectElementImpl",
353:       "org.apache.wml.dom.WMLEmElementImpl",
354:       "org.apache.wml.dom.WMLIElementImpl",
355:       "org.apache.wml.dom.WMLCardElementImpl",
356:       "org.apache.wml.dom.WMLDocumentImpl",
357:       "org.apache.commons.jxpath.ri.QName",
358:       "org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator",
359:       "org.apache.commons.jxpath.ri.NamespaceResolver",
360:       "org.apache.commons.jxpath.ri.compiler.NodeTest",
361:       "org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest",
362:       "org.apache.commons.jxpath.ri.model.VariablePointer",
363:       "org.apache.commons.jxpath.PackageFunctions",
364:       "org.apache.commons.jxpath.JXPathContext",
365:       "org.apache.commons.jxpath.JXPathContextFactory",
366:       "org.apache.commons.jxpath.ri.JXPathContextFactoryReferenceImpl",
367:       "org.apache.commons.jxpath.ri.compiler.TreeCompiler",
368:       "org.apache.commons.jxpath.ri.model.beans.CollectionPointerFactory",
369:       "org.apache.commons.jxpath.ri.model.beans.BeanPointerFactory",
370:       "org.apache.commons.jxpath.ri.model.dynamic.DynamicPointerFactory",
371:       "org.apache.commons.jxpath.ri.model.VariablePointerFactory",
372:       "org.apache.commons.jxpath.ri.model.dom.DOMPointerFactory",
373:       "org.jdom.Document",
374:       "org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory",
375:       "org.apache.commons.jxpath.ri.model.dynabeans.DynaBeanPointerFactory",
376:       "org.apache.commons.jxpath.ri.model.container.ContainerPointerFactory",
377:       "org.apache.commons.jxpath.ri.JXPathContextReferenceImpl$1",
378:       "org.apache.commons.jxpath.ri.JXPathContextReferenceImpl",
379:       "org.apache.commons.jxpath.util.ValueUtils",
380:       "org.apache.commons.jxpath.JXPathBasicBeanInfo",
381:       "org.apache.commons.jxpath.JXPathIntrospector",
382:       "org.apache.commons.jxpath.ri.model.beans.PropertyOwnerPointer",
383:       "org.apache.commons.jxpath.ri.model.beans.BeanPointer",
384:       "org.apache.html.dom.HTMLTableElementImpl",
385:       "org.apache.html.dom.HTMLTableCellElementImpl",
386:       "org.apache.commons.jxpath.ri.model.dom.DOMNamespaceIterator",
387:       "org.apache.html.dom.HTMLAnchorElementImpl",
388:       "org.apache.html.dom.HTMLAppletElementImpl",
389:       "org.apache.commons.jxpath.ri.model.dom.DOMNodeIterator",
390:       "org.apache.html.dom.HTMLTableSectionElementImpl",
391:       "org.apache.html.dom.HTMLTableRowElementImpl",
392:       "org.apache.html.dom.HTMLScriptElementImpl",
393:       "org.apache.commons.jxpath.ri.model.beans.NullPointer",
394:       "org.apache.commons.jxpath.BasicVariables",
395:       "org.apache.commons.jxpath.ri.compiler.NodeNameTest",
396:       "org.apache.html.dom.HTMLBRElementImpl",
397:       "org.apache.html.dom.HTMLMetaElementImpl",
398:       "org.apache.html.dom.HTMLHtmlElementImpl",
399:       "org.apache.html.dom.HTMLHeadElementImpl",
400:       "org.apache.html.dom.HTMLOptGroupElementImpl",
401:       "org.apache.html.dom.HTMLBaseElementImpl",
402:       "org.apache.html.dom.HTMLPreElementImpl",
403:       "org.apache.commons.jxpath.JXPathException",
404:       "org.apache.html.dom.HTMLLegendElementImpl",
405:       "org.apache.html.dom.HTMLMenuElementImpl",
406:       "org.apache.html.dom.HTMLObjectElementImpl",
407:       "org.apache.html.dom.HTMLTableCaptionElementImpl",
408:       "org.apache.commons.jxpath.ri.compiler.NodeTypeTest",
409:       "org.apache.html.dom.HTMLModElementImpl",
410:       "org.apache.html.dom.HTMLBodyElementImpl",
411:       "org.apache.commons.jxpath.ri.model.VariablePointer$1",
412:       "org.apache.html.dom.HTMLHeadingElementImpl",
413:       "org.apache.commons.jxpath.ri.parser.XPathParser",
414:       "org.apache.commons.jxpath.ri.parser.SimpleCharStream",
415:       "org.apache.commons.jxpath.ri.parser.XPathParserTokenManager",
416:       "org.apache.commons.jxpath.ri.parser.Token",
417:       "org.apache.commons.jxpath.ri.parser.XPathParser$JJCalls",
418:       "org.apache.commons.jxpath.ri.Parser",
419:       "org.apache.commons.jxpath.ri.compiler.Step",
420:       "org.apache.commons.jxpath.ri.compiler.Expression",
421:       "org.apache.commons.jxpath.ri.compiler.Path",
422:       "org.apache.commons.jxpath.ri.compiler.LocationPath",
423:       "org.apache.commons.jxpath.ri.compiler.Operation",
424:       "org.apache.commons.jxpath.ri.compiler.CoreOperation",
425:       "org.apache.commons.jxpath.ri.compiler.CoreOperationUnion",
426:       "org.apache.commons.jxpath.ri.EvalContext",
427:       "org.apache.commons.jxpath.ri.axes.InitialContext",
428:       "org.apache.commons.jxpath.ri.axes.RootContext",
429:       "org.apache.commons.jxpath.ri.axes.ChildContext",
430:       "org.apache.commons.jxpath.ri.axes.NodeSetContext",
431:       "org.apache.commons.jxpath.ri.axes.UnionContext",
432:       "org.apache.commons.jxpath.BasicNodeSet",
433:       "org.apache.commons.jxpath.util.ReverseComparator",
434:       "org.apache.commons.jxpath.ri.parser.ParseException",
435:       "org.apache.commons.jxpath.ri.parser.XPathParserConstants",
436:       "org.apache.commons.jxpath.JXPathInvalidSyntaxException",
437:       "org.apache.commons.jxpath.ri.parser.TokenMgrError",
438:       "org.apache.commons.jxpath.ri.model.dom.NamespacePointer",
439:       "org.apache.html.dom.HTMLUListElementImpl",
440:       "org.apache.html.dom.HTMLOListElementImpl",
441:       "org.apache.html.dom.HTMLQuoteElementImpl",
442:       "org.apache.html.dom.HTMLAreaElementImpl",
443:       "org.apache.html.dom.HTMLStyleElementImpl",
444:       "org.apache.html.dom.HTMLButtonElementImpl",
445:       "org.apache.html.dom.HTMLImageElementImpl",
446:       "org.apache.html.dom.HTMLInputElementImpl",
447:       "org.apache.html.dom.HTMLOptionElementImpl",
448:       "org.apache.html.dom.HTMLFrameElementImpl",
449:       "org.apache.html.dom.HTMLLinkElementImpl",
450:       "org.apache.html.dom.HTMLParagraphElementImpl",
451:       "org.apache.html.dom.HTMLParamElementImpl",
452:       "org.apache.html.dom.HTMLDListElementImpl",
453:       "org.apache.html.dom.HTMLFieldSetElementImpl",
454:       "org.apache.html.dom.HTMLTitleElementImpl",
455:       "org.apache.html.dom.HTMLFontElementImpl",
456:       "org.apache.html.dom.HTMLIFrameElementImpl",
457:       "org.apache.commons.jxpath.ri.model.beans.CollectionPointer",
458:       "org.apache.html.dom.HTMLTextAreaElementImpl",
459:       "org.apache.html.dom.HTMLDirectoryElementImpl",
460:       "org.apache.html.dom.HTMLIsIndexElementImpl",
461:       "org.apache.commons.jxpath.ri.model.dom.DOMAttributePointer",
462:       "org.apache.html.dom.HTMLFormElementImpl",
463:       "org.apache.html.dom.HTMLHRElementImpl",
464:       "org.apache.html.dom.HTMLDivElementImpl",
465:       "org.apache.html.dom.HTMLFrameSetElementImpl",
466:       "org.apache.html.dom.HTMLLabelElementImpl",
467:       "org.apache.html.dom.HTMLCollectionImpl",
468:       "org.apache.html.dom.HTMLLIElementImpl",
469:       "org.apache.html.dom.HTMLMapElementImpl",
470:       "org.apache.html.dom.HTMLTableColElementImpl",
471:       "org.apache.html.dom.HTMLBaseFontElementImpl",
472:       "org.apache.html.dom.NameNodeListImpl",
473:       "org.apache.commons.jxpath.ri.compiler.Expression$ValueIterator",
474:       "org.apache.commons.jxpath.ri.model.beans.PropertyIterator",
475:       "org.apache.commons.jxpath.ri.model.beans.BeanAttributeIterator",
476:       "org.apache.commons.jxpath.ri.model.beans.PropertyPointer",
477:       "org.apache.commons.jxpath.ri.model.beans.NullPropertyPointer",
478:       "org.apache.commons.jxpath.FunctionLibrary",
479:       "org.apache.commons.jxpath.ri.JXPathCompiledExpression",
480:       "org.apache.commons.jxpath.ri.compiler.Constant"
481:     );
482:   }
483: }

[MASTER] 05:00:28.799 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
assertNull(hTMLDocumentImpl0.getURL());
assertNull(hTMLDocumentImpl0.getDomain());
assertNull(hTMLDocumentImpl0.getReferrer());
assertNull(hTMLDocumentImpl0.getCookie());
assertNotNull(hTMLDocumentImpl0);

Locale locale0 = Locale.TRADITIONAL_CHINESE;
assertEquals("TW", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertEquals("zho", locale0.getISO3Language());
assertEquals("TWN", locale0.getISO3Country());
assertEquals("zh", locale0.getLanguage());
assertEquals("zh_TW", locale0.toString());
assertNotNull(locale0);

HTMLObjectElementImpl hTMLObjectElementImpl0 = new HTMLObjectElementImpl(hTMLDocumentImpl0, "");
assertNull(hTMLDocumentImpl0.getURL());
assertNull(hTMLDocumentImpl0.getDomain());
assertNull(hTMLDocumentImpl0.getReferrer());
assertNull(hTMLDocumentImpl0.getCookie());
assertNotNull(hTMLObjectElementImpl0);

String string0 = "/_2D)uW";
EntityImpl entityImpl0 = new EntityImpl(hTMLDocumentImpl0, "English");
assertNull(hTMLDocumentImpl0.getURL());
assertNull(hTMLDocumentImpl0.getDomain());
assertNull(hTMLDocumentImpl0.getReferrer());
assertNull(hTMLDocumentImpl0.getCookie());
assertNotNull(entityImpl0);

DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "Factory could not create a child node for path: ");
assertNull(hTMLDocumentImpl0.getURL());
assertNull(hTMLDocumentImpl0.getDomain());
assertNull(hTMLDocumentImpl0.getReferrer());
assertNull(hTMLDocumentImpl0.getCookie());
assertEquals("TW", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertEquals("zho", locale0.getISO3Language());
assertEquals("TWN", locale0.getISO3Country());
assertEquals("zh", locale0.getLanguage());
assertEquals("zh_TW", locale0.toString());
assertTrue(dOMNodePointer0.isNode());
assertEquals(1, dOMNodePointer0.getLength());
assertFalse(dOMNodePointer0.isAttribute());
assertFalse(dOMNodePointer0.isCollection());
assertTrue(dOMNodePointer0.isActual());
assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
assertFalse(dOMNodePointer0.isContainer());
assertTrue(dOMNodePointer0.isRoot());
assertNotNull(dOMNodePointer0);
assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);

QName qName0 = dOMNodePointer0.getName();
assertNull(hTMLDocumentImpl0.getURL());
assertNull(hTMLDocumentImpl0.getDomain());
assertNull(hTMLDocumentImpl0.getReferrer());
assertNull(hTMLDocumentImpl0.getCookie());
assertEquals("TW", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertEquals("zho", locale0.getISO3Language());
assertEquals("TWN", locale0.getISO3Country());
assertEquals("zh", locale0.getLanguage());
assertEquals("zh_TW", locale0.toString());
assertTrue(dOMNodePointer0.isNode());
assertEquals(1, dOMNodePointer0.getLength());
assertFalse(dOMNodePointer0.isAttribute());
assertFalse(dOMNodePointer0.isCollection());
assertTrue(dOMNodePointer0.isActual());
assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
assertFalse(dOMNodePointer0.isContainer());
assertTrue(dOMNodePointer0.isRoot());
assertNull(qName0.getPrefix());
assertNull(qName0.getName());
assertNull(qName0.toString());
assertNotNull(qName0);
assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);

ElementDefinitionImpl elementDefinitionImpl0 = new ElementDefinitionImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
assertNull(hTMLDocumentImpl0.getURL());
assertNull(hTMLDocumentImpl0.getDomain());
assertNull(hTMLDocumentImpl0.getReferrer());
assertNull(hTMLDocumentImpl0.getCookie());
assertNotNull(elementDefinitionImpl0);

NullPointer nullPointer0 = (NullPointer)NodePointer.newNodePointer(qName0, (Object) null, locale0);
assertNull(hTMLDocumentImpl0.getURL());
assertNull(hTMLDocumentImpl0.getDomain());
assertNull(hTMLDocumentImpl0.getReferrer());
assertNull(hTMLDocumentImpl0.getCookie());
assertEquals("TW", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertEquals("zho", locale0.getISO3Language());
assertEquals("TWN", locale0.getISO3Country());
assertEquals("zh", locale0.getLanguage());
assertEquals("zh_TW", locale0.toString());
assertTrue(dOMNodePointer0.isNode());
assertEquals(1, dOMNodePointer0.getLength());
assertFalse(dOMNodePointer0.isAttribute());
assertFalse(dOMNodePointer0.isCollection());
assertTrue(dOMNodePointer0.isActual());
assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
assertFalse(dOMNodePointer0.isContainer());
assertTrue(dOMNodePointer0.isRoot());
assertNull(qName0.getPrefix());
assertNull(qName0.getName());
assertNull(qName0.toString());
assertFalse(nullPointer0.isContainer());
assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
assertTrue(nullPointer0.isRoot());
assertTrue(nullPointer0.isLeaf());
assertFalse(nullPointer0.isCollection());
assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
assertTrue(nullPointer0.isNode());
assertFalse(nullPointer0.isActual());
assertFalse(nullPointer0.isAttribute());
assertEquals(0, nullPointer0.getLength());
assertNotNull(nullPointer0);
assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);

DOMNodePointer dOMNodePointer1 = (DOMNodePointer)NodePointer.newChildNodePointer(nullPointer0, qName0, entityImpl0);
assertNull(hTMLDocumentImpl0.getURL());
assertNull(hTMLDocumentImpl0.getDomain());
assertNull(hTMLDocumentImpl0.getReferrer());
assertNull(hTMLDocumentImpl0.getCookie());
assertEquals("TW", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertEquals("zho", locale0.getISO3Language());
assertEquals("TWN", locale0.getISO3Country());
assertEquals("zh", locale0.getLanguage());
assertEquals("zh_TW", locale0.toString());
assertTrue(dOMNodePointer0.isNode());
assertEquals(1, dOMNodePointer0.getLength());
assertFalse(dOMNodePointer0.isAttribute());
assertFalse(dOMNodePointer0.isCollection());
assertTrue(dOMNodePointer0.isActual());
assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
assertFalse(dOMNodePointer0.isContainer());
assertTrue(dOMNodePointer0.isRoot());
assertNull(qName0.getPrefix());
assertNull(qName0.getName());
assertNull(qName0.toString());
assertFalse(nullPointer0.isContainer());
assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
assertTrue(nullPointer0.isRoot());
assertTrue(nullPointer0.isLeaf());
assertFalse(nullPointer0.isCollection());
assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
assertTrue(nullPointer0.isNode());
assertFalse(nullPointer0.isActual());
assertFalse(nullPointer0.isAttribute());
assertEquals(0, nullPointer0.getLength());
assertTrue(dOMNodePointer1.isActual());
assertFalse(dOMNodePointer1.isCollection());
assertFalse(dOMNodePointer1.isContainer());
assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
assertFalse(dOMNodePointer1.isRoot());
assertFalse(dOMNodePointer1.isAttribute());
assertTrue(dOMNodePointer1.isNode());
assertEquals(1, dOMNodePointer1.getLength());
assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
assertNotNull(dOMNodePointer1);
assertNotSame(dOMNodePointer0, dOMNodePointer1);
assertNotSame(dOMNodePointer1, dOMNodePointer0);
assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);

HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
assertNull(hTMLDocumentImpl0.getURL());
assertNull(hTMLDocumentImpl0.getDomain());
assertNull(hTMLDocumentImpl0.getReferrer());
assertNull(hTMLDocumentImpl0.getCookie());
assertNotNull(hTMLTableElementImpl0);

DOMNodePointer dOMNodePointer2 = new DOMNodePointer(dOMNodePointer1, hTMLDocumentImpl0);
assertNull(hTMLDocumentImpl0.getURL());
assertNull(hTMLDocumentImpl0.getDomain());
assertNull(hTMLDocumentImpl0.getReferrer());
assertNull(hTMLDocumentImpl0.getCookie());
assertEquals("TW", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertEquals("zho", locale0.getISO3Language());
assertEquals("TWN", locale0.getISO3Country());
assertEquals("zh", locale0.getLanguage());
assertEquals("zh_TW", locale0.toString());
assertTrue(dOMNodePointer0.isNode());
assertEquals(1, dOMNodePointer0.getLength());
assertFalse(dOMNodePointer0.isAttribute());
assertFalse(dOMNodePointer0.isCollection());
assertTrue(dOMNodePointer0.isActual());
assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
assertFalse(dOMNodePointer0.isContainer());
assertTrue(dOMNodePointer0.isRoot());
assertNull(qName0.getPrefix());
assertNull(qName0.getName());
assertNull(qName0.toString());
assertFalse(nullPointer0.isContainer());
assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
assertTrue(nullPointer0.isRoot());
assertTrue(nullPointer0.isLeaf());
assertFalse(nullPointer0.isCollection());
assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
assertTrue(nullPointer0.isNode());
assertFalse(nullPointer0.isActual());
assertFalse(nullPointer0.isAttribute());
assertEquals(0, nullPointer0.getLength());
assertTrue(dOMNodePointer1.isActual());
assertFalse(dOMNodePointer1.isCollection());
assertFalse(dOMNodePointer1.isContainer());
assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
assertFalse(dOMNodePointer1.isRoot());
assertFalse(dOMNodePointer1.isAttribute());
assertTrue(dOMNodePointer1.isNode());
assertEquals(1, dOMNodePointer1.getLength());
assertTrue(dOMNodePointer2.isActual());
assertFalse(dOMNodePointer2.isContainer());
assertFalse(dOMNodePointer2.isAttribute());
assertFalse(dOMNodePointer2.isRoot());
assertTrue(dOMNodePointer2.isNode());
assertEquals(1, dOMNodePointer2.getLength());
assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
assertFalse(dOMNodePointer2.isCollection());
assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
assertNotNull(dOMNodePointer2);
assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);

DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
assertNull(hTMLDocumentImpl0.getURL());
assertNull(hTMLDocumentImpl0.getDomain());
assertNull(hTMLDocumentImpl0.getReferrer());
assertNull(hTMLDocumentImpl0.getCookie());
assertNotNull(documentTypeImpl0);

((DOMNodePointer) nullPointer0).isLanguage("/_2D)uW");

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 6
* Writing tests to file
* Writing JUnit test case 'DOMNodePointer_ESTest' to results/JxPath-16/org.apache.commons.jxpath.ri.model.dom.DOMNodePointer/BBC-F0/tests/29
* Done!

* Computation finished
