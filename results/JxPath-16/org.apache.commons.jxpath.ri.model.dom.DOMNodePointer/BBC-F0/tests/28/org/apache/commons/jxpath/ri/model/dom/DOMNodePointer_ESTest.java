/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 05:00:31 GMT 2020
 */

package org.apache.commons.jxpath.ri.model.dom;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Vector;
import java.util.stream.Stream;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.ClassFunctions;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.apache.commons.jxpath.ri.model.beans.NullPointer;
import org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator;
import org.apache.commons.jxpath.ri.model.dom.DOMAttributePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNamespaceIterator;
import org.apache.commons.jxpath.ri.model.dom.DOMNodeIterator;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.html.dom.HTMLAnchorElementImpl;
import org.apache.html.dom.HTMLAreaElementImpl;
import org.apache.html.dom.HTMLBaseFontElementImpl;
import org.apache.html.dom.HTMLButtonElementImpl;
import org.apache.html.dom.HTMLDListElementImpl;
import org.apache.html.dom.HTMLDirectoryElementImpl;
import org.apache.html.dom.HTMLDivElementImpl;
import org.apache.html.dom.HTMLDocumentImpl;
import org.apache.html.dom.HTMLFontElementImpl;
import org.apache.html.dom.HTMLFormElementImpl;
import org.apache.html.dom.HTMLHRElementImpl;
import org.apache.html.dom.HTMLHeadingElementImpl;
import org.apache.html.dom.HTMLHtmlElementImpl;
import org.apache.html.dom.HTMLIFrameElementImpl;
import org.apache.html.dom.HTMLImageElementImpl;
import org.apache.html.dom.HTMLLIElementImpl;
import org.apache.html.dom.HTMLLinkElementImpl;
import org.apache.html.dom.HTMLMetaElementImpl;
import org.apache.html.dom.HTMLOptGroupElementImpl;
import org.apache.html.dom.HTMLParagraphElementImpl;
import org.apache.html.dom.HTMLParamElementImpl;
import org.apache.html.dom.HTMLQuoteElementImpl;
import org.apache.html.dom.HTMLScriptElementImpl;
import org.apache.html.dom.HTMLSelectElementImpl;
import org.apache.html.dom.HTMLStyleElementImpl;
import org.apache.html.dom.HTMLTableCaptionElementImpl;
import org.apache.html.dom.HTMLTableCellElementImpl;
import org.apache.html.dom.HTMLTableElementImpl;
import org.apache.html.dom.HTMLTableRowElementImpl;
import org.apache.html.dom.HTMLTableSectionElementImpl;
import org.apache.wml.dom.WMLAElementImpl;
import org.apache.wml.dom.WMLBigElementImpl;
import org.apache.wml.dom.WMLCardElementImpl;
import org.apache.wml.dom.WMLDocumentImpl;
import org.apache.wml.dom.WMLEmElementImpl;
import org.apache.wml.dom.WMLHeadElementImpl;
import org.apache.wml.dom.WMLIElementImpl;
import org.apache.wml.dom.WMLImgElementImpl;
import org.apache.wml.dom.WMLOneventElementImpl;
import org.apache.wml.dom.WMLOptgroupElementImpl;
import org.apache.wml.dom.WMLOptionElementImpl;
import org.apache.wml.dom.WMLPElementImpl;
import org.apache.wml.dom.WMLPostfieldElementImpl;
import org.apache.wml.dom.WMLRefreshElementImpl;
import org.apache.wml.dom.WMLSelectElementImpl;
import org.apache.wml.dom.WMLSetvarElementImpl;
import org.apache.wml.dom.WMLSmallElementImpl;
import org.apache.wml.dom.WMLTdElementImpl;
import org.apache.wml.dom.WMLTrElementImpl;
import org.apache.wml.dom.WMLUElementImpl;
import org.apache.wml.dom.WMLWmlElementImpl;
import org.apache.xerces.dom.AttrNSImpl;
import org.apache.xerces.dom.CDATASectionImpl;
import org.apache.xerces.dom.CommentImpl;
import org.apache.xerces.dom.CoreDocumentImpl;
import org.apache.xerces.dom.DOMInputSourceImpl;
import org.apache.xerces.dom.DeferredDocumentImpl;
import org.apache.xerces.dom.DocumentFragmentImpl;
import org.apache.xerces.dom.DocumentImpl;
import org.apache.xerces.dom.DocumentTypeImpl;
import org.apache.xerces.dom.ElementDefinitionImpl;
import org.apache.xerces.dom.ElementImpl;
import org.apache.xerces.dom.ElementNSImpl;
import org.apache.xerces.dom.EntityImpl;
import org.apache.xerces.dom.EntityReferenceImpl;
import org.apache.xerces.dom.NamedNodeMapImpl;
import org.apache.xerces.dom.PSVIAttrNSImpl;
import org.apache.xerces.dom.PSVIDocumentImpl;
import org.apache.xerces.dom.PSVIElementNSImpl;
import org.apache.xerces.dom.ProcessingInstructionImpl;
import org.apache.xerces.dom.TextImpl;
import org.apache.xerces.dom3.TypeInfo;
import org.apache.xerces.impl.XMLErrorReporter;
import org.apache.xerces.parsers.CachingParserPool;
import org.apache.xerces.parsers.DOMBuilderImpl;
import org.apache.xerces.parsers.IntegratedParserConfiguration;
import org.apache.xerces.parsers.StandardParserConfiguration;
import org.apache.xerces.util.DOMErrorHandlerWrapper;
import org.apache.xerces.util.ErrorHandlerWrapper;
import org.apache.xerces.util.SymbolTable;
import org.apache.xerces.util.XMLGrammarPoolImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.DocumentType;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.html.HTMLCollection;
import org.w3c.dom.html.HTMLElement;
import org.w3c.dom.html.HTMLFormElement;
import org.w3c.dom.html.HTMLTableSectionElement;
import org.w3c.dom.ls.DOMInputSource;
import org.w3c.dom.traversal.NodeFilter;
import org.w3c.dom.traversal.NodeIterator;
import org.xml.sax.ErrorHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DOMNodePointer_ESTest extends DOMNodePointer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertTrue(dOMNodePointer1.isNode());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, "6-", "<<unknown namespace>>");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(processingInstructionImpl0);
      
      Locale locale1 = Locale.forLanguageTag("http://www.w3.org/XML/1998/namespace");
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
      assertEquals(4, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      boolean boolean1 = DOMNodePointer.testNode((Node) processingInstructionImpl0, (NodeTest) nodeTypeTest0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals(4, nodeTypeTest0.getNodeType());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "Gj*");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLParagraphElementImpl0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLParagraphElementImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, (String) null, (String) null);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(processingInstructionImpl0);
      
      HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLTableElementImpl0);
      
      dOMNodePointer0.setValue(hTMLTableElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, processingInstructionImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      Object object0 = dOMNodePointer1.getValue();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", object0);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(object0);
      
      int int0 = NodePointer.WHOLE_COLLECTION;
      assertEquals(Integer.MIN_VALUE, int0);
      
      String string0 = dOMNodePointer0.getDefaultNamespaceURI();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNull(string0);
      
      String string1 = DOMNodePointer.findEnclosingAttribute(processingInstructionImpl0, "(\"4{hVMoFYXKB");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "Gj*");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLParagraphElementImpl0);
      
      Locale locale0 = Locale.forLanguageTag("Gj*");
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      HTMLBaseFontElementImpl hTMLBaseFontElementImpl0 = new HTMLBaseFontElementImpl(hTMLDocumentImpl0, "/c88DLvj@v;^J");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLBaseFontElementImpl0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLParagraphElementImpl0, locale0, "Gj*");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      QName qName0 = new QName("<<unknown namespace>>", "http://www.w3.org/2000/xmlns/");
      assertEquals("<<unknown namespace>>:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("<<unknown namespace>>", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertNotNull(qName0);
      
      boolean boolean0 = dOMNodePointer0.isRoot();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(boolean0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals("<<unknown namespace>>:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("<<unknown namespace>>", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) hTMLBaseFontElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(variablePointer0, hTMLBaseFontElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("<<unknown namespace>>:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("<<unknown namespace>>", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) null);
      assertNotNull(wMLDocumentImpl0);
      
      WMLWmlElementImpl wMLWmlElementImpl0 = new WMLWmlElementImpl(wMLDocumentImpl0, "<<unknown namespace>>");
      assertNotNull(wMLWmlElementImpl0);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(dOMNodePointer1, wMLWmlElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("<<unknown namespace>>:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("<<unknown namespace>>", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isContainer());
      assertFalse(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(1, dOMNodePointer2.getLength());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer2);
      
      dOMNodePointer0.printPointerChain();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      
      String string0 = dOMNodePointer2.asPath();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("<<unknown namespace>>:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("<<unknown namespace>>", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isContainer());
      assertFalse(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(1, dOMNodePointer2.getLength());
      assertTrue(dOMNodePointer2.isNode());
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("$<<unknown namespace>>:http://www.w3.org/2000/xmlns/<<unknown namespace>>[1]", string0);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertNotNull(string0);
      
      DocumentImpl documentImpl0 = new DocumentImpl((DocumentType) null);
      assertNotNull(documentImpl0);
      
      DocumentImpl documentImpl1 = (DocumentImpl)documentImpl0.cloneNode(true);
      assertNotSame(documentImpl1, documentImpl0);
      assertNotSame(documentImpl0, documentImpl1);
      assertFalse(documentImpl1.equals((Object)documentImpl0));
      assertNotNull(documentImpl1);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("xmlns:");
      assertEquals("xmlns:", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      boolean boolean1 = DOMNodePointer.testNode((Node) documentImpl1, (NodeTest) processingInstructionTest0);
      assertEquals("xmlns:", processingInstructionTest0.getTarget());
      assertNotSame(documentImpl1, documentImpl0);
      assertNotSame(documentImpl0, documentImpl1);
      assertFalse(boolean1);
      assertFalse(documentImpl1.equals((Object)documentImpl0));
      assertFalse(boolean1 == boolean0);
      assertFalse(documentImpl0.equals((Object)documentImpl1));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-11));
      assertEquals((-11), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      String string0 = NodePointer.UNKNOWN_NAMESPACE;
      assertEquals("<<unknown namespace>>", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string1 = DOMNodePointer.XMLNS_NAMESPACE_URI;
      assertEquals("http://www.w3.org/2000/xmlns/", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      TextImpl textImpl0 = new TextImpl();
      assertNotNull(textImpl0);
      
      boolean boolean1 = DOMNodePointer.testNode((Node) textImpl0, (NodeTest) nodeTypeTest0);
      assertEquals((-11), nodeTypeTest0.getNodeType());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = NodePointer.UNKNOWN_NAMESPACE;
      assertEquals("<<unknown namespace>>", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      QName qName0 = new QName("<<unknown namespace>>", "org.apache.wml.dom.WMLCardElementImpl");
      assertEquals("<<unknown namespace>>", qName0.getPrefix());
      assertEquals("<<unknown namespace>>:org.apache.wml.dom.WMLCardElementImpl", qName0.toString());
      assertEquals("org.apache.wml.dom.WMLCardElementImpl", qName0.getName());
      assertNotNull(qName0);
      
      Node node0 = textImpl0.item(1845);
      assertNull(node0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "<<unknown namespace>>");
      assertEquals("<<unknown namespace>>", qName0.getPrefix());
      assertEquals("<<unknown namespace>>:org.apache.wml.dom.WMLCardElementImpl", qName0.toString());
      assertEquals("org.apache.wml.dom.WMLCardElementImpl", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("<<unknown namespace>>", nodeNameTest0.getNamespaceURI());
      assertEquals("<<unknown namespace>>:org.apache.wml.dom.WMLCardElementImpl", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      boolean boolean2 = DOMNodePointer.testNode((Node) textImpl0, (NodeTest) nodeNameTest0);
      assertEquals("<<unknown namespace>>", qName0.getPrefix());
      assertEquals("<<unknown namespace>>:org.apache.wml.dom.WMLCardElementImpl", qName0.toString());
      assertEquals("org.apache.wml.dom.WMLCardElementImpl", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("<<unknown namespace>>", nodeNameTest0.getNamespaceURI());
      assertEquals("<<unknown namespace>>:org.apache.wml.dom.WMLCardElementImpl", nodeNameTest0.toString());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(true, false);
      assertNotNull(deferredDocumentImpl0);
      
      EntityReferenceImpl entityReferenceImpl0 = new EntityReferenceImpl(deferredDocumentImpl0, "option");
      assertNotNull(entityReferenceImpl0);
      
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, entityReferenceImpl0, locale0);
      assertTrue(nodePointer0.isNode());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isActual());
      assertFalse(nodePointer0.isAttribute());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("<<unknown namespace>>", qName0.getPrefix());
      assertEquals("<<unknown namespace>>:org.apache.wml.dom.WMLCardElementImpl", qName0.toString());
      assertEquals("org.apache.wml.dom.WMLCardElementImpl", qName0.getName());
      assertSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodePointer0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(nodePointer0, entityReferenceImpl0);
      assertTrue(nodePointer0.isNode());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isActual());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("<<unknown namespace>>", qName0.getPrefix());
      assertEquals("<<unknown namespace>>:org.apache.wml.dom.WMLCardElementImpl", qName0.toString());
      assertEquals("org.apache.wml.dom.WMLCardElementImpl", qName0.getName());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(dOMNodePointer0.equals((Object)nodePointer0));
      assertNotNull(dOMNodePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "<<unknown namespace>>");
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(deferredDocumentImpl0, "node()", "org.apache.wml.dom.WMLCardElementImpl", "org.apache.commons.jxpath.ri.QName@0000000003");
      assertNotNull(documentTypeImpl0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNotNull(wMLDocumentImpl0);
      
      WMLOptionElementImpl wMLOptionElementImpl0 = new WMLOptionElementImpl(wMLDocumentImpl0, "org.apache.commons.jxpath.ri.QName@0000000003");
      assertNotNull(wMLOptionElementImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) wMLOptionElementImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.createChild((JXPathContext) jXPathContextReferenceImpl1, qName0, 9, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: 
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "Gj*");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLParagraphElementImpl0);
      
      Locale locale0 = Locale.forLanguageTag("Gj*");
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      HTMLBaseFontElementImpl hTMLBaseFontElementImpl0 = new HTMLBaseFontElementImpl(hTMLDocumentImpl0, "Gj*");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLBaseFontElementImpl0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLParagraphElementImpl0, locale0, "Gj*");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      Locale locale1 = Locale.ITALIAN;
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("it", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals("GJ*", qName0.getName());
      assertEquals("GJ*", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(qName0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("http://www.w3.org/2000/xmlns/");
      assertEquals("http://www.w3.org/2000/xmlns/", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = dOMNodePointer0.isRoot();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(boolean0);
      assertFalse(locale0.equals((Object)locale1));
      
      CDATASectionImpl cDATASectionImpl0 = new CDATASectionImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(cDATASectionImpl0);
      
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, "Gj*", "Gj*");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(processingInstructionImpl0);
      
      processingInstructionImpl0.setTextContent("<<unknown namespace>>");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      boolean boolean1 = DOMNodePointer.testNode((Node) processingInstructionImpl0, (NodeTest) processingInstructionTest0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("http://www.w3.org/2000/xmlns/", processingInstructionTest0.getTarget());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = NodePointer.WHOLE_COLLECTION;
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "B+");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLParagraphElementImpl0);
      
      Locale locale0 = Locale.forLanguageTag("3\">wBBTB+Ny+z]k~");
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      QName qName0 = new QName("3\">wBBTB+Ny+z]k~", "B+");
      assertEquals("3\">wBBTB+Ny+z]k~:B+", qName0.toString());
      assertEquals("B+", qName0.getName());
      assertEquals("3\">wBBTB+Ny+z]k~", qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ">");
      assertEquals("3\">wBBTB+Ny+z]k~:B+", qName0.toString());
      assertEquals("B+", qName0.getName());
      assertEquals("3\">wBBTB+Ny+z]k~", qName0.getPrefix());
      assertEquals(">", nodeNameTest0.getNamespaceURI());
      assertEquals("3\">wBBTB+Ny+z]k~:B+", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      String string0 = NodePointer.UNKNOWN_NAMESPACE;
      assertEquals("<<unknown namespace>>", string0);
      assertNotNull(string0);
      
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLParagraphElementImpl0, (NodeTest) nodeNameTest0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("3\">wBBTB+Ny+z]k~:B+", qName0.toString());
      assertEquals("B+", qName0.getName());
      assertEquals("3\">wBBTB+Ny+z]k~", qName0.getPrefix());
      assertEquals(">", nodeNameTest0.getNamespaceURI());
      assertEquals("3\">wBBTB+Ny+z]k~:B+", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(boolean0);
      
      int int0 = NodePointer.WHOLE_COLLECTION;
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      HTMLElement hTMLElement0 = hTMLDocumentImpl0.getBody();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLElement0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLElement0, locale0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLElement0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      assertFalse(namespaceResolver0.isSealed());
      assertNotNull(namespaceResolver0);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/", "http://www.w3.org/XML/1998/namespace", "xml");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(documentTypeImpl0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(wMLDocumentImpl0);
      
      QName qName0 = new QName("xml:lang");
      assertEquals("xml", qName0.getPrefix());
      assertEquals("xml:lang", qName0.toString());
      assertEquals("lang", qName0.getName());
      assertNotNull(qName0);
      
      PSVIElementNSImpl pSVIElementNSImpl0 = new PSVIElementNSImpl(wMLDocumentImpl0, "org.apache.html.dom.HTMLMetaElementImpl", "preserve", "http://www.w3.org/XML/1998/namespace");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(pSVIElementNSImpl0);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(dOMNodePointer1, documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer2.isContainer());
      assertFalse(dOMNodePointer2.isRoot());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer2);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) pSVIElementNSImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      DOMAttributePointer dOMAttributePointer0 = (DOMAttributePointer)dOMNodePointer0.createAttribute(jXPathContextReferenceImpl0, qName0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals("xml", qName0.getPrefix());
      assertEquals("xml:lang", qName0.toString());
      assertEquals("lang", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(dOMAttributePointer0.isCollection());
      assertTrue(dOMAttributePointer0.isNode());
      assertFalse(dOMAttributePointer0.isRoot());
      assertFalse(dOMAttributePointer0.isAttribute());
      assertTrue(dOMAttributePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMAttributePointer0.getIndex());
      assertEquals(1, dOMAttributePointer0.getLength());
      assertTrue(dOMAttributePointer0.isLeaf());
      assertFalse(dOMAttributePointer0.isContainer());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(dOMAttributePointer0);
      
      int int0 = NodePointer.WHOLE_COLLECTION;
      assertEquals(Integer.MIN_VALUE, int0);
      
      String string0 = DOMNodePointer.getNamespaceURI((Node) pSVIElementNSImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("org.apache.html.dom.HTMLMetaElementImpl", string0);
      assertNotNull(string0);
      
      String string1 = dOMNodePointer0.getDefaultNamespaceURI();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl((DocumentType) null);
      assertNotNull(pSVIDocumentImpl0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(pSVIDocumentImpl0, locale0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      QName qName0 = new QName("<<unknown namespace>>", "<<unknown namespace>>");
      assertEquals("<<unknown namespace>>", qName0.getPrefix());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("<<unknown namespace>>:<<unknown namespace>>", qName0.toString());
      assertNotNull(qName0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
      assertEquals(4, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "<<unknown namespace>>");
      assertEquals("<<unknown namespace>>", qName0.getPrefix());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("<<unknown namespace>>:<<unknown namespace>>", qName0.toString());
      assertEquals("<<unknown namespace>>", nodeNameTest0.getNamespaceURI());
      assertEquals("<<unknown namespace>>:<<unknown namespace>>", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      boolean boolean0 = dOMNodePointer0.testNode((NodeTest) nodeTypeTest0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(4, nodeTypeTest0.getNodeType());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean0);
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLDocumentImpl0);
      
      String string0 = DOMNodePointer.XMLNS_NAMESPACE_URI;
      assertEquals("http://www.w3.org/2000/xmlns/", string0);
      assertNotNull(string0);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace", "http://www.w3.org/XML/1998/namespace", "V");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(documentTypeImpl0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(wMLDocumentImpl0);
      
      WMLWmlElementImpl wMLWmlElementImpl0 = new WMLWmlElementImpl(wMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(wMLWmlElementImpl0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, wMLDocumentImpl0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      dOMNodePointer0.printPointerChain();
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      
      String string1 = dOMNodePointer0.asPath();
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", string1);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      AttrNSImpl attrNSImpl0 = new AttrNSImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/", "Factory cold not create a child node for path: ", "<<unknown namespace>>");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(attrNSImpl0);
      
      String string2 = DOMNodePointer.getPrefix(attrNSImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("Factory cold not create a child node for path", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.UK;
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertNotNull(locale0);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "}jDB5JdmK", "<Letter>", "&quot;");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(documentTypeImpl0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(wMLDocumentImpl0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(wMLDocumentImpl0, locale0, "&quot;");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      String string0 = dOMNodePointer0.getNamespaceURI("d/B@");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(string0);
      
      Element element0 = wMLDocumentImpl0.createElementNS("U", "WM", "//www.w3.org/XML/1998/namespace");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(element0);
      
      EntityImpl entityImpl0 = new EntityImpl(hTMLDocumentImpl0, (String) null);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(entityImpl0);
      
      Node node0 = entityImpl0.cloneNode(true);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotSame(entityImpl0, node0);
      assertNotSame(node0, entityImpl0);
      assertFalse(node0.equals((Object)entityImpl0));
      assertNotNull(node0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, node0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(entityImpl0.equals((Object)node0));
      assertFalse(node0.equals((Object)entityImpl0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      String string1 = dOMNodePointer1.asPath();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(entityImpl0, node0);
      assertNotSame(node0, entityImpl0);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("id('&quot;')", string1);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(entityImpl0.equals((Object)node0));
      assertFalse(node0.equals((Object)entityImpl0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(string1);
      
      int int0 = NodePointer.WHOLE_COLLECTION;
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh_TW", locale1.toString());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      String string0 = nodeTypeTest0.toString();
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertEquals("text()", string0);
      assertNotNull(string0);
      
      String string1 = NodePointer.UNKNOWN_NAMESPACE;
      assertEquals("<<unknown namespace>>", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      TextImpl textImpl0 = new TextImpl();
      assertNotNull(textImpl0);
      
      boolean boolean0 = DOMNodePointer.testNode((Node) textImpl0, (NodeTest) nodeTypeTest0);
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertTrue(boolean0);
      
      String string2 = DOMNodePointer.XML_NAMESPACE_URI;
      assertEquals("http://www.w3.org/XML/1998/namespace", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      QName qName0 = new QName("+S?a,FV", "http://www.w3.org/XML/1998/namespace");
      assertEquals("+S?a,FV:http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertEquals("+S?a,FV", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "+S?a,FV");
      assertEquals("+S?a,FV:http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertEquals("+S?a,FV", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getName());
      assertEquals("+S?a,FV", nodeNameTest0.getNamespaceURI());
      assertEquals("+S?a,FV:http://www.w3.org/XML/1998/namespace", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      boolean boolean1 = DOMNodePointer.testNode((Node) textImpl0, (NodeTest) nodeNameTest0);
      assertEquals("+S?a,FV:http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertEquals("+S?a,FV", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getName());
      assertEquals("+S?a,FV", nodeNameTest0.getNamespaceURI());
      assertEquals("+S?a,FV:http://www.w3.org/XML/1998/namespace", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(textImpl0, locale1);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh_TW", locale1.toString());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      Object object0 = dOMNodePointer0.getValue();
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh_TW", locale1.toString());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", object0);
      assertFalse(object0.equals((Object)string1));
      assertFalse(object0.equals((Object)string0));
      assertFalse(object0.equals((Object)string2));
      assertNotNull(object0);
      
      QName qName1 = dOMNodePointer0.getName();
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh_TW", locale1.toString());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNull(qName1.toString());
      assertNull(qName1.getName());
      assertNull(qName1.getPrefix());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl((DocumentType) null, true);
      assertNotNull(coreDocumentImpl0);
      
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(coreDocumentImpl0, "Qesdgw02*bk2", "Qesdgw02*bk2");
      assertNotNull(processingInstructionImpl0);
      
      Locale locale0 = new Locale("Qesdgw02*bk2", "&d T");
      assertEquals("qesdgw02*bk2", locale0.getLanguage());
      assertEquals("&D T", locale0.getCountry());
      assertEquals("qesdgw02*bk2_&D T", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(processingInstructionImpl0, locale0);
      assertEquals("qesdgw02*bk2", locale0.getLanguage());
      assertEquals("&D T", locale0.getCountry());
      assertEquals("qesdgw02*bk2_&D T", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) null);
      assertNotNull(wMLDocumentImpl0);
      
      String string0 = NodePointer.UNKNOWN_NAMESPACE;
      assertEquals("<<unknown namespace>>", string0);
      assertNotNull(string0);
      
      QName qName0 = dOMNodePointer0.getName();
      assertEquals("qesdgw02*bk2", locale0.getLanguage());
      assertEquals("&D T", locale0.getCountry());
      assertEquals("qesdgw02*bk2_&D T", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNull(qName0.getPrefix());
      assertEquals("Qesdgw02*bk2", qName0.getName());
      assertEquals("Qesdgw02*bk2", qName0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals("qesdgw02*bk2", locale0.getLanguage());
      assertEquals("&D T", locale0.getCountry());
      assertEquals("qesdgw02*bk2_&D T", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNull(qName0.getPrefix());
      assertEquals("Qesdgw02*bk2", qName0.getName());
      assertEquals("Qesdgw02*bk2", qName0.toString());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      VariablePointer variablePointer1 = (VariablePointer)variablePointer0.clone();
      assertEquals("qesdgw02*bk2", locale0.getLanguage());
      assertEquals("&D T", locale0.getCountry());
      assertEquals("qesdgw02*bk2_&D T", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNull(qName0.getPrefix());
      assertEquals("Qesdgw02*bk2", qName0.getName());
      assertEquals("Qesdgw02*bk2", qName0.toString());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer1.isActual());
      assertFalse(variablePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
      assertTrue(variablePointer1.isContainer());
      assertFalse(variablePointer1.isAttribute());
      assertTrue(variablePointer1.isRoot());
      assertNotSame(variablePointer0, variablePointer1);
      assertNotSame(variablePointer1, variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(variablePointer1.equals((Object)variablePointer0));
      assertNotNull(variablePointer1);
      
      // Undeclared exception!
      try { 
        variablePointer0.namespacePointer((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'Qesdgw02*bk2'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl((DocumentType) null, true);
      assertNotNull(coreDocumentImpl0);
      
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(coreDocumentImpl0, "Qesdgw02*bk2", "Qesdgw02*bk2");
      assertNotNull(processingInstructionImpl0);
      
      Locale locale0 = new Locale("Qesdgw02*bk2", "K;s\"yBwz-|$X;Ox");
      assertEquals("K;S\"YBWZ-|$X;OX", locale0.getCountry());
      assertEquals("qesdgw02*bk2", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("qesdgw02*bk2_K;S\"YBWZ-|$X;OX", locale0.toString());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(processingInstructionImpl0, locale0);
      assertEquals("K;S\"YBWZ-|$X;OX", locale0.getCountry());
      assertEquals("qesdgw02*bk2", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("qesdgw02*bk2_K;S\"YBWZ-|$X;OX", locale0.toString());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) null);
      assertNotNull(wMLDocumentImpl0);
      
      WMLBigElementImpl wMLBigElementImpl0 = new WMLBigElementImpl(wMLDocumentImpl0, "Qesdgw02*bk2");
      assertNotNull(wMLBigElementImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) wMLBigElementImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      String string0 = "org.apache.wml.dom.WMLBElementImpl@0000000006";
      WMLWmlElementImpl wMLWmlElementImpl0 = new WMLWmlElementImpl(wMLDocumentImpl0, "org.apache.wml.dom.WMLBElementImpl@0000000006");
      assertNotNull(wMLWmlElementImpl0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, wMLDocumentImpl0);
      assertEquals("K;S\"YBWZ-|$X;OX", locale0.getCountry());
      assertEquals("qesdgw02*bk2", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("qesdgw02*bk2_K;S\"YBWZ-|$X;OX", locale0.toString());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      dOMNodePointer1.printPointerChain();
      assertEquals("K;S\"YBWZ-|$X;OX", locale0.getCountry());
      assertEquals("qesdgw02*bk2", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("qesdgw02*bk2_K;S\"YBWZ-|$X;OX", locale0.toString());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      
      String string1 = dOMNodePointer0.asPath();
      assertEquals("K;S\"YBWZ-|$X;OX", locale0.getCountry());
      assertEquals("qesdgw02*bk2", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("qesdgw02*bk2_K;S\"YBWZ-|$X;OX", locale0.toString());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("/processing-instruction('Qesdgw02*bk2')[1]", string1);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = DOMNodePointer.getPrefix(coreDocumentImpl0);
      assertNull(string2);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      DOMNodeIterator dOMNodeIterator0 = (DOMNodeIterator)dOMNodePointer1.childIterator(nodeTypeTest0, true, dOMNodePointer0);
      assertEquals("K;S\"YBWZ-|$X;OX", locale0.getCountry());
      assertEquals("qesdgw02*bk2", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("qesdgw02*bk2_K;S\"YBWZ-|$X;OX", locale0.toString());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertEquals(0, dOMNodeIterator0.getPosition());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodeIterator0);
      
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl((DocumentType) null);
      assertNotNull(pSVIDocumentImpl0);
      
      try { 
        pSVIDocumentImpl0.createElementNS("org.apache.commons.jxpath.ri.parser.XPathParser", "GH?c\"'1F_U,");
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // INVALID_CHARACTER_ERR: An invalid or illegal XML character is specified. 
         //
         verifyException("org.apache.xerces.dom.CoreDocumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.ITALIAN;
      assertEquals("", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      String string0 = nodeTypeTest0.toString();
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertEquals("text()", string0);
      assertNotNull(string0);
      
      String string1 = nodeTypeTest0.toString();
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertEquals("text()", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      TextImpl textImpl0 = new TextImpl();
      assertNotNull(textImpl0);
      
      Locale locale2 = Locale.CHINA;
      assertEquals("CHN", locale2.getISO3Country());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("zh_CN", locale2.toString());
      assertEquals("CN", locale2.getCountry());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(textImpl0, locale2);
      assertEquals("CHN", locale2.getISO3Country());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("zh_CN", locale2.toString());
      assertEquals("CN", locale2.getCountry());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(dOMNodePointer0);
      
      String string2 = dOMNodePointer0.asPath();
      assertEquals("CHN", locale2.getISO3Country());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("zh_CN", locale2.toString());
      assertEquals("CN", locale2.getCountry());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("/text()[1]", string2);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = dOMNodePointer0.isRoot();
      assertEquals("CHN", locale2.getISO3Country());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("zh_CN", locale2.toString());
      assertEquals("CN", locale2.getCountry());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(boolean0);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
      assertNotNull(deferredDocumentImpl0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(deferredDocumentImpl0, locale0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-954));
      assertEquals((-954), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      boolean boolean0 = DOMNodePointer.testNode((Node) deferredDocumentImpl0, (NodeTest) nodeTypeTest0);
      assertEquals((-954), nodeTypeTest0.getNodeType());
      assertFalse(boolean0);
      
      int int0 = NodePointer.WHOLE_COLLECTION;
      assertEquals(Integer.MIN_VALUE, int0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(deferredDocumentImpl0, locale0, "3\"f1sj^T}]-X");
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      boolean boolean1 = dOMNodePointer0.equals(dOMNodePointer0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(boolean1);
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(boolean1 == boolean0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "3\"f1sj^T}]-X");
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = (JXPathContextReferenceImpl)jXPathContextReferenceImpl1.getParentContext();
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(jXPathContextReferenceImpl2);
      
      QName qName0 = dOMNodePointer1.getName();
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(qName0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer1.createChild((JXPathContext) jXPathContextReferenceImpl2, qName0, 3863);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: id('3&quot;f1sj^T}]-X')
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl((DocumentType) null, true);
      assertNotNull(coreDocumentImpl0);
      
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(coreDocumentImpl0, "Qesdgw02*bk2", "Qesdgw02*bk2");
      assertNotNull(processingInstructionImpl0);
      
      Locale locale0 = new Locale("Qesdgw02*bk2", "K;s\"yBwz-|$X;Ox");
      assertEquals("qesdgw02*bk2", locale0.getLanguage());
      assertEquals("K;S\"YBWZ-|$X;OX", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("qesdgw02*bk2_K;S\"YBWZ-|$X;OX", locale0.toString());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(processingInstructionImpl0, locale0);
      assertEquals("qesdgw02*bk2", locale0.getLanguage());
      assertEquals("K;S\"YBWZ-|$X;OX", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("qesdgw02*bk2_K;S\"YBWZ-|$X;OX", locale0.toString());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) null);
      assertNotNull(wMLDocumentImpl0);
      
      WMLBigElementImpl wMLBigElementImpl0 = new WMLBigElementImpl(wMLDocumentImpl0, "Qesdgw02*bk2");
      assertNotNull(wMLBigElementImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) wMLBigElementImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)jXPathContextReferenceImpl0.getRelativeContext(dOMNodePointer0);
      assertEquals("qesdgw02*bk2", locale0.getLanguage());
      assertEquals("K;S\"YBWZ-|$X;OX", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("qesdgw02*bk2_K;S\"YBWZ-|$X;OX", locale0.toString());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.createAttribute(jXPathContextReferenceImpl1, (QName) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot create an attribute for path /processing-instruction('Qesdgw02*bk2')[1]/@null, operation is not allowed for this type of node
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLParagraphElementImpl0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLParagraphElementImpl0, locale0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      String string0 = dOMNodePointer1.getNamespaceURI("http://www.w3.org/XML/1998/namespace");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNull(string0);
      
      HTMLBaseFontElementImpl hTMLBaseFontElementImpl0 = new HTMLBaseFontElementImpl(hTMLDocumentImpl0, "");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLBaseFontElementImpl0);
      
      QName qName0 = dOMNodePointer1.getName();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(qName0);
      
      Locale locale1 = Locale.ITALIAN;
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      String string1 = locale0.getDisplayLanguage();
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotSame(locale0, locale1);
      assertEquals("Chinese", string1);
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(string1);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(nodeNameTest0);
      
      PSVIAttrNSImpl pSVIAttrNSImpl0 = new PSVIAttrNSImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace", "6", "Chinese");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(pSVIAttrNSImpl0);
      
      boolean boolean0 = DOMNodePointer.testNode((Node) pSVIAttrNSImpl0, (NodeTest) nodeTypeTest0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertFalse(boolean0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("og.apachecommons.jxpath.ri.QName@000000009");
      assertNotNull(processingInstructionTest0);
      
      String string2 = nodeTypeTest0.toString();
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertEquals("text()", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(false, false);
      assertNotNull(deferredDocumentImpl0);
      
      String string3 = DOMNodePointer.XML_NAMESPACE_URI;
      assertEquals("http://www.w3.org/XML/1998/namespace", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      TextImpl textImpl0 = new TextImpl();
      assertNotNull(textImpl0);
      
      boolean boolean1 = DOMNodePointer.testNode((Node) textImpl0, (NodeTest) nodeTypeTest0);
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "WM", "WM", "<<unknown namespace>>");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(documentTypeImpl0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(wMLDocumentImpl0);
      
      String string0 = dOMNodePointer0.getNamespaceURI("WM");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(string0);
      
      Element element0 = wMLDocumentImpl0.createElementNS("http://www.w3.org/2000/xmlns/", "WM", "<<unknown namespace>>");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(element0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, element0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      CommentImpl commentImpl0 = new CommentImpl(wMLDocumentImpl0, "WM");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(commentImpl0);
      
      WMLTrElementImpl wMLTrElementImpl0 = new WMLTrElementImpl(wMLDocumentImpl0, "Chinese");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(wMLTrElementImpl0);
      
      dOMNodePointer0.setValue(wMLTrElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      
      JXPathContext jXPathContext0 = null;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(jXPathContextReferenceImpl0);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(dOMNodePointer1, element0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isContainer());
      assertEquals(1, dOMNodePointer2.getLength());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isRoot());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer2);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)jXPathContextReferenceImpl0.getRelativeContext(dOMNodePointer2);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isContainer());
      assertEquals(1, dOMNodePointer2.getLength());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isRoot());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(qName0);
      
      // Undeclared exception!
      dOMNodePointer1.createChild((JXPathContext) jXPathContextReferenceImpl1, qName0, (-1414));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "Gj*");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLParagraphElementImpl0);
      
      Locale locale0 = Locale.forLanguageTag("Gj*");
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      HTMLBaseFontElementImpl hTMLBaseFontElementImpl0 = new HTMLBaseFontElementImpl(hTMLDocumentImpl0, "/c88QDbLvj@v;^J");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLBaseFontElementImpl0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLParagraphElementImpl0, locale0, "Gj*");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      Locale locale1 = Locale.ITALIAN;
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals("GJ*", qName0.toString());
      assertEquals("GJ*", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(qName0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("<<unknown namespace>>");
      assertEquals("<<unknown namespace>>", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "P8iS_");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals("GJ*", qName0.toString());
      assertEquals("GJ*", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("P8iS_", nodeNameTest0.getNamespaceURI());
      assertEquals("GJ*", nodeNameTest0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(nodeNameTest0);
      
      boolean boolean0 = dOMNodePointer0.testNode((NodeTest) processingInstructionTest0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals("<<unknown namespace>>", processingInstructionTest0.getTarget());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl(true);
      assertNotNull(coreDocumentImpl0);
      
      CDATASectionImpl cDATASectionImpl0 = new CDATASectionImpl(coreDocumentImpl0, "Yppr0|3hg_{Bo");
      assertNotNull(cDATASectionImpl0);
      
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, "m (=gKh!w<nQ\"%", "m (=gKh!w<nQ\"%");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(processingInstructionImpl0);
      
      dOMNodePointer0.setValue(processingInstructionImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "org.apache.commons.jxpath.ri.model.dom.DOMPointerFactory");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(documentTypeImpl0);
      
      Object object0 = dOMNodePointer0.getValue();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("m (=gKh!w<nQ\"%", object0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(object0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      String string0 = dOMNodePointer1.asPath();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", string0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string0.equals((Object)object0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(string0);
      
      String string1 = NodePointer.UNKNOWN_NAMESPACE;
      assertEquals("<<unknown namespace>>", string1);
      assertFalse(string1.equals((Object)object0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "Gj*");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLParagraphElementImpl0);
      
      Locale locale0 = Locale.forLanguageTag("Gj*");
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      HTMLBaseFontElementImpl hTMLBaseFontElementImpl0 = new HTMLBaseFontElementImpl(hTMLDocumentImpl0, "/c88QDbLvj@v;^J");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLBaseFontElementImpl0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLParagraphElementImpl0, locale0, "Gj*");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals("GJ*", qName0.getName());
      assertEquals("GJ*", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl1 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "<<unknown namespace>>");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertFalse(hTMLParagraphElementImpl1.equals((Object)hTMLParagraphElementImpl0));
      assertNotNull(hTMLParagraphElementImpl1);
      
      boolean boolean0 = dOMNodePointer0.isLeaf();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(hTMLParagraphElementImpl0, hTMLParagraphElementImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(boolean0);
      assertFalse(hTMLParagraphElementImpl0.equals((Object)hTMLParagraphElementImpl1));
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      
      HTMLFormElementImpl hTMLFormElementImpl0 = new HTMLFormElementImpl(hTMLDocumentImpl1, ":Bq3W=B)~3 f");
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLFormElementImpl0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLFormElementImpl0, locale0, "<<unknown namespace>>");
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      QName qName1 = dOMNodePointer1.getName();
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals("", qName1.getPrefix());
      assertEquals(":BQ3W=B)~3 F", qName1.toString());
      assertEquals("BQ3W=B)~3 F", qName1.getName());
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("http://www.w3.org/2000/xmlns/");
      assertEquals("http://www.w3.org/2000/xmlns/", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "http://www.w3.org/2000/xmlns/");
      assertEquals("http://www.w3.org/2000/xmlns/", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      boolean boolean1 = dOMNodePointer0.testNode((NodeTest) processingInstructionTest0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals("http://www.w3.org/2000/xmlns/", processingInstructionTest0.getTarget());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLParagraphElementImpl0, hTMLParagraphElementImpl1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean1);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLParagraphElementImpl0.equals((Object)hTMLParagraphElementImpl1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(boolean1 == boolean0);
      
      CDATASectionImpl cDATASectionImpl0 = new CDATASectionImpl(hTMLDocumentImpl1, "Gj*");
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(cDATASectionImpl0);
      
      HTMLHeadingElementImpl hTMLHeadingElementImpl0 = new HTMLHeadingElementImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(hTMLHeadingElementImpl0);
      
      dOMNodePointer1.setValue(hTMLHeadingElementImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl1, "x&o);M[(5.:7*NdY.c");
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(documentTypeImpl0);
      
      Object object0 = dOMNodePointer0.getValue();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLParagraphElementImpl0, hTMLParagraphElementImpl1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", object0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLParagraphElementImpl0.equals((Object)hTMLParagraphElementImpl1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(object0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      String string0 = dOMNodePointer0.asPath();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLParagraphElementImpl0, hTMLParagraphElementImpl1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("id('Gj*')", string0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLParagraphElementImpl0.equals((Object)hTMLParagraphElementImpl1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(string0.equals((Object)object0));
      assertNotNull(string0);
      
      String string1 = NodePointer.UNKNOWN_NAMESPACE;
      assertEquals("<<unknown namespace>>", string1);
      assertFalse(string1.equals((Object)object0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
      assertNotNull(deferredDocumentImpl0);
      
      ElementImpl elementImpl0 = new ElementImpl(deferredDocumentImpl0, "xml>space");
      assertNotNull(elementImpl0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(elementImpl0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.getLanguage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLParagraphElementImpl0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLParagraphElementImpl0, locale0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl1 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(hTMLParagraphElementImpl1.equals((Object)hTMLParagraphElementImpl0));
      assertNotNull(hTMLParagraphElementImpl1);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(hTMLParagraphElementImpl1, locale0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isAttribute());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLParagraphElementImpl1.equals((Object)hTMLParagraphElementImpl0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer2);
      
      HTMLIFrameElementImpl hTMLIFrameElementImpl0 = new HTMLIFrameElementImpl(hTMLDocumentImpl0, "\u0004grE.-!NmdD");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLIFrameElementImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) hTMLIFrameElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)jXPathContextReferenceImpl0.getRelativeContext(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotSame(hTMLParagraphElementImpl0, hTMLParagraphElementImpl1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(hTMLParagraphElementImpl0.equals((Object)hTMLParagraphElementImpl1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      
      JXPathContext jXPathContext0 = jXPathContextReferenceImpl0.getParentContext();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertNull(jXPathContext0);
      
      QName qName0 = new QName("APPLET");
      assertEquals("APPLET", qName0.getName());
      assertEquals("APPLET", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      DOMAttributePointer dOMAttributePointer0 = (DOMAttributePointer)dOMNodePointer2.createAttribute(jXPathContextReferenceImpl0, qName0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isAttribute());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("APPLET", qName0.getName());
      assertEquals("APPLET", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(dOMAttributePointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, dOMAttributePointer0.getIndex());
      assertFalse(dOMAttributePointer0.isCollection());
      assertFalse(dOMAttributePointer0.isContainer());
      assertEquals(1, dOMAttributePointer0.getLength());
      assertTrue(dOMAttributePointer0.isActual());
      assertTrue(dOMAttributePointer0.isNode());
      assertFalse(dOMAttributePointer0.isRoot());
      assertFalse(dOMAttributePointer0.isAttribute());
      assertNotSame(hTMLParagraphElementImpl1, hTMLParagraphElementImpl0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLParagraphElementImpl1.equals((Object)hTMLParagraphElementImpl0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(dOMAttributePointer0);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "y)Gj*", ",p", "http://www.w3.org/XML/1998/namespace");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(documentTypeImpl0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(wMLDocumentImpl0);
      
      QName qName1 = new QName("xml:lang");
      assertEquals("xml", qName1.getPrefix());
      assertEquals("lang", qName1.getName());
      assertEquals("xml:lang", qName1.toString());
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      
      HTMLTableSectionElementImpl hTMLTableSectionElementImpl0 = new HTMLTableSectionElementImpl(hTMLDocumentImpl0, "");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLTableSectionElementImpl0);
      
      PSVIElementNSImpl pSVIElementNSImpl0 = new PSVIElementNSImpl(wMLDocumentImpl0, "^+xDf*i!:o|hVIE", "/text()", "?\u0000D!R6TD'zM`8S?T");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(pSVIElementNSImpl0);
      
      DOMNodePointer dOMNodePointer3 = new DOMNodePointer(dOMAttributePointer0, pSVIElementNSImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer3.isCollection());
      assertFalse(dOMNodePointer3.isContainer());
      assertTrue(dOMNodePointer3.isActual());
      assertEquals(1, dOMNodePointer3.getLength());
      assertFalse(dOMNodePointer3.isAttribute());
      assertTrue(dOMNodePointer3.isNode());
      assertFalse(dOMNodePointer3.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isAttribute());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("APPLET", qName0.getName());
      assertEquals("APPLET", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(dOMAttributePointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, dOMAttributePointer0.getIndex());
      assertFalse(dOMAttributePointer0.isCollection());
      assertFalse(dOMAttributePointer0.isContainer());
      assertEquals(1, dOMAttributePointer0.getLength());
      assertTrue(dOMAttributePointer0.isActual());
      assertTrue(dOMAttributePointer0.isNode());
      assertFalse(dOMAttributePointer0.isRoot());
      assertFalse(dOMAttributePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertFalse(hTMLParagraphElementImpl1.equals((Object)hTMLParagraphElementImpl0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(qName0.equals((Object)qName1));
      assertNotNull(dOMNodePointer3);
      
      DOMAttributePointer dOMAttributePointer1 = (DOMAttributePointer)dOMNodePointer3.createAttribute(jXPathContextReferenceImpl0, qName1);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isAttribute());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("APPLET", qName0.getName());
      assertEquals("APPLET", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(dOMAttributePointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, dOMAttributePointer0.getIndex());
      assertFalse(dOMAttributePointer0.isCollection());
      assertFalse(dOMAttributePointer0.isContainer());
      assertEquals(1, dOMAttributePointer0.getLength());
      assertTrue(dOMAttributePointer0.isActual());
      assertTrue(dOMAttributePointer0.isNode());
      assertFalse(dOMAttributePointer0.isRoot());
      assertFalse(dOMAttributePointer0.isAttribute());
      assertEquals("xml", qName1.getPrefix());
      assertEquals("lang", qName1.getName());
      assertEquals("xml:lang", qName1.toString());
      assertFalse(dOMNodePointer3.isCollection());
      assertFalse(dOMNodePointer3.isContainer());
      assertTrue(dOMNodePointer3.isActual());
      assertEquals(1, dOMNodePointer3.getLength());
      assertFalse(dOMNodePointer3.isAttribute());
      assertTrue(dOMNodePointer3.isNode());
      assertFalse(dOMNodePointer3.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertTrue(dOMAttributePointer1.isActual());
      assertTrue(dOMAttributePointer1.isNode());
      assertFalse(dOMAttributePointer1.isContainer());
      assertEquals(1, dOMAttributePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMAttributePointer1.getIndex());
      assertFalse(dOMAttributePointer1.isAttribute());
      assertTrue(dOMAttributePointer1.isLeaf());
      assertFalse(dOMAttributePointer1.isCollection());
      assertFalse(dOMAttributePointer1.isRoot());
      assertNotSame(hTMLParagraphElementImpl1, hTMLParagraphElementImpl0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer3);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(qName0, qName1);
      assertNotSame(dOMAttributePointer0, dOMAttributePointer1);
      assertNotSame(qName1, qName0);
      assertNotSame(dOMNodePointer3, dOMNodePointer0);
      assertNotSame(dOMNodePointer3, dOMNodePointer1);
      assertNotSame(dOMNodePointer3, dOMNodePointer2);
      assertNotSame(dOMAttributePointer1, dOMAttributePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLParagraphElementImpl1.equals((Object)hTMLParagraphElementImpl0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer3));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertFalse(dOMAttributePointer1.equals((Object)dOMAttributePointer0));
      assertNotNull(dOMAttributePointer1);
      
      dOMNodePointer3.setValue(pSVIElementNSImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer3.isCollection());
      assertFalse(dOMNodePointer3.isContainer());
      assertTrue(dOMNodePointer3.isActual());
      assertEquals(1, dOMNodePointer3.getLength());
      assertFalse(dOMNodePointer3.isAttribute());
      assertTrue(dOMNodePointer3.isNode());
      assertFalse(dOMNodePointer3.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isAttribute());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("APPLET", qName0.getName());
      assertEquals("APPLET", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(dOMAttributePointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, dOMAttributePointer0.getIndex());
      assertFalse(dOMAttributePointer0.isCollection());
      assertFalse(dOMAttributePointer0.isContainer());
      assertEquals(1, dOMAttributePointer0.getLength());
      assertTrue(dOMAttributePointer0.isActual());
      assertTrue(dOMAttributePointer0.isNode());
      assertFalse(dOMAttributePointer0.isRoot());
      assertFalse(dOMAttributePointer0.isAttribute());
      assertNotSame(dOMNodePointer3, dOMNodePointer0);
      assertNotSame(dOMNodePointer3, dOMNodePointer1);
      assertNotSame(dOMNodePointer3, dOMNodePointer2);
      assertNotSame(hTMLParagraphElementImpl1, hTMLParagraphElementImpl0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer3);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(qName0, qName1);
      assertNotSame(dOMAttributePointer0, dOMAttributePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertFalse(hTMLParagraphElementImpl1.equals((Object)hTMLParagraphElementImpl0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer3));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(dOMAttributePointer0.equals((Object)dOMAttributePointer1));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.UK;
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      CDATASectionImpl cDATASectionImpl0 = new CDATASectionImpl(hTMLDocumentImpl0, "1%N]FQ");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(cDATASectionImpl0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(cDATASectionImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      HTMLIFrameElementImpl hTMLIFrameElementImpl0 = new HTMLIFrameElementImpl(hTMLDocumentImpl0, "<<unknown namespace>>");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLIFrameElementImpl0);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(documentTypeImpl0);
      
      String string0 = DOMNodePointer.XML_NAMESPACE_URI;
      assertEquals("http://www.w3.org/XML/1998/namespace", string0);
      assertNotNull(string0);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      
      HTMLTableSectionElementImpl hTMLTableSectionElementImpl0 = new HTMLTableSectionElementImpl(hTMLDocumentImpl0, "LdI+*a");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLTableSectionElementImpl0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(cDATASectionImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      HTMLLinkElementImpl hTMLLinkElementImpl0 = new HTMLLinkElementImpl(hTMLDocumentImpl0, "=?$gbA5G");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLLinkElementImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) hTMLLinkElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContext jXPathContext0 = jXPathContextReferenceImpl0.getParentContext();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNull(jXPathContext0);
      
      QName qName1 = dOMNodePointer1.getName();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isActual());
      assertNull(qName1.toString());
      assertNull(qName1.getPrefix());
      assertNull(qName1.getName());
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(qName1);
      
      VariablePointer variablePointer0 = new VariablePointer(qName1);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isActual());
      assertNull(qName1.toString());
      assertNull(qName1.getPrefix());
      assertNull(qName1.getName());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(variablePointer0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.setValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      String string0 = "GJ*";
      HTMLTableCaptionElementImpl hTMLTableCaptionElementImpl0 = new HTMLTableCaptionElementImpl(hTMLDocumentImpl0, "GJ*");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLTableCaptionElementImpl0);
      
      String string1 = "/text()";
      Locale locale0 = new Locale("/text()", "GJ*", "GJ*");
      assertEquals("GJ*", locale0.getCountry());
      assertEquals("GJ*", locale0.getVariant());
      assertEquals("/text()", locale0.getLanguage());
      assertEquals("/text()_GJ*_GJ*", locale0.toString());
      assertNotNull(locale0);
      
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, ":DQqW=", "org.apache.html.dom.HTMLButtonElementImpl@0000000005");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(processingInstructionImpl0);
      
      String string2 = DOMNodePointer.getPrefix(processingInstructionImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("GJ*", locale0.getCountry());
      assertEquals("GJ*", locale0.getVariant());
      assertEquals("/text()", locale0.getLanguage());
      assertEquals("/text()_GJ*_GJ*", locale0.toString());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      JXPathContext jXPathContext0 = null;
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange(":DQqW=", (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight=-1.0
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      DocumentType documentType0 = hTMLDocumentImpl0.getDoctype();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(documentType0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) null);
      assertNotNull(wMLDocumentImpl0);
      
      Element element0 = wMLDocumentImpl0.createElementNS("org.apache.commons.jxpath.ri.parser.SimpleCharStream", "org.apache.commons.jxpath.ri.parser.SimpleCharStream", "Tx2&^F");
      assertNotNull(element0);
      
      QName qName0 = new QName("&apos;");
      assertNull(qName0.getPrefix());
      assertEquals("&apos;", qName0.toString());
      assertEquals("&apos;", qName0.getName());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("&apos;", qName0.toString());
      assertEquals("&apos;", qName0.getName());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
      assertNotNull(pSVIDocumentImpl0);
      
      Element element1 = pSVIDocumentImpl0.createElementNS("t97", "xml:lang", "xml:lang");
      assertNotNull(element1);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, element1);
      assertNull(qName0.getPrefix());
      assertEquals("&apos;", qName0.toString());
      assertEquals("&apos;", qName0.getName());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      QName qName1 = dOMNodePointer0.getName();
      assertNull(qName0.getPrefix());
      assertEquals("&apos;", qName0.toString());
      assertEquals("&apos;", qName0.getName());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals("xml:xml:lang", qName1.toString());
      assertEquals("xml", qName1.getPrefix());
      assertEquals("xml:lang", qName1.getName());
      assertNotSame(qName0, qName1);
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("[/z");
      assertEquals("[/z", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      assertNull(qName0.getPrefix());
      assertEquals("&apos;", qName0.toString());
      assertEquals("&apos;", qName0.getName());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals("xml:xml:lang", qName1.toString());
      assertEquals("xml", qName1.getPrefix());
      assertEquals("xml:lang", qName1.getName());
      assertEquals("xml:xml:lang", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(nodeNameTest0);
      
      boolean boolean0 = dOMNodePointer0.testNode((NodeTest) processingInstructionTest0);
      assertNull(qName0.getPrefix());
      assertEquals("&apos;", qName0.toString());
      assertEquals("&apos;", qName0.getName());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals("[/z", processingInstructionTest0.getTarget());
      assertNotSame(qName0, qName1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean0);
      assertFalse(qName0.equals((Object)qName1));
      
      HTMLImageElementImpl hTMLImageElementImpl0 = new HTMLImageElementImpl((HTMLDocumentImpl) null, "rows");
      assertNotNull(hTMLImageElementImpl0);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      
      String string0 = dOMNodePointer0.asPath();
      assertNull(qName0.getPrefix());
      assertEquals("&apos;", qName0.toString());
      assertEquals("&apos;", qName0.getName());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(qName0, qName1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("$&apos;", string0);
      assertFalse(qName0.equals((Object)qName1));
      assertNotNull(string0);
      
      String string1 = dOMNodePointer0.getNamespaceURI();
      assertNull(qName0.getPrefix());
      assertEquals("&apos;", qName0.toString());
      assertEquals("&apos;", qName0.getName());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(qName0, qName1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("t97", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(qName0.equals((Object)qName1));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLScriptElementImpl hTMLScriptElementImpl0 = new HTMLScriptElementImpl(hTMLDocumentImpl0, "");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLScriptElementImpl0);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = (HTMLDocumentImpl)hTMLScriptElementImpl0.getOwnerDocument();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotNull(hTMLDocumentImpl1);
      
      HTMLDocumentImpl hTMLDocumentImpl2 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl2);
      
      hTMLDocumentImpl2.setErrorChecking(false);
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl2, locale0);
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertNotNull(dOMNodePointer0);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertNotNull(qName0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("http://www.w3.org/XML/1998/namespace");
      assertEquals("http://www.w3.org/XML/1998/namespace", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "http://www.w3.org/2000/xmlns/");
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertNotNull(nodeNameTest0);
      
      boolean boolean0 = dOMNodePointer0.testNode((NodeTest) processingInstructionTest0);
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals("http://www.w3.org/XML/1998/namespace", processingInstructionTest0.getTarget());
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean0);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      
      HTMLImageElementImpl hTMLImageElementImpl0 = new HTMLImageElementImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertNotNull(hTMLImageElementImpl0);
      
      CDATASectionImpl cDATASectionImpl0 = new CDATASectionImpl(hTMLDocumentImpl1, "OH}O.{7[s}B?VT");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl2));
      assertNotNull(cDATASectionImpl0);
      
      dOMNodePointer0.setValue(cDATASectionImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl2);
      assertSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl1, "<<unknown namespace>>");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl2));
      assertNotNull(documentTypeImpl0);
      
      String string0 = (String)dOMNodePointer0.getValue();
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("OH}O.{7[s}B?VT", string0);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertNotNull(string0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl2));
      assertNotNull(wMLDocumentImpl0);
      
      dOMNodePointer0.setValue(wMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl2);
      assertSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      
      String string1 = dOMNodePointer0.getDefaultNamespaceURI();
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      hTMLDocumentImpl0.setReadOnly(true, true);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(16);
      assertEquals(16, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      String string0 = nodeTypeTest0.toString();
      assertEquals(16, nodeTypeTest0.getNodeType());
      assertEquals("UNKNOWN()", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.getNamespaceURI("xml:space");
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // NO_MODIFICATION_ALLOWED_ERR: An attempt is made to modify an object where modifications are not allowed.
         //
         verifyException("org.apache.xerces.dom.ParentNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
      assertNotNull(deferredDocumentImpl0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(deferredDocumentImpl0, locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(deferredDocumentImpl0, "/.[", "<<unknown namespace>>", "/.[");
      assertNotNull(documentTypeImpl0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNotNull(wMLDocumentImpl0);
      
      Element element0 = wMLDocumentImpl0.createElementNS("MDZ1\"[w", "MDZ1\"[w", "/.[");
      assertNotNull(element0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, element0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      QName qName0 = dOMNodePointer1.getName();
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals("/.[", qName0.getName());
      assertEquals("/.[", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(qName0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("http://www.w3.org/XML/1998/namespace");
      assertEquals("http://www.w3.org/XML/1998/namespace", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals("/.[", qName0.getName());
      assertEquals("/.[", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("/.[", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(nodeNameTest0);
      
      boolean boolean0 = dOMNodePointer0.testNode((NodeTest) nodeNameTest0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals("/.[", qName0.getName());
      assertEquals("/.[", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("/.[", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean0);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLImageElementImpl hTMLImageElementImpl0 = new HTMLImageElementImpl(hTMLDocumentImpl0, "refresh");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLImageElementImpl0);
      
      int int0 = NodePointer.WHOLE_COLLECTION;
      assertEquals(Integer.MIN_VALUE, int0);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      
      // Undeclared exception!
      try { 
        dOMNodePointer1.asPath();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.dom.DeferredDocumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
      assertNotNull(pSVIDocumentImpl0);
      
      boolean boolean0 = hTMLDocumentImpl0.getStrictErrorChecking();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertTrue(boolean0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      NullPointer nullPointer0 = (NullPointer)dOMNodePointer0.getPointerByID(jXPathContextReferenceImpl0, "1%N]FQ");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(nullPointer0.isActual());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isNode());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
      
      AttrNSImpl attrNSImpl0 = new AttrNSImpl(hTMLDocumentImpl0, "<<unknown namespace>>", "cW2b", "1%N]FQ");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(attrNSImpl0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, attrNSImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      String string0 = dOMNodePointer1.toString();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", string0);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(string0);
      
      boolean boolean1 = dOMNodePointer1.isActual();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(boolean1);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLDocumentImpl0);
      
      CDATASectionImpl cDATASectionImpl0 = new CDATASectionImpl(hTMLDocumentImpl0, "1%N]FQ");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(cDATASectionImpl0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(cDATASectionImpl0, (Locale) null);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      HTMLIFrameElementImpl hTMLIFrameElementImpl0 = new HTMLIFrameElementImpl(hTMLDocumentImpl0, "~");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLIFrameElementImpl0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(cDATASectionImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      String string0 = dOMNodePointer1.getNamespaceURI("i_BGK#Kmvt__");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNull(string0);
      
      String string1 = NodePointer.UNKNOWN_NAMESPACE;
      assertEquals("<<unknown namespace>>", string1);
      assertNotNull(string1);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      
      DocumentType documentType0 = hTMLDocumentImpl1.getDoctype();
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNull(documentType0);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(hTMLDocumentImpl0, (Locale) null, "http://www.w3.org/XML/1998/namespace");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer2);
      
      Object object0 = dOMNodePointer2.getValue();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isActual());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", object0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(object0.equals((Object)string1));
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer1.setValue("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1));
      assertEquals((-1), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) nodeTypeTest0);
      assertEquals((-1), nodeTypeTest0.getNodeType());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
      assertEquals((-1), nodeTypeTest0.getNodeType());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      
      BasicVariables basicVariables0 = (BasicVariables)jXPathContextReferenceImpl1.getVariables();
      assertEquals((-1), nodeTypeTest0.getNodeType());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("<<unknown namespace>>", "domain");
      assertEquals("<<unknown namespace>>:domain", qName0.toString());
      assertEquals("<<unknown namespace>>", qName0.getPrefix());
      assertEquals("domain", qName0.getName());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals((-1), nodeTypeTest0.getNodeType());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("<<unknown namespace>>:domain", qName0.toString());
      assertEquals("<<unknown namespace>>", qName0.getPrefix());
      assertEquals("domain", qName0.getName());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(variablePointer0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      TextImpl textImpl0 = (TextImpl)hTMLDocumentImpl0.createTextNode("<<unknown namespace>>");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(textImpl0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, textImpl0);
      assertEquals((-1), nodeTypeTest0.getNodeType());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("<<unknown namespace>>:domain", qName0.toString());
      assertEquals("<<unknown namespace>>", qName0.getPrefix());
      assertEquals("domain", qName0.getName());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(dOMNodePointer0);
      
      String string0 = dOMNodePointer0.getDefaultNamespaceURI();
      assertEquals((-1), nodeTypeTest0.getNodeType());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("<<unknown namespace>>:domain", qName0.toString());
      assertEquals("<<unknown namespace>>", qName0.getPrefix());
      assertEquals("domain", qName0.getName());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNull(string0);
      
      String string1 = dOMNodePointer0.getLanguage();
      assertEquals((-1), nodeTypeTest0.getNodeType());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("<<unknown namespace>>:domain", qName0.toString());
      assertEquals("<<unknown namespace>>", qName0.getPrefix());
      assertEquals("domain", qName0.getName());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNull(string1);
      
      boolean boolean1 = dOMNodePointer0.isActual();
      assertEquals((-1), nodeTypeTest0.getNodeType());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("<<unknown namespace>>:domain", qName0.toString());
      assertEquals("<<unknown namespace>>", qName0.getPrefix());
      assertEquals("domain", qName0.getName());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(boolean1);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(boolean1 == boolean0);
      
      QName qName1 = dOMNodePointer0.getName();
      assertEquals((-1), nodeTypeTest0.getNodeType());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("<<unknown namespace>>:domain", qName0.toString());
      assertEquals("<<unknown namespace>>", qName0.getPrefix());
      assertEquals("domain", qName0.getName());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertNull(qName1.getName());
      assertNull(qName1.toString());
      assertNull(qName1.getPrefix());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(qName0, qName1);
      assertNotSame(qName1, qName0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(qName1);
      
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(true, true);
      assertNotNull(deferredDocumentImpl0);
      
      dOMNodePointer0.setValue(deferredDocumentImpl0);
      assertEquals((-1), nodeTypeTest0.getNodeType());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("<<unknown namespace>>:domain", qName0.toString());
      assertEquals("<<unknown namespace>>", qName0.getPrefix());
      assertEquals("domain", qName0.getName());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(qName0, qName1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(qName0.equals((Object)qName1));
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.createChild((JXPathContext) jXPathContextReferenceImpl1, qName1, (-2168));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: $<<unknown namespace>>:domain/text()[1]
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      CommentImpl commentImpl0 = new CommentImpl(hTMLDocumentImpl0, "Z)sMd96");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(commentImpl0);
      
      SymbolTable symbolTable0 = new SymbolTable();
      assertNotNull(symbolTable0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertNotNull(locale0);
      
      HTMLElement hTMLElement0 = hTMLDocumentImpl0.getBody();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLElement0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLElement0, locale0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, commentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(dOMNodePointer0, hTMLElement0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer2.isContainer());
      assertFalse(dOMNodePointer2.isAttribute());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isRoot());
      assertEquals(1, dOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer2);
      
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      assertFalse(namespaceResolver0.isSealed());
      assertNotNull(namespaceResolver0);
      
      boolean boolean0 = dOMNodePointer1.isLeaf();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(boolean0);
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      
      String string0 = DOMNodePointer.XML_NAMESPACE_URI;
      assertEquals("http://www.w3.org/XML/1998/namespace", string0);
      assertNotNull(string0);
      
      QName qName0 = new QName("H`9#EhGi");
      assertEquals("H`9#EhGi", qName0.toString());
      assertEquals("H`9#EhGi", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "http://www.w3.org/XML/1998/namespace");
      assertEquals("H`9#EhGi", qName0.toString());
      assertEquals("H`9#EhGi", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", nodeNameTest0.getNamespaceURI());
      assertEquals("H`9#EhGi", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      Locale locale1 = Locale.CHINA;
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      DOMNodePointer dOMNodePointer3 = new DOMNodePointer(hTMLElement0, locale1, "http://www.w3.org/2000/xmlns/");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertTrue(dOMNodePointer3.isNode());
      assertEquals(1, dOMNodePointer3.getLength());
      assertFalse(dOMNodePointer3.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertTrue(dOMNodePointer3.isRoot());
      assertFalse(dOMNodePointer3.isCollection());
      assertFalse(dOMNodePointer3.isContainer());
      assertTrue(dOMNodePointer3.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer3);
      
      String string1 = dOMNodePointer1.asPath();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer3);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer3);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", string1);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer3));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = dOMNodePointer2.asPath();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer2.isContainer());
      assertFalse(dOMNodePointer2.isAttribute());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isRoot());
      assertEquals(1, dOMNodePointer2.getLength());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer3);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer3);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("/BODY[1]", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer3));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertNotNull(string2);
      
      int int0 = NodePointer.WHOLE_COLLECTION;
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLScriptElementImpl hTMLScriptElementImpl0 = new HTMLScriptElementImpl(hTMLDocumentImpl0, "Gj*");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLScriptElementImpl0);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = (HTMLDocumentImpl)hTMLScriptElementImpl0.getOwnerDocument();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotNull(hTMLDocumentImpl1);
      
      HTMLDocumentImpl hTMLDocumentImpl2 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl2);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl2, locale0);
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertNotNull(dOMNodePointer0);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl2, "WM", "WM", "<<unknown namespace>>");
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertNotNull(documentTypeImpl0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertNotNull(wMLDocumentImpl0);
      
      ElementNSImpl elementNSImpl0 = (ElementNSImpl)wMLDocumentImpl0.createElementNS("http://www.w3.org/2000/xmlns/", "WM", "<<unknown namespace>>");
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertNotNull(elementNSImpl0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, elementNSImpl0);
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      QName qName0 = dOMNodePointer1.getName();
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("<<unknown namespace>>", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(qName0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("http://www.w3.org/XML/1998/namespace");
      assertEquals("http://www.w3.org/XML/1998/namespace", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "<<unknown namespace>>");
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("<<unknown namespace>>", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("<<unknown namespace>>", nodeNameTest0.getNamespaceURI());
      assertEquals("<<unknown namespace>>", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(nodeNameTest0);
      
      NamedNodeMapImpl namedNodeMapImpl0 = (NamedNodeMapImpl)documentTypeImpl0.getNotations();
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertNotNull(namedNodeMapImpl0);
      
      boolean boolean0 = dOMNodePointer1.testNode((NodeTest) nodeNameTest0);
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("<<unknown namespace>>", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("<<unknown namespace>>", nodeNameTest0.getNamespaceURI());
      assertEquals("<<unknown namespace>>", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean0);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      
      HTMLImageElementImpl hTMLImageElementImpl0 = new HTMLImageElementImpl(hTMLDocumentImpl2, "");
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLImageElementImpl0);
      
      CDATASectionImpl cDATASectionImpl0 = new CDATASectionImpl(hTMLDocumentImpl0, "<<unknown namespace>>");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertNotNull(cDATASectionImpl0);
      
      WMLOneventElementImpl wMLOneventElementImpl0 = new WMLOneventElementImpl(wMLDocumentImpl0, "]");
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertNotNull(wMLOneventElementImpl0);
      
      boolean boolean1 = dOMNodePointer0.isLanguage("Cannot remove root DOM node");
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      
      int int0 = dOMNodePointer1.compareChildNodePointers(dOMNodePointer0, dOMNodePointer0);
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, int0);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      
      boolean boolean2 = dOMNodePointer0.equals(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl2);
      assertSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean2);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      
      HTMLHtmlElementImpl hTMLHtmlElementImpl0 = new HTMLHtmlElementImpl(hTMLDocumentImpl0, "y,E");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertNotNull(hTMLHtmlElementImpl0);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Locale locale1 = Locale.lookup(vector0, (Collection<Locale>) null);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNull(locale1);
      
      String string0 = DOMNodePointer.getNamespaceURI((Node) hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertNull(string0);
      
      int int1 = dOMNodePointer0.getLength();
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(1, int1);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(int1 == int0);
      
      HTMLDocumentImpl hTMLDocumentImpl3 = (HTMLDocumentImpl)dOMNodePointer0.getRootNode();
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNull(hTMLDocumentImpl3.getURL());
      assertNull(hTMLDocumentImpl3.getReferrer());
      assertNull(hTMLDocumentImpl3.getCookie());
      assertNull(hTMLDocumentImpl3.getDomain());
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertSame(hTMLDocumentImpl2, hTMLDocumentImpl3);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertSame(hTMLDocumentImpl3, hTMLDocumentImpl2);
      assertNotSame(hTMLDocumentImpl3, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl3, hTMLDocumentImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl3);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) hTMLDocumentImpl3);
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNull(hTMLDocumentImpl3.getURL());
      assertNull(hTMLDocumentImpl3.getReferrer());
      assertNull(hTMLDocumentImpl3.getCookie());
      assertNull(hTMLDocumentImpl3.getDomain());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertSame(hTMLDocumentImpl2, hTMLDocumentImpl3);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertSame(hTMLDocumentImpl3, hTMLDocumentImpl2);
      assertNotSame(hTMLDocumentImpl3, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl3, hTMLDocumentImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl0));
      assertNotNull(jXPathContextReferenceImpl0);
      
      // Undeclared exception!
      dOMNodePointer1.createChild((JXPathContext) jXPathContextReferenceImpl0, qName0, (-527), (Object) hTMLHtmlElementImpl0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
      assertNotNull(deferredDocumentImpl0);
      
      CommentImpl commentImpl0 = new CommentImpl(deferredDocumentImpl0, "TD");
      assertNotNull(commentImpl0);
      
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl(127);
      assertNotNull(xMLGrammarPoolImpl0);
      
      CachingParserPool.SynchronizedGrammarPool cachingParserPool_SynchronizedGrammarPool0 = new CachingParserPool.SynchronizedGrammarPool(xMLGrammarPoolImpl0);
      assertNotNull(cachingParserPool_SynchronizedGrammarPool0);
      
      QName qName0 = new QName("HTMLMetaElementImpl");
      assertEquals("HTMLMetaElementImpl", qName0.toString());
      assertEquals("HTMLMetaElementImpl", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      Locale locale0 = new Locale("");
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(commentImpl0, locale0, (String) null);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      Object object0 = dOMNodePointer0.getValue();
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("TD", object0);
      assertNotNull(object0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-958));
      assertEquals((-958), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      String string0 = nodeTypeTest0.toString();
      assertEquals((-958), nodeTypeTest0.getNodeType());
      assertEquals("UNKNOWN()", string0);
      assertFalse(string0.equals((Object)object0));
      assertNotNull(string0);
      
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(127);
      assertEquals(127, nodeTypeTest1.getNodeType());
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertNotNull(nodeTypeTest1);
      
      // Undeclared exception!
      try { 
        DOMNodePointer.testNode((Node) null, (NodeTest) nodeTypeTest1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "E");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(documentTypeImpl0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(wMLDocumentImpl0);
      
      Element element0 = wMLDocumentImpl0.createElementNS("/!i'Kfm,YTJT?p", "H\"r:zK<", "charoff");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(element0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) element0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, wMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = (JXPathContextReferenceImpl)jXPathContextReferenceImpl1.getRelativeContext(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl2);
      
      BasicVariables basicVariables0 = (BasicVariables)jXPathContextReferenceImpl2.getVariables();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "EY!ywonZvg{");
      assertEquals("http://www.w3.org/XML/1998/namespace:EY!ywonZvg{", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("EY!ywonZvg{", qName0.getName());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals("http://www.w3.org/XML/1998/namespace:EY!ywonZvg{", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("EY!ywonZvg{", qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(variablePointer0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(variablePointer0, documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals("http://www.w3.org/XML/1998/namespace:EY!ywonZvg{", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("EY!ywonZvg{", qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      QName qName1 = dOMNodePointer1.getName();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals("http://www.w3.org/XML/1998/namespace:EY!ywonZvg{", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("EY!ywonZvg{", qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertNull(qName1.toString());
      assertNull(qName1.getPrefix());
      assertNull(qName1.getName());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(qName0, qName1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(qName1, qName0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(qName1);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("//WWW.W3.ORG/XML/1998/NAMESPACE");
      assertEquals("//WWW.W3.ORG/XML/1998/NAMESPACE", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("http://www.w3.org/XML/1998/namespace:EY!ywonZvg{", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("EY!ywonZvg{", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("http://www.w3.org/XML/1998/namespace:EY!ywonZvg{", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(qName0.equals((Object)qName1));
      assertNotNull(nodeNameTest0);
      
      boolean boolean0 = dOMNodePointer0.testNode((NodeTest) null);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(boolean0);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      
      HTMLImageElementImpl hTMLImageElementImpl0 = new HTMLImageElementImpl(hTMLDocumentImpl0, "//WWW.W3.ORG/XML/1998/NAMESPACE");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLImageElementImpl0);
      
      int int0 = dOMNodePointer0.getLength();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(1, int0);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      
      String string0 = dOMNodePointer1.asPath();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals("http://www.w3.org/XML/1998/namespace:EY!ywonZvg{", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("EY!ywonZvg{", qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(qName0, qName1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("$http://www.w3.org/XML/1998/namespace:EY!ywonZvg{", string0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DocumentImpl documentImpl0 = new DocumentImpl(true);
      assertNotNull(documentImpl0);
      
      CommentImpl commentImpl0 = new CommentImpl(documentImpl0, (String) null);
      assertNotNull(commentImpl0);
      
      QName qName0 = new QName("Zx\"Vi,E3t|FV9(bFI", "Zx\"Vi,E3t|FV9(bFI");
      assertEquals("Zx\"Vi,E3t|FV9(bFI", qName0.getPrefix());
      assertEquals("Zx\"Vi,E3t|FV9(bFI", qName0.getName());
      assertEquals("Zx\"Vi,E3t|FV9(bFI:Zx\"Vi,E3t|FV9(bFI", qName0.toString());
      assertNotNull(qName0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(286);
      assertEquals(286, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(commentImpl0, locale0, "org.apache.html.dom.HTMLBaseFontElementImpl");
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      boolean boolean0 = dOMNodePointer0.testNode((NodeTest) nodeTypeTest0);
      assertEquals(286, nodeTypeTest0.getNodeType());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean0);
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      
      HTMLOptGroupElementImpl hTMLOptGroupElementImpl0 = new HTMLOptGroupElementImpl(hTMLDocumentImpl1, "+gyLQb'@");
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLOptGroupElementImpl0);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl((CoreDocumentImpl) null, "Zx\"Vi,E3t|FV9(bFI");
      assertNotNull(documentTypeImpl0);
      
      short short0 = hTMLDocumentImpl0.compareTreePosition(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertEquals((short)0, short0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      
      DocumentFragmentImpl documentFragmentImpl0 = new DocumentFragmentImpl();
      assertNotNull(documentFragmentImpl0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "}gK\"N;hJYl5/`FrV&S");
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      Object object0 = dOMNodePointer0.getValue();
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", object0);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(object0);
      
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest1.getNodeType());
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertNotNull(nodeTypeTest1);
      
      String string0 = nodeTypeTest0.toString();
      assertEquals(286, nodeTypeTest0.getNodeType());
      assertNotSame(nodeTypeTest0, nodeTypeTest1);
      assertEquals("UNKNOWN()", string0);
      assertFalse(string0.equals((Object)object0));
      assertFalse(nodeTypeTest0.equals((Object)nodeTypeTest1));
      assertNotNull(string0);
      
      QName qName1 = new QName("<<unknown namespace>>", "Zx\"Vi,E3t|FV9(bFI");
      assertEquals("<<unknown namespace>>:Zx\"Vi,E3t|FV9(bFI", qName1.toString());
      assertEquals("Zx\"Vi,E3t|FV9(bFI", qName1.getName());
      assertEquals("<<unknown namespace>>", qName1.getPrefix());
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1, (String) null);
      assertEquals("<<unknown namespace>>:Zx\"Vi,E3t|FV9(bFI", qName1.toString());
      assertEquals("Zx\"Vi,E3t|FV9(bFI", qName1.getName());
      assertEquals("<<unknown namespace>>", qName1.getPrefix());
      assertEquals("<<unknown namespace>>:Zx\"Vi,E3t|FV9(bFI", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(nodeNameTest0);
      
      boolean boolean1 = DOMNodePointer.testNode((Node) hTMLDocumentImpl0, (NodeTest) nodeTypeTest1);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals(Integer.MIN_VALUE, nodeTypeTest1.getNodeType());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(nodeTypeTest1, nodeTypeTest0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      
      String string1 = DOMNodePointer.XML_NAMESPACE_URI;
      assertEquals("http://www.w3.org/XML/1998/namespace", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)object0));
      assertNotNull(string1);
      
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "http://www.w3.org/2000/xmlns/");
      assertEquals("Zx\"Vi,E3t|FV9(bFI", qName0.getPrefix());
      assertEquals("Zx\"Vi,E3t|FV9(bFI", qName0.getName());
      assertEquals("Zx\"Vi,E3t|FV9(bFI:Zx\"Vi,E3t|FV9(bFI", qName0.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("http://www.w3.org/2000/xmlns/", nodeNameTest1.getNamespaceURI());
      assertEquals("Zx\"Vi,E3t|FV9(bFI:Zx\"Vi,E3t|FV9(bFI", nodeNameTest1.toString());
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(nodeNameTest1);
      
      boolean boolean2 = DOMNodePointer.testNode((Node) documentTypeImpl0, (NodeTest) nodeNameTest1);
      assertEquals("Zx\"Vi,E3t|FV9(bFI", qName0.getPrefix());
      assertEquals("Zx\"Vi,E3t|FV9(bFI", qName0.getName());
      assertEquals("Zx\"Vi,E3t|FV9(bFI:Zx\"Vi,E3t|FV9(bFI", qName0.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("http://www.w3.org/2000/xmlns/", nodeNameTest1.getNamespaceURI());
      assertEquals("Zx\"Vi,E3t|FV9(bFI:Zx\"Vi,E3t|FV9(bFI", nodeNameTest1.toString());
      assertNotSame(qName0, qName1);
      assertNotSame(nodeNameTest1, nodeNameTest0);
      assertFalse(boolean2);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLDocumentImpl0);
      
      String string0 = "y)Gj*";
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLParagraphElementImpl0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)41;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)100, (byte) (-79), (byte) (-120), (byte)41}, byteArray0);
      assertFalse(boolean0);
      
      String string1 = hTMLDocumentImpl0.lookupNamespaceURI("B2x)n5yg~dR&Oud7(");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(string1);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLParagraphElementImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      HTMLButtonElementImpl hTMLButtonElementImpl0 = new HTMLButtonElementImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLButtonElementImpl0);
      
      String string2 = "";
      QName qName0 = new QName("*wdI!s&xm2g^");
      assertEquals("*wdI!s&xm2g^", qName0.toString());
      assertEquals("*wdI!s&xm2g^", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("*wdI!s&xm2g^", qName0.toString());
      assertEquals("*wdI!s&xm2g^", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("*wdI!s&xm2g^", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertEquals("*wdI!s&xm2g^", qName0.toString());
      assertEquals("*wdI!s&xm2g^", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) null);
      assertNotNull(wMLDocumentImpl0);
      
      WMLSmallElementImpl wMLSmallElementImpl0 = new WMLSmallElementImpl(wMLDocumentImpl0, "^i?,a6g?^zAy{H('");
      assertNotNull(wMLSmallElementImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) wMLSmallElementImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) null);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      
      VariablePointer variablePointer1 = (VariablePointer)variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl1);
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(variablePointer1.isAttribute());
      assertFalse(variablePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
      assertTrue(variablePointer1.isRoot());
      assertTrue(variablePointer1.isActual());
      assertTrue(variablePointer1.isContainer());
      assertEquals("*wdI!s&xm2g^", qName0.toString());
      assertEquals("*wdI!s&xm2g^", qName0.getName());
      assertNull(qName0.getPrefix());
      assertSame(variablePointer0, variablePointer1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(variablePointer1, variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(variablePointer1);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.childIterator(nodeNameTest0, false, variablePointer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: '*wdI!s&xm2g^'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "WM", "WM", "<<unknown namespace>>");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(documentTypeImpl0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(wMLDocumentImpl0);
      
      Element element0 = wMLDocumentImpl0.createElementNS("http://www.w3.org/2000/xmlns/", "WM", "<<unknown namespace>>");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(element0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, element0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      QName qName0 = dOMNodePointer1.getName();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("<<unknown namespace>>", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(qName0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("http://www.w3.org/XML/1998/namespace");
      assertEquals("http://www.w3.org/XML/1998/namespace", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("<<unknown namespace>>", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("<<unknown namespace>>", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(nodeNameTest0);
      
      boolean boolean0 = dOMNodePointer1.testNode((NodeTest) nodeNameTest0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("<<unknown namespace>>", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("<<unknown namespace>>", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean0);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      
      HTMLImageElementImpl hTMLImageElementImpl0 = new HTMLImageElementImpl(hTMLDocumentImpl0, "<<unknown namespace>>");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLImageElementImpl0);
      
      int int0 = dOMNodePointer1.getLength();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(1, int0);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      
      // Undeclared exception!
      dOMNodePointer1.asPath();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DocumentImpl documentImpl0 = new DocumentImpl(true);
      assertNotNull(documentImpl0);
      
      CommentImpl commentImpl0 = new CommentImpl(documentImpl0, (String) null);
      assertNotNull(commentImpl0);
      
      SymbolTable symbolTable0 = new SymbolTable();
      assertNotNull(symbolTable0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(commentImpl0, locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, commentImpl0);
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(dOMNodePointer1, documentImpl0);
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertEquals(1, dOMNodePointer2.getLength());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertFalse(dOMNodePointer2.isAttribute());
      assertFalse(dOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer2);
      
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      assertFalse(namespaceResolver0.isSealed());
      assertNotNull(namespaceResolver0);
      
      dOMNodePointer2.setNamespaceResolver(namespaceResolver0);
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertEquals(1, dOMNodePointer2.getLength());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertFalse(dOMNodePointer2.isAttribute());
      assertFalse(dOMNodePointer2.isRoot());
      assertFalse(namespaceResolver0.isSealed());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      
      String string0 = DOMNodePointer.XML_NAMESPACE_URI;
      assertEquals("http://www.w3.org/XML/1998/namespace", string0);
      assertNotNull(string0);
      
      QName qName0 = new QName("HTMLMetaElementImpl");
      assertEquals("HTMLMetaElementImpl", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("HTMLMetaElementImpl", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "http://www.w3.org/2000/xmlns/");
      assertEquals("HTMLMetaElementImpl", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("HTMLMetaElementImpl", qName0.getName());
      assertEquals("http://www.w3.org/2000/xmlns/", nodeNameTest0.getNamespaceURI());
      assertEquals("HTMLMetaElementImpl", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      Locale locale1 = Locale.CHINA;
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      DOMNodePointer dOMNodePointer3 = new DOMNodePointer(documentImpl0, locale1, "http://www.w3.org/2000/xmlns/");
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertTrue(dOMNodePointer3.isActual());
      assertFalse(dOMNodePointer3.isCollection());
      assertFalse(dOMNodePointer3.isContainer());
      assertTrue(dOMNodePointer3.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertFalse(dOMNodePointer3.isAttribute());
      assertTrue(dOMNodePointer3.isNode());
      assertEquals(1, dOMNodePointer3.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer3);
      
      boolean boolean0 = dOMNodePointer3.testNode((NodeTest) nodeNameTest0);
      assertEquals("HTMLMetaElementImpl", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("HTMLMetaElementImpl", qName0.getName());
      assertEquals("http://www.w3.org/2000/xmlns/", nodeNameTest0.getNamespaceURI());
      assertEquals("HTMLMetaElementImpl", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertTrue(dOMNodePointer3.isActual());
      assertFalse(dOMNodePointer3.isCollection());
      assertFalse(dOMNodePointer3.isContainer());
      assertTrue(dOMNodePointer3.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertFalse(dOMNodePointer3.isAttribute());
      assertTrue(dOMNodePointer3.isNode());
      assertEquals(1, dOMNodePointer3.getLength());
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer3, dOMNodePointer0);
      assertNotSame(dOMNodePointer3, dOMNodePointer1);
      assertNotSame(dOMNodePointer3, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean0);
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      
      int int0 = dOMNodePointer3.getLength();
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertTrue(dOMNodePointer3.isActual());
      assertFalse(dOMNodePointer3.isCollection());
      assertFalse(dOMNodePointer3.isContainer());
      assertTrue(dOMNodePointer3.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertFalse(dOMNodePointer3.isAttribute());
      assertTrue(dOMNodePointer3.isNode());
      assertEquals(1, dOMNodePointer3.getLength());
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer3, dOMNodePointer0);
      assertNotSame(dOMNodePointer3, dOMNodePointer1);
      assertNotSame(dOMNodePointer3, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(1, int0);
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLDocumentImpl0);
      
      String string1 = dOMNodePointer1.asPath();
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer3);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer3);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer3));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(string1);
      
      int int1 = NodePointer.WHOLE_COLLECTION;
      assertEquals(Integer.MIN_VALUE, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLScriptElementImpl hTMLScriptElementImpl0 = new HTMLScriptElementImpl(hTMLDocumentImpl0, "JXPath: found system property");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLScriptElementImpl0);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      Vector<Locale> vector1 = new Vector<Locale>();
      assertEquals("[]", vector1.toString());
      assertEquals(10, vector1.capacity());
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.size());
      assertNotNull(vector1);
      
      Locale locale0 = Locale.lookup(vector0, vector1);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals("[]", vector1.toString());
      assertEquals(10, vector1.capacity());
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.size());
      assertNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLScriptElementImpl0, (Locale) null);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      String string0 = dOMNodePointer0.getNamespaceURI("&apos;");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(string0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string1 = dOMNodePointer0.getNamespaceURI("TFOOT");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(string1);
      
      String string2 = dOMNodePointer0.getNamespaceURI("&apos;");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(string2);
      
      dOMNodePointer0.setValue("TFOOT");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLScriptElementImpl hTMLScriptElementImpl0 = new HTMLScriptElementImpl(hTMLDocumentImpl0, "xmlns");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLScriptElementImpl0);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = (HTMLDocumentImpl)hTMLScriptElementImpl0.getOwnerDocument();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotNull(hTMLDocumentImpl1);
      
      HTMLDocumentImpl hTMLDocumentImpl2 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertNotNull(hTMLDocumentImpl2);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl2, locale0);
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertNotNull(dOMNodePointer0);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl2, "WM", "WM", "<<unknown namespace>>");
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertNotNull(documentTypeImpl0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertNotNull(wMLDocumentImpl0);
      
      ElementNSImpl elementNSImpl0 = (ElementNSImpl)wMLDocumentImpl0.createElementNS("http://www.w3.org/2000/xmlns/", "WM", "<<unknown namespace>>");
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertNotNull(elementNSImpl0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, elementNSImpl0);
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      QName qName0 = dOMNodePointer1.getName();
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isCollection());
      assertNull(qName0.getPrefix());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("<<unknown namespace>>", qName0.toString());
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(qName0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("http://www.w3.org/XML/1998/namespace");
      assertEquals("http://www.w3.org/XML/1998/namespace", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "<<unknown namespace>>");
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isCollection());
      assertNull(qName0.getPrefix());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("<<unknown namespace>>", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("<<unknown namespace>>", nodeNameTest0.getNamespaceURI());
      assertEquals("<<unknown namespace>>", nodeNameTest0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(nodeNameTest0);
      
      boolean boolean0 = dOMNodePointer1.testNode((NodeTest) nodeNameTest0);
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isCollection());
      assertNull(qName0.getPrefix());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("<<unknown namespace>>", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("<<unknown namespace>>", nodeNameTest0.getNamespaceURI());
      assertEquals("<<unknown namespace>>", nodeNameTest0.toString());
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean0);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      
      HTMLImageElementImpl hTMLImageElementImpl0 = new HTMLImageElementImpl(hTMLDocumentImpl2, "");
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertNotNull(hTMLImageElementImpl0);
      
      CDATASectionImpl cDATASectionImpl0 = new CDATASectionImpl(hTMLDocumentImpl0, "<<unknown namespace>>");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertNotNull(cDATASectionImpl0);
      
      WMLOneventElementImpl wMLOneventElementImpl0 = new WMLOneventElementImpl(wMLDocumentImpl0, "]");
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertNotNull(wMLOneventElementImpl0);
      
      dOMNodePointer0.setValue(wMLOneventElementImpl0);
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      
      DocumentTypeImpl documentTypeImpl1 = new DocumentTypeImpl(hTMLDocumentImpl2, "http://www.w3.org/XML/1998/namespace");
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertFalse(documentTypeImpl1.equals((Object)documentTypeImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertNotNull(documentTypeImpl1);
      
      int int0 = dOMNodePointer1.getLength();
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isCollection());
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(documentTypeImpl0, documentTypeImpl1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(1, int0);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(documentTypeImpl0.equals((Object)documentTypeImpl1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      
      HTMLDocumentImpl hTMLDocumentImpl3 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl3.getDomain());
      assertNull(hTMLDocumentImpl3.getCookie());
      assertNull(hTMLDocumentImpl3.getReferrer());
      assertNull(hTMLDocumentImpl3.getURL());
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl3);
      
      // Undeclared exception!
      dOMNodePointer1.asPath();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DocumentImpl documentImpl0 = new DocumentImpl(true);
      assertNotNull(documentImpl0);
      
      SymbolTable symbolTable0 = new SymbolTable();
      assertNotNull(symbolTable0);
      
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl(39);
      assertNotNull(xMLGrammarPoolImpl0);
      
      CachingParserPool.SynchronizedGrammarPool cachingParserPool_SynchronizedGrammarPool0 = new CachingParserPool.SynchronizedGrammarPool(xMLGrammarPoolImpl0);
      assertNotNull(cachingParserPool_SynchronizedGrammarPool0);
      
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool0 = new CachingParserPool.ShadowedGrammarPool(cachingParserPool_SynchronizedGrammarPool0);
      assertNotNull(cachingParserPool_ShadowedGrammarPool0);
      
      IntegratedParserConfiguration integratedParserConfiguration0 = new IntegratedParserConfiguration(symbolTable0);
      assertNotNull(integratedParserConfiguration0);
      
      StandardParserConfiguration standardParserConfiguration0 = new StandardParserConfiguration(symbolTable0, cachingParserPool_ShadowedGrammarPool0, integratedParserConfiguration0);
      assertNotNull(standardParserConfiguration0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(documentImpl0, locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) standardParserConfiguration0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      BasicVariables basicVariables0 = (BasicVariables)jXPathContextReferenceImpl0.getVariables();
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("p");
      assertEquals("p", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("p", qName0.toString());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("p", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("p", qName0.toString());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      ErrorHandlerWrapper errorHandlerWrapper0 = new ErrorHandlerWrapper((ErrorHandler) null);
      assertNotNull(errorHandlerWrapper0);
      
      integratedParserConfiguration0.setErrorHandler(errorHandlerWrapper0);
      VariablePointer variablePointer1 = (VariablePointer)variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) dOMNodePointer0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("p", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("p", qName0.toString());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer1.isActual());
      assertFalse(variablePointer1.isAttribute());
      assertTrue(variablePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
      assertTrue(variablePointer1.isContainer());
      assertFalse(variablePointer1.isNode());
      assertSame(variablePointer0, variablePointer1);
      assertSame(variablePointer1, variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer1);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.compareChildNodePointers(variablePointer1, variablePointer1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.jxpath.ri.model.dom.DOMNodePointer cannot be cast to org.w3c.dom.Node
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLScriptElementImpl hTMLScriptElementImpl0 = new HTMLScriptElementImpl(hTMLDocumentImpl0, "xmlns");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLScriptElementImpl0);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = (HTMLDocumentImpl)hTMLScriptElementImpl0.getOwnerDocument();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotNull(hTMLDocumentImpl1);
      
      HTMLDocumentImpl hTMLDocumentImpl2 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertNotNull(hTMLDocumentImpl2);
      
      hTMLDocumentImpl0.setErrorChecking(false);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl2, locale0);
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertNotNull(dOMNodePointer0);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl2, "PF>>+J^DKE", "PF>>+J^DKE", "<<unknown namespace>>");
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertNotNull(documentTypeImpl0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertNotNull(wMLDocumentImpl0);
      
      ElementNSImpl elementNSImpl0 = (ElementNSImpl)wMLDocumentImpl0.createElementNS("http://www.w3.org/2000/xmlns/", "PF>>+J^DKE", "<<unknown namespace>>");
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertNotNull(elementNSImpl0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, elementNSImpl0);
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      QName qName0 = dOMNodePointer1.getName();
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("<<unknown namespace>>", qName0.toString());
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(qName0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("http://www.w3.org/XML/1998/namespace");
      assertEquals("http://www.w3.org/XML/1998/namespace", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "<<unknown namespace>>");
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("<<unknown namespace>>", qName0.toString());
      assertEquals("<<unknown namespace>>", nodeNameTest0.getNamespaceURI());
      assertEquals("<<unknown namespace>>", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(nodeNameTest0);
      
      boolean boolean0 = dOMNodePointer1.testNode((NodeTest) nodeNameTest0);
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("<<unknown namespace>>", qName0.toString());
      assertEquals("<<unknown namespace>>", nodeNameTest0.getNamespaceURI());
      assertEquals("<<unknown namespace>>", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean0);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      
      HTMLImageElementImpl hTMLImageElementImpl0 = new HTMLImageElementImpl(hTMLDocumentImpl2, "");
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertNotNull(hTMLImageElementImpl0);
      
      CDATASectionImpl cDATASectionImpl0 = new CDATASectionImpl(hTMLDocumentImpl0, "<<unknown namespace>>");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertNotNull(cDATASectionImpl0);
      
      WMLOneventElementImpl wMLOneventElementImpl0 = new WMLOneventElementImpl(wMLDocumentImpl0, "R~W]");
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertNotNull(wMLOneventElementImpl0);
      
      dOMNodePointer0.setValue(wMLOneventElementImpl0);
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      
      DocumentTypeImpl documentTypeImpl1 = new DocumentTypeImpl(hTMLDocumentImpl2, "http://www.w3.org/XML/1998/namespace");
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(documentTypeImpl1.equals((Object)documentTypeImpl0));
      assertNotNull(documentTypeImpl1);
      
      String string0 = (String)dOMNodePointer0.getValue();
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", string0);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(string0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(hTMLDocumentImpl1, locale0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isAttribute());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(1, dOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl2));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer2);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("<<unknown namespace>>", qName0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(documentTypeImpl0.equals((Object)documentTypeImpl1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertNotNull(variablePointer0);
      
      NodePointer nodePointer0 = variablePointer0.namespacePointer("<<unknown namespace>>");
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("<<unknown namespace>>", qName0.toString());
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(documentTypeImpl0, documentTypeImpl1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(documentTypeImpl0.equals((Object)documentTypeImpl1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertNull(nodePointer0);
      
      HTMLHRElementImpl hTMLHRElementImpl0 = new HTMLHRElementImpl(hTMLDocumentImpl2, "http://www.w3.org/2000/xmlns/");
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertNotNull(hTMLHRElementImpl0);
      
      DOMNodePointer dOMNodePointer3 = new DOMNodePointer((NodePointer) null, hTMLHRElementImpl0);
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertFalse(dOMNodePointer3.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertEquals(1, dOMNodePointer3.getLength());
      assertFalse(dOMNodePointer3.isCollection());
      assertFalse(dOMNodePointer3.isContainer());
      assertTrue(dOMNodePointer3.isRoot());
      assertTrue(dOMNodePointer3.isActual());
      assertTrue(dOMNodePointer3.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer3);
      
      NamespaceResolver namespaceResolver0 = dOMNodePointer0.getNamespaceResolver();
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(namespaceResolver0.isSealed());
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertNotSame(dOMNodePointer0, dOMNodePointer3);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(namespaceResolver0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLParagraphElementImpl0);
      
      Locale locale0 = Locale.forLanguageTag("y)Gj*");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLParagraphElementImpl0, locale0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      hTMLDocumentImpl0.setErrorChecking(true);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      Locale locale1 = Locale.ITALIAN;
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLParagraphElementImpl0, locale1);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals("Y)GJ*", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("Y)GJ*", qName0.getName());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(qName0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("6A'j^0>n0GcIiuR5\"pi");
      assertEquals("6A'j^0>n0GcIiuR5\"pi", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "')");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals("Y)GJ*", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("Y)GJ*", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("')", nodeNameTest0.getNamespaceURI());
      assertEquals("Y)GJ*", nodeNameTest0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(nodeNameTest0);
      
      boolean boolean0 = dOMNodePointer0.testNode((NodeTest) nodeNameTest0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals("Y)GJ*", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("Y)GJ*", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("')", nodeNameTest0.getNamespaceURI());
      assertEquals("Y)GJ*", nodeNameTest0.toString());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(boolean0);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      
      HTMLImageElementImpl hTMLImageElementImpl0 = new HTMLImageElementImpl(hTMLDocumentImpl0, "<<unknown namespace>>");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLImageElementImpl0);
      
      CDATASectionImpl cDATASectionImpl0 = new CDATASectionImpl(hTMLDocumentImpl0, "2<oOOmaey#r.y");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(cDATASectionImpl0);
      
      dOMNodePointer0.setValue(locale0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(documentTypeImpl0);
      
      Object object0 = dOMNodePointer0.getValue();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(object0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      int int0 = NodePointer.WHOLE_COLLECTION;
      assertEquals(Integer.MIN_VALUE, int0);
      
      String string0 = dOMNodePointer1.getDefaultNamespaceURI();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isActual());
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLParagraphElementImpl0);
      
      Locale locale0 = Locale.forLanguageTag("y)Gj*");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLParagraphElementImpl0, locale0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      
      hTMLDocumentImpl1.setErrorChecking(false);
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      
      Locale locale1 = Locale.ITALIAN;
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it", locale1.toString());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(hTMLDocumentImpl1, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertFalse(dOMNodePointer2.isContainer());
      assertEquals(1, dOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isNode());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer2);
      
      DOMNodePointer dOMNodePointer3 = new DOMNodePointer(hTMLParagraphElementImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(dOMNodePointer3.isAttribute());
      assertEquals(1, dOMNodePointer3.getLength());
      assertTrue(dOMNodePointer3.isNode());
      assertFalse(dOMNodePointer3.isCollection());
      assertTrue(dOMNodePointer3.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertFalse(dOMNodePointer3.isContainer());
      assertTrue(dOMNodePointer3.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer3);
      
      QName qName0 = dOMNodePointer3.getName();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(dOMNodePointer3.isAttribute());
      assertEquals(1, dOMNodePointer3.getLength());
      assertTrue(dOMNodePointer3.isNode());
      assertFalse(dOMNodePointer3.isCollection());
      assertTrue(dOMNodePointer3.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertFalse(dOMNodePointer3.isContainer());
      assertTrue(dOMNodePointer3.isRoot());
      assertEquals("Y)GJ*", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("Y)GJ*", qName0.getName());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer3, dOMNodePointer2);
      assertNotSame(dOMNodePointer3, dOMNodePointer1);
      assertNotSame(dOMNodePointer3, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertNotNull(qName0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("http://www.w3.org/XML/1998/namespace");
      assertEquals("http://www.w3.org/XML/1998/namespace", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "http://www.w3.org/2000/xmlns/");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(dOMNodePointer3.isAttribute());
      assertEquals(1, dOMNodePointer3.getLength());
      assertTrue(dOMNodePointer3.isNode());
      assertFalse(dOMNodePointer3.isCollection());
      assertTrue(dOMNodePointer3.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertFalse(dOMNodePointer3.isContainer());
      assertTrue(dOMNodePointer3.isRoot());
      assertEquals("Y)GJ*", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("Y)GJ*", qName0.getName());
      assertEquals("Y)GJ*", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("http://www.w3.org/2000/xmlns/", nodeNameTest0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertNotNull(nodeNameTest0);
      
      boolean boolean0 = dOMNodePointer2.testNode((NodeTest) processingInstructionTest0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertFalse(dOMNodePointer2.isContainer());
      assertEquals(1, dOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isNode());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals("http://www.w3.org/XML/1998/namespace", processingInstructionTest0.getTarget());
      assertNotSame(locale0, locale1);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(dOMNodePointer2, dOMNodePointer3);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      
      HTMLImageElementImpl hTMLImageElementImpl0 = new HTMLImageElementImpl(hTMLDocumentImpl1, "http://www.w3.org/2000/xmlns/");
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLImageElementImpl0);
      
      CDATASectionImpl cDATASectionImpl0 = new CDATASectionImpl(hTMLDocumentImpl0, "OH}O.{7[s}B?VT");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(cDATASectionImpl0);
      
      dOMNodePointer3.setValue("OH}O.{7[s}B?VT");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(dOMNodePointer3.isAttribute());
      assertEquals(1, dOMNodePointer3.getLength());
      assertTrue(dOMNodePointer3.isNode());
      assertFalse(dOMNodePointer3.isCollection());
      assertTrue(dOMNodePointer3.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertFalse(dOMNodePointer3.isContainer());
      assertTrue(dOMNodePointer3.isRoot());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer3, dOMNodePointer2);
      assertNotSame(dOMNodePointer3, dOMNodePointer1);
      assertNotSame(dOMNodePointer3, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer0));
      
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      NodeIterator nodeIterator0 = hTMLDocumentImpl0.createNodeIterator((Node) hTMLImageElementImpl0, Integer.MIN_VALUE, nodeFilter0, true);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(nodeIterator0);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(documentTypeImpl0);
      
      Object object0 = dOMNodePointer0.getValue();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer3);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("OH}O.{7[s}B?VT", object0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertNotNull(object0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      PSVIAttrNSImpl pSVIAttrNSImpl0 = new PSVIAttrNSImpl(hTMLDocumentImpl0, "\"mod\"", "U=.|TV*jC<gqd$>t", "node()");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(pSVIAttrNSImpl0);
      
      Node node0 = pSVIAttrNSImpl0.cloneNode(false);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(pSVIAttrNSImpl0, node0);
      assertNotSame(node0, pSVIAttrNSImpl0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(node0.equals((Object)pSVIAttrNSImpl0));
      assertNotNull(node0);
      
      DOMNodePointer dOMNodePointer4 = new DOMNodePointer(node0, locale1);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it", locale1.toString());
      assertFalse(dOMNodePointer4.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer4.getIndex());
      assertTrue(dOMNodePointer4.isRoot());
      assertEquals(1, dOMNodePointer4.getLength());
      assertTrue(dOMNodePointer4.isActual());
      assertTrue(dOMNodePointer4.isNode());
      assertFalse(dOMNodePointer4.isContainer());
      assertFalse(dOMNodePointer4.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(pSVIAttrNSImpl0.equals((Object)node0));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(node0.equals((Object)pSVIAttrNSImpl0));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer4);
      
      DOMNodePointer dOMNodePointer5 = new DOMNodePointer(dOMNodePointer4, hTMLImageElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it", locale1.toString());
      assertFalse(dOMNodePointer4.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer4.getIndex());
      assertTrue(dOMNodePointer4.isRoot());
      assertEquals(1, dOMNodePointer4.getLength());
      assertTrue(dOMNodePointer4.isActual());
      assertTrue(dOMNodePointer4.isNode());
      assertFalse(dOMNodePointer4.isContainer());
      assertFalse(dOMNodePointer4.isCollection());
      assertFalse(dOMNodePointer5.isRoot());
      assertFalse(dOMNodePointer5.isAttribute());
      assertTrue(dOMNodePointer5.isNode());
      assertEquals(1, dOMNodePointer5.getLength());
      assertTrue(dOMNodePointer5.isActual());
      assertFalse(dOMNodePointer5.isCollection());
      assertFalse(dOMNodePointer5.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer5.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(pSVIAttrNSImpl0.equals((Object)node0));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(node0.equals((Object)pSVIAttrNSImpl0));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer5.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer5.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer5.equals((Object)dOMNodePointer4));
      assertFalse(dOMNodePointer5.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer5.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer5);
      
      NamespaceResolver namespaceResolver0 = dOMNodePointer2.getNamespaceResolver();
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertFalse(dOMNodePointer2.isContainer());
      assertEquals(1, dOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isNode());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(namespaceResolver0.isSealed());
      assertNotSame(locale0, locale1);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(dOMNodePointer2, dOMNodePointer3);
      assertNotSame(dOMNodePointer2, dOMNodePointer4);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer5);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer4));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer5));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNotNull(namespaceResolver0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
      assertNotNull(deferredDocumentImpl0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(deferredDocumentImpl0, locale0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
      assertNotNull(pSVIDocumentImpl0);
      
      boolean boolean0 = pSVIDocumentImpl0.getStrictErrorChecking();
      assertTrue(boolean0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) deferredDocumentImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      boolean boolean1 = pSVIDocumentImpl0.getStandalone();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JXPathContext jXPathContext0 = jXPathContextReferenceImpl0.getParentContext();
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNull(jXPathContext0);
      
      NullPointer nullPointer0 = (NullPointer)dOMNodePointer0.getPointerByID(jXPathContextReferenceImpl0, "<<unknown namespace>>");
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isActual());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
      
      int int0 = dOMNodePointer0.getLength();
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(1, int0);
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLDocumentImpl0);
      
      String string0 = dOMNodePointer0.asPath();
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", string0);
      assertNotNull(string0);
      
      PSVIElementNSImpl pSVIElementNSImpl0 = (PSVIElementNSImpl)pSVIDocumentImpl0.createElementNS("6p{>5=W-By^Se", (String) null, "6p{>5=W-By^Se");
      assertNotNull(pSVIElementNSImpl0);
      
      String string1 = DOMNodePointer.getLocalName(pSVIElementNSImpl0);
      assertEquals("6p{>5=W-By^Se", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      ElementDefinitionImpl elementDefinitionImpl0 = new ElementDefinitionImpl((CoreDocumentImpl) null, ">{g");
      assertNotNull(elementDefinitionImpl0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(elementDefinitionImpl0, locale0, ">{g");
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      NamespaceResolver namespaceResolver0 = dOMNodePointer0.getNamespaceResolver();
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(namespaceResolver0.isSealed());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(namespaceResolver0);
      
      String string0 = dOMNodePointer0.getNamespaceURI(">{g");
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(string0);
      
      NamespaceResolver namespaceResolver1 = dOMNodePointer0.getNamespaceResolver();
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(namespaceResolver1.isSealed());
      assertSame(namespaceResolver1, namespaceResolver0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(namespaceResolver1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "v!$4~ AD[ikkNlz", "v!$4~ AD[ikkNlz", "PRE");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(documentTypeImpl0);
      
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(coreDocumentImpl0);
      
      Locale locale0 = new Locale("PRE", "PRE");
      assertEquals("PRE", locale0.getCountry());
      assertEquals("pre", locale0.getLanguage());
      assertEquals("pre", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("pre_PRE", locale0.toString());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(documentTypeImpl0, locale0, "v!$4~ AD[ikkNlz");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("PRE", locale0.getCountry());
      assertEquals("pre", locale0.getLanguage());
      assertEquals("pre", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("pre_PRE", locale0.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("PRE", locale0.getCountry());
      assertEquals("pre", locale0.getLanguage());
      assertEquals("pre", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("pre_PRE", locale0.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      boolean boolean0 = hTMLDocumentImpl0.getStandalone();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(boolean0);
      
      JXPathContext jXPathContext0 = jXPathContextReferenceImpl0.getParentContext();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("PRE", locale0.getCountry());
      assertEquals("pre", locale0.getLanguage());
      assertEquals("pre", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("pre_PRE", locale0.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNull(jXPathContext0);
      
      NullPointer nullPointer0 = (NullPointer)dOMNodePointer0.getPointerByID((JXPathContext) null, (String) null);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("PRE", locale0.getCountry());
      assertEquals("pre", locale0.getLanguage());
      assertEquals("pre", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("pre_PRE", locale0.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isRoot());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
      
      int int0 = dOMNodePointer0.getLength();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("PRE", locale0.getCountry());
      assertEquals("pre", locale0.getLanguage());
      assertEquals("pre", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("pre_PRE", locale0.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(1, int0);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      
      String string0 = dOMNodePointer0.asPath();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("PRE", locale0.getCountry());
      assertEquals("pre", locale0.getLanguage());
      assertEquals("pre", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("pre_PRE", locale0.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("id('v!$4~ AD[ikkNlz')", string0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(string0);
      
      String string1 = dOMNodePointer0.getDefaultNamespaceURI();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("PRE", locale0.getCountry());
      assertEquals("pre", locale0.getLanguage());
      assertEquals("pre", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("pre_PRE", locale0.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.isLanguage((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "xmlns");
      assertFalse(boolean0);
      
      HTMLDocumentImpl hTMLDocumentImpl0 = null;
      HTMLParamElementImpl hTMLParamElementImpl0 = new HTMLParamElementImpl((HTMLDocumentImpl) null, "xmlns");
      assertNotNull(hTMLParamElementImpl0);
      
      short short0 = hTMLParamElementImpl0.getNodeType();
      assertEquals((short)1, short0);
      
      // Undeclared exception!
      try { 
        DOMNodePointer.findEnclosingAttribute(hTMLParamElementImpl0, "org.apache.commons.jxpath.util.TypeUtils$1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      CDATASectionImpl cDATASectionImpl0 = new CDATASectionImpl(hTMLDocumentImpl0, "1%N]FQ");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(cDATASectionImpl0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(cDATASectionImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      HTMLIFrameElementImpl hTMLIFrameElementImpl0 = new HTMLIFrameElementImpl(hTMLDocumentImpl0, "=}YJs/,=");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLIFrameElementImpl0);
      
      String string0 = DOMNodePointer.XML_NAMESPACE_URI;
      assertEquals("http://www.w3.org/XML/1998/namespace", string0);
      assertNotNull(string0);
      
      HTMLFontElementImpl hTMLFontElementImpl0 = new HTMLFontElementImpl(hTMLDocumentImpl0, "Gj*");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLFontElementImpl0);
      
      XMLErrorReporter xMLErrorReporter0 = new XMLErrorReporter();
      assertNotNull(xMLErrorReporter0);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "xml:space");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(documentTypeImpl0);
      
      String string1 = DOMNodePointer.XML_NAMESPACE_URI;
      assertEquals("http://www.w3.org/XML/1998/namespace", string1);
      assertNotNull(string1);
      
      QName qName1 = new QName("**>yD1F\",m-Q@<7]TX");
      assertEquals("**>yD1F\",m-Q@<7]TX", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals("**>yD1F\",m-Q@<7]TX", qName1.getName());
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "tU}hP5f[<zgt#s");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.toString());
      assertEquals("tU}hP5f[<zgt#s", nodeNameTest0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodeNameTest0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      boolean boolean0 = dOMNodePointer1.testNode((NodeTest) nodeNameTest0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.toString());
      assertEquals("tU}hP5f[<zgt#s", nodeNameTest0.getNamespaceURI());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(qName0, qName1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean0);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      
      HTMLImageElementImpl hTMLImageElementImpl0 = new HTMLImageElementImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLImageElementImpl0);
      
      ElementDefinitionImpl elementDefinitionImpl0 = new ElementDefinitionImpl(hTMLDocumentImpl0, ">D1W6!P");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(elementDefinitionImpl0);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(elementDefinitionImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isAttribute());
      assertTrue(dOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isNode());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer2);
      
      // Undeclared exception!
      try { 
        dOMNodePointer2.setValue(nodeNameTest0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLParagraphElementImpl0);
      
      Locale locale0 = Locale.forLanguageTag("y)Gj*");
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLParagraphElementImpl0, locale0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      String string0 = dOMNodePointer1.getNamespaceURI("http://www.w3.org/XML/1998/namespace");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNull(string0);
      
      HTMLBaseFontElementImpl hTMLBaseFontElementImpl0 = new HTMLBaseFontElementImpl(hTMLDocumentImpl0, "");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLBaseFontElementImpl0);
      
      QName qName0 = dOMNodePointer1.getName();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(qName0);
      
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      String string1 = locale0.getDisplayLanguage();
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotSame(locale0, locale1);
      assertEquals("", string1);
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(string1);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "http://www.w3.org/XML/1998/namespace");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(nodeNameTest0);
      
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLBaseFontElementImpl0, (NodeTest) nodeTypeTest0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertFalse(boolean0);
      
      String string2 = NodePointer.UNKNOWN_NAMESPACE;
      assertEquals("<<unknown namespace>>", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(dOMNodePointer0, hTMLParagraphElementImpl0);
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isRoot());
      assertEquals(1, dOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertFalse(dOMNodePointer2.isAttribute());
      assertTrue(dOMNodePointer2.isActual());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer2);
      
      org.apache.commons.jxpath.ri.model.NodeIterator nodeIterator0 = dOMNodePointer2.namespaceIterator();
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isRoot());
      assertEquals(1, dOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertFalse(dOMNodePointer2.isAttribute());
      assertTrue(dOMNodePointer2.isActual());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals(0, nodeIterator0.getPosition());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertNotNull(nodeIterator0);
      
      HTMLDirectoryElementImpl hTMLDirectoryElementImpl0 = new HTMLDirectoryElementImpl(hTMLDocumentImpl0, "HTMLMetaElementImpl");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(hTMLDirectoryElementImpl0);
      
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertNull(nodeNameTest1.toString());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(nodeNameTest1);
      
      // Undeclared exception!
      try { 
        DOMNodePointer.testNode((Node) hTMLDirectoryElementImpl0, (NodeTest) nodeNameTest1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.NodeNameTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      CDATASectionImpl cDATASectionImpl0 = new CDATASectionImpl(hTMLDocumentImpl0, "1%N]FQ");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(cDATASectionImpl0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(cDATASectionImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      HTMLIFrameElementImpl hTMLIFrameElementImpl0 = new HTMLIFrameElementImpl(hTMLDocumentImpl0, "=}YJs/,=");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLIFrameElementImpl0);
      
      String string0 = DOMNodePointer.XML_NAMESPACE_URI;
      assertEquals("http://www.w3.org/XML/1998/namespace", string0);
      assertNotNull(string0);
      
      HTMLFontElementImpl hTMLFontElementImpl0 = new HTMLFontElementImpl(hTMLDocumentImpl0, "tfk)=aoI.~*c@5ek");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLFontElementImpl0);
      
      XMLErrorReporter xMLErrorReporter0 = new XMLErrorReporter();
      assertNotNull(xMLErrorReporter0);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "1%N]FQ");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(documentTypeImpl0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(wMLDocumentImpl0);
      
      WMLIElementImpl wMLIElementImpl0 = new WMLIElementImpl(wMLDocumentImpl0, "k\"_D?>br");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(wMLIElementImpl0);
      
      dOMNodePointer0.setValue(wMLIElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string1 = DOMNodePointer.getNamespaceURI((Node) hTMLFontElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(string1);
      
      String string2 = DOMNodePointer.getLocalName(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("#document", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      WMLPostfieldElementImpl wMLPostfieldElementImpl0 = new WMLPostfieldElementImpl(wMLDocumentImpl0, "y_/bzl@t?0;tY){S");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(wMLPostfieldElementImpl0);
      
      // Undeclared exception!
      try { 
        jXPathContextReferenceImpl0.createPathAndSetValue("http://www.w3.org/XML/1998/namespace", wMLPostfieldElementImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid XPath: 'http://www.w3.org/XML/1998/namespace'. Syntax error after: 'http:'
         //
         verifyException("org.apache.commons.jxpath.ri.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLParagraphElementImpl0);
      
      Locale locale0 = Locale.forLanguageTag("y)Gj*");
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLParagraphElementImpl0, locale0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl1 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "3m//");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertFalse(hTMLParagraphElementImpl1.equals((Object)hTMLParagraphElementImpl0));
      assertNotNull(hTMLParagraphElementImpl1);
      
      boolean boolean0 = hTMLDocumentImpl0.getStrictErrorChecking();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertTrue(boolean0);
      
      HTMLSelectElementImpl hTMLSelectElementImpl0 = new HTMLSelectElementImpl(hTMLDocumentImpl0, "TrkM+rUI%j$XW#}2");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLSelectElementImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) hTMLSelectElementImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(true, true);
      assertNotNull(deferredDocumentImpl0);
      
      boolean boolean1 = deferredDocumentImpl0.getAsync();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = hTMLDocumentImpl0.getStandalone();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      JXPathContext jXPathContext0 = jXPathContextReferenceImpl0.getParentContext();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNull(jXPathContext0);
      
      DOMErrorHandlerWrapper dOMErrorHandlerWrapper0 = new DOMErrorHandlerWrapper();
      assertNotNull(dOMErrorHandlerWrapper0);
      
      Node node0 = dOMErrorHandlerWrapper0.fCurrentNode;
      assertNull(node0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer((Node) null, locale0, "http://www.w3.org/XML/1998/namespace");
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      // Undeclared exception!
      try { 
        dOMNodePointer1.getPointerByID((JXPathContext) null, ")Zu)e 5Mzv3Mb/tR)z(");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLParagraphElementImpl0);
      
      String string0 = hTMLDocumentImpl0.lookupNamespaceURI("B2x)n5yg~dR&Oud7(");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(string0);
      
      Locale locale0 = Locale.forLanguageTag("y)Gj*");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLParagraphElementImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      HTMLButtonElementImpl hTMLButtonElementImpl0 = new HTMLButtonElementImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLButtonElementImpl0);
      
      Locale locale1 = Locale.FRANCE;
      assertEquals("fr_FR", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("FR", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("FRA", locale1.getISO3Country());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      String string1 = dOMNodePointer0.getNamespaceURI("y)Gj*");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertNull(string1);
      
      HTMLBaseFontElementImpl hTMLBaseFontElementImpl0 = new HTMLBaseFontElementImpl(hTMLDocumentImpl0, "");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLBaseFontElementImpl0);
      
      QName qName0 = new QName("http://www.w3.org/2000/xmlns/", "<<unknown namespace>>");
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("http://www.w3.org/2000/xmlns/:<<unknown namespace>>", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getPrefix());
      assertNotNull(qName0);
      
      String string2 = NodePointer.UNKNOWN_NAMESPACE;
      assertEquals("<<unknown namespace>>", string2);
      assertNotNull(string2);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      
      DocumentType documentType0 = hTMLDocumentImpl1.getDoctype();
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNull(documentType0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) null);
      assertNotNull(wMLDocumentImpl0);
      
      WMLRefreshElementImpl wMLRefreshElementImpl0 = new WMLRefreshElementImpl(wMLDocumentImpl0, "`Vh\"B3k:");
      assertNotNull(wMLRefreshElementImpl0);
      
      dOMNodePointer0.setValue(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(locale0.equals((Object)locale1));
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer(dOMNodePointer0, qName0, locale0);
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("http://www.w3.org/2000/xmlns/:<<unknown namespace>>", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getPrefix());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(beanPointer0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(beanPointer0, wMLRefreshElementImpl0);
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("http://www.w3.org/2000/xmlns/:<<unknown namespace>>", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getPrefix());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(dOMNodePointer1);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("http://www.w3.org/2000/xmlns/:<<unknown namespace>>", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getPrefix());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      NodePointer nodePointer0 = variablePointer0.namespacePointer("%Y;VYGaM:NqB&VC=k,");
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("http://www.w3.org/2000/xmlns/:<<unknown namespace>>", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getPrefix());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(nodePointer0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer1.compareChildNodePointers((NodePointer) null, variablePointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLParagraphElementImpl0);
      
      Locale locale0 = Locale.forLanguageTag("~}^aH6o'i @TRtfB\"#o");
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.forLanguageTag("y)Gj*");
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "root", (String) null, "q8Nun,bu_*:8fn");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(documentTypeImpl0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(wMLDocumentImpl0);
      
      WMLSelectElementImpl wMLSelectElementImpl0 = new WMLSelectElementImpl(wMLDocumentImpl0, "+X?d");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(wMLSelectElementImpl0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(wMLSelectElementImpl0, locale1, "2e(^m1o#kuw[2;;3");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, wMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      DocumentTypeImpl documentTypeImpl1 = new DocumentTypeImpl(wMLDocumentImpl0, "~}^aH6o'i @TRtfB\"#o");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertFalse(documentTypeImpl1.equals((Object)documentTypeImpl0));
      assertNotNull(documentTypeImpl1);
      
      Locale locale2 = Locale.FRENCH;
      assertEquals("", locale2.getISO3Country());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("fr", locale2.toString());
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      
      Locale locale3 = Locale.TRADITIONAL_CHINESE;
      assertEquals("", locale3.getVariant());
      assertEquals("zh_TW", locale3.toString());
      assertEquals("zho", locale3.getISO3Language());
      assertEquals("TW", locale3.getCountry());
      assertEquals("TWN", locale3.getISO3Country());
      assertEquals("zh", locale3.getLanguage());
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale1);
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale1));
      assertNotNull(locale3);
      
      String string0 = locale3.getDisplayLanguage();
      assertEquals("", locale3.getVariant());
      assertEquals("zh_TW", locale3.toString());
      assertEquals("zho", locale3.getISO3Language());
      assertEquals("TW", locale3.getCountry());
      assertEquals("TWN", locale3.getISO3Country());
      assertEquals("zh", locale3.getLanguage());
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale1);
      assertEquals("Chinese", string0);
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale1));
      assertNotNull(string0);
      
      String string1 = locale1.getDisplayVariant();
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertSame(locale1, locale0);
      assertNotSame(locale1, locale3);
      assertNotSame(locale1, locale2);
      assertEquals("", string1);
      assertFalse(locale1.equals((Object)locale3));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      boolean boolean0 = DOMNodePointer.testNode((Node) wMLSelectElementImpl0, (NodeTest) nodeTypeTest0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertNotSame(documentTypeImpl0, documentTypeImpl1);
      assertTrue(boolean0);
      assertFalse(documentTypeImpl0.equals((Object)documentTypeImpl1));
      
      String string2 = NodePointer.UNKNOWN_NAMESPACE;
      assertEquals("<<unknown namespace>>", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl0, "uw:?gR3L6uYV1DYCqJ");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLTableElementImpl0);
      
      HTMLTableSectionElement hTMLTableSectionElement0 = hTMLTableElementImpl0.getTHead();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLTableSectionElement0);
      
      // Undeclared exception!
      try { 
        DOMNodePointer.getNamespaceURI((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLParagraphElementImpl0);
      
      Locale locale0 = Locale.forLanguageTag("y)Gj*");
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      CDATASectionImpl cDATASectionImpl0 = new CDATASectionImpl(hTMLDocumentImpl0, "1%N]FQ");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(cDATASectionImpl0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(cDATASectionImpl0, locale1);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(dOMNodePointer0);
      
      HTMLIFrameElementImpl hTMLIFrameElementImpl0 = new HTMLIFrameElementImpl(hTMLDocumentImpl0, "=}YJs/,=");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLIFrameElementImpl0);
      
      String string0 = DOMNodePointer.XML_NAMESPACE_URI;
      assertEquals("http://www.w3.org/XML/1998/namespace", string0);
      assertNotNull(string0);
      
      HTMLFontElementImpl hTMLFontElementImpl0 = new HTMLFontElementImpl(hTMLDocumentImpl0, "tfk)=aoI.~*c@5ek");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLFontElementImpl0);
      
      XMLErrorReporter xMLErrorReporter0 = new XMLErrorReporter();
      assertNotNull(xMLErrorReporter0);
      
      Locale locale2 = xMLErrorReporter0.getLocale();
      assertNull(locale2);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLIFrameElementImpl0, (Locale) null);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      StandardParserConfiguration standardParserConfiguration0 = new StandardParserConfiguration();
      assertNotNull(standardParserConfiguration0);
      
      HTMLImageElementImpl hTMLImageElementImpl0 = new HTMLImageElementImpl(hTMLDocumentImpl0, ":}_>-0");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLImageElementImpl0);
      
      dOMNodePointer1.setValue(cDATASectionImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "xkS7VLKiq#!Or9Sqke", "&50n3),]?K*Rp?zf!", "7E<(pM*zF");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(documentTypeImpl0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(wMLDocumentImpl0);
      
      WMLSetvarElementImpl wMLSetvarElementImpl0 = new WMLSetvarElementImpl(wMLDocumentImpl0, "");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(wMLSetvarElementImpl0);
      
      boolean boolean0 = dOMNodePointer1.equals(wMLSetvarElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean0);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      
      HTMLHtmlElementImpl hTMLHtmlElementImpl0 = new HTMLHtmlElementImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLHtmlElementImpl0);
      
      String string1 = DOMNodePointer.getNamespaceURI((Node) hTMLImageElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl0, "org.apache.commons.jxpath.ri.model.dom.DOMNodePointer");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLTableElementImpl0);
      
      hTMLTableElementImpl0.setCellSpacing("BBtfT>4w!,C5");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      HTMLElement hTMLElement0 = hTMLTableElementImpl0.createCaption();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLElement0);
      
      String string0 = DOMNodePointer.getNamespaceURI((Node) hTMLElement0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(string0);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "A!J}B!(`}dE]z", "BBtfT>4w!,C5", "xM!~/2gl{Ebb");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(documentTypeImpl0);
      
      documentTypeImpl0.setTextContent((String) null);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      Node node0 = documentTypeImpl0.cloneNode(false);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotSame(documentTypeImpl0, node0);
      assertNotSame(node0, documentTypeImpl0);
      assertFalse(node0.equals((Object)documentTypeImpl0));
      assertNotNull(node0);
      
      // Undeclared exception!
      try { 
        DOMNodePointer.getNamespaceURI(node0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.xerces.dom.DocumentTypeImpl cannot be cast to org.w3c.dom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      hTMLDocumentImpl0.setErrorChecking(false);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      HTMLBaseFontElementImpl hTMLBaseFontElementImpl0 = new HTMLBaseFontElementImpl(hTMLDocumentImpl0, "BE.a8h*&hNhO<b");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLBaseFontElementImpl0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, ",p");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLParagraphElementImpl0);
      
      Node node0 = hTMLParagraphElementImpl0.cloneNode(false);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotSame(hTMLParagraphElementImpl0, node0);
      assertNotSame(node0, hTMLParagraphElementImpl0);
      assertFalse(node0.equals((Object)hTMLParagraphElementImpl0));
      assertNotNull(node0);
      
      HTMLFormElement hTMLFormElement0 = hTMLParagraphElementImpl0.getForm();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotSame(hTMLParagraphElementImpl0, node0);
      assertFalse(hTMLParagraphElementImpl0.equals((Object)node0));
      assertNull(hTMLFormElement0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-3374));
      assertEquals((-3374), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      String string0 = DOMNodePointer.getNamespaceURI((Node) hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(string0);
      
      String string1 = DOMNodePointer.getLocalName(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("#document", string1);
      assertNotNull(string1);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(node0, locale0, "xml");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLParagraphElementImpl0.equals((Object)node0));
      assertFalse(node0.equals((Object)hTMLParagraphElementImpl0));
      assertNotNull(dOMNodePointer0);
      
      NullPointer nullPointer0 = (NullPointer)dOMNodePointer0.getPointerByID(jXPathContextReferenceImpl0, ",p");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertNotSame(hTMLParagraphElementImpl0, node0);
      assertNotSame(node0, hTMLParagraphElementImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLParagraphElementImpl0.equals((Object)node0));
      assertFalse(node0.equals((Object)hTMLParagraphElementImpl0));
      assertNotNull(nullPointer0);
      
      BasicVariables basicVariables0 = (BasicVariables)jXPathContextReferenceImpl0.getVariables();
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.childIterator(nodeTypeTest0, false, variablePointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLParagraphElementImpl0);
      
      Locale locale0 = Locale.forLanguageTag("y)Gj*");
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLParagraphElementImpl0, locale0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(hTMLParagraphElementImpl0, locale1);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals(1, dOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isAttribute());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer2);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "http://www.w3.org/XML/1998/namespace");
      assertFalse(boolean0);
      
      HTMLIFrameElementImpl hTMLIFrameElementImpl0 = new HTMLIFrameElementImpl(hTMLDocumentImpl0, "\u0004grE.-!NmdD");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLIFrameElementImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) hTMLIFrameElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)jXPathContextReferenceImpl0.getRelativeContext(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      
      JXPathContext jXPathContext0 = jXPathContextReferenceImpl0.getParentContext();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertNull(jXPathContext0);
      
      QName qName0 = new QName("preserve");
      assertNull(qName0.getPrefix());
      assertEquals("preserve", qName0.toString());
      assertEquals("preserve", qName0.getName());
      assertNotNull(qName0);
      
      DOMAttributePointer dOMAttributePointer0 = (DOMAttributePointer)dOMNodePointer0.createAttribute(jXPathContextReferenceImpl0, qName0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("preserve", qName0.toString());
      assertEquals("preserve", qName0.getName());
      assertFalse(dOMAttributePointer0.isCollection());
      assertTrue(dOMAttributePointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, dOMAttributePointer0.getIndex());
      assertEquals(1, dOMAttributePointer0.getLength());
      assertFalse(dOMAttributePointer0.isContainer());
      assertTrue(dOMAttributePointer0.isActual());
      assertTrue(dOMAttributePointer0.isNode());
      assertFalse(dOMAttributePointer0.isRoot());
      assertFalse(dOMAttributePointer0.isAttribute());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(dOMAttributePointer0);
      
      String string0 = DOMNodePointer.getLocalName(hTMLParagraphElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("Y)GJ*", string0);
      assertNotNull(string0);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "APPLET", "APPLET", "");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(documentTypeImpl0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(wMLDocumentImpl0);
      
      DocumentTypeImpl documentTypeImpl1 = new DocumentTypeImpl(wMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertFalse(documentTypeImpl1.equals((Object)documentTypeImpl0));
      assertNotNull(documentTypeImpl1);
      
      String string1 = documentTypeImpl1.lookupNamespaceURI("APPLET");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotSame(documentTypeImpl1, documentTypeImpl0);
      assertNotSame(documentTypeImpl0, documentTypeImpl1);
      assertFalse(documentTypeImpl1.equals((Object)documentTypeImpl0));
      assertFalse(documentTypeImpl0.equals((Object)documentTypeImpl1));
      assertNull(string1);
      
      WMLRefreshElementImpl wMLRefreshElementImpl0 = new WMLRefreshElementImpl(wMLDocumentImpl0, "e(i;[");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertFalse(documentTypeImpl0.equals((Object)documentTypeImpl1));
      assertNotNull(wMLRefreshElementImpl0);
      
      HTMLDListElementImpl hTMLDListElementImpl0 = new HTMLDListElementImpl(hTMLDocumentImpl0, "\":\"");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDListElementImpl0);
      
      dOMNodePointer0.setValue(hTMLDListElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      
      WMLBigElementImpl wMLBigElementImpl0 = new WMLBigElementImpl(wMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertFalse(documentTypeImpl0.equals((Object)documentTypeImpl1));
      assertNotNull(wMLBigElementImpl0);
      
      DOMNodePointer dOMNodePointer3 = (DOMNodePointer)NodePointer.newChildNodePointer(dOMNodePointer0, qName0, wMLBigElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer3.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertFalse(dOMNodePointer3.isContainer());
      assertFalse(dOMNodePointer3.isCollection());
      assertTrue(dOMNodePointer3.isActual());
      assertEquals(1, dOMNodePointer3.getLength());
      assertTrue(dOMNodePointer3.isNode());
      assertFalse(dOMNodePointer3.isAttribute());
      assertNull(qName0.getPrefix());
      assertEquals("preserve", qName0.toString());
      assertEquals("preserve", qName0.getName());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer3);
      assertNotSame(dOMNodePointer3, dOMNodePointer0);
      assertNotSame(dOMNodePointer3, dOMNodePointer2);
      assertNotSame(dOMNodePointer3, dOMNodePointer1);
      assertNotSame(documentTypeImpl0, documentTypeImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertFalse(documentTypeImpl0.equals((Object)documentTypeImpl1));
      assertNotNull(dOMNodePointer3);
      
      int int0 = dOMNodePointer1.compareChildNodePointers(dOMNodePointer0, dOMAttributePointer0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("preserve", qName0.toString());
      assertEquals("preserve", qName0.getName());
      assertFalse(dOMAttributePointer0.isCollection());
      assertTrue(dOMAttributePointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, dOMAttributePointer0.getIndex());
      assertEquals(1, dOMAttributePointer0.getLength());
      assertFalse(dOMAttributePointer0.isContainer());
      assertTrue(dOMAttributePointer0.isActual());
      assertTrue(dOMAttributePointer0.isNode());
      assertFalse(dOMAttributePointer0.isRoot());
      assertFalse(dOMAttributePointer0.isAttribute());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer3);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer3);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(1, int0);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      
      // Undeclared exception!
      try { 
        dOMNodePointer1.createAttribute(jXPathContextReferenceImpl1, qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot create an attribute for path id('y)Gj*')/@preserve, operation is not allowed for this type of node
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLParagraphElementImpl0);
      
      Locale locale0 = Locale.forLanguageTag("y)Gj*");
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.forLanguageTag("y)Gj*");
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLParagraphElementImpl0, locale0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      QName qName0 = new QName("http://www.w3.org/2000/xmlns/", "The DOCTYPE ");
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getPrefix());
      assertEquals("The DOCTYPE ", qName0.getName());
      assertEquals("http://www.w3.org/2000/xmlns/:The DOCTYPE ", qName0.toString());
      assertNotNull(qName0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
      assertEquals(4, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getPrefix());
      assertEquals("The DOCTYPE ", qName0.getName());
      assertEquals("http://www.w3.org/2000/xmlns/:The DOCTYPE ", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("http://www.w3.org/2000/xmlns/:The DOCTYPE ", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      boolean boolean0 = dOMNodePointer1.testNode((NodeTest) nodeNameTest0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getPrefix());
      assertEquals("The DOCTYPE ", qName0.getName());
      assertEquals("http://www.w3.org/2000/xmlns/:The DOCTYPE ", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("http://www.w3.org/2000/xmlns/:The DOCTYPE ", nodeNameTest0.toString());
      assertSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean0);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      
      HTMLOptGroupElementImpl hTMLOptGroupElementImpl0 = new HTMLOptGroupElementImpl((HTMLDocumentImpl) null, "<<unknown namespace>>");
      assertNotNull(hTMLOptGroupElementImpl0);
      
      HTMLAnchorElementImpl hTMLAnchorElementImpl0 = new HTMLAnchorElementImpl(hTMLDocumentImpl1, "HTM017 Argument 'tHead' is not an element of type <THEAD>.");
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLAnchorElementImpl0);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl((CoreDocumentImpl) null, "http://www.w3.org/2000/xmlns/");
      assertNotNull(documentTypeImpl0);
      
      DocumentFragmentImpl documentFragmentImpl0 = new DocumentFragmentImpl();
      assertNotNull(documentFragmentImpl0);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(documentFragmentImpl0, locale0, "");
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isRoot());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer2);
      
      org.apache.commons.jxpath.ri.model.NodeIterator nodeIterator0 = dOMNodePointer1.namespaceIterator();
      assertEquals(0, nodeIterator0.getPosition());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertNotNull(nodeIterator0);
      
      org.apache.commons.jxpath.ri.model.NodeIterator nodeIterator1 = dOMNodePointer1.namespaceIterator();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals(0, nodeIterator1.getPosition());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(nodeIterator1, nodeIterator0);
      assertSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(nodeIterator1.equals((Object)nodeIterator0));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertNotNull(nodeIterator1);
      
      org.apache.commons.jxpath.ri.model.NodeIterator nodeIterator2 = dOMNodePointer1.namespaceIterator();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals(0, nodeIterator2.getPosition());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(nodeIterator2, nodeIterator1);
      assertNotSame(nodeIterator2, nodeIterator0);
      assertSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(nodeIterator2.equals((Object)nodeIterator1));
      assertFalse(nodeIterator2.equals((Object)nodeIterator0));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertNotNull(nodeIterator2);
      
      DOMNodePointer dOMNodePointer3 = new DOMNodePointer(hTMLOptGroupElementImpl0, locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertEquals(1, dOMNodePointer3.getLength());
      assertFalse(dOMNodePointer3.isContainer());
      assertTrue(dOMNodePointer3.isRoot());
      assertFalse(dOMNodePointer3.isCollection());
      assertTrue(dOMNodePointer3.isActual());
      assertTrue(dOMNodePointer3.isNode());
      assertFalse(dOMNodePointer3.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer3);
      
      // Undeclared exception!
      try { 
        dOMNodePointer3.getDefaultNamespaceURI();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLParagraphElementImpl0);
      
      Locale locale0 = Locale.forLanguageTag("y)Gj*");
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLParagraphElementImpl0, locale0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl1 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "APPLET");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertFalse(hTMLParagraphElementImpl1.equals((Object)hTMLParagraphElementImpl0));
      assertNotNull(hTMLParagraphElementImpl1);
      
      Node node0 = hTMLParagraphElementImpl1.getPreviousSibling();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotSame(hTMLParagraphElementImpl1, hTMLParagraphElementImpl0);
      assertFalse(hTMLParagraphElementImpl1.equals((Object)hTMLParagraphElementImpl0));
      assertNull(node0);
      
      Locale locale1 = Locale.FRANCE;
      assertEquals("", locale1.getVariant());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("FR", locale1.getCountry());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      Locale locale2 = Locale.US;
      assertEquals("en", locale2.getLanguage());
      assertEquals("USA", locale2.getISO3Country());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("US", locale2.getCountry());
      assertEquals("en_US", locale2.toString());
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      
      String string0 = locale2.getDisplayScript(locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("FR", locale1.getCountry());
      assertEquals("en", locale2.getLanguage());
      assertEquals("USA", locale2.getISO3Country());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("US", locale2.getCountry());
      assertEquals("en_US", locale2.toString());
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("", string0);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(string0);
      
      String string1 = dOMNodePointer0.getNamespaceURI("HTMLDListElementImpl");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(hTMLParagraphElementImpl0, hTMLParagraphElementImpl1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLParagraphElementImpl0.equals((Object)hTMLParagraphElementImpl1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertNull(string1);
      
      HTMLBaseFontElementImpl hTMLBaseFontElementImpl0 = new HTMLBaseFontElementImpl(hTMLDocumentImpl0, "Cannot remove root DOM node");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLBaseFontElementImpl0);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNull(qName0.getPrefix());
      assertEquals("Y)GJ*", qName0.getName());
      assertEquals("Y)GJ*", qName0.toString());
      assertNotSame(hTMLParagraphElementImpl0, hTMLParagraphElementImpl1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLParagraphElementImpl0.equals((Object)hTMLParagraphElementImpl1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(qName0);
      
      Locale locale3 = new Locale("element", "<<unknown namespace>>", "H|4 =_{VlNO'");
      assertEquals("element_<<UNKNOWN NAMESPACE>>_H|4 =_{VlNO'", locale3.toString());
      assertEquals("element", locale3.getLanguage());
      assertEquals("H|4 =_{VlNO'", locale3.getVariant());
      assertEquals("<<UNKNOWN NAMESPACE>>", locale3.getCountry());
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale0));
      assertNotNull(locale3);
      
      String string2 = locale1.getDisplayScript(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.getVariant());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("FR", locale1.getCountry());
      assertNotSame(locale0, locale3);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale3);
      assertNotSame(locale1, locale2);
      assertEquals("", string2);
      assertFalse(locale0.equals((Object)locale3));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale3));
      assertFalse(locale1.equals((Object)locale2));
      assertNotNull(string2);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "org.apache.html.dom.HTMLTableCaptionElementImpl");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer1.isNode());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale3));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      String string3 = dOMNodePointer0.getNamespaceURI("[H'OF,Z3o%D=i,|F");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(hTMLParagraphElementImpl0, hTMLParagraphElementImpl1);
      assertNotSame(locale0, locale3);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLParagraphElementImpl0.equals((Object)hTMLParagraphElementImpl1));
      assertFalse(locale0.equals((Object)locale3));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNull(string3);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(dOMNodePointer1, (Node) null);
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isRoot());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isAttribute());
      assertFalse(dOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isActual());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer1.isNode());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(locale0.equals((Object)locale3));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer2);
      
      // Undeclared exception!
      try { 
        dOMNodePointer2.getValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLParagraphElementImpl0);
      
      String string0 = hTMLDocumentImpl0.lookupNamespaceURI("B2x)n5yg~dR&Oud7(");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(string0);
      
      Locale locale0 = Locale.forLanguageTag("y)Gj*");
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLParagraphElementImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      JXPathContext jXPathContext0 = null;
      HTMLButtonElementImpl hTMLButtonElementImpl0 = new HTMLButtonElementImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLButtonElementImpl0);
      
      Locale locale1 = Locale.FRANCE;
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("FR", locale1.getCountry());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      String string1 = dOMNodePointer0.getNamespaceURI("y)Gj*");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertNull(string1);
      
      HTMLBaseFontElementImpl hTMLBaseFontElementImpl0 = new HTMLBaseFontElementImpl(hTMLDocumentImpl0, "");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLBaseFontElementImpl0);
      
      QName qName0 = new QName("http://www.w3.org/2000/xmlns/", "<<unknown namespace>>");
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("http://www.w3.org/2000/xmlns/:<<unknown namespace>>", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getPrefix());
      assertNotNull(qName0);
      
      Node node0 = hTMLParagraphElementImpl0.cloneNode(true);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotSame(hTMLParagraphElementImpl0, node0);
      assertNotSame(node0, hTMLParagraphElementImpl0);
      assertFalse(node0.equals((Object)hTMLParagraphElementImpl0));
      assertNotNull(node0);
      
      org.apache.commons.jxpath.ri.model.NodeIterator nodeIterator0 = dOMNodePointer0.namespaceIterator();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(0, nodeIterator0.getPosition());
      assertNotSame(hTMLParagraphElementImpl0, node0);
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLParagraphElementImpl0.equals((Object)node0));
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(nodeIterator0);
      
      org.apache.commons.jxpath.ri.model.NodeIterator nodeIterator1 = dOMNodePointer0.namespaceIterator();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(0, nodeIterator1.getPosition());
      assertNotSame(hTMLParagraphElementImpl0, node0);
      assertNotSame(locale0, locale1);
      assertNotSame(nodeIterator1, nodeIterator0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLParagraphElementImpl0.equals((Object)node0));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(nodeIterator1.equals((Object)nodeIterator0));
      assertNotNull(nodeIterator1);
      
      DocumentType documentType0 = hTMLDocumentImpl0.getDoctype();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(documentType0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) null);
      assertNotNull(wMLDocumentImpl0);
      
      WMLRefreshElementImpl wMLRefreshElementImpl0 = new WMLRefreshElementImpl(wMLDocumentImpl0, (String) null);
      assertNotNull(wMLRefreshElementImpl0);
      
      dOMNodePointer0.setValue(hTMLButtonElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(hTMLParagraphElementImpl0, node0);
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLParagraphElementImpl0.equals((Object)node0));
      assertFalse(locale0.equals((Object)locale1));
      
      WMLAElementImpl wMLAElementImpl0 = new WMLAElementImpl(wMLDocumentImpl0, (String) null);
      assertNotNull(wMLAElementImpl0);
      
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(dOMNodePointer0, qName0, wMLAElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isContainer());
      assertFalse(nodePointer0.isCollection());
      assertTrue(nodePointer0.isActual());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isRoot());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("http://www.w3.org/2000/xmlns/:<<unknown namespace>>", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getPrefix());
      assertNotSame(hTMLParagraphElementImpl0, node0);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLParagraphElementImpl0.equals((Object)node0));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(nodePointer0);
      
      QName qName1 = new QName("aEY}\u0001>fJKlOS", "preserve");
      assertEquals("aEY}\u0001>fJKlOS:preserve", qName1.toString());
      assertEquals("aEY}\u0001>fJKlOS", qName1.getPrefix());
      assertEquals("preserve", qName1.getName());
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-74);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-57), (byte) (-115), (byte) (-74)}, byteArray0);
      assertFalse(boolean0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName1);
      assertEquals("aEY}\u0001>fJKlOS:preserve", qName1.toString());
      assertEquals("aEY}\u0001>fJKlOS", qName1.getPrefix());
      assertEquals("preserve", qName1.getName());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(variablePointer0);
      
      NodePointer nodePointer1 = variablePointer0.namespacePointer("preserve");
      assertEquals("aEY}\u0001>fJKlOS:preserve", qName1.toString());
      assertEquals("aEY}\u0001>fJKlOS", qName1.getPrefix());
      assertEquals("preserve", qName1.getName());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(qName1.equals((Object)qName0));
      assertNull(nodePointer1);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.compareChildNodePointers(nodePointer0, (NodePointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Locale locale0 = new Locale("Factory is not set on the JXPathContext - cannot create path: ", "Factory is not set on the JXPathContext - cannot create path: ");
      assertEquals("FACTORY IS NOT SET ON THE JXPATHCONTEXT - CANNOT CREATE PATH: ", locale0.getCountry());
      assertEquals("factory is not set on the jxpathcontext - cannot create path: _FACTORY IS NOT SET ON THE JXPATHCONTEXT - CANNOT CREATE PATH: ", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("factory is not set on the jxpathcontext - cannot create path: ", locale0.getLanguage());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, "')");
      assertEquals("FACTORY IS NOT SET ON THE JXPATHCONTEXT - CANNOT CREATE PATH: ", locale0.getCountry());
      assertEquals("factory is not set on the jxpathcontext - cannot create path: _FACTORY IS NOT SET ON THE JXPATHCONTEXT - CANNOT CREATE PATH: ", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("factory is not set on the jxpathcontext - cannot create path: ", locale0.getLanguage());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) locale0);
      assertEquals("FACTORY IS NOT SET ON THE JXPATHCONTEXT - CANNOT CREATE PATH: ", locale0.getCountry());
      assertEquals("factory is not set on the jxpathcontext - cannot create path: _FACTORY IS NOT SET ON THE JXPATHCONTEXT - CANNOT CREATE PATH: ", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("factory is not set on the jxpathcontext - cannot create path: ", locale0.getLanguage());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContext jXPathContext0 = jXPathContextReferenceImpl0.getParentContext();
      assertEquals("FACTORY IS NOT SET ON THE JXPATHCONTEXT - CANNOT CREATE PATH: ", locale0.getCountry());
      assertEquals("factory is not set on the jxpathcontext - cannot create path: _FACTORY IS NOT SET ON THE JXPATHCONTEXT - CANNOT CREATE PATH: ", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("factory is not set on the jxpathcontext - cannot create path: ", locale0.getLanguage());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNull(jXPathContext0);
      
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(true, false);
      assertNotNull(deferredDocumentImpl0);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(deferredDocumentImpl0, "", "http://www.w3.org/XML/1998/namespace", "");
      assertNotNull(documentTypeImpl0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNotNull(wMLDocumentImpl0);
      
      WMLIElementImpl wMLIElementImpl0 = new WMLIElementImpl(wMLDocumentImpl0, "<<unknown namespace>>");
      assertNotNull(wMLIElementImpl0);
      
      DocumentTypeImpl documentTypeImpl1 = (DocumentTypeImpl)documentTypeImpl0.getChildNodes();
      assertSame(documentTypeImpl0, documentTypeImpl1);
      assertSame(documentTypeImpl1, documentTypeImpl0);
      assertNotNull(documentTypeImpl1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) wMLIElementImpl0);
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertSame(documentTypeImpl0, documentTypeImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.createAttribute(jXPathContextReferenceImpl1, (QName) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot create an attribute for path id('&apos;)')/@null, operation is not allowed for this type of node
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl0, "#PyU)~ 'CIT/362XB");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLTableElementImpl0);
      
      HTMLElement hTMLElement0 = hTMLTableElementImpl0.createTFoot();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLElement0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLElement0, locale0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "f1cS9Imj!oK6,9;BS8Y");
      assertFalse(boolean0);
      
      String string0 = dOMNodePointer0.getLanguage();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(string0);
      
      dOMNodePointer0.remove();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals("TFOOT", qName0.getName());
      assertEquals("TFOOT", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      
      String string1 = locale0.getDisplayVariant();
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", string1);
      assertNotNull(string1);
      
      DOMAttributePointer dOMAttributePointer0 = (DOMAttributePointer)dOMNodePointer0.createAttribute(jXPathContextReferenceImpl0, qName0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("TFOOT", qName0.getName());
      assertEquals("TFOOT", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(dOMAttributePointer0.isActual());
      assertFalse(dOMAttributePointer0.isRoot());
      assertFalse(dOMAttributePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMAttributePointer0.getIndex());
      assertTrue(dOMAttributePointer0.isLeaf());
      assertFalse(dOMAttributePointer0.isAttribute());
      assertEquals(1, dOMAttributePointer0.getLength());
      assertTrue(dOMAttributePointer0.isNode());
      assertFalse(dOMAttributePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMAttributePointer0);
      
      int int0 = dOMNodePointer0.getLength();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(1, int0);
      
      HTMLAnchorElementImpl hTMLAnchorElementImpl0 = new HTMLAnchorElementImpl(hTMLDocumentImpl0, "[DocType: ");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLAnchorElementImpl0);
      
      Attr attr0 = hTMLAnchorElementImpl0.getAttributeNodeNS("5e\"", "http://www.w3.org/XML/1998/namespace");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(attr0);
      
      // Undeclared exception!
      try { 
        DOMNodePointer.getNamespaceURI((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLAreaElementImpl hTMLAreaElementImpl0 = new HTMLAreaElementImpl(hTMLDocumentImpl0, "_g:pF>>+J^dKE");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLAreaElementImpl0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLAreaElementImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      
      HTMLIFrameElementImpl hTMLIFrameElementImpl0 = new HTMLIFrameElementImpl(hTMLDocumentImpl1, "HTMLAppletElementImpl");
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLIFrameElementImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "HTMLAppletElementImpl");
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      Locale locale1 = Locale.FRANCE;
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("FR", locale1.getCountry());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      String string0 = DOMNodePointer.XML_NAMESPACE_URI;
      assertEquals("http://www.w3.org/XML/1998/namespace", string0);
      assertNotNull(string0);
      
      HTMLDocumentImpl hTMLDocumentImpl2 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl2);
      
      HTMLBaseFontElementImpl hTMLBaseFontElementImpl0 = new HTMLBaseFontElementImpl(hTMLDocumentImpl2, "http://www.w3.org/XML/1998/namespace");
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLBaseFontElementImpl0);
      
      QName qName0 = new QName("text", "hUBR58<%.t|L");
      assertEquals("text:hUBR58<%.t|L", qName0.toString());
      assertEquals("text", qName0.getPrefix());
      assertEquals("hUBR58<%.t|L", qName0.getName());
      assertNotNull(qName0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "text");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertNotNull(hTMLParagraphElementImpl0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl1 = (HTMLParagraphElementImpl)hTMLParagraphElementImpl0.cloneNode(false);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(hTMLParagraphElementImpl0, hTMLParagraphElementImpl1);
      assertNotSame(hTMLParagraphElementImpl1, hTMLParagraphElementImpl0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLParagraphElementImpl1.equals((Object)hTMLParagraphElementImpl0));
      assertNotNull(hTMLParagraphElementImpl1);
      
      DOMNamespaceIterator dOMNamespaceIterator0 = (DOMNamespaceIterator)dOMNodePointer0.namespaceIterator();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(0, dOMNamespaceIterator0.getPosition());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(dOMNamespaceIterator0);
      
      DOMNamespaceIterator dOMNamespaceIterator1 = (DOMNamespaceIterator)dOMNodePointer0.namespaceIterator();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(0, dOMNamespaceIterator1.getPosition());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNamespaceIterator1, dOMNamespaceIterator0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNamespaceIterator1.equals((Object)dOMNamespaceIterator0));
      assertNotNull(dOMNamespaceIterator1);
      
      DOMAttributeIterator dOMAttributeIterator0 = (DOMAttributeIterator)dOMNodePointer0.attributeIterator(qName0);
      assertEquals(0, dOMAttributeIterator0.getPosition());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals("text:hUBR58<%.t|L", qName0.toString());
      assertEquals("text", qName0.getPrefix());
      assertEquals("hUBR58<%.t|L", qName0.getName());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(dOMAttributeIterator0);
      
      String string1 = dOMNodePointer0.getDefaultNamespaceURI();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(locale0.equals((Object)locale1));
      assertNull(string1);
      
      String string2 = (String)dOMNodePointer0.getValue();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", string2);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.createAttribute(jXPathContextReferenceImpl0, qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown namespace prefix: text
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLAreaElementImpl hTMLAreaElementImpl0 = new HTMLAreaElementImpl(hTMLDocumentImpl0, "_g:pF>>+J^dKE");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLAreaElementImpl0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLAreaElementImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      
      HTMLIFrameElementImpl hTMLIFrameElementImpl0 = new HTMLIFrameElementImpl(hTMLDocumentImpl1, "HTMLAppletElementImpl");
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLIFrameElementImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "HTMLAppletElementImpl");
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)jXPathContextReferenceImpl0.getRelativeContext(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      
      JXPathContext jXPathContext0 = jXPathContextReferenceImpl0.getParentContext();
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertNull(jXPathContext0);
      
      String string0 = DOMNodePointer.getLocalName(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertEquals("#document", string0);
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(string0);
      
      HTMLDocumentImpl hTMLDocumentImpl2 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertNotNull(hTMLDocumentImpl2);
      
      HTMLDocumentImpl hTMLDocumentImpl3 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl3.getURL());
      assertNull(hTMLDocumentImpl3.getDomain());
      assertNull(hTMLDocumentImpl3.getReferrer());
      assertNull(hTMLDocumentImpl3.getCookie());
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl3);
      
      HTMLFontElementImpl hTMLFontElementImpl0 = new HTMLFontElementImpl(hTMLDocumentImpl3, "w+\"H");
      assertNull(hTMLDocumentImpl3.getURL());
      assertNull(hTMLDocumentImpl3.getDomain());
      assertNull(hTMLDocumentImpl3.getReferrer());
      assertNull(hTMLDocumentImpl3.getCookie());
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLFontElementImpl0);
      
      String string1 = dOMNodePointer0.asPath();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl3);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", string1);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl3));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = dOMNodePointer0.getLength();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl3);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(1, int0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl3));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      
      String string2 = DOMNodePointer.getLocalName(hTMLAreaElementImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl3);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertEquals("PF>>+J^DKE", string2);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl3));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = dOMNodePointer0.getLength();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl3);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl3));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      
      QName qName0 = dOMNodePointer0.getName();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("PF>>+J^DKE", qName0.getName());
      assertEquals("_G:PF>>+J^DKE", qName0.toString());
      assertEquals("_G", qName0.getPrefix());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl3);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl3));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("PF>>+J^DKE", qName0.getName());
      assertEquals("_G:PF>>+J^DKE", qName0.toString());
      assertEquals("_G", qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("_G:PF>>+J^DKE", nodeNameTest0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl3));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(nodeNameTest0);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("PF>>+J^DKE", qName0.getName());
      assertEquals("_G:PF>>+J^DKE", qName0.toString());
      assertEquals("_G", qName0.getPrefix());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl3));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(variablePointer0);
      
      // Undeclared exception!
      try { 
        variablePointer0.createChild((JXPathContext) jXPathContextReferenceImpl0, qName0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: '_G:PF>>+J^DKE'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      String string0 = "y)Gj*";
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLParagraphElementImpl0);
      
      Locale locale0 = Locale.forLanguageTag("y)Gj*");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLParagraphElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals(1, dOMNodePointer2.getLength());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isActual());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer2);
      
      HTMLIFrameElementImpl hTMLIFrameElementImpl0 = new HTMLIFrameElementImpl(hTMLDocumentImpl0, "|(--/#K!5\"9Cq");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLIFrameElementImpl0);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, (String) null, (String) null, "http://www.w3.org/2000/xmlns/");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(documentTypeImpl0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(wMLDocumentImpl0);
      
      WMLEmElementImpl wMLEmElementImpl0 = new WMLEmElementImpl(wMLDocumentImpl0, (String) null);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(wMLEmElementImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) wMLEmElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)jXPathContextReferenceImpl0.getRelativeContext(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = (JXPathContextReferenceImpl)jXPathContextReferenceImpl1.getParentContext();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(jXPathContextReferenceImpl2);
      
      String string1 = "APPLET";
      QName qName0 = new QName("java.util.Locale@0000000008");
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      DOMNodePointer dOMNodePointer3 = new DOMNodePointer(documentTypeImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer3.isAttribute());
      assertEquals(1, dOMNodePointer3.getLength());
      assertTrue(dOMNodePointer3.isNode());
      assertFalse(dOMNodePointer3.isCollection());
      assertTrue(dOMNodePointer3.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertFalse(dOMNodePointer3.isContainer());
      assertTrue(dOMNodePointer3.isRoot());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(dOMNodePointer3);
      
      // Undeclared exception!
      try { 
        dOMNodePointer3.createAttribute(jXPathContextReferenceImpl1, qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot create an attribute for path /@java.util.Locale@0000000008, operation is not allowed for this type of node
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLParagraphElementImpl0);
      
      Locale locale0 = Locale.forLanguageTag("y)Gj*");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLParagraphElementImpl0, locale0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(locale0));
      assertNotNull(linkedList0);
      
      Stream<Locale> stream0 = linkedList0.stream();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(locale0));
      assertNotNull(stream0);
      
      DocumentImpl documentImpl0 = new DocumentImpl();
      assertNotNull(documentImpl0);
      
      Locale locale1 = Locale.FRANCE;
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FR", locale1.getCountry());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("fr", locale1.getLanguage());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      String string0 = dOMNodePointer1.getNamespaceURI("<<unknown namespace>>");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNull(string0);
      
      QName qName0 = new QName("jZ8B-WHLa<f^");
      assertNull(qName0.getPrefix());
      assertEquals("jZ8B-WHLa<f^", qName0.toString());
      assertEquals("jZ8B-WHLa<f^", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "http://www.w3.org/XML/1998/namespace");
      assertNull(qName0.getPrefix());
      assertEquals("jZ8B-WHLa<f^", qName0.toString());
      assertEquals("jZ8B-WHLa<f^", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("jZ8B-WHLa<f^", nodeNameTest0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      boolean boolean0 = dOMNodePointer0.testNode((NodeTest) nodeNameTest0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertNull(qName0.getPrefix());
      assertEquals("jZ8B-WHLa<f^", qName0.toString());
      assertEquals("jZ8B-WHLa<f^", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("jZ8B-WHLa<f^", nodeNameTest0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", nodeNameTest0.getNamespaceURI());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      
      HTMLImageElementImpl hTMLImageElementImpl0 = new HTMLImageElementImpl(hTMLDocumentImpl0, "0fhNk$#'O_z1GDT");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLImageElementImpl0);
      
      AttrNSImpl attrNSImpl0 = new AttrNSImpl(documentImpl0, (String) null, "An EntityRef is not allowed at the document root", (String) null);
      assertNotNull(attrNSImpl0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer1.setValue(attrNSImpl0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // WRONG_DOCUMENT_ERR: A node is used in a different document than the one that created it.
         //
         verifyException("org.apache.xerces.dom.ParentNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLParagraphElementImpl0);
      
      Locale locale0 = Locale.UK;
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLParagraphElementImpl0, locale0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(hTMLParagraphElementImpl0, locale1);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(1, dOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isNode());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer2);
      
      HTMLIFrameElementImpl hTMLIFrameElementImpl0 = new HTMLIFrameElementImpl(hTMLDocumentImpl0, "\u0004grE.-!NmdD");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLIFrameElementImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) hTMLIFrameElementImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)jXPathContextReferenceImpl0.getRelativeContext(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      
      JXPathContext jXPathContext0 = jXPathContextReferenceImpl0.getParentContext();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertNull(jXPathContext0);
      
      QName qName0 = new QName("APPLET");
      assertNull(qName0.getPrefix());
      assertEquals("APPLET", qName0.getName());
      assertEquals("APPLET", qName0.toString());
      assertNotNull(qName0);
      
      DOMAttributePointer dOMAttributePointer0 = (DOMAttributePointer)dOMNodePointer2.createAttribute(jXPathContextReferenceImpl0, qName0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(1, dOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isNode());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("APPLET", qName0.getName());
      assertEquals("APPLET", qName0.toString());
      assertFalse(dOMAttributePointer0.isRoot());
      assertTrue(dOMAttributePointer0.isNode());
      assertTrue(dOMAttributePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMAttributePointer0.getIndex());
      assertEquals(1, dOMAttributePointer0.getLength());
      assertFalse(dOMAttributePointer0.isContainer());
      assertTrue(dOMAttributePointer0.isLeaf());
      assertFalse(dOMAttributePointer0.isAttribute());
      assertFalse(dOMAttributePointer0.isCollection());
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(dOMAttributePointer0);
      
      String string0 = DOMNodePointer.getLocalName(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("#document", string0);
      assertNotNull(string0);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, ")Zu)e 5Mzv3Mb/tR)z(", "X-g924#Fv7*@B9-5V", "http://www.w3.org/XML/1998/namespace");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(documentTypeImpl0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(wMLDocumentImpl0);
      
      String string1 = documentTypeImpl0.lookupNamespaceURI("\u0004grE.-!NmdD");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(string1);
      
      WMLRefreshElementImpl wMLRefreshElementImpl0 = new WMLRefreshElementImpl(wMLDocumentImpl0, "G~RDY\"JasH]MT89K-");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(wMLRefreshElementImpl0);
      
      dOMNodePointer0.setValue(wMLRefreshElementImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      
      DOMNodePointer dOMNodePointer3 = (DOMNodePointer)NodePointer.newChildNodePointer(dOMNodePointer1, qName0, wMLRefreshElementImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertTrue(dOMNodePointer3.isNode());
      assertTrue(dOMNodePointer3.isActual());
      assertFalse(dOMNodePointer3.isRoot());
      assertEquals(1, dOMNodePointer3.getLength());
      assertFalse(dOMNodePointer3.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertFalse(dOMNodePointer3.isCollection());
      assertFalse(dOMNodePointer3.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertNull(qName0.getPrefix());
      assertEquals("APPLET", qName0.getName());
      assertEquals("APPLET", qName0.toString());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer3, dOMNodePointer0);
      assertNotSame(dOMNodePointer3, dOMNodePointer1);
      assertNotSame(dOMNodePointer3, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer3);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer3);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertNotNull(dOMNodePointer3);
      
      int int0 = dOMNodePointer0.compareChildNodePointers(dOMAttributePointer0, dOMNodePointer3);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(1, dOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isNode());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("APPLET", qName0.getName());
      assertEquals("APPLET", qName0.toString());
      assertFalse(dOMAttributePointer0.isRoot());
      assertTrue(dOMAttributePointer0.isNode());
      assertTrue(dOMAttributePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMAttributePointer0.getIndex());
      assertEquals(1, dOMAttributePointer0.getLength());
      assertFalse(dOMAttributePointer0.isContainer());
      assertTrue(dOMAttributePointer0.isLeaf());
      assertFalse(dOMAttributePointer0.isAttribute());
      assertFalse(dOMAttributePointer0.isCollection());
      assertTrue(dOMNodePointer3.isNode());
      assertTrue(dOMNodePointer3.isActual());
      assertFalse(dOMNodePointer3.isRoot());
      assertEquals(1, dOMNodePointer3.getLength());
      assertFalse(dOMNodePointer3.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertFalse(dOMNodePointer3.isCollection());
      assertFalse(dOMNodePointer3.isContainer());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer3);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer3);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer2, dOMNodePointer3);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(dOMNodePointer3, dOMNodePointer0);
      assertNotSame(dOMNodePointer3, dOMNodePointer1);
      assertNotSame(dOMNodePointer3, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals((-1), int0);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      
      // Undeclared exception!
      try { 
        DOMNodePointer.getNamespaceURI((Node) documentTypeImpl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.xerces.dom.DocumentTypeImpl cannot be cast to org.w3c.dom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLParagraphElementImpl0);
      
      Locale locale0 = Locale.forLanguageTag("y)Gj*");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.forLanguageTag("y)Gj*");
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLParagraphElementImpl0, locale0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      QName qName0 = new QName("http://www.w3.org/2000/xmlns/", "The DOCTYPE ");
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/:The DOCTYPE ", qName0.toString());
      assertEquals("The DOCTYPE ", qName0.getName());
      assertNotNull(qName0);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "The DOCTYPE ");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(documentTypeImpl0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
      assertEquals(4, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/:The DOCTYPE ", qName0.toString());
      assertEquals("The DOCTYPE ", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("http://www.w3.org/2000/xmlns/:The DOCTYPE ", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      boolean boolean0 = dOMNodePointer1.testNode((NodeTest) nodeNameTest0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/:The DOCTYPE ", qName0.toString());
      assertEquals("The DOCTYPE ", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("http://www.w3.org/2000/xmlns/:The DOCTYPE ", nodeNameTest0.toString());
      assertSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean0);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      
      HTMLOptGroupElementImpl hTMLOptGroupElementImpl0 = new HTMLOptGroupElementImpl((HTMLDocumentImpl) null, "y<mp9LI5a%");
      assertNotNull(hTMLOptGroupElementImpl0);
      
      HTMLAnchorElementImpl hTMLAnchorElementImpl0 = new HTMLAnchorElementImpl(hTMLDocumentImpl1, "HTM017 Argument 'tHead' is not an element of type <THEAD>.");
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLAnchorElementImpl0);
      
      DocumentTypeImpl documentTypeImpl1 = new DocumentTypeImpl((CoreDocumentImpl) null, "http://www.w3.org/2000/xmlns/");
      assertFalse(documentTypeImpl1.equals((Object)documentTypeImpl0));
      assertNotNull(documentTypeImpl1);
      
      DocumentFragmentImpl documentFragmentImpl0 = new DocumentFragmentImpl();
      assertNotNull(documentFragmentImpl0);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(documentFragmentImpl0, locale0, "");
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isAttribute());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(1, dOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isCollection());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer2);
      
      Object object0 = dOMNodePointer2.getValue();
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isAttribute());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(1, dOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isCollection());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", object0);
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNotNull(object0);
      
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(4);
      assertEquals(4, nodeTypeTest1.getNodeType());
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertNotNull(nodeTypeTest1);
      
      String string0 = locale1.getDisplayVariant();
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertSame(locale1, locale0);
      assertEquals("", string0);
      assertTrue(string0.equals((Object)object0));
      assertNotNull(string0);
      
      NodeTypeTest nodeTypeTest2 = new NodeTypeTest(4);
      assertEquals(4, nodeTypeTest2.getNodeType());
      assertFalse(nodeTypeTest2.equals((Object)nodeTypeTest0));
      assertFalse(nodeTypeTest2.equals((Object)nodeTypeTest1));
      assertNotNull(nodeTypeTest2);
      
      boolean boolean1 = DOMNodePointer.testNode((Node) documentTypeImpl1, (NodeTest) nodeTypeTest1);
      assertEquals(4, nodeTypeTest1.getNodeType());
      assertNotSame(nodeTypeTest1, nodeTypeTest2);
      assertNotSame(nodeTypeTest1, nodeTypeTest0);
      assertNotSame(documentTypeImpl1, documentTypeImpl0);
      assertFalse(boolean1);
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest2));
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertTrue(boolean1 == boolean0);
      assertFalse(documentTypeImpl1.equals((Object)documentTypeImpl0));
      
      String string1 = NodePointer.UNKNOWN_NAMESPACE;
      assertEquals("<<unknown namespace>>", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)object0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DocumentImpl documentImpl0 = new DocumentImpl((DocumentType) null);
      assertNotNull(documentImpl0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DocumentImpl documentImpl1 = new DocumentImpl();
      assertFalse(documentImpl1.equals((Object)documentImpl0));
      assertNotNull(documentImpl1);
      
      boolean boolean0 = documentImpl0.getStrictErrorChecking();
      assertNotSame(documentImpl0, documentImpl1);
      assertTrue(boolean0);
      assertFalse(documentImpl0.equals((Object)documentImpl1));
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, "wIA9'\";oRa");
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      String string0 = dOMNodePointer0.asPath();
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("id('wIA9&apos;&quot;;oRa')", string0);
      assertNotNull(string0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) null);
      assertNotNull(wMLDocumentImpl0);
      
      WMLPostfieldElementImpl wMLPostfieldElementImpl0 = new WMLPostfieldElementImpl(wMLDocumentImpl0, "wIA9'\";oRa");
      assertNotNull(wMLPostfieldElementImpl0);
      
      int int0 = dOMNodePointer0.getLength();
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(1, int0);
      
      QName qName0 = new QName("wIA9'\";oRa");
      assertNull(qName0.getPrefix());
      assertEquals("wIA9'\";oRa", qName0.getName());
      assertEquals("wIA9'\";oRa", qName0.toString());
      assertNotNull(qName0);
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLTableSectionElementImpl hTMLTableSectionElementImpl0 = new HTMLTableSectionElementImpl(hTMLDocumentImpl0, "0Dd4Wivk(");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLTableSectionElementImpl0);
      
      String string1 = dOMNodePointer0.asPath();
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("id('wIA9&apos;&quot;;oRa')", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = dOMNodePointer0.getLength();
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(1, int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLParagraphElementImpl0);
      
      Locale locale0 = Locale.forLanguageTag("y)Gj*");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLParagraphElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isNode());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      CDATASectionImpl cDATASectionImpl0 = new CDATASectionImpl(hTMLDocumentImpl0, "1%N]FQ");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(cDATASectionImpl0);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(cDATASectionImpl0, locale1);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(1, dOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer2);
      
      HTMLIFrameElementImpl hTMLIFrameElementImpl0 = new HTMLIFrameElementImpl(hTMLDocumentImpl0, "=}YJs/,=");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLIFrameElementImpl0);
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace");
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertEquals("//www.w3.org/XML/1998/namespace", qName0.getName());
      assertEquals("http", qName0.getPrefix());
      assertNotNull(qName0);
      
      String string0 = DOMNodePointer.getLocalName(hTMLParagraphElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("Y)GJ*", string0);
      assertNotNull(string0);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      
      HTMLTableSectionElementImpl hTMLTableSectionElementImpl0 = new HTMLTableSectionElementImpl(hTMLDocumentImpl0, "<<unknown namespace>>");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(hTMLTableSectionElementImpl0);
      
      HTMLFontElementImpl hTMLFontElementImpl0 = new HTMLFontElementImpl(hTMLDocumentImpl0, "tfk)=aoI.~*c@5ek");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(hTMLFontElementImpl0);
      
      XMLErrorReporter xMLErrorReporter0 = new XMLErrorReporter();
      assertNotNull(xMLErrorReporter0);
      
      Locale locale2 = xMLErrorReporter0.getLocale();
      assertNull(locale2);
      
      DOMNodePointer dOMNodePointer3 = new DOMNodePointer(hTMLIFrameElementImpl0, (Locale) null);
      assertTrue(dOMNodePointer3.isNode());
      assertEquals(1, dOMNodePointer3.getLength());
      assertFalse(dOMNodePointer3.isCollection());
      assertFalse(dOMNodePointer3.isContainer());
      assertTrue(dOMNodePointer3.isRoot());
      assertFalse(dOMNodePointer3.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertTrue(dOMNodePointer3.isActual());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(dOMNodePointer3);
      
      StandardParserConfiguration standardParserConfiguration0 = new StandardParserConfiguration();
      assertNotNull(standardParserConfiguration0);
      
      xMLErrorReporter0.reset(standardParserConfiguration0);
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl1, ":}_>-0");
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(documentTypeImpl0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(wMLDocumentImpl0);
      
      WMLUElementImpl wMLUElementImpl0 = new WMLUElementImpl(wMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(wMLUElementImpl0);
      
      String string1 = dOMNodePointer2.asPath();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(1, dOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isNode());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer3);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("/text()[1]", string1);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer3));
      assertNotNull(string1);
      
      DOMNodePointer dOMNodePointer4 = new DOMNodePointer(hTMLIFrameElementImpl0, locale1, "http://www.w3.org/XML/1998/namespace");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals(1, dOMNodePointer4.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer4.getIndex());
      assertTrue(dOMNodePointer4.isRoot());
      assertFalse(dOMNodePointer4.isAttribute());
      assertTrue(dOMNodePointer4.isActual());
      assertTrue(dOMNodePointer4.isNode());
      assertFalse(dOMNodePointer4.isCollection());
      assertFalse(dOMNodePointer4.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer4.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer2));
      assertNotNull(dOMNodePointer4);
      
      int int0 = dOMNodePointer4.getLength();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals(1, dOMNodePointer4.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer4.getIndex());
      assertTrue(dOMNodePointer4.isRoot());
      assertFalse(dOMNodePointer4.isAttribute());
      assertTrue(dOMNodePointer4.isActual());
      assertTrue(dOMNodePointer4.isNode());
      assertFalse(dOMNodePointer4.isCollection());
      assertFalse(dOMNodePointer4.isContainer());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer4, dOMNodePointer0);
      assertNotSame(dOMNodePointer4, dOMNodePointer3);
      assertNotSame(dOMNodePointer4, dOMNodePointer1);
      assertNotSame(dOMNodePointer4, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(1, int0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer4.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer2));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLParagraphElementImpl0);
      
      Locale locale0 = Locale.forLanguageTag("y)Gj*");
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLParagraphElementImpl0, locale0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl1 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "3m//");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertFalse(hTMLParagraphElementImpl1.equals((Object)hTMLParagraphElementImpl0));
      assertNotNull(hTMLParagraphElementImpl1);
      
      Node node0 = hTMLParagraphElementImpl1.getPreviousSibling();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotSame(hTMLParagraphElementImpl1, hTMLParagraphElementImpl0);
      assertFalse(hTMLParagraphElementImpl1.equals((Object)hTMLParagraphElementImpl0));
      assertNull(node0);
      
      Locale locale1 = Locale.FRANCE;
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("FR", locale1.getCountry());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      String string0 = locale0.getDisplayScript(locale1);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("FR", locale1.getCountry());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", string0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string0);
      
      String string1 = dOMNodePointer0.getNamespaceURI("3m//");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertNotSame(hTMLParagraphElementImpl0, hTMLParagraphElementImpl1);
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLParagraphElementImpl0.equals((Object)hTMLParagraphElementImpl1));
      assertFalse(locale0.equals((Object)locale1));
      assertNull(string1);
      
      HTMLBaseFontElementImpl hTMLBaseFontElementImpl0 = new HTMLBaseFontElementImpl(hTMLDocumentImpl0, "3m//");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLBaseFontElementImpl0);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals("Y)GJ*", qName0.toString());
      assertEquals("Y)GJ*", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotSame(hTMLParagraphElementImpl0, hTMLParagraphElementImpl1);
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLParagraphElementImpl0.equals((Object)hTMLParagraphElementImpl1));
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(qName0);
      
      Locale locale2 = new Locale("http://www.w3.org/XML/1998/namespace", "vy We?YJ", "3m//");
      assertEquals("VY WE?YJ", locale2.getCountry());
      assertEquals("3m//", locale2.getVariant());
      assertEquals("http://www.w3.org/xml/1998/namespace_VY WE?YJ_3m//", locale2.toString());
      assertEquals("http://www.w3.org/xml/1998/namespace", locale2.getLanguage());
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      
      String string2 = locale0.getDisplayScript(locale2);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("VY WE?YJ", locale2.getCountry());
      assertEquals("3m//", locale2.getVariant());
      assertEquals("http://www.w3.org/xml/1998/namespace_VY WE?YJ_3m//", locale2.toString());
      assertEquals("http://www.w3.org/xml/1998/namespace", locale2.getLanguage());
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("", string2);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(string2);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLParagraphElementImpl0, locale0, "xmlns");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLParagraphElementImpl0.equals((Object)hTMLParagraphElementImpl1));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      String string3 = dOMNodePointer1.getNamespaceURI("|a+");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertNotSame(hTMLParagraphElementImpl0, hTMLParagraphElementImpl1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLParagraphElementImpl0.equals((Object)hTMLParagraphElementImpl1));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNull(string3);
      
      Object object0 = dOMNodePointer0.getValue();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertNotSame(hTMLParagraphElementImpl0, hTMLParagraphElementImpl1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", object0);
      assertFalse(hTMLParagraphElementImpl0.equals((Object)hTMLParagraphElementImpl1));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(object0.equals((Object)string0));
      assertTrue(object0.equals((Object)string2));
      assertNotNull(object0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      String string4 = locale1.getDisplayVariant();
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("FR", locale1.getCountry());
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)object0));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string4);
      
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(3);
      assertEquals(3, nodeTypeTest1.getNodeType());
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertNotNull(nodeTypeTest1);
      
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLBaseFontElementImpl0, (NodeTest) nodeTypeTest1);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals(3, nodeTypeTest1.getNodeType());
      assertNotSame(nodeTypeTest1, nodeTypeTest0);
      assertFalse(boolean0);
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      
      String string5 = NodePointer.UNKNOWN_NAMESPACE;
      assertEquals("<<unknown namespace>>", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)object0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLParagraphElementImpl0);
      
      Locale locale0 = Locale.forLanguageTag("y)Gj*");
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLParagraphElementImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      boolean boolean0 = dOMNodePointer0.isLeaf();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(boolean0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(locale0));
      assertNotNull(linkedList1);
      
      Locale locale1 = Locale.lookup(linkedList0, linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(locale0));
      assertNull(locale1);
      
      DocumentImpl documentImpl0 = new DocumentImpl();
      assertNotNull(documentImpl0);
      
      boolean boolean1 = documentImpl0.getStrictErrorChecking();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = dOMNodePointer0.asPath();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", string0);
      assertNotNull(string0);
      
      HTMLMetaElementImpl hTMLMetaElementImpl0 = new HTMLMetaElementImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLMetaElementImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) hTMLMetaElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      boolean boolean2 = documentImpl0.getStandalone();
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      JXPathContext jXPathContext0 = jXPathContextReferenceImpl0.getParentContext();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNull(jXPathContext0);
      
      int int0 = dOMNodePointer0.getLength();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(1, int0);
      
      String string1 = (String)dOMNodePointer0.getValue();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = (String)dOMNodePointer0.getValue();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      boolean boolean3 = dOMNodePointer0.testNode((NodeTest) nodeTypeTest0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "declare");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      // Undeclared exception!
      try { 
        dOMNodePointer1.setValue(locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLParagraphElementImpl0);
      
      Locale locale0 = Locale.forLanguageTag("y)Gj*");
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.forLanguageTag("y)Gj*");
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLParagraphElementImpl0, locale0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      QName qName0 = new QName("http://www.w3.org/2000/xmlns/", "The DOCTYPE ");
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/:The DOCTYPE ", qName0.toString());
      assertEquals("The DOCTYPE ", qName0.getName());
      assertNotNull(qName0);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "The DOCTYPE ");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(documentTypeImpl0);
      
      Locale locale2 = Locale.FRENCH;
      assertEquals("fr", locale2.toString());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getISO3Country());
      assertEquals("fr", locale2.getLanguage());
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      
      Locale locale3 = Locale.TRADITIONAL_CHINESE;
      assertEquals("", locale3.getVariant());
      assertEquals("TW", locale3.getCountry());
      assertEquals("zh", locale3.getLanguage());
      assertEquals("zho", locale3.getISO3Language());
      assertEquals("zh_TW", locale3.toString());
      assertEquals("TWN", locale3.getISO3Country());
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale0);
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale0));
      assertNotNull(locale3);
      
      String string0 = locale3.getDisplayLanguage();
      assertEquals("", locale3.getVariant());
      assertEquals("TW", locale3.getCountry());
      assertEquals("zh", locale3.getLanguage());
      assertEquals("zho", locale3.getISO3Language());
      assertEquals("zh_TW", locale3.toString());
      assertEquals("TWN", locale3.getISO3Country());
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale0);
      assertEquals("Chinese", string0);
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale0));
      assertNotNull(string0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = locale2.getDisplayVariant();
      assertEquals("fr", locale2.toString());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getISO3Country());
      assertEquals("fr", locale2.getLanguage());
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale3);
      assertNotSame(locale2, locale1);
      assertEquals("", string1);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale3));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLDocumentImpl0, (NodeTest) nodeTypeTest0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertTrue(boolean0);
      
      String string2 = NodePointer.UNKNOWN_NAMESPACE;
      assertEquals("<<unknown namespace>>", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = DOMNodePointer.getNamespaceURI((Node) hTMLParagraphElementImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
      assertNotNull(deferredDocumentImpl0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(deferredDocumentImpl0, locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DocumentImpl documentImpl0 = new DocumentImpl();
      assertNotNull(documentImpl0);
      
      boolean boolean0 = documentImpl0.getStrictErrorChecking();
      assertTrue(boolean0);
      
      String string0 = dOMNodePointer0.asPath();
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", string0);
      assertNotNull(string0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) deferredDocumentImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      boolean boolean1 = documentImpl0.getStandalone();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JXPathContext jXPathContext0 = jXPathContextReferenceImpl0.getParentContext();
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNull(jXPathContext0);
      
      NullPointer nullPointer0 = (NullPointer)dOMNodePointer0.getPointerByID(jXPathContextReferenceImpl0, "<<unknown namespace>>");
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.getNamespaceURI("wS+{0A");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.dom.DeferredDocumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLParagraphElementImpl0);
      
      Locale locale0 = Locale.forLanguageTag("y)Gj*");
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "[x\"HM3uO&)-=n&");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "/JR/r>]Pxh]S");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      HTMLBaseFontElementImpl hTMLBaseFontElementImpl0 = new HTMLBaseFontElementImpl(hTMLDocumentImpl1, "[x\"HM3uO&)-=n&");
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLBaseFontElementImpl0);
      
      dOMNodePointer1.setValue(hTMLBaseFontElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "[x\"HM3uO&)-=n&");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isRoot());
      assertTrue(dOMNodePointer2.isActual());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(1, dOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer2);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace", "<<unknown namespace>>", "-J?F=xv*AC+:#E~fd");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(documentTypeImpl0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(wMLDocumentImpl0);
      
      WMLOptgroupElementImpl wMLOptgroupElementImpl0 = new WMLOptgroupElementImpl(wMLDocumentImpl0, (String) null);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(wMLOptgroupElementImpl0);
      
      boolean boolean0 = dOMNodePointer2.equals(dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isRoot());
      assertTrue(dOMNodePointer2.isActual());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(1, dOMNodePointer2.getLength());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(boolean0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      
      String string0 = dOMNodePointer1.getNamespaceURI();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer2.remove();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot remove root DOM node
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLParagraphElementImpl0);
      
      Locale locale0 = Locale.forLanguageTag("y)Gj*");
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLParagraphElementImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      Node node0 = hTMLParagraphElementImpl0.getPreviousSibling();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(node0);
      
      String string0 = "";
      DocumentImpl documentImpl0 = new DocumentImpl();
      assertNotNull(documentImpl0);
      
      boolean boolean0 = hTMLDocumentImpl0.getStrictErrorChecking();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertTrue(boolean0);
      
      String string1 = dOMNodePointer0.asPath();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) documentImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      boolean boolean1 = hTMLDocumentImpl0.getStandalone();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JXPathContext jXPathContext0 = jXPathContextReferenceImpl0.getParentContext();
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNull(jXPathContext0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "");
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      
      NullPointer nullPointer0 = (NullPointer)dOMNodePointer0.getPointerByID(jXPathContextReferenceImpl1, "");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isAttribute());
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(nullPointer0);
      
      int int0 = dOMNodePointer0.getLength();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(1, int0);
      
      String string2 = (String)dOMNodePointer0.getValue();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = (String)dOMNodePointer0.getValue();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
      assertEquals(4, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      boolean boolean2 = dOMNodePointer0.testNode((NodeTest) nodeTypeTest0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals(4, nodeTypeTest0.getNodeType());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLDocumentImpl1, locale0, "_G");
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      dOMNodePointer0.setValue((Object) null);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer((Node) null, locale0, "-J?F=xv*AC+:#E~fd");
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isAttribute());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(1, dOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer2);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl1, "APPLET", "_G", "U");
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(documentTypeImpl0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(wMLDocumentImpl0);
      
      WMLOptgroupElementImpl wMLOptgroupElementImpl0 = new WMLOptgroupElementImpl(wMLDocumentImpl0, "y)Gj*");
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(wMLOptgroupElementImpl0);
      
      boolean boolean3 = dOMNodePointer2.equals(wMLOptgroupElementImpl0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isAttribute());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(1, dOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isCollection());
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean3);
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      String string4 = dOMNodePointer1.getNamespaceURI();
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNull(string4);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.remove();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot remove root DOM node
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLParagraphElementImpl0);
      
      Locale locale0 = Locale.forLanguageTag("y)Gj*");
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLParagraphElementImpl0, locale0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("CN", locale1.getCountry());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(hTMLParagraphElementImpl0, locale1);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("CN", locale1.getCountry());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(1, dOMNodePointer2.getLength());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer2);
      
      HTMLIFrameElementImpl hTMLIFrameElementImpl0 = new HTMLIFrameElementImpl(hTMLDocumentImpl0, "\u0004grE.-!NmdD");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLIFrameElementImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) hTMLIFrameElementImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)jXPathContextReferenceImpl0.getRelativeContext(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      
      JXPathContext jXPathContext0 = jXPathContextReferenceImpl0.getParentContext();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertNull(jXPathContext0);
      
      QName qName0 = new QName("APPLET");
      assertNull(qName0.getPrefix());
      assertEquals("APPLET", qName0.toString());
      assertEquals("APPLET", qName0.getName());
      assertNotNull(qName0);
      
      DOMAttributePointer dOMAttributePointer0 = (DOMAttributePointer)dOMNodePointer2.createAttribute(jXPathContextReferenceImpl0, qName0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("CN", locale1.getCountry());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(1, dOMNodePointer2.getLength());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("APPLET", qName0.toString());
      assertEquals("APPLET", qName0.getName());
      assertFalse(dOMAttributePointer0.isContainer());
      assertTrue(dOMAttributePointer0.isLeaf());
      assertEquals(1, dOMAttributePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMAttributePointer0.getIndex());
      assertTrue(dOMAttributePointer0.isNode());
      assertFalse(dOMAttributePointer0.isCollection());
      assertTrue(dOMAttributePointer0.isActual());
      assertFalse(dOMAttributePointer0.isAttribute());
      assertFalse(dOMAttributePointer0.isRoot());
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(dOMAttributePointer0);
      
      String string0 = DOMNodePointer.getLocalName(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("#document", string0);
      assertNotNull(string0);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, ")Zu)e 5Mzv3Mb/tR)z(", "X-g924#Fv7*@B9-5V", "http://www.w3.org/XML/1998/namespace");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(documentTypeImpl0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(wMLDocumentImpl0);
      
      String string1 = documentTypeImpl0.lookupNamespaceURI("\u0004grE.-!NmdD");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(string1);
      
      WMLRefreshElementImpl wMLRefreshElementImpl0 = new WMLRefreshElementImpl(wMLDocumentImpl0, "G~RDY\"JasH]MT89K-");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(wMLRefreshElementImpl0);
      
      dOMNodePointer0.setValue(wMLRefreshElementImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      
      DOMNodePointer dOMNodePointer3 = (DOMNodePointer)NodePointer.newChildNodePointer(dOMNodePointer1, qName0, wMLRefreshElementImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, dOMNodePointer3.getLength());
      assertTrue(dOMNodePointer3.isNode());
      assertFalse(dOMNodePointer3.isRoot());
      assertFalse(dOMNodePointer3.isAttribute());
      assertTrue(dOMNodePointer3.isActual());
      assertFalse(dOMNodePointer3.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertFalse(dOMNodePointer3.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertNull(qName0.getPrefix());
      assertEquals("APPLET", qName0.toString());
      assertEquals("APPLET", qName0.getName());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer3, dOMNodePointer0);
      assertNotSame(dOMNodePointer3, dOMNodePointer1);
      assertNotSame(dOMNodePointer3, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer3);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer3);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertNotNull(dOMNodePointer3);
      
      int int0 = dOMNodePointer0.compareChildNodePointers(dOMAttributePointer0, dOMNodePointer3);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("CN", locale1.getCountry());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(1, dOMNodePointer2.getLength());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("APPLET", qName0.toString());
      assertEquals("APPLET", qName0.getName());
      assertFalse(dOMAttributePointer0.isContainer());
      assertTrue(dOMAttributePointer0.isLeaf());
      assertEquals(1, dOMAttributePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMAttributePointer0.getIndex());
      assertTrue(dOMAttributePointer0.isNode());
      assertFalse(dOMAttributePointer0.isCollection());
      assertTrue(dOMAttributePointer0.isActual());
      assertFalse(dOMAttributePointer0.isAttribute());
      assertFalse(dOMAttributePointer0.isRoot());
      assertEquals(1, dOMNodePointer3.getLength());
      assertTrue(dOMNodePointer3.isNode());
      assertFalse(dOMNodePointer3.isRoot());
      assertFalse(dOMNodePointer3.isAttribute());
      assertTrue(dOMNodePointer3.isActual());
      assertFalse(dOMNodePointer3.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertFalse(dOMNodePointer3.isContainer());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer3);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer3);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer3);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(dOMNodePointer3, dOMNodePointer0);
      assertNotSame(dOMNodePointer3, dOMNodePointer1);
      assertNotSame(dOMNodePointer3, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals((-1), int0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      
      DOMAttributePointer dOMAttributePointer1 = (DOMAttributePointer)dOMNodePointer2.createAttribute((JXPathContext) null, qName0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMAttributePointer1.isCollection());
      assertFalse(dOMAttributePointer1.isAttribute());
      assertTrue(dOMAttributePointer1.isLeaf());
      assertEquals(Integer.MIN_VALUE, dOMAttributePointer1.getIndex());
      assertFalse(dOMAttributePointer1.isRoot());
      assertTrue(dOMAttributePointer1.isActual());
      assertTrue(dOMAttributePointer1.isNode());
      assertEquals(1, dOMAttributePointer1.getLength());
      assertFalse(dOMAttributePointer1.isContainer());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("CN", locale1.getCountry());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(1, dOMNodePointer2.getLength());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isActual());
      assertNull(qName0.getPrefix());
      assertEquals("APPLET", qName0.toString());
      assertEquals("APPLET", qName0.getName());
      assertNotSame(dOMAttributePointer1, dOMAttributePointer0);
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer3);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(dOMAttributePointer1.equals((Object)dOMAttributePointer0));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNotNull(dOMAttributePointer1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLParagraphElementImpl0);
      
      Locale locale0 = Locale.forLanguageTag("y)Gj*");
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLParagraphElementImpl0, locale0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(hTMLParagraphElementImpl0, locale1);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(1, dOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer2);
      
      HTMLIFrameElementImpl hTMLIFrameElementImpl0 = new HTMLIFrameElementImpl(hTMLDocumentImpl0, "\u0004grE.-!NmdD");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLIFrameElementImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) hTMLIFrameElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)jXPathContextReferenceImpl0.getRelativeContext(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      
      JXPathContext jXPathContext0 = jXPathContextReferenceImpl0.getParentContext();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertNull(jXPathContext0);
      
      QName qName0 = new QName("APPLET");
      assertNull(qName0.getPrefix());
      assertEquals("APPLET", qName0.getName());
      assertEquals("APPLET", qName0.toString());
      assertNotNull(qName0);
      
      DOMAttributePointer dOMAttributePointer0 = (DOMAttributePointer)dOMNodePointer2.createAttribute(jXPathContextReferenceImpl0, qName0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(1, dOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("APPLET", qName0.getName());
      assertEquals("APPLET", qName0.toString());
      assertEquals(Integer.MIN_VALUE, dOMAttributePointer0.getIndex());
      assertTrue(dOMAttributePointer0.isLeaf());
      assertFalse(dOMAttributePointer0.isAttribute());
      assertFalse(dOMAttributePointer0.isCollection());
      assertFalse(dOMAttributePointer0.isContainer());
      assertFalse(dOMAttributePointer0.isRoot());
      assertTrue(dOMAttributePointer0.isNode());
      assertTrue(dOMAttributePointer0.isActual());
      assertEquals(1, dOMAttributePointer0.getLength());
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(dOMAttributePointer0);
      
      String string0 = DOMNodePointer.getPrefix(hTMLIFrameElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLDocumentImpl0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HTMLAreaElementImpl hTMLAreaElementImpl0 = new HTMLAreaElementImpl(hTMLDocumentImpl0, "_g:pF>>+J^dKE");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLAreaElementImpl0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLAreaElementImpl0, locale0, (String) null);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLAreaElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      hTMLDocumentImpl0.setErrorChecking(true);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      hTMLDocumentImpl0.setErrorChecking(true);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      Locale locale1 = Locale.ITALIAN;
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("it", locale1.getLanguage());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dOMNodePointer2.isNode());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isContainer());
      assertFalse(dOMNodePointer2.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer2);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals("_G:PF>>+J^DKE", qName0.toString());
      assertEquals("_G", qName0.getPrefix());
      assertEquals("PF>>+J^DKE", qName0.getName());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertNotNull(qName0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("http://www.w3.org/2000/xmlns/");
      assertEquals("http://www.w3.org/2000/xmlns/", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DOMNodePointer dOMNodePointer3 = new DOMNodePointer(hTMLAreaElementImpl0, locale1);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("it", locale1.getLanguage());
      assertTrue(dOMNodePointer3.isActual());
      assertTrue(dOMNodePointer3.isNode());
      assertFalse(dOMNodePointer3.isAttribute());
      assertEquals(1, dOMNodePointer3.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertFalse(dOMNodePointer3.isContainer());
      assertTrue(dOMNodePointer3.isRoot());
      assertFalse(dOMNodePointer3.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer3);
      
      Locale locale2 = Locale.CANADA;
      assertEquals("CA", locale2.getCountry());
      assertEquals("en_CA", locale2.toString());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("en", locale2.getLanguage());
      assertEquals("CAN", locale2.getISO3Country());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      
      String string0 = locale1.getDisplayName(locale2);
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("it", locale1.getLanguage());
      assertEquals("CA", locale2.getCountry());
      assertEquals("en_CA", locale2.toString());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("en", locale2.getLanguage());
      assertEquals("CAN", locale2.getISO3Country());
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("Italian", string0);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(string0);
      
      QName qName1 = dOMNodePointer2.getName();
      assertNull(qName1.toString());
      assertNull(qName1.getPrefix());
      assertNull(qName1.getName());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dOMNodePointer2.isNode());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isContainer());
      assertFalse(dOMNodePointer2.isCollection());
      assertNotSame(qName1, qName0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer3);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertNotNull(qName1);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2F");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "C45ORFBR>TL:");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("_G:PF>>+J^DKE", nodeNameTest0.toString());
      assertEquals("C45ORFBR>TL:", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals("_G:PF>>+J^DKE", qName0.toString());
      assertEquals("_G", qName0.getPrefix());
      assertEquals("PF>>+J^DKE", qName0.getName());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertFalse(qName0.equals((Object)qName1));
      assertNotNull(nodeNameTest0);
      
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals("_G:PF>>+J^DKE", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals("_G:PF>>+J^DKE", qName0.toString());
      assertEquals("_G", qName0.getPrefix());
      assertEquals("PF>>+J^DKE", qName0.getName());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertFalse(qName0.equals((Object)qName1));
      assertNotNull(nodeNameTest1);
      
      boolean boolean2 = dOMNodePointer3.testNode((NodeTest) nodeNameTest1);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals("_G:PF>>+J^DKE", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("it", locale1.getLanguage());
      assertEquals("_G:PF>>+J^DKE", qName0.toString());
      assertEquals("_G", qName0.getPrefix());
      assertEquals("PF>>+J^DKE", qName0.getName());
      assertTrue(dOMNodePointer3.isActual());
      assertTrue(dOMNodePointer3.isNode());
      assertFalse(dOMNodePointer3.isAttribute());
      assertEquals(1, dOMNodePointer3.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertFalse(dOMNodePointer3.isContainer());
      assertTrue(dOMNodePointer3.isRoot());
      assertFalse(dOMNodePointer3.isCollection());
      assertNotSame(nodeNameTest1, nodeNameTest0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer3);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(qName0, qName1);
      assertNotSame(dOMNodePointer3, dOMNodePointer2);
      assertNotSame(dOMNodePointer3, dOMNodePointer0);
      assertNotSame(dOMNodePointer3, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(boolean2);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer1));
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      
      HTMLImageElementImpl hTMLImageElementImpl0 = new HTMLImageElementImpl(hTMLDocumentImpl1, "3hl");
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLImageElementImpl0);
      
      QName qName2 = new QName("http://www.w3.org/2000/xmlns/", "P");
      assertEquals("http://www.w3.org/2000/xmlns/", qName2.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/:P", qName2.toString());
      assertEquals("P", qName2.getName());
      assertFalse(qName2.equals((Object)qName0));
      assertFalse(qName2.equals((Object)qName1));
      assertNotNull(qName2);
      
      NodeNameTest nodeNameTest2 = new NodeNameTest(qName2);
      assertEquals("http://www.w3.org/2000/xmlns/", qName2.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/:P", qName2.toString());
      assertEquals("P", qName2.getName());
      assertNull(nodeNameTest2.getNamespaceURI());
      assertFalse(nodeNameTest2.isWildcard());
      assertEquals("http://www.w3.org/2000/xmlns/:P", nodeNameTest2.toString());
      assertFalse(qName2.equals((Object)qName0));
      assertFalse(qName2.equals((Object)qName1));
      assertFalse(nodeNameTest2.equals((Object)nodeNameTest0));
      assertFalse(nodeNameTest2.equals((Object)nodeNameTest1));
      assertNotNull(nodeNameTest2);
      
      boolean boolean3 = DOMNodePointer.testNode((Node) hTMLAreaElementImpl0, (NodeTest) nodeNameTest0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("_G:PF>>+J^DKE", nodeNameTest0.toString());
      assertEquals("C45ORFBR>TL:", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals("_G:PF>>+J^DKE", qName0.toString());
      assertEquals("_G", qName0.getPrefix());
      assertEquals("PF>>+J^DKE", qName0.getName());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(nodeNameTest0, nodeNameTest1);
      assertNotSame(nodeNameTest0, nodeNameTest2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer3);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(qName0, qName2);
      assertNotSame(qName0, qName1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(boolean3);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(qName0.equals((Object)qName2));
      assertFalse(qName0.equals((Object)qName1));
      
      boolean boolean4 = dOMNodePointer1.isCollection();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer3);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer3);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean4);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      
      boolean boolean5 = DOMNodePointer.testNode((Node) hTMLAreaElementImpl0, (NodeTest) nodeNameTest2);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("http://www.w3.org/2000/xmlns/", qName2.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/:P", qName2.toString());
      assertEquals("P", qName2.getName());
      assertNull(nodeNameTest2.getNamespaceURI());
      assertFalse(nodeNameTest2.isWildcard());
      assertEquals("http://www.w3.org/2000/xmlns/:P", nodeNameTest2.toString());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(qName2, qName0);
      assertNotSame(qName2, qName1);
      assertNotSame(nodeNameTest2, nodeNameTest0);
      assertNotSame(nodeNameTest2, nodeNameTest1);
      assertFalse(boolean5);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(qName2.equals((Object)qName0));
      assertFalse(qName2.equals((Object)qName1));
      assertFalse(nodeNameTest2.equals((Object)nodeNameTest0));
      assertFalse(nodeNameTest2.equals((Object)nodeNameTest1));
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      
      String string1 = DOMNodePointer.XMLNS_NAMESPACE_URI;
      assertEquals("http://www.w3.org/2000/xmlns/", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = DOMNodePointer.getPrefix(hTMLImageElementImpl0);
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLParagraphElementImpl0);
      
      Locale locale0 = Locale.forLanguageTag("y)Gj*");
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLParagraphElementImpl0, locale0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      dOMNodePointer1.setNamespaceResolver((NamespaceResolver) null);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      
      String string0 = dOMNodePointer0.getNamespaceURI();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNull(string0);
      
      String string1 = DOMNodePointer.XML_NAMESPACE_URI;
      assertEquals("http://www.w3.org/XML/1998/namespace", string1);
      assertNotNull(string1);
      
      QName qName0 = new QName("y)Gj*");
      assertNull(qName0.getPrefix());
      assertEquals("y)Gj*", qName0.getName());
      assertEquals("y)Gj*", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "y)Gj*");
      assertNull(qName0.getPrefix());
      assertEquals("y)Gj*", qName0.getName());
      assertEquals("y)Gj*", qName0.toString());
      assertEquals("y)Gj*", nodeNameTest0.getNamespaceURI());
      assertEquals("y)Gj*", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      boolean boolean0 = dOMNodePointer0.testNode((NodeTest) nodeNameTest0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNull(qName0.getPrefix());
      assertEquals("y)Gj*", qName0.getName());
      assertEquals("y)Gj*", qName0.toString());
      assertEquals("y)Gj*", nodeNameTest0.getNamespaceURI());
      assertEquals("y)Gj*", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean0);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      
      HTMLImageElementImpl hTMLImageElementImpl0 = new HTMLImageElementImpl(hTMLDocumentImpl0, "&50n3),]?K*Rp?zf!");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLImageElementImpl0);
      
      dOMNodePointer0.setValue(nodeNameTest0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNull(qName0.getPrefix());
      assertEquals("y)Gj*", qName0.getName());
      assertEquals("y)Gj*", qName0.toString());
      assertEquals("y)Gj*", nodeNameTest0.getNamespaceURI());
      assertEquals("y)Gj*", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      
      boolean boolean1 = dOMNodePointer0.equals((Object) null);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean1);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(boolean1 == boolean0);
      
      org.apache.commons.jxpath.ri.model.NodeIterator nodeIterator0 = dOMNodePointer1.childIterator(nodeNameTest0, false, dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertNull(qName0.getPrefix());
      assertEquals("y)Gj*", qName0.getName());
      assertEquals("y)Gj*", qName0.toString());
      assertEquals("y)Gj*", nodeNameTest0.getNamespaceURI());
      assertEquals("y)Gj*", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, nodeIterator0.getPosition());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(nodeIterator0);
      
      int int0 = dOMNodePointer1.getLength();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(1, int0);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isActual());
      assertNull(qName0.getPrefix());
      assertEquals("y)Gj*", qName0.getName());
      assertEquals("y)Gj*", qName0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer1.compareChildNodePointers(dOMNodePointer0, variablePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'y)Gj*'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      hTMLDocumentImpl0.normalize();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-286));
      assertEquals((-286), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      QName qName0 = new QName("c~_", "c~_");
      assertEquals("c~_", qName0.getPrefix());
      assertEquals("c~_", qName0.getName());
      assertEquals("c~_:c~_", qName0.toString());
      assertNotNull(qName0);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "c~_");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(documentTypeImpl0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      String string0 = nodeTypeTest0.toString();
      assertEquals((-286), nodeTypeTest0.getNodeType());
      assertEquals("UNKNOWN()", string0);
      assertNotNull(string0);
      
      String string1 = nodeTypeTest0.toString();
      assertEquals((-286), nodeTypeTest0.getNodeType());
      assertEquals("UNKNOWN()", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("TWN", locale1.getISO3Country());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      String string2 = locale0.getDisplayLanguage();
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotSame(locale0, locale1);
      assertEquals("French", string2);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray1 = Locale.getISOLanguages();
      assertNotSame(stringArray1, stringArray0);
      assertEquals(188, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string3 = locale0.getDisplayVariant();
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotSame(locale0, locale1);
      assertEquals("", string3);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(1);
      assertEquals(1, nodeTypeTest1.getNodeType());
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertNotNull(nodeTypeTest1);
      
      boolean boolean0 = DOMNodePointer.testNode((Node) documentTypeImpl0, (NodeTest) nodeTypeTest1);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals(1, nodeTypeTest1.getNodeType());
      assertNotSame(nodeTypeTest1, nodeTypeTest0);
      assertFalse(boolean0);
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      
      String string4 = NodePointer.UNKNOWN_NAMESPACE;
      assertEquals("<<unknown namespace>>", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLAreaElementImpl hTMLAreaElementImpl0 = new HTMLAreaElementImpl(hTMLDocumentImpl0, "_g:pF>>+J^dKE");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLAreaElementImpl0);
      
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLAreaElementImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals("PF>>+J^DKE", qName0.getName());
      assertEquals("_G:PF>>+J^DKE", qName0.toString());
      assertEquals("_G", qName0.getPrefix());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      
      HTMLAreaElementImpl hTMLAreaElementImpl1 = new HTMLAreaElementImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertFalse(hTMLAreaElementImpl1.equals((Object)hTMLAreaElementImpl0));
      assertNotNull(hTMLAreaElementImpl1);
      
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, hTMLAreaElementImpl1, locale0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals("PF>>+J^DKE", qName0.getName());
      assertEquals("_G:PF>>+J^DKE", qName0.toString());
      assertEquals("_G", qName0.getPrefix());
      assertTrue(nodePointer0.isNode());
      assertTrue(nodePointer0.isActual());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertTrue(nodePointer0.isRoot());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertNotSame(hTMLAreaElementImpl0, hTMLAreaElementImpl1);
      assertNotSame(dOMNodePointer0, nodePointer0);
      assertNotSame(hTMLAreaElementImpl1, hTMLAreaElementImpl0);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLAreaElementImpl0.equals((Object)hTMLAreaElementImpl1));
      assertFalse(hTMLAreaElementImpl1.equals((Object)hTMLAreaElementImpl0));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertNotNull(nodePointer0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(nodePointer0, hTMLAreaElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals("PF>>+J^DKE", qName0.getName());
      assertEquals("_G:PF>>+J^DKE", qName0.toString());
      assertEquals("_G", qName0.getPrefix());
      assertTrue(nodePointer0.isNode());
      assertTrue(nodePointer0.isActual());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertTrue(nodePointer0.isRoot());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLAreaElementImpl0.equals((Object)hTMLAreaElementImpl1));
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(hTMLAreaElementImpl1.equals((Object)hTMLAreaElementImpl0));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)nodePointer0));
      assertNotNull(dOMNodePointer1);
      
      Object object0 = dOMNodePointer1.getBaseValue();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals("PF>>+J^DKE", qName0.getName());
      assertEquals("_G:PF>>+J^DKE", qName0.toString());
      assertEquals("_G", qName0.getPrefix());
      assertTrue(nodePointer0.isNode());
      assertTrue(nodePointer0.isActual());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertTrue(nodePointer0.isRoot());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertSame(hTMLAreaElementImpl0, object0);
      assertNotSame(hTMLAreaElementImpl0, hTMLAreaElementImpl1);
      assertNotSame(dOMNodePointer0, nodePointer0);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(hTMLAreaElementImpl1, object0);
      assertNotSame(hTMLAreaElementImpl1, hTMLAreaElementImpl0);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertNotSame(nodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, nodePointer0);
      assertNotSame(object0, hTMLAreaElementImpl1);
      assertSame(object0, hTMLAreaElementImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLAreaElementImpl0.equals((Object)hTMLAreaElementImpl1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(hTMLAreaElementImpl1.equals((Object)hTMLAreaElementImpl0));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)nodePointer0));
      assertFalse(object0.equals((Object)hTMLAreaElementImpl1));
      assertNotNull(object0);
      
      HTMLHRElementImpl hTMLHRElementImpl0 = new HTMLHRElementImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLHRElementImpl0);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(dOMNodePointer1, hTMLHRElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals("PF>>+J^DKE", qName0.getName());
      assertEquals("_G:PF>>+J^DKE", qName0.toString());
      assertEquals("_G", qName0.getPrefix());
      assertTrue(nodePointer0.isNode());
      assertTrue(nodePointer0.isActual());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertTrue(nodePointer0.isRoot());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer2.isRoot());
      assertTrue(dOMNodePointer2.isActual());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLAreaElementImpl0.equals((Object)hTMLAreaElementImpl1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(hTMLAreaElementImpl1.equals((Object)object0));
      assertFalse(hTMLAreaElementImpl1.equals((Object)hTMLAreaElementImpl0));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)nodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)nodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer2);
      
      dOMNodePointer2.setValue(hTMLAreaElementImpl1);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals("PF>>+J^DKE", qName0.getName());
      assertEquals("_G:PF>>+J^DKE", qName0.toString());
      assertEquals("_G", qName0.getPrefix());
      assertTrue(nodePointer0.isNode());
      assertTrue(nodePointer0.isActual());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertTrue(nodePointer0.isRoot());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer2.isRoot());
      assertTrue(dOMNodePointer2.isActual());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertSame(hTMLAreaElementImpl0, object0);
      assertNotSame(hTMLAreaElementImpl0, hTMLAreaElementImpl1);
      assertNotSame(dOMNodePointer0, nodePointer0);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(hTMLAreaElementImpl1, object0);
      assertNotSame(hTMLAreaElementImpl1, hTMLAreaElementImpl0);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertNotSame(nodePointer0, dOMNodePointer2);
      assertNotSame(nodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, nodePointer0);
      assertNotSame(dOMNodePointer2, nodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLAreaElementImpl0.equals((Object)hTMLAreaElementImpl1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(hTMLAreaElementImpl1.equals((Object)object0));
      assertFalse(hTMLAreaElementImpl1.equals((Object)hTMLAreaElementImpl0));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)nodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)nodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      
      HTMLFormElement hTMLFormElement0 = hTMLHRElementImpl0.getForm();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLFormElement0);
      
      QName qName1 = new QName("q[9tcOg9Y&WT", "<<unknown namespace>>");
      assertEquals("q[9tcOg9Y&WT:<<unknown namespace>>", qName1.toString());
      assertEquals("q[9tcOg9Y&WT", qName1.getPrefix());
      assertEquals("<<unknown namespace>>", qName1.getName());
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      
      DOMNodePointer dOMNodePointer3 = new DOMNodePointer(dOMNodePointer2, hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals("PF>>+J^DKE", qName0.getName());
      assertEquals("_G:PF>>+J^DKE", qName0.toString());
      assertEquals("_G", qName0.getPrefix());
      assertTrue(nodePointer0.isNode());
      assertTrue(nodePointer0.isActual());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertTrue(nodePointer0.isRoot());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer2.isRoot());
      assertTrue(dOMNodePointer2.isActual());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertEquals(1, dOMNodePointer3.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertFalse(dOMNodePointer3.isAttribute());
      assertFalse(dOMNodePointer3.isCollection());
      assertFalse(dOMNodePointer3.isContainer());
      assertTrue(dOMNodePointer3.isNode());
      assertTrue(dOMNodePointer3.isActual());
      assertFalse(dOMNodePointer3.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLAreaElementImpl0.equals((Object)hTMLAreaElementImpl1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(hTMLAreaElementImpl1.equals((Object)object0));
      assertFalse(hTMLAreaElementImpl1.equals((Object)hTMLAreaElementImpl0));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)nodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)nodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer3.equals((Object)nodePointer0));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer3);
      
      String string0 = dOMNodePointer2.asPath();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals("PF>>+J^DKE", qName0.getName());
      assertEquals("_G:PF>>+J^DKE", qName0.toString());
      assertEquals("_G", qName0.getPrefix());
      assertTrue(nodePointer0.isNode());
      assertTrue(nodePointer0.isActual());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertTrue(nodePointer0.isRoot());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer2.isRoot());
      assertTrue(dOMNodePointer2.isActual());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertSame(hTMLAreaElementImpl0, object0);
      assertNotSame(hTMLAreaElementImpl0, hTMLAreaElementImpl1);
      assertNotSame(dOMNodePointer0, dOMNodePointer3);
      assertNotSame(dOMNodePointer0, nodePointer0);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(qName0, qName1);
      assertNotSame(hTMLAreaElementImpl1, object0);
      assertNotSame(hTMLAreaElementImpl1, hTMLAreaElementImpl0);
      assertNotSame(nodePointer0, dOMNodePointer3);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertNotSame(nodePointer0, dOMNodePointer2);
      assertNotSame(nodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer3);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, nodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer3);
      assertNotSame(dOMNodePointer2, nodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("/PF>>+J^DKE[1]///WWW.W3.ORG/2000/XMLNS/[1]", string0);
      assertFalse(hTMLAreaElementImpl0.equals((Object)hTMLAreaElementImpl1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(hTMLAreaElementImpl1.equals((Object)object0));
      assertFalse(hTMLAreaElementImpl1.equals((Object)hTMLAreaElementImpl0));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer3));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer3));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)nodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer2.equals((Object)nodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNotNull(string0);
      
      HTMLImageElementImpl hTMLImageElementImpl0 = new HTMLImageElementImpl(hTMLDocumentImpl0, "%dP=");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLImageElementImpl0);
      
      // Undeclared exception!
      try { 
        DOMNodePointer.getPrefix((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLAreaElementImpl hTMLAreaElementImpl0 = new HTMLAreaElementImpl(hTMLDocumentImpl0, "_g:pF>>+J^dKE");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLAreaElementImpl0);
      
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLAreaElementImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals("_G", qName0.getPrefix());
      assertEquals("PF>>+J^DKE", qName0.getName());
      assertEquals("_G:PF>>+J^DKE", qName0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      
      HTMLAreaElementImpl hTMLAreaElementImpl1 = new HTMLAreaElementImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(hTMLAreaElementImpl1.equals((Object)hTMLAreaElementImpl0));
      assertNotNull(hTMLAreaElementImpl1);
      
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, hTMLAreaElementImpl1, locale0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals("_G", qName0.getPrefix());
      assertEquals("PF>>+J^DKE", qName0.getName());
      assertEquals("_G:PF>>+J^DKE", qName0.toString());
      assertFalse(nodePointer0.isCollection());
      assertTrue(nodePointer0.isActual());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isRoot());
      assertNotSame(hTMLAreaElementImpl0, hTMLAreaElementImpl1);
      assertNotSame(dOMNodePointer0, nodePointer0);
      assertNotSame(hTMLAreaElementImpl1, hTMLAreaElementImpl0);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLAreaElementImpl0.equals((Object)hTMLAreaElementImpl1));
      assertFalse(hTMLAreaElementImpl1.equals((Object)hTMLAreaElementImpl0));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertNotNull(nodePointer0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(nodePointer0, hTMLAreaElementImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals("_G", qName0.getPrefix());
      assertEquals("PF>>+J^DKE", qName0.getName());
      assertEquals("_G:PF>>+J^DKE", qName0.toString());
      assertFalse(nodePointer0.isCollection());
      assertTrue(nodePointer0.isActual());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLAreaElementImpl0.equals((Object)hTMLAreaElementImpl1));
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(hTMLAreaElementImpl1.equals((Object)hTMLAreaElementImpl0));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)nodePointer0));
      assertNotNull(dOMNodePointer1);
      
      Object object0 = dOMNodePointer1.getBaseValue();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals("_G", qName0.getPrefix());
      assertEquals("PF>>+J^DKE", qName0.getName());
      assertEquals("_G:PF>>+J^DKE", qName0.toString());
      assertFalse(nodePointer0.isCollection());
      assertTrue(nodePointer0.isActual());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertSame(hTMLAreaElementImpl0, object0);
      assertNotSame(hTMLAreaElementImpl0, hTMLAreaElementImpl1);
      assertNotSame(dOMNodePointer0, nodePointer0);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(hTMLAreaElementImpl1, object0);
      assertNotSame(hTMLAreaElementImpl1, hTMLAreaElementImpl0);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertNotSame(nodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, nodePointer0);
      assertNotSame(object0, hTMLAreaElementImpl1);
      assertSame(object0, hTMLAreaElementImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLAreaElementImpl0.equals((Object)hTMLAreaElementImpl1));
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(hTMLAreaElementImpl1.equals((Object)hTMLAreaElementImpl0));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)nodePointer0));
      assertFalse(object0.equals((Object)hTMLAreaElementImpl1));
      assertNotNull(object0);
      
      HTMLHRElementImpl hTMLHRElementImpl0 = new HTMLHRElementImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLHRElementImpl0);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(dOMNodePointer1, hTMLHRElementImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals("_G", qName0.getPrefix());
      assertEquals("PF>>+J^DKE", qName0.getName());
      assertEquals("_G:PF>>+J^DKE", qName0.toString());
      assertFalse(nodePointer0.isCollection());
      assertTrue(nodePointer0.isActual());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertEquals(1, dOMNodePointer2.getLength());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isAttribute());
      assertFalse(dOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLAreaElementImpl0.equals((Object)hTMLAreaElementImpl1));
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(hTMLAreaElementImpl1.equals((Object)object0));
      assertFalse(hTMLAreaElementImpl1.equals((Object)hTMLAreaElementImpl0));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)nodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)nodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer2);
      
      dOMNodePointer2.setValue(hTMLAreaElementImpl1);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals("_G", qName0.getPrefix());
      assertEquals("PF>>+J^DKE", qName0.getName());
      assertEquals("_G:PF>>+J^DKE", qName0.toString());
      assertFalse(nodePointer0.isCollection());
      assertTrue(nodePointer0.isActual());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertEquals(1, dOMNodePointer2.getLength());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isAttribute());
      assertFalse(dOMNodePointer2.isRoot());
      assertSame(hTMLAreaElementImpl0, object0);
      assertNotSame(hTMLAreaElementImpl0, hTMLAreaElementImpl1);
      assertNotSame(dOMNodePointer0, nodePointer0);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(hTMLAreaElementImpl1, object0);
      assertNotSame(hTMLAreaElementImpl1, hTMLAreaElementImpl0);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertNotSame(nodePointer0, dOMNodePointer1);
      assertNotSame(nodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, nodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, nodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLAreaElementImpl0.equals((Object)hTMLAreaElementImpl1));
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(hTMLAreaElementImpl1.equals((Object)object0));
      assertFalse(hTMLAreaElementImpl1.equals((Object)hTMLAreaElementImpl0));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)nodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)nodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      
      HTMLFormElement hTMLFormElement0 = hTMLHRElementImpl0.getForm();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLFormElement0);
      
      String string0 = locale0.getDisplayLanguage();
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("Japanese", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = locale0.getDisplayVariant();
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      QName qName1 = new QName("http://www.w3.org/2000/xmlns/", "http://www.w3.org/XML/1998/namespace");
      assertEquals("http://www.w3.org/2000/xmlns/:http://www.w3.org/XML/1998/namespace", qName1.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName1.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName1.getName());
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1, "Unknown namespace prefix: ");
      assertEquals("http://www.w3.org/2000/xmlns/:http://www.w3.org/XML/1998/namespace", qName1.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName1.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName1.getName());
      assertEquals("Unknown namespace prefix: ", nodeNameTest0.getNamespaceURI());
      assertEquals("http://www.w3.org/2000/xmlns/:http://www.w3.org/XML/1998/namespace", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(nodeNameTest0);
      
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLAreaElementImpl1, (NodeTest) nodeNameTest0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("http://www.w3.org/2000/xmlns/:http://www.w3.org/XML/1998/namespace", qName1.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName1.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName1.getName());
      assertEquals("Unknown namespace prefix: ", nodeNameTest0.getNamespaceURI());
      assertEquals("http://www.w3.org/2000/xmlns/:http://www.w3.org/XML/1998/namespace", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotSame(qName1, qName0);
      assertNotSame(hTMLAreaElementImpl1, object0);
      assertNotSame(hTMLAreaElementImpl1, hTMLAreaElementImpl0);
      assertFalse(boolean0);
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(hTMLAreaElementImpl1.equals((Object)object0));
      assertFalse(hTMLAreaElementImpl1.equals((Object)hTMLAreaElementImpl0));
      
      String string2 = NodePointer.UNKNOWN_NAMESPACE;
      assertEquals("<<unknown namespace>>", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = nodePointer0.isActual();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals("_G", qName0.getPrefix());
      assertEquals("PF>>+J^DKE", qName0.getName());
      assertEquals("_G:PF>>+J^DKE", qName0.toString());
      assertFalse(nodePointer0.isCollection());
      assertTrue(nodePointer0.isActual());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isRoot());
      assertSame(hTMLAreaElementImpl0, object0);
      assertNotSame(hTMLAreaElementImpl0, hTMLAreaElementImpl1);
      assertNotSame(dOMNodePointer0, nodePointer0);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(qName0, qName1);
      assertNotSame(hTMLAreaElementImpl1, object0);
      assertNotSame(hTMLAreaElementImpl1, hTMLAreaElementImpl0);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertNotSame(nodePointer0, dOMNodePointer1);
      assertNotSame(nodePointer0, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(boolean1);
      assertFalse(hTMLAreaElementImpl0.equals((Object)hTMLAreaElementImpl1));
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(boolean1 == boolean0);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(hTMLAreaElementImpl1.equals((Object)object0));
      assertFalse(hTMLAreaElementImpl1.equals((Object)hTMLAreaElementImpl0));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer2));
      
      boolean boolean2 = dOMNodePointer0.isLanguage("#document");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertSame(hTMLAreaElementImpl0, object0);
      assertNotSame(hTMLAreaElementImpl0, hTMLAreaElementImpl1);
      assertNotSame(dOMNodePointer0, nodePointer0);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean2);
      assertFalse(hTMLAreaElementImpl0.equals((Object)hTMLAreaElementImpl1));
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLScriptElementImpl hTMLScriptElementImpl0 = new HTMLScriptElementImpl(hTMLDocumentImpl0, "");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLScriptElementImpl0);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = (HTMLDocumentImpl)hTMLScriptElementImpl0.getOwnerDocument();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotNull(hTMLDocumentImpl1);
      
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl(true);
      assertNotNull(coreDocumentImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreDocumentImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      HTMLDocumentImpl hTMLDocumentImpl2 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertNotNull(hTMLDocumentImpl2);
      
      hTMLDocumentImpl2.setErrorChecking(false);
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl2, locale0);
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertNotNull(dOMNodePointer0);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertNotNull(qName0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("http://www.w3.org/XML/1998/namespace");
      assertEquals("http://www.w3.org/XML/1998/namespace", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "http://www.w3.org/2000/xmlns/");
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(nodeNameTest0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", nodeNameTest0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertNotNull(nodeNameTest0);
      
      boolean boolean0 = dOMNodePointer0.testNode((NodeTest) processingInstructionTest0);
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals("http://www.w3.org/XML/1998/namespace", processingInstructionTest0.getTarget());
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean0);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      
      HTMLImageElementImpl hTMLImageElementImpl0 = new HTMLImageElementImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertNotNull(hTMLImageElementImpl0);
      
      CDATASectionImpl cDATASectionImpl0 = new CDATASectionImpl(hTMLDocumentImpl1, "OH}O.{7[s}B?VT");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl2));
      assertNotNull(cDATASectionImpl0);
      
      dOMNodePointer0.setValue(cDATASectionImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl2);
      assertSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl1, "<<unknown namespace>>");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl2));
      assertNotNull(documentTypeImpl0);
      
      String string0 = (String)dOMNodePointer0.getValue();
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("OH}O.{7[s}B?VT", string0);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertNotNull(string0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      boolean boolean1 = dOMNodePointer0.testNode((NodeTest) nodeTypeTest0);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      
      HTMLDocumentImpl hTMLDocumentImpl3 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl3.getDomain());
      assertNull(hTMLDocumentImpl3.getCookie());
      assertNull(hTMLDocumentImpl3.getReferrer());
      assertNull(hTMLDocumentImpl3.getURL());
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl1));
      assertNotNull(hTMLDocumentImpl3);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLDocumentImpl3, locale0, "&quot;");
      assertNull(hTMLDocumentImpl3.getDomain());
      assertNull(hTMLDocumentImpl3.getCookie());
      assertNull(hTMLDocumentImpl3.getReferrer());
      assertNull(hTMLDocumentImpl3.getURL());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      Locale locale1 = dOMNodePointer1.getLocale();
      assertNull(hTMLDocumentImpl3.getDomain());
      assertNull(hTMLDocumentImpl3.getCookie());
      assertNull(hTMLDocumentImpl3.getReferrer());
      assertNull(hTMLDocumentImpl3.getURL());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotSame(hTMLDocumentImpl3, hTMLDocumentImpl2);
      assertNotSame(hTMLDocumentImpl3, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl3, hTMLDocumentImpl1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertSame(locale1, locale0);
      assertSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(locale1);
      
      DOMNodePointer dOMNodePointer2 = (DOMNodePointer)dOMNodePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) coreDocumentImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertEquals(1, dOMNodePointer2.getLength());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl3);
      assertSame(locale0, locale1);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertSame(dOMNodePointer0, dOMNodePointer2);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl3));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer2);
      
      String string1 = DOMNodePointer.getLocalName(hTMLScriptElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl3);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertEquals("", string1);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl3));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean2 = DOMNodePointer.testNode((Node) hTMLImageElementImpl0, (NodeTest) processingInstructionTest0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("http://www.w3.org/XML/1998/namespace", processingInstructionTest0.getTarget());
      assertSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl3);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertFalse(boolean2);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl3));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      QName qName1 = new QName("", (String) null);
      assertEquals("", qName1.getPrefix());
      assertNull(qName1.getName());
      assertEquals(":null", qName1.toString());
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      
      VariablePointer variablePointer0 = new VariablePointer(qName1);
      assertEquals("", qName1.getPrefix());
      assertNull(qName1.getName());
      assertEquals(":null", qName1.toString());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(variablePointer0);
      
      HTMLQuoteElementImpl hTMLQuoteElementImpl0 = new HTMLQuoteElementImpl(hTMLDocumentImpl1, "<<unknown namespace>>");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl3));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl3));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl2));
      assertNotNull(hTMLQuoteElementImpl0);
      
      // Undeclared exception!
      try { 
        variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) hTMLQuoteElementImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: $:null
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLScriptElementImpl hTMLScriptElementImpl0 = new HTMLScriptElementImpl(hTMLDocumentImpl0, "");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLScriptElementImpl0);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = (HTMLDocumentImpl)hTMLScriptElementImpl0.getOwnerDocument();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotNull(hTMLDocumentImpl1);
      
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl(true);
      assertNotNull(coreDocumentImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreDocumentImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      HTMLDocumentImpl hTMLDocumentImpl2 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertNotNull(hTMLDocumentImpl2);
      
      hTMLDocumentImpl2.setErrorChecking(false);
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl2, locale0);
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertNotNull(dOMNodePointer0);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertNotNull(qName0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("http://www.w3.org/XML/1998/namespace");
      assertEquals("http://www.w3.org/XML/1998/namespace", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "http://www.w3.org/2000/xmlns/");
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(nodeNameTest0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", nodeNameTest0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertNotNull(nodeNameTest0);
      
      boolean boolean0 = dOMNodePointer0.testNode((NodeTest) processingInstructionTest0);
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals("http://www.w3.org/XML/1998/namespace", processingInstructionTest0.getTarget());
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean0);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      
      HTMLImageElementImpl hTMLImageElementImpl0 = new HTMLImageElementImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertNotNull(hTMLImageElementImpl0);
      
      CDATASectionImpl cDATASectionImpl0 = new CDATASectionImpl(hTMLDocumentImpl1, "OH}O.{7[s}B?VT");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl2));
      assertNotNull(cDATASectionImpl0);
      
      dOMNodePointer0.setValue(cDATASectionImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl2);
      assertSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl1, "<<unknown namespace>>");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl2));
      assertNotNull(documentTypeImpl0);
      
      String string0 = (String)dOMNodePointer0.getValue();
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("OH}O.{7[s}B?VT", string0);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertNotNull(string0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      boolean boolean1 = dOMNodePointer0.testNode((NodeTest) nodeTypeTest0);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      
      HTMLDocumentImpl hTMLDocumentImpl3 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl3.getReferrer());
      assertNull(hTMLDocumentImpl3.getDomain());
      assertNull(hTMLDocumentImpl3.getURL());
      assertNull(hTMLDocumentImpl3.getCookie());
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl2));
      assertNotNull(hTMLDocumentImpl3);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLDocumentImpl3, locale0, "&quot;");
      assertNull(hTMLDocumentImpl3.getReferrer());
      assertNull(hTMLDocumentImpl3.getDomain());
      assertNull(hTMLDocumentImpl3.getURL());
      assertNull(hTMLDocumentImpl3.getCookie());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      Locale locale1 = dOMNodePointer1.getLocale();
      assertNull(hTMLDocumentImpl3.getReferrer());
      assertNull(hTMLDocumentImpl3.getDomain());
      assertNull(hTMLDocumentImpl3.getURL());
      assertNull(hTMLDocumentImpl3.getCookie());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals("", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertNotSame(hTMLDocumentImpl3, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl3, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl3, hTMLDocumentImpl2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertSame(locale1, locale0);
      assertSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(locale1);
      
      DOMNodePointer dOMNodePointer2 = (DOMNodePointer)dOMNodePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) coreDocumentImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isCollection());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isAttribute());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl3);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertSame(locale0, locale1);
      assertSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl3));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer2);
      
      boolean boolean2 = DOMNodePointer.testNode((Node) hTMLImageElementImpl0, (NodeTest) processingInstructionTest0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("http://www.w3.org/XML/1998/namespace", processingInstructionTest0.getTarget());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl3);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertFalse(boolean2);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl3));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      QName qName1 = new QName("", (String) null);
      assertEquals(":null", qName1.toString());
      assertEquals("", qName1.getPrefix());
      assertNull(qName1.getName());
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      
      VariablePointer variablePointer0 = new VariablePointer(qName1);
      assertEquals(":null", qName1.toString());
      assertEquals("", qName1.getPrefix());
      assertNull(qName1.getName());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(variablePointer0);
      
      HTMLQuoteElementImpl hTMLQuoteElementImpl0 = new HTMLQuoteElementImpl(hTMLDocumentImpl1, "<<unknown namespace>>");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl3));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl3));
      assertNotNull(hTMLQuoteElementImpl0);
      
      // Undeclared exception!
      try { 
        variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) hTMLQuoteElementImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: $:null
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DocumentImpl documentImpl0 = new DocumentImpl((DocumentType) null);
      assertNotNull(documentImpl0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(documentImpl0, locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(locale0));
      assertNotNull(linkedList0);
      
      Stream<Locale> stream0 = linkedList0.stream();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(locale0));
      assertNotNull(stream0);
      
      DocumentImpl documentImpl1 = new DocumentImpl();
      assertFalse(documentImpl1.equals((Object)documentImpl0));
      assertNotNull(documentImpl1);
      
      Locale locale1 = Locale.FRANCE;
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FR", locale1.getCountry());
      assertEquals("FRA", locale1.getISO3Country());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      String string0 = dOMNodePointer0.getNamespaceURI("\"mod\"");
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertNotSame(documentImpl0, documentImpl1);
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(documentImpl0.equals((Object)documentImpl1));
      assertFalse(locale0.equals((Object)locale1));
      assertNull(string0);
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("http://www.w3.org/2000/xmlns/");
      assertEquals("http://www.w3.org/2000/xmlns/", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(documentImpl1, locale1);
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FR", locale1.getCountry());
      assertEquals("FRA", locale1.getISO3Country());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(documentImpl1.equals((Object)documentImpl0));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      String string1 = locale1.getDisplayName(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FR", locale1.getCountry());
      assertEquals("FRA", locale1.getISO3Country());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("fran\u00E7ais (France)", string1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string1);
      
      QName qName0 = dOMNodePointer1.getName();
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FR", locale1.getCountry());
      assertEquals("FRA", locale1.getISO3Country());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isAttribute());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNotSame(documentImpl1, documentImpl0);
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(documentImpl1.equals((Object)documentImpl0));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "l>eY(4*");
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FR", locale1.getCountry());
      assertEquals("FRA", locale1.getISO3Country());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isAttribute());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertEquals("l>eY(4*", nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(documentImpl1.equals((Object)documentImpl0));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(nodeNameTest0);
      
      boolean boolean0 = dOMNodePointer1.testNode((NodeTest) processingInstructionTest0);
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FR", locale1.getCountry());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("http://www.w3.org/2000/xmlns/", processingInstructionTest0.getTarget());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isAttribute());
      assertNotSame(documentImpl1, documentImpl0);
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean0);
      assertFalse(documentImpl1.equals((Object)documentImpl0));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      
      boolean boolean1 = hTMLDocumentImpl0.isSameNode((Node) null);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      HTMLImageElementImpl hTMLImageElementImpl0 = new HTMLImageElementImpl(hTMLDocumentImpl0, "l>eY(4*");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLImageElementImpl0);
      
      dOMNodePointer1.setValue(hTMLImageElementImpl0);
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FR", locale1.getCountry());
      assertEquals("FRA", locale1.getISO3Country());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isAttribute());
      assertNotSame(documentImpl1, documentImpl0);
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(documentImpl1.equals((Object)documentImpl0));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      
      String string2 = locale1.getDisplayLanguage();
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FR", locale1.getCountry());
      assertEquals("FRA", locale1.getISO3Country());
      assertNotSame(locale1, locale0);
      assertEquals("French", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string2);
      
      Locale locale2 = Locale.forLanguageTag("<<unknown namespace>>");
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getLanguage());
      assertEquals("", locale2.getISO3Language());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = locale2.getDisplayVariant();
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getLanguage());
      assertEquals("", locale2.getISO3Language());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("", string3);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      DocumentImpl documentImpl2 = new DocumentImpl();
      assertFalse(documentImpl2.equals((Object)documentImpl0));
      assertFalse(documentImpl2.equals((Object)documentImpl1));
      assertNotNull(documentImpl2);
      
      boolean boolean2 = DOMNodePointer.testNode((Node) documentImpl2, (NodeTest) nodeNameTest0);
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FR", locale1.getCountry());
      assertEquals("FRA", locale1.getISO3Country());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isAttribute());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertEquals("l>eY(4*", nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      assertNotSame(documentImpl1, documentImpl2);
      assertNotSame(documentImpl1, documentImpl0);
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertNotSame(documentImpl2, documentImpl0);
      assertNotSame(documentImpl2, documentImpl1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean2);
      assertFalse(documentImpl1.equals((Object)documentImpl2));
      assertFalse(documentImpl1.equals((Object)documentImpl0));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(documentImpl2.equals((Object)documentImpl0));
      assertFalse(documentImpl2.equals((Object)documentImpl1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(dOMNodePointer0, (Node) null);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer2.isContainer());
      assertFalse(dOMNodePointer2.isRoot());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(documentImpl0.equals((Object)documentImpl1));
      assertFalse(documentImpl0.equals((Object)documentImpl2));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer2);
      
      // Undeclared exception!
      try { 
        dOMNodePointer2.asPath();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
      assertNotNull(deferredDocumentImpl0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(deferredDocumentImpl0, locale0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DocumentImpl documentImpl0 = new DocumentImpl();
      assertNotNull(documentImpl0);
      
      boolean boolean0 = documentImpl0.getStrictErrorChecking();
      assertTrue(boolean0);
      
      String string0 = dOMNodePointer0.asPath();
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", string0);
      assertNotNull(string0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) deferredDocumentImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      boolean boolean1 = documentImpl0.getStandalone();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JXPathContext jXPathContext0 = jXPathContextReferenceImpl0.getParentContext();
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNull(jXPathContext0);
      
      NullPointer nullPointer0 = (NullPointer)dOMNodePointer0.getPointerByID(jXPathContextReferenceImpl0, "<<unknown namespace>>");
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
      
      int int0 = dOMNodePointer0.getLength();
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.getValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLParagraphElementImpl0);
      
      String string0 = hTMLDocumentImpl0.lookupNamespaceURI("|s$ ");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(string0);
      
      Locale locale0 = Locale.forLanguageTag("B2x)n5yg~dR&Oud7(");
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      HTMLButtonElementImpl hTMLButtonElementImpl0 = new HTMLButtonElementImpl(hTMLDocumentImpl0, "DEL");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLButtonElementImpl0);
      
      Locale locale1 = Locale.FRANCE;
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("FR", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      String string1 = locale1.getDisplayScript(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("FR", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", string1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string1);
      
      String string2 = dOMNodePointer0.getNamespaceURI("DIR");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertNull(string2);
      
      HTMLBaseFontElementImpl hTMLBaseFontElementImpl0 = new HTMLBaseFontElementImpl(hTMLDocumentImpl0, "w-{]&");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLBaseFontElementImpl0);
      
      QName qName0 = new QName("DIR", "xmlns");
      assertEquals("DIR:xmlns", qName0.toString());
      assertEquals("xmlns", qName0.getName());
      assertEquals("DIR", qName0.getPrefix());
      assertNotNull(qName0);
      
      Node node0 = hTMLParagraphElementImpl0.cloneNode(true);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotSame(hTMLParagraphElementImpl0, node0);
      assertNotSame(node0, hTMLParagraphElementImpl0);
      assertFalse(node0.equals((Object)hTMLParagraphElementImpl0));
      assertNotNull(node0);
      
      boolean boolean0 = dOMNodePointer0.isLeaf();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean0);
      assertFalse(locale0.equals((Object)locale1));
      
      org.apache.commons.jxpath.ri.model.NodeIterator nodeIterator0 = dOMNodePointer0.namespaceIterator();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(0, nodeIterator0.getPosition());
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(nodeIterator0);
      
      org.apache.commons.jxpath.ri.model.NodeIterator nodeIterator1 = dOMNodePointer0.namespaceIterator();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(0, nodeIterator1.getPosition());
      assertNotSame(locale0, locale1);
      assertNotSame(nodeIterator1, nodeIterator0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(nodeIterator1.equals((Object)nodeIterator0));
      assertNotNull(nodeIterator1);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLBaseFontElementImpl0, locale1, "~<Sx$C*Yl");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("FR", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      org.apache.commons.jxpath.ri.model.NodeIterator nodeIterator2 = dOMNodePointer1.namespaceIterator();
      assertEquals(0, nodeIterator2.getPosition());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("FR", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertNotSame(nodeIterator2, nodeIterator1);
      assertNotSame(nodeIterator2, nodeIterator0);
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(nodeIterator2.equals((Object)nodeIterator1));
      assertFalse(nodeIterator2.equals((Object)nodeIterator0));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(nodeIterator2);
      
      String string3 = dOMNodePointer1.getDefaultNamespaceURI();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("FR", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNull(string3);
      
      Object object0 = dOMNodePointer1.getValue();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("FR", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", object0);
      assertTrue(object0.equals((Object)string1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(object0);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(documentTypeImpl0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(wMLDocumentImpl0);
      
      WMLHeadElementImpl wMLHeadElementImpl0 = new WMLHeadElementImpl(wMLDocumentImpl0, (String) null);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(wMLHeadElementImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) wMLHeadElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer1.createAttribute(jXPathContextReferenceImpl0, qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown namespace prefix: DIR
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DocumentImpl documentImpl0 = new DocumentImpl((DocumentType) null);
      assertNotNull(documentImpl0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(documentImpl0, locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(locale0));
      assertNotNull(linkedList1);
      
      Locale locale1 = Locale.lookup(linkedList0, linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(locale0));
      assertNull(locale1);
      
      DocumentImpl documentImpl1 = new DocumentImpl();
      assertFalse(documentImpl1.equals((Object)documentImpl0));
      assertNotNull(documentImpl1);
      
      boolean boolean0 = documentImpl1.getStrictErrorChecking();
      assertNotSame(documentImpl1, documentImpl0);
      assertTrue(boolean0);
      assertFalse(documentImpl1.equals((Object)documentImpl0));
      
      String string0 = dOMNodePointer0.asPath();
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertNotSame(documentImpl0, documentImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", string0);
      assertFalse(documentImpl0.equals((Object)documentImpl1));
      assertNotNull(string0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) documentImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotSame(documentImpl0, documentImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(documentImpl0.equals((Object)documentImpl1));
      assertNotNull(jXPathContextReferenceImpl0);
      
      boolean boolean1 = documentImpl1.getStandalone();
      assertNotSame(documentImpl1, documentImpl0);
      assertFalse(boolean1);
      assertFalse(documentImpl1.equals((Object)documentImpl0));
      assertFalse(boolean1 == boolean0);
      
      JXPathContext jXPathContext0 = jXPathContextReferenceImpl0.getParentContext();
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotSame(documentImpl0, documentImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(documentImpl0.equals((Object)documentImpl1));
      assertNull(jXPathContext0);
      
      NullPointer nullPointer0 = (NullPointer)dOMNodePointer0.getPointerByID(jXPathContextReferenceImpl0, "<<unknown namespace>>");
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isRoot());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isActual());
      assertNotSame(documentImpl0, documentImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(documentImpl0.equals((Object)documentImpl1));
      assertNotNull(nullPointer0);
      
      int int0 = dOMNodePointer0.getLength();
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertNotSame(documentImpl0, documentImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(1, int0);
      assertFalse(documentImpl0.equals((Object)documentImpl1));
      
      String string1 = (String)dOMNodePointer0.getValue();
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertNotSame(documentImpl0, documentImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", string1);
      assertFalse(documentImpl0.equals((Object)documentImpl1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = (String)dOMNodePointer0.getValue();
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertNotSame(documentImpl0, documentImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", string2);
      assertFalse(documentImpl0.equals((Object)documentImpl1));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      boolean boolean2 = dOMNodePointer0.testNode((NodeTest) nodeTypeTest0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertNotSame(documentImpl0, documentImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(boolean2);
      assertFalse(documentImpl0.equals((Object)documentImpl1));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLDocumentImpl0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLDocumentImpl0, (Locale) null, (String) null);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer1.isNode());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      dOMNodePointer1.setValue(documentImpl1);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer1.isNode());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(documentImpl1, documentImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(documentImpl1.equals((Object)documentImpl0));
      
      boolean boolean3 = dOMNodePointer1.equals((Object) null);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer1.isNode());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean3);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      String string3 = dOMNodePointer1.getNamespaceURI();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer1.isNode());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNull(string3);
      
      QName qName0 = new QName("3D!)87BU'f6z`;umZX.");
      assertEquals("3D!)87BU'f6z`;umZX.", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("3D!)87BU'f6z`;umZX.", qName0.toString());
      assertNotNull(qName0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer1.createChild((JXPathContext) null, qName0, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = DOMNodePointer.findEnclosingAttribute((Node) null, "y)Gj*");
      assertNull(string0);
      
      Locale locale0 = new Locale("y)Gj*", "=PX_(z)Qauh1");
      assertEquals("", locale0.getVariant());
      assertEquals("y)gj*_=PX_(Z)QAUH1", locale0.toString());
      assertEquals("=PX_(Z)QAUH1", locale0.getCountry());
      assertEquals("y)gj*", locale0.getLanguage());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("y)gj*_=PX_(Z)QAUH1", locale0.toString());
      assertEquals("=PX_(Z)QAUH1", locale0.getCountry());
      assertEquals("y)gj*", locale0.getLanguage());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      String string1 = null;
      Locale locale1 = Locale.FRANCE;
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("FR", locale1.getCountry());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      String string2 = locale0.getDisplayScript(locale1);
      assertEquals("", locale0.getVariant());
      assertEquals("y)gj*_=PX_(Z)QAUH1", locale0.toString());
      assertEquals("=PX_(Z)QAUH1", locale0.getCountry());
      assertEquals("y)gj*", locale0.getLanguage());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("FR", locale1.getCountry());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", string2);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string2);
      
      String string3 = dOMNodePointer0.getNamespaceURI((String) null);
      assertEquals("", locale0.getVariant());
      assertEquals("y)gj*_=PX_(Z)QAUH1", locale0.toString());
      assertEquals("=PX_(Z)QAUH1", locale0.getCountry());
      assertEquals("y)gj*", locale0.getLanguage());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertNull(string3);
      
      HTMLBaseFontElementImpl hTMLBaseFontElementImpl0 = new HTMLBaseFontElementImpl(hTMLDocumentImpl0, "");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLBaseFontElementImpl0);
      
      QName qName0 = new QName("=PX_(z)Qauh1", "http://www.w3.org/2000/xmlns/");
      assertEquals("=PX_(z)Qauh1", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("=PX_(z)Qauh1:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertNotNull(qName0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLParagraphElementImpl0);
      
      Node node0 = hTMLParagraphElementImpl0.cloneNode(false);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotSame(hTMLParagraphElementImpl0, node0);
      assertNotSame(node0, hTMLParagraphElementImpl0);
      assertFalse(node0.equals((Object)hTMLParagraphElementImpl0));
      assertNotNull(node0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.isLeaf();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLParagraphElementImpl0);
      
      Locale locale0 = Locale.forLanguageTag("y)Gj*");
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "[x\"HM3uO&)-=n&");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      QName qName1 = new QName("wS+{0A");
      assertEquals("wS+{0A", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals("wS+{0A", qName1.getName());
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1, "Wji");
      assertEquals("wS+{0A", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals("wS+{0A", qName1.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Wji", nodeNameTest0.getNamespaceURI());
      assertEquals("wS+{0A", nodeNameTest0.toString());
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(nodeNameTest0);
      
      boolean boolean0 = dOMNodePointer0.testNode((NodeTest) nodeNameTest0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals("wS+{0A", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals("wS+{0A", qName1.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Wji", nodeNameTest0.getNamespaceURI());
      assertEquals("wS+{0A", nodeNameTest0.toString());
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean0);
      assertFalse(qName1.equals((Object)qName0));
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      
      HTMLImageElementImpl hTMLImageElementImpl0 = new HTMLImageElementImpl(hTMLDocumentImpl1, "http://www.w3.org/2000/xmlns/");
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLImageElementImpl0);
      
      HTMLDivElementImpl hTMLDivElementImpl0 = new HTMLDivElementImpl(hTMLDocumentImpl1, "Wji");
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDivElementImpl0);
      
      dOMNodePointer0.setValue(hTMLDivElementImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      
      boolean boolean1 = dOMNodePointer0.equals(nodeNameTest0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals("wS+{0A", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals("wS+{0A", qName1.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Wji", nodeNameTest0.getNamespaceURI());
      assertEquals("wS+{0A", nodeNameTest0.toString());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean1);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(qName1.equals((Object)qName0));
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.childIterator(nodeNameTest0, false, variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: null
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DocumentType documentType0 = null;
      DocumentImpl documentImpl0 = new DocumentImpl((DocumentType) null);
      assertNotNull(documentImpl0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(documentImpl0, locale0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(locale0));
      assertNotNull(linkedList0);
      
      Stream<Locale> stream0 = linkedList0.stream();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(locale0));
      assertNotNull(stream0);
      
      DocumentImpl documentImpl1 = new DocumentImpl();
      assertFalse(documentImpl1.equals((Object)documentImpl0));
      assertNotNull(documentImpl1);
      
      Locale locale1 = Locale.FRANCE;
      assertEquals("fr", locale1.getLanguage());
      assertEquals("FR", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FRA", locale1.getISO3Country());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      String string0 = dOMNodePointer0.getNamespaceURI("\"mod\"");
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNotSame(documentImpl0, documentImpl1);
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(documentImpl0.equals((Object)documentImpl1));
      assertFalse(locale0.equals((Object)locale1));
      assertNull(string0);
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLTableSectionElementImpl hTMLTableSectionElementImpl0 = new HTMLTableSectionElementImpl((HTMLDocumentImpl) null, "xml");
      assertNotNull(hTMLTableSectionElementImpl0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) null);
      assertNotNull(wMLDocumentImpl0);
      
      WMLSetvarElementImpl wMLSetvarElementImpl0 = new WMLSetvarElementImpl(wMLDocumentImpl0, "L?bnk/6G+Ty!bnb");
      assertNotNull(wMLSetvarElementImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) wMLSetvarElementImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)jXPathContextReferenceImpl0.getRelativeContext(dOMNodePointer0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotSame(documentImpl0, documentImpl1);
      assertNotSame(locale0, locale1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(documentImpl0.equals((Object)documentImpl1));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl1, (Object) null);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertNotSame(documentImpl0, documentImpl1);
      assertNotSame(locale0, locale1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(documentImpl0.equals((Object)documentImpl1));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl2);
      
      QName qName0 = new QName((String) null, "org.apache.commons.jxpath.ClassFunctions");
      assertEquals("org.apache.commons.jxpath.ClassFunctions", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ClassFunctions", qName0.toString());
      assertNotNull(qName0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.createChild((JXPathContext) jXPathContextReferenceImpl2, qName0, (-694), (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: 
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLAreaElementImpl hTMLAreaElementImpl0 = new HTMLAreaElementImpl(hTMLDocumentImpl0, "_g:pF>>+J^dKE");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLAreaElementImpl0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLAreaElementImpl0, locale0, (String) null);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLAreaElementImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      hTMLDocumentImpl0.setErrorChecking(true);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      Locale locale1 = Locale.ITALIAN;
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertEquals(1, dOMNodePointer2.getLength());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isAttribute());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer2);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals("_G:PF>>+J^DKE", qName0.toString());
      assertEquals("PF>>+J^DKE", qName0.getName());
      assertEquals("_G", qName0.getPrefix());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(qName0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("3hl");
      assertEquals("3hl", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DOMNodePointer dOMNodePointer3 = new DOMNodePointer(hTMLAreaElementImpl0, locale1);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      assertFalse(dOMNodePointer3.isContainer());
      assertTrue(dOMNodePointer3.isActual());
      assertFalse(dOMNodePointer3.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertTrue(dOMNodePointer3.isRoot());
      assertFalse(dOMNodePointer3.isAttribute());
      assertTrue(dOMNodePointer3.isNode());
      assertEquals(1, dOMNodePointer3.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer3);
      
      String string0 = locale0.getDisplayName(locale1);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("cinese (Cina)", string0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string0);
      
      QName qName1 = dOMNodePointer3.getName();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      assertFalse(dOMNodePointer3.isContainer());
      assertTrue(dOMNodePointer3.isActual());
      assertFalse(dOMNodePointer3.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertTrue(dOMNodePointer3.isRoot());
      assertFalse(dOMNodePointer3.isAttribute());
      assertTrue(dOMNodePointer3.isNode());
      assertEquals(1, dOMNodePointer3.getLength());
      assertEquals("_G:PF>>+J^DKE", qName1.toString());
      assertEquals("_G", qName1.getPrefix());
      assertEquals("PF>>+J^DKE", qName1.getName());
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer3, dOMNodePointer2);
      assertNotSame(dOMNodePointer3, dOMNodePointer0);
      assertNotSame(dOMNodePointer3, dOMNodePointer1);
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertTrue(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1, "http://www.w3.org/2000/xmlns/");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      assertFalse(dOMNodePointer3.isContainer());
      assertTrue(dOMNodePointer3.isActual());
      assertFalse(dOMNodePointer3.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertTrue(dOMNodePointer3.isRoot());
      assertFalse(dOMNodePointer3.isAttribute());
      assertTrue(dOMNodePointer3.isNode());
      assertEquals(1, dOMNodePointer3.getLength());
      assertEquals("_G:PF>>+J^DKE", qName1.toString());
      assertEquals("_G", qName1.getPrefix());
      assertEquals("PF>>+J^DKE", qName1.getName());
      assertEquals("_G:PF>>+J^DKE", nodeNameTest0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertTrue(qName1.equals((Object)qName0));
      assertNotNull(nodeNameTest0);
      
      boolean boolean0 = dOMNodePointer1.testNode((NodeTest) nodeNameTest0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      assertFalse(dOMNodePointer3.isContainer());
      assertTrue(dOMNodePointer3.isActual());
      assertFalse(dOMNodePointer3.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertTrue(dOMNodePointer3.isRoot());
      assertFalse(dOMNodePointer3.isAttribute());
      assertTrue(dOMNodePointer3.isNode());
      assertEquals(1, dOMNodePointer3.getLength());
      assertEquals("_G:PF>>+J^DKE", qName1.toString());
      assertEquals("_G", qName1.getPrefix());
      assertEquals("PF>>+J^DKE", qName1.getName());
      assertEquals("_G:PF>>+J^DKE", nodeNameTest0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer3);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer3);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer3, dOMNodePointer2);
      assertNotSame(dOMNodePointer3, dOMNodePointer0);
      assertNotSame(dOMNodePointer3, dOMNodePointer1);
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(boolean0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer3));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertTrue(qName1.equals((Object)qName0));
      
      HTMLImageElementImpl hTMLImageElementImpl0 = new HTMLImageElementImpl(hTMLDocumentImpl0, "<<unknown namespace>>");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLImageElementImpl0);
      
      dOMNodePointer0.setValue(hTMLImageElementImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer3);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      
      String string1 = locale1.getDisplayLanguage();
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      assertNotSame(locale1, locale0);
      assertEquals("Italian", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string1);
      
      Locale locale2 = Locale.forLanguageTag("vuaR]!{xD~;@!N7})");
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getLanguage());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.toString());
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = locale0.getDisplayVariant();
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertEquals("", string2);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = DOMNodePointer.testNode((Node) hTMLAreaElementImpl0, (NodeTest) processingInstructionTest0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("3hl", processingInstructionTest0.getTarget());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      DOMNodePointer dOMNodePointer4 = new DOMNodePointer(dOMNodePointer1, hTMLAreaElementImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer4.isActual());
      assertTrue(dOMNodePointer4.isNode());
      assertFalse(dOMNodePointer4.isRoot());
      assertFalse(dOMNodePointer4.isAttribute());
      assertEquals(1, dOMNodePointer4.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer4.getIndex());
      assertFalse(dOMNodePointer4.isCollection());
      assertFalse(dOMNodePointer4.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer3));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer4.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer4.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer4.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer4);
      
      String string3 = dOMNodePointer0.asPath();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer4);
      assertNotSame(dOMNodePointer0, dOMNodePointer3);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", string3);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer4));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = NodePointer.UNKNOWN_NAMESPACE;
      assertEquals("<<unknown namespace>>", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      HTMLAnchorElementImpl hTMLAnchorElementImpl0 = new HTMLAnchorElementImpl(hTMLDocumentImpl0, "");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLAnchorElementImpl0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLAnchorElementImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      QName qName0 = new QName("");
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "org.apache.commons.jxpath.ri.QName@0000000016");
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, qName0, locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertTrue(beanPointer0.isNode());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.childIterator(nodeNameTest0, true, beanPointer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.jxpath.ri.QName cannot be cast to org.w3c.dom.Node
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      hTMLDocumentImpl0.normalize();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      hTMLDocumentImpl0.setErrorChecking(false);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      Locale locale0 = new Locale(",p", "[zmCZ");
      assertEquals(",p_[ZMCZ", locale0.toString());
      assertEquals("[ZMCZ", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(",p", locale0.getLanguage());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "xml");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals(",p_[ZMCZ", locale0.toString());
      assertEquals("[ZMCZ", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(",p", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      String string0 = dOMNodePointer0.getNamespaceURI(",p");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals(",p_[ZMCZ", locale0.toString());
      assertEquals("[ZMCZ", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(",p", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(string0);
      
      HTMLBaseFontElementImpl hTMLBaseFontElementImpl0 = new HTMLBaseFontElementImpl(hTMLDocumentImpl0, "BE.a8h*&hNhO<b");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLBaseFontElementImpl0);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals(",p_[ZMCZ", locale0.toString());
      assertEquals("[ZMCZ", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(",p", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, ",p");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLParagraphElementImpl0);
      
      Node node0 = hTMLParagraphElementImpl0.cloneNode(false);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotSame(hTMLParagraphElementImpl0, node0);
      assertNotSame(node0, hTMLParagraphElementImpl0);
      assertFalse(node0.equals((Object)hTMLParagraphElementImpl0));
      assertNotNull(node0);
      
      boolean boolean0 = dOMNodePointer0.isLeaf();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals(",p_[ZMCZ", locale0.toString());
      assertEquals("[ZMCZ", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(",p", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals(",p_[ZMCZ", locale0.toString());
      assertEquals("[ZMCZ", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(",p", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      HTMLFormElement hTMLFormElement0 = hTMLParagraphElementImpl0.getForm();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotSame(hTMLParagraphElementImpl0, node0);
      assertFalse(hTMLParagraphElementImpl0.equals((Object)node0));
      assertNull(hTMLFormElement0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(variablePointer0, hTMLBaseFontElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals(",p_[ZMCZ", locale0.toString());
      assertEquals("[ZMCZ", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(",p", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      DOMNamespaceIterator dOMNamespaceIterator0 = (DOMNamespaceIterator)dOMNodePointer1.namespaceIterator();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals(",p_[ZMCZ", locale0.toString());
      assertEquals("[ZMCZ", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(",p", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(0, dOMNamespaceIterator0.getPosition());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNamespaceIterator0);
      
      String string1 = dOMNodePointer1.asPath();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals(",p_[ZMCZ", locale0.toString());
      assertEquals("[ZMCZ", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(",p", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(1, dOMNodePointer1.getLength());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("$null", string1);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(string1);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(dOMNodePointer0, hTMLParagraphElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals(1, dOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isAttribute());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isContainer());
      assertFalse(dOMNodePointer2.isRoot());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(",p_[ZMCZ", locale0.toString());
      assertEquals("[ZMCZ", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(",p", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(hTMLParagraphElementImpl0.equals((Object)node0));
      assertNotNull(dOMNodePointer2);
      
      String string2 = dOMNodePointer1.asPath();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals(",p_[ZMCZ", locale0.toString());
      assertEquals("[ZMCZ", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(",p", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(1, dOMNodePointer1.getLength());
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("$null", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(string2);
      
      DOMNodePointer dOMNodePointer3 = new DOMNodePointer(hTMLBaseFontElementImpl0, locale0, ",p");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertTrue(dOMNodePointer3.isActual());
      assertFalse(dOMNodePointer3.isCollection());
      assertTrue(dOMNodePointer3.isNode());
      assertEquals(1, dOMNodePointer3.getLength());
      assertFalse(dOMNodePointer3.isAttribute());
      assertFalse(dOMNodePointer3.isContainer());
      assertTrue(dOMNodePointer3.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertEquals(",p_[ZMCZ", locale0.toString());
      assertEquals("[ZMCZ", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(",p", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer3);
      
      boolean boolean1 = dOMNodePointer3.isLanguage("Yi&zyfn >gP");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertTrue(dOMNodePointer3.isActual());
      assertFalse(dOMNodePointer3.isCollection());
      assertTrue(dOMNodePointer3.isNode());
      assertEquals(1, dOMNodePointer3.getLength());
      assertFalse(dOMNodePointer3.isAttribute());
      assertFalse(dOMNodePointer3.isContainer());
      assertTrue(dOMNodePointer3.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertEquals(",p_[ZMCZ", locale0.toString());
      assertEquals("[ZMCZ", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(",p", locale0.getLanguage());
      assertNotSame(dOMNodePointer3, dOMNodePointer2);
      assertNotSame(dOMNodePointer3, dOMNodePointer0);
      assertNotSame(dOMNodePointer3, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean1);
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertTrue(boolean1 == boolean0);
      
      int int0 = dOMNodePointer0.compareChildNodePointers(dOMNodePointer1, dOMNodePointer2);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals(1, dOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isAttribute());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isContainer());
      assertFalse(dOMNodePointer2.isRoot());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(",p_[ZMCZ", locale0.toString());
      assertEquals("[ZMCZ", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(",p", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(1, dOMNodePointer1.getLength());
      assertNotSame(dOMNodePointer2, dOMNodePointer3);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer3);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(hTMLParagraphElementImpl0, node0);
      assertNotSame(dOMNodePointer1, dOMNodePointer3);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, int0);
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(hTMLParagraphElementImpl0.equals((Object)node0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      
      DOMNodePointer dOMNodePointer4 = new DOMNodePointer(dOMNodePointer1, (Node) null);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals(",p_[ZMCZ", locale0.toString());
      assertEquals("[ZMCZ", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(",p", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer4.isAttribute());
      assertEquals(1, dOMNodePointer4.getLength());
      assertFalse(dOMNodePointer4.isCollection());
      assertTrue(dOMNodePointer4.isActual());
      assertFalse(dOMNodePointer4.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer4.getIndex());
      assertFalse(dOMNodePointer4.isRoot());
      assertTrue(dOMNodePointer4.isNode());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer4);
      
      // Undeclared exception!
      try { 
        dOMNodePointer4.getNamespaceURI();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLAreaElementImpl hTMLAreaElementImpl0 = new HTMLAreaElementImpl(hTMLDocumentImpl0, "_g:pF>>+J^dKE");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLAreaElementImpl0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLAreaElementImpl0, locale0, (String) null);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLAreaElementImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      String string0 = dOMNodePointer1.asPath();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("/PF>>+J^DKE[1]", string0);
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(string0);
      
      String string1 = dOMNodePointer1.asPath();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("/PF>>+J^DKE[1]", string1);
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = dOMNodePointer1.isLanguage("<<unknown namespace>>");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean0);
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(documentTypeImpl0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(wMLDocumentImpl0);
      
      WMLImgElementImpl wMLImgElementImpl0 = new WMLImgElementImpl(wMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(wMLImgElementImpl0);
      
      String string2 = dOMNodePointer0.asPath();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", string2);
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(dOMNodePointer1, documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(1, dOMNodePointer2.getLength());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer2);
      
      String string3 = dOMNodePointer0.asPath();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", string3);
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      DOMNodePointer dOMNodePointer3 = new DOMNodePointer(documentTypeImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(dOMNodePointer3.isContainer());
      assertTrue(dOMNodePointer3.isRoot());
      assertFalse(dOMNodePointer3.isAttribute());
      assertFalse(dOMNodePointer3.isCollection());
      assertTrue(dOMNodePointer3.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertTrue(dOMNodePointer3.isNode());
      assertEquals(1, dOMNodePointer3.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer3);
      
      int int0 = dOMNodePointer3.compareChildNodePointers(dOMNodePointer2, dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(1, dOMNodePointer2.getLength());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isContainer());
      assertFalse(dOMNodePointer3.isContainer());
      assertTrue(dOMNodePointer3.isRoot());
      assertFalse(dOMNodePointer3.isAttribute());
      assertFalse(dOMNodePointer3.isCollection());
      assertTrue(dOMNodePointer3.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertTrue(dOMNodePointer3.isNode());
      assertEquals(1, dOMNodePointer3.getLength());
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer3);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer3);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer3);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer3, dOMNodePointer0);
      assertNotSame(dOMNodePointer3, dOMNodePointer1);
      assertNotSame(dOMNodePointer3, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, int0);
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer3));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      
      String string4 = dOMNodePointer0.getNamespaceURI();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer3);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLAreaElementImpl hTMLAreaElementImpl0 = new HTMLAreaElementImpl(hTMLDocumentImpl0, "_g:pF>>+J^dKE");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLAreaElementImpl0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLAreaElementImpl0, locale0, (String) null);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLAreaElementImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      hTMLDocumentImpl0.setErrorChecking(true);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      Locale locale1 = Locale.ITALIAN;
      assertEquals("", locale1.getCountry());
      assertEquals("it", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isRoot());
      assertEquals(1, dOMNodePointer2.getLength());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer2);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals("_G:PF>>+J^DKE", qName0.toString());
      assertEquals("_G", qName0.getPrefix());
      assertEquals("PF>>+J^DKE", qName0.getName());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertNotNull(qName0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("3hl");
      assertEquals("3hl", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DOMNodePointer dOMNodePointer3 = new DOMNodePointer(hTMLAreaElementImpl0, locale1);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale1.getCountry());
      assertEquals("it", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertTrue(dOMNodePointer3.isRoot());
      assertFalse(dOMNodePointer3.isAttribute());
      assertTrue(dOMNodePointer3.isNode());
      assertEquals(1, dOMNodePointer3.getLength());
      assertTrue(dOMNodePointer3.isActual());
      assertFalse(dOMNodePointer3.isCollection());
      assertFalse(dOMNodePointer3.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertNotNull(dOMNodePointer3);
      
      String string0 = locale0.getDisplayName(locale1);
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("it", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("cinese (Cina)", string0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string0);
      
      QName qName1 = dOMNodePointer3.getName();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale1.getCountry());
      assertEquals("it", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertTrue(dOMNodePointer3.isRoot());
      assertFalse(dOMNodePointer3.isAttribute());
      assertTrue(dOMNodePointer3.isNode());
      assertEquals(1, dOMNodePointer3.getLength());
      assertTrue(dOMNodePointer3.isActual());
      assertFalse(dOMNodePointer3.isCollection());
      assertFalse(dOMNodePointer3.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertEquals("PF>>+J^DKE", qName1.getName());
      assertEquals("_G:PF>>+J^DKE", qName1.toString());
      assertEquals("_G", qName1.getPrefix());
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer3, dOMNodePointer1);
      assertNotSame(dOMNodePointer3, dOMNodePointer0);
      assertNotSame(dOMNodePointer3, dOMNodePointer2);
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertTrue(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1, "http://www.w3.org/2000/xmlns/");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale1.getCountry());
      assertEquals("it", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertTrue(dOMNodePointer3.isRoot());
      assertFalse(dOMNodePointer3.isAttribute());
      assertTrue(dOMNodePointer3.isNode());
      assertEquals(1, dOMNodePointer3.getLength());
      assertTrue(dOMNodePointer3.isActual());
      assertFalse(dOMNodePointer3.isCollection());
      assertFalse(dOMNodePointer3.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertEquals("PF>>+J^DKE", qName1.getName());
      assertEquals("_G:PF>>+J^DKE", qName1.toString());
      assertEquals("_G", qName1.getPrefix());
      assertEquals("_G:PF>>+J^DKE", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("http://www.w3.org/2000/xmlns/", nodeNameTest0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertTrue(qName1.equals((Object)qName0));
      assertNotNull(nodeNameTest0);
      
      boolean boolean0 = dOMNodePointer1.testNode((NodeTest) nodeNameTest0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals("", locale1.getCountry());
      assertEquals("it", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertTrue(dOMNodePointer3.isRoot());
      assertFalse(dOMNodePointer3.isAttribute());
      assertTrue(dOMNodePointer3.isNode());
      assertEquals(1, dOMNodePointer3.getLength());
      assertTrue(dOMNodePointer3.isActual());
      assertFalse(dOMNodePointer3.isCollection());
      assertFalse(dOMNodePointer3.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertEquals("PF>>+J^DKE", qName1.getName());
      assertEquals("_G:PF>>+J^DKE", qName1.toString());
      assertEquals("_G", qName1.getPrefix());
      assertEquals("_G:PF>>+J^DKE", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("http://www.w3.org/2000/xmlns/", nodeNameTest0.getNamespaceURI());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer3);
      assertNotSame(dOMNodePointer1, dOMNodePointer3);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer3, dOMNodePointer1);
      assertNotSame(dOMNodePointer3, dOMNodePointer0);
      assertNotSame(dOMNodePointer3, dOMNodePointer2);
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(boolean0);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer3));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertTrue(qName1.equals((Object)qName0));
      
      HTMLImageElementImpl hTMLImageElementImpl0 = new HTMLImageElementImpl(hTMLDocumentImpl0, "<<unknown namespace>>");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLImageElementImpl0);
      
      dOMNodePointer0.setValue(hTMLImageElementImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer3);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "", (String) null, "3hl");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(documentTypeImpl0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(wMLDocumentImpl0);
      
      WMLDocumentImpl wMLDocumentImpl1 = new WMLDocumentImpl(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(wMLDocumentImpl1.equals((Object)wMLDocumentImpl0));
      assertNotNull(wMLDocumentImpl1);
      
      WMLCardElementImpl wMLCardElementImpl0 = new WMLCardElementImpl(wMLDocumentImpl0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(wMLDocumentImpl0.equals((Object)wMLDocumentImpl1));
      assertNotNull(wMLCardElementImpl0);
      
      HTMLAreaElementImpl hTMLAreaElementImpl1 = new HTMLAreaElementImpl(hTMLDocumentImpl0, "<<unknown namespace>>");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(hTMLAreaElementImpl1.equals((Object)hTMLAreaElementImpl0));
      assertNotNull(hTMLAreaElementImpl1);
      
      boolean boolean1 = dOMNodePointer2.equals(hTMLAreaElementImpl1);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isRoot());
      assertEquals(1, dOMNodePointer2.getLength());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isActual());
      assertNotSame(locale0, locale1);
      assertNotSame(hTMLAreaElementImpl1, hTMLAreaElementImpl0);
      assertNotSame(dOMNodePointer2, dOMNodePointer3);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(hTMLAreaElementImpl1.equals((Object)hTMLAreaElementImpl0));
      assertFalse(boolean1 == boolean0);
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      
      String string1 = DOMNodePointer.getLocalName(hTMLImageElementImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("<<UNKNOWN NAMESPACE>>", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      dOMNodePointer0.setValue(qName0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals("_G:PF>>+J^DKE", qName0.toString());
      assertEquals("_G", qName0.getPrefix());
      assertEquals("PF>>+J^DKE", qName0.getName());
      assertNotSame(hTMLAreaElementImpl0, hTMLAreaElementImpl1);
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer3);
      assertNotSame(qName0, qName1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLAreaElementImpl0.equals((Object)hTMLAreaElementImpl1));
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertTrue(qName0.equals((Object)qName1));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLParagraphElementImpl0);
      
      String string0 = hTMLDocumentImpl0.lookupNamespaceURI("B2x)n5yg~dR&Oud7(");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(string0);
      
      Locale locale0 = Locale.forLanguageTag("y)Gj*");
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLParagraphElementImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      Node node0 = hTMLParagraphElementImpl0.getPreviousSibling();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(node0);
      
      Locale locale1 = Locale.FRANCE;
      assertEquals("fr_FR", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("FR", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      String string1 = locale0.getDisplayScript(locale1);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("FR", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", string1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string1);
      
      String string2 = dOMNodePointer0.getNamespaceURI("y)Gj*");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertNull(string2);
      
      HTMLBaseFontElementImpl hTMLBaseFontElementImpl0 = new HTMLBaseFontElementImpl(hTMLDocumentImpl0, "");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLBaseFontElementImpl0);
      
      QName qName0 = new QName("http://www.w3.org/2000/xmlns/", "<<unknown namespace>>");
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/:<<unknown namespace>>", qName0.toString());
      assertNotNull(qName0);
      
      Node node1 = hTMLParagraphElementImpl0.cloneNode(true);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotSame(hTMLParagraphElementImpl0, node1);
      assertNotSame(node1, hTMLParagraphElementImpl0);
      assertFalse(node1.equals((Object)hTMLParagraphElementImpl0));
      assertNotNull(node1);
      
      boolean boolean0 = dOMNodePointer0.isLeaf();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertNotSame(hTMLParagraphElementImpl0, node1);
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(boolean0);
      assertFalse(hTMLParagraphElementImpl0.equals((Object)node1));
      assertFalse(locale0.equals((Object)locale1));
      
      org.apache.commons.jxpath.ri.model.NodeIterator nodeIterator0 = dOMNodePointer0.namespaceIterator();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(0, nodeIterator0.getPosition());
      assertNotSame(hTMLParagraphElementImpl0, node1);
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLParagraphElementImpl0.equals((Object)node1));
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(nodeIterator0);
      
      org.apache.commons.jxpath.ri.model.NodeIterator nodeIterator1 = dOMNodePointer0.namespaceIterator();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(0, nodeIterator1.getPosition());
      assertNotSame(hTMLParagraphElementImpl0, node1);
      assertNotSame(locale0, locale1);
      assertNotSame(nodeIterator1, nodeIterator0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLParagraphElementImpl0.equals((Object)node1));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(nodeIterator1.equals((Object)nodeIterator0));
      assertNotNull(nodeIterator1);
      
      org.apache.commons.jxpath.ri.model.NodeIterator nodeIterator2 = dOMNodePointer0.namespaceIterator();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(0, nodeIterator2.getPosition());
      assertNotSame(hTMLParagraphElementImpl0, node1);
      assertNotSame(locale0, locale1);
      assertNotSame(nodeIterator2, nodeIterator1);
      assertNotSame(nodeIterator2, nodeIterator0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLParagraphElementImpl0.equals((Object)node1));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(nodeIterator2.equals((Object)nodeIterator1));
      assertFalse(nodeIterator2.equals((Object)nodeIterator0));
      assertNotNull(nodeIterator2);
      
      String string3 = dOMNodePointer0.getDefaultNamespaceURI();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertNotSame(hTMLParagraphElementImpl0, node1);
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLParagraphElementImpl0.equals((Object)node1));
      assertFalse(locale0.equals((Object)locale1));
      assertNull(string3);
      
      Object object0 = dOMNodePointer0.getValue();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertNotSame(hTMLParagraphElementImpl0, node1);
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", object0);
      assertTrue(object0.equals((Object)string1));
      assertFalse(hTMLParagraphElementImpl0.equals((Object)node1));
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.createAttribute((JXPathContext) null, qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown namespace prefix: http://www.w3.org/2000/xmlns/
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLParagraphElementImpl0);
      
      Locale locale0 = Locale.forLanguageTag("y)Gj*");
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "[x\"HM3uO&)-=n&");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      
      HTMLOptGroupElementImpl hTMLOptGroupElementImpl0 = new HTMLOptGroupElementImpl(hTMLDocumentImpl1, "[x\"HM3uO&)-=n&");
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLOptGroupElementImpl0);
      
      String string0 = locale0.getDisplayLanguage();
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", string0);
      assertNotNull(string0);
      
      Locale locale1 = Locale.forLanguageTag("");
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = locale1.getDisplayVariant();
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertSame(locale1, locale0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = DOMNodePointer.testNode((Node) null, (NodeTest) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, (Node) null);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      // Undeclared exception!
      try { 
        dOMNodePointer1.asPath();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLAreaElementImpl hTMLAreaElementImpl0 = new HTMLAreaElementImpl(hTMLDocumentImpl0, "_g:pF>>+J^dKE");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLAreaElementImpl0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLAreaElementImpl0, locale0, (String) null);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLAreaElementImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      String string0 = dOMNodePointer1.asPath();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("/PF>>+J^DKE[1]", string0);
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(string0);
      
      String string1 = dOMNodePointer1.asPath();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("/PF>>+J^DKE[1]", string1);
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = dOMNodePointer1.isLanguage("<<unknown namespace>>");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean0);
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(documentTypeImpl0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(wMLDocumentImpl0);
      
      WMLImgElementImpl wMLImgElementImpl0 = new WMLImgElementImpl(wMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(wMLImgElementImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) wMLImgElementImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      String string2 = dOMNodePointer0.asPath();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", string2);
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(dOMNodePointer0, wMLImgElementImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isAttribute());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer2);
      
      String string3 = dOMNodePointer0.asPath();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", string3);
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean1 = dOMNodePointer1.isLanguage("UV#)JT0jp!gJ%nE(e");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean1);
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertTrue(boolean1 == boolean0);
      
      int int0 = dOMNodePointer0.compareChildNodePointers(dOMNodePointer2, dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isAttribute());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, int0);
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      
      String string4 = dOMNodePointer0.getNamespaceURI();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLParagraphElementImpl0);
      
      Locale locale0 = Locale.forLanguageTag("y)Gj*");
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLParagraphElementImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      Locale locale1 = Locale.forLanguageTag("");
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      Node node0 = hTMLParagraphElementImpl0.getPreviousSibling();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(node0);
      
      Locale locale2 = Locale.FRANCE;
      assertEquals("fr", locale2.getLanguage());
      assertEquals("fr_FR", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("FRA", locale2.getISO3Country());
      assertEquals("FR", locale2.getCountry());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      
      String string0 = locale0.getDisplayScript(locale2);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("fr_FR", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("FRA", locale2.getISO3Country());
      assertEquals("FR", locale2.getCountry());
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("", string0);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(string0);
      
      String string1 = dOMNodePointer1.getNamespaceURI("xml");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isNode());
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("http://www.w3.org/XML/1998/namespace", string1);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      HTMLBaseFontElementImpl hTMLBaseFontElementImpl0 = new HTMLBaseFontElementImpl(hTMLDocumentImpl0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLBaseFontElementImpl0);
      
      QName qName0 = dOMNodePointer1.getName();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isNode());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(qName0);
      
      Node node1 = hTMLParagraphElementImpl0.cloneNode(true);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotSame(hTMLParagraphElementImpl0, node1);
      assertNotSame(node1, hTMLParagraphElementImpl0);
      assertFalse(node1.equals((Object)hTMLParagraphElementImpl0));
      assertNotNull(node1);
      
      boolean boolean0 = dOMNodePointer0.isLeaf();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertNotSame(hTMLParagraphElementImpl0, node1);
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(boolean0);
      assertFalse(hTMLParagraphElementImpl0.equals((Object)node1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      
      org.apache.commons.jxpath.ri.model.NodeIterator nodeIterator0 = dOMNodePointer1.namespaceIterator();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(0, nodeIterator0.getPosition());
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(nodeIterator0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)72;
      QName qName1 = new QName("http://www.w3.org/2000/xmlns/", "http://www.w3.org/2000/xmlns/");
      assertEquals("http://www.w3.org/2000/xmlns/", qName1.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName1.getName());
      assertEquals("http://www.w3.org/2000/xmlns/:http://www.w3.org/2000/xmlns/", qName1.toString());
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) node1);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotSame(hTMLParagraphElementImpl0, node1);
      assertNotSame(node1, hTMLParagraphElementImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(hTMLParagraphElementImpl0.equals((Object)node1));
      assertFalse(node1.equals((Object)hTMLParagraphElementImpl0));
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) locale0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotSame(hTMLParagraphElementImpl0, node1);
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(node1, hTMLParagraphElementImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(hTMLParagraphElementImpl0.equals((Object)node1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(node1.equals((Object)hTMLParagraphElementImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = (JXPathContextReferenceImpl)jXPathContextReferenceImpl1.getParentContext();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertNotSame(hTMLParagraphElementImpl0, node1);
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(node1, hTMLParagraphElementImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(hTMLParagraphElementImpl0.equals((Object)node1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(node1.equals((Object)hTMLParagraphElementImpl0));
      assertNotNull(jXPathContextReferenceImpl2);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl3 = (JXPathContextReferenceImpl)jXPathContextReferenceImpl2.getRelativeContext(dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertFalse(jXPathContextReferenceImpl3.isLenient());
      assertNotSame(hTMLParagraphElementImpl0, node1);
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl3);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl3);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl3);
      assertSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl2);
      assertNotSame(node1, hTMLParagraphElementImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(hTMLParagraphElementImpl0.equals((Object)node1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(node1.equals((Object)hTMLParagraphElementImpl0));
      assertNotNull(jXPathContextReferenceImpl3);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.createChild((JXPathContext) jXPathContextReferenceImpl3, qName0, Integer.MIN_VALUE);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: 
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLParagraphElementImpl0);
      
      Locale locale0 = Locale.UK;
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "[x\"HM3uO&)-=n&");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      
      HTMLOptGroupElementImpl hTMLOptGroupElementImpl0 = new HTMLOptGroupElementImpl(hTMLDocumentImpl1, "[x\"HM3uO&)-=n&");
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLOptGroupElementImpl0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      String string0 = dOMNodePointer1.asPath();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("id('[x&quot;HM3uO&)-=n&')", string0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(string0);
      
      HTMLImageElementImpl hTMLImageElementImpl0 = new HTMLImageElementImpl(hTMLDocumentImpl1, "<<unknown namespace>>");
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLImageElementImpl0);
      
      String string1 = DOMNodePointer.getPrefix(hTMLImageElementImpl0);
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLParagraphElementImpl0);
      
      Locale locale0 = Locale.forLanguageTag("y)Gj*");
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLParagraphElementImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      JXPathContext jXPathContext0 = null;
      Node node0 = hTMLParagraphElementImpl0.getPreviousSibling();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(node0);
      
      QName qName0 = new QName("http://www.w3.org/2000/xmlns/");
      assertEquals("//www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http", qName0.getPrefix());
      assertNotNull(qName0);
      
      Locale locale1 = Locale.FRANCE;
      assertEquals("fr", locale1.getLanguage());
      assertEquals("FR", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr_FR", locale1.toString());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      Set<Character> set0 = locale1.getExtensionKeys();
      assertEquals("fr", locale1.getLanguage());
      assertEquals("FR", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr_FR", locale1.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(set0);
      
      String string0 = locale0.getDisplayScript(locale1);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("FR", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr_FR", locale1.toString());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", string0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string0);
      
      HTMLBaseFontElementImpl hTMLBaseFontElementImpl0 = new HTMLBaseFontElementImpl(hTMLDocumentImpl0, "");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLBaseFontElementImpl0);
      
      TypeInfo typeInfo0 = hTMLBaseFontElementImpl0.getSchemaTypeInfo();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertSame(hTMLBaseFontElementImpl0, typeInfo0);
      assertSame(typeInfo0, hTMLBaseFontElementImpl0);
      assertNotNull(typeInfo0);
      
      QName qName1 = dOMNodePointer0.getName();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals("Y)GJ*", qName1.toString());
      assertEquals("Y)GJ*", qName1.getName());
      assertNull(qName1.getPrefix());
      assertNotSame(locale0, locale1);
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      
      String string1 = hTMLParagraphElementImpl0.getTitle();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", string1);
      assertNotNull(string1);
      
      Node node1 = hTMLParagraphElementImpl0.cloneNode(true);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotSame(hTMLParagraphElementImpl0, node1);
      assertNotSame(node1, hTMLParagraphElementImpl0);
      assertFalse(node1.equals((Object)hTMLParagraphElementImpl0));
      assertNotNull(node1);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer((Node) null, locale1);
      assertEquals("fr", locale1.getLanguage());
      assertEquals("FR", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr_FR", locale1.toString());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      QName qName2 = new QName("http://www.w3.org/2000/xmlns/");
      assertEquals("http://www.w3.org/2000/xmlns/", qName2.toString());
      assertEquals("//www.w3.org/2000/xmlns/", qName2.getName());
      assertEquals("http", qName2.getPrefix());
      assertTrue(qName2.equals((Object)qName0));
      assertFalse(qName2.equals((Object)qName1));
      assertNotNull(qName2);
      
      // Undeclared exception!
      try { 
        dOMNodePointer1.attributeIterator(qName2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DocumentImpl documentImpl0 = new DocumentImpl((DocumentType) null);
      assertNotNull(documentImpl0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(documentImpl0, locale0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(locale0));
      assertNotNull(linkedList1);
      
      Stream<Locale> stream0 = linkedList1.stream();
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(locale0));
      assertNotNull(stream0);
      
      Locale locale1 = Locale.lookup(linkedList0, linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(locale0));
      assertNull(locale1);
      
      DocumentImpl documentImpl1 = new DocumentImpl();
      assertFalse(documentImpl1.equals((Object)documentImpl0));
      assertNotNull(documentImpl1);
      
      boolean boolean0 = documentImpl1.getStrictErrorChecking();
      assertNotSame(documentImpl1, documentImpl0);
      assertTrue(boolean0);
      assertFalse(documentImpl1.equals((Object)documentImpl0));
      
      String string0 = dOMNodePointer0.asPath();
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNotSame(documentImpl0, documentImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", string0);
      assertFalse(documentImpl0.equals((Object)documentImpl1));
      assertNotNull(string0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) documentImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotSame(documentImpl0, documentImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(documentImpl0.equals((Object)documentImpl1));
      assertNotNull(jXPathContextReferenceImpl0);
      
      boolean boolean1 = documentImpl1.getStandalone();
      assertNotSame(documentImpl1, documentImpl0);
      assertFalse(boolean1);
      assertFalse(documentImpl1.equals((Object)documentImpl0));
      assertFalse(boolean1 == boolean0);
      
      JXPathContext jXPathContext0 = jXPathContextReferenceImpl0.getParentContext();
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotSame(documentImpl0, documentImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(documentImpl0.equals((Object)documentImpl1));
      assertNull(jXPathContext0);
      
      Class<HTMLAreaElementImpl> class0 = HTMLAreaElementImpl.class;
      ClassFunctions classFunctions0 = new ClassFunctions(class0, ">k%Zgr1YV");
      assertNotNull(classFunctions0);
      
      jXPathContextReferenceImpl0.setFunctions(classFunctions0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotSame(documentImpl0, documentImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(documentImpl0.equals((Object)documentImpl1));
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) stream0);
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, linkedList1.size());
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(linkedList1.contains(locale0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = (JXPathContextReferenceImpl)jXPathContextReferenceImpl1.getRelativeContext(dOMNodePointer0);
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(0, linkedList1.size());
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(documentImpl0, documentImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(linkedList1.contains(locale0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(documentImpl0.equals((Object)documentImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(jXPathContextReferenceImpl2);
      
      NullPointer nullPointer0 = (NullPointer)dOMNodePointer0.getPointerByID(jXPathContextReferenceImpl0, "xml");
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isActual());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotSame(documentImpl0, documentImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(documentImpl0.equals((Object)documentImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertNotNull(nullPointer0);
      
      int int0 = dOMNodePointer0.getLength();
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNotSame(documentImpl0, documentImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(1, int0);
      assertFalse(documentImpl0.equals((Object)documentImpl1));
      
      String string1 = (String)dOMNodePointer0.getValue();
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNotSame(documentImpl0, documentImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", string1);
      assertFalse(documentImpl0.equals((Object)documentImpl1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = (String)dOMNodePointer0.getValue();
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNotSame(documentImpl0, documentImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", string2);
      assertFalse(documentImpl0.equals((Object)documentImpl1));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      String string3 = dOMNodePointer0.asPath();
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNotSame(documentImpl0, documentImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", string3);
      assertFalse(documentImpl0.equals((Object)documentImpl1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean2 = dOMNodePointer0.isLanguage("");
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNotSame(documentImpl0, documentImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(boolean2);
      assertFalse(documentImpl0.equals((Object)documentImpl1));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLParagraphElementImpl0);
      
      Locale locale0 = Locale.forLanguageTag("y)Gj*");
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLParagraphElementImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      Locale locale1 = Locale.forLanguageTag("");
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getLanguage());
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      Node node0 = hTMLParagraphElementImpl0.getPreviousSibling();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(node0);
      
      Locale locale2 = Locale.FRANCE;
      assertEquals("fr_FR", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("FR", locale2.getCountry());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("FRA", locale2.getISO3Country());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      
      String string0 = locale0.getDisplayScript(locale2);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("fr_FR", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("FR", locale2.getCountry());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("FRA", locale2.getISO3Country());
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("", string0);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(string0);
      
      String string1 = dOMNodePointer1.getNamespaceURI("xml");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("http://www.w3.org/XML/1998/namespace", string1);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      HTMLBaseFontElementImpl hTMLBaseFontElementImpl0 = new HTMLBaseFontElementImpl(hTMLDocumentImpl0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLBaseFontElementImpl0);
      
      QName qName0 = dOMNodePointer1.getName();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(qName0);
      
      Node node1 = hTMLParagraphElementImpl0.cloneNode(true);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotSame(hTMLParagraphElementImpl0, node1);
      assertNotSame(node1, hTMLParagraphElementImpl0);
      assertFalse(node1.equals((Object)hTMLParagraphElementImpl0));
      assertNotNull(node1);
      
      boolean boolean0 = dOMNodePointer0.isLeaf();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertNotSame(hTMLParagraphElementImpl0, node1);
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(boolean0);
      assertFalse(hTMLParagraphElementImpl0.equals((Object)node1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      
      org.apache.commons.jxpath.ri.model.NodeIterator nodeIterator0 = dOMNodePointer1.namespaceIterator();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(0, nodeIterator0.getPosition());
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(nodeIterator0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)72;
      String string2 = dOMNodePointer1.asPath();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", string2);
      assertFalse(locale0.equals((Object)locale2));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(string2);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(dOMNodePointer0, hTMLParagraphElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isRoot());
      assertTrue(dOMNodePointer2.isActual());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(1, dOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLParagraphElementImpl0.equals((Object)node1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer2);
      
      String string3 = dOMNodePointer2.asPath();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isRoot());
      assertTrue(dOMNodePointer2.isActual());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(1, dOMNodePointer2.getLength());
      assertNotSame(hTMLParagraphElementImpl0, node1);
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("/Y)GJ*[1]", string3);
      assertFalse(hTMLParagraphElementImpl0.equals((Object)node1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean1 = dOMNodePointer1.isLanguage("http://www.w3.org/2000/xmlns/");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean1);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(boolean1 == boolean0);
      
      int int0 = dOMNodePointer2.compareChildNodePointers(dOMNodePointer0, dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isRoot());
      assertTrue(dOMNodePointer2.isActual());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertNotSame(hTMLParagraphElementImpl0, node1);
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, int0);
      assertFalse(hTMLParagraphElementImpl0.equals((Object)node1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      
      String string4 = dOMNodePointer2.getNamespaceURI();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isRoot());
      assertTrue(dOMNodePointer2.isActual());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(1, dOMNodePointer2.getLength());
      assertNotSame(hTMLParagraphElementImpl0, node1);
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLParagraphElementImpl0.equals((Object)node1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLAreaElementImpl hTMLAreaElementImpl0 = new HTMLAreaElementImpl(hTMLDocumentImpl0, "_g:pF>>+J^dKE");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLAreaElementImpl0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      ElementDefinitionImpl elementDefinitionImpl0 = new ElementDefinitionImpl(hTMLDocumentImpl0, (String) null);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(elementDefinitionImpl0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(elementDefinitionImpl0, locale0, "htf/j");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      byte[] byteArray0 = new byte[0];
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(elementDefinitionImpl0, locale0, "http://www.w3.org/XML/1998/namespace");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer2.isNode());
      assertTrue(dOMNodePointer2.isActual());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isContainer());
      assertFalse(dOMNodePointer2.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer2);
      
      DOMNodePointer dOMNodePointer3 = new DOMNodePointer(elementDefinitionImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer3.isActual());
      assertFalse(dOMNodePointer3.isCollection());
      assertFalse(dOMNodePointer3.isContainer());
      assertTrue(dOMNodePointer3.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertFalse(dOMNodePointer3.isAttribute());
      assertTrue(dOMNodePointer3.isNode());
      assertEquals(1, dOMNodePointer3.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer3);
      
      org.apache.commons.jxpath.ri.model.NodeIterator nodeIterator0 = dOMNodePointer3.namespaceIterator();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer3.isActual());
      assertFalse(dOMNodePointer3.isCollection());
      assertFalse(dOMNodePointer3.isContainer());
      assertTrue(dOMNodePointer3.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertFalse(dOMNodePointer3.isAttribute());
      assertTrue(dOMNodePointer3.isNode());
      assertEquals(1, dOMNodePointer3.getLength());
      assertEquals(0, nodeIterator0.getPosition());
      assertNotSame(dOMNodePointer3, dOMNodePointer0);
      assertNotSame(dOMNodePointer3, dOMNodePointer2);
      assertNotSame(dOMNodePointer3, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertNotNull(nodeIterator0);
      
      org.apache.commons.jxpath.ri.model.NodeIterator nodeIterator1 = dOMNodePointer2.namespaceIterator();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer2.isNode());
      assertTrue(dOMNodePointer2.isActual());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isContainer());
      assertFalse(dOMNodePointer2.isCollection());
      assertEquals(0, nodeIterator1.getPosition());
      assertNotSame(dOMNodePointer2, dOMNodePointer3);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(nodeIterator1, nodeIterator0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer3));
      assertFalse(nodeIterator1.equals((Object)nodeIterator0));
      assertNotNull(nodeIterator1);
      
      String string0 = dOMNodePointer1.getDefaultNamespaceURI();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer3);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer3);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertNull(string0);
      
      Object object0 = dOMNodePointer1.getValue();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer3);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer3);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", object0);
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertNotNull(object0);
      
      String string1 = dOMNodePointer2.getDefaultNamespaceURI();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer2.isNode());
      assertTrue(dOMNodePointer2.isActual());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isContainer());
      assertFalse(dOMNodePointer2.isCollection());
      assertNotSame(dOMNodePointer2, dOMNodePointer3);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer3));
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLDocumentImpl0);
      
      hTMLDocumentImpl0.normalize();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      HTMLDocumentImpl hTMLDocumentImpl1 = (HTMLDocumentImpl)hTMLDocumentImpl0.cloneNode(false);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      
      HTMLCollection hTMLCollection0 = hTMLDocumentImpl0.getAnchors();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(hTMLCollection0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl1, (Locale) null, "K7N_z2x;7T\ry$q~");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(dOMNodePointer0);
      
      dOMNodePointer0.setNamespaceResolver((NamespaceResolver) null);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      
      String string0 = dOMNodePointer0.getNamespaceURI();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNull(string0);
      
      String string1 = DOMNodePointer.getPrefix(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNull(string1);
      
      boolean boolean0 = dOMNodePointer0.isLeaf();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      
      boolean boolean1 = dOMNodePointer0.isLeaf();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean1);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLScriptElementImpl hTMLScriptElementImpl0 = new HTMLScriptElementImpl(hTMLDocumentImpl0, "");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLScriptElementImpl0);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = (HTMLDocumentImpl)hTMLScriptElementImpl0.getOwnerDocument();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotNull(hTMLDocumentImpl1);
      
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl(true);
      assertNotNull(coreDocumentImpl0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2272);
      assertEquals(2272, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      QName qName0 = new QName("b.|&;R0*sUf|A3>,", (String) null);
      assertEquals("b.|&;R0*sUf|A3>,:null", qName0.toString());
      assertEquals("b.|&;R0*sUf|A3>,", qName0.getPrefix());
      assertNull(qName0.getName());
      assertNotNull(qName0);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(coreDocumentImpl0, "b.|&;R0*sUf|A3>,");
      assertNotNull(documentTypeImpl0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNotNull(wMLDocumentImpl0);
      
      WMLTdElementImpl wMLTdElementImpl0 = new WMLTdElementImpl(wMLDocumentImpl0, "node()");
      assertNotNull(wMLTdElementImpl0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals("b.|&;R0*sUf|A3>,:null", qName0.toString());
      assertEquals("b.|&;R0*sUf|A3>,", qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      String string0 = locale0.toLanguageTag();
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", string0);
      assertNotNull(string0);
      
      String string1 = nodeTypeTest0.toString();
      assertEquals(2272, nodeTypeTest0.getNodeType());
      assertEquals("UNKNOWN()", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = nodeTypeTest0.toString();
      assertEquals(2272, nodeTypeTest0.getNodeType());
      assertEquals("UNKNOWN()", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      Locale locale1 = Locale.CHINA;
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      String string3 = locale0.getDisplayLanguage();
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotSame(locale0, locale1);
      assertEquals("Italian", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(string3);
      
      Locale locale2 = Locale.forLanguageTag("http");
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("http", locale2.getLanguage());
      assertEquals("http", locale2.toString());
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      
      String[] stringArray1 = Locale.getISOLanguages();
      assertNotSame(stringArray1, stringArray0);
      assertEquals(188, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string4 = locale0.getDisplayVariant();
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertNotNull(string4);
      
      boolean boolean0 = DOMNodePointer.testNode((Node) coreDocumentImpl0, (NodeTest) nodeTypeTest0);
      assertEquals(2272, nodeTypeTest0.getNodeType());
      assertFalse(boolean0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, hTMLScriptElementImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertFalse(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals("b.|&;R0*sUf|A3>,:null", qName0.toString());
      assertEquals("b.|&;R0*sUf|A3>,", qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      String string5 = dOMNodePointer0.asPath();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertFalse(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals("b.|&;R0*sUf|A3>,:null", qName0.toString());
      assertEquals("b.|&;R0*sUf|A3>,", qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("$b.|&;R0*sUf|A3>,:null", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String string6 = DOMNodePointer.getPrefix(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLParagraphElementImpl0);
      
      Locale locale0 = Locale.forLanguageTag("y)Gj*");
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLParagraphElementImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-10);
      byteArray0[7] = (byte)94;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-100), (byte) (-69), (byte) (-45), (byte)0, (byte) (-96), (byte)1, (byte) (-10), (byte)94}, byteArray0);
      assertFalse(boolean0);
      
      Locale locale1 = Locale.forLanguageTag("");
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      Node node0 = hTMLParagraphElementImpl0.getPreviousSibling();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(node0);
      
      Locale locale2 = Locale.FRANCE;
      assertEquals("", locale2.getVariant());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("FR", locale2.getCountry());
      assertEquals("fr_FR", locale2.toString());
      assertEquals("FRA", locale2.getISO3Country());
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      
      String string0 = dOMNodePointer1.getNamespaceURI("xml");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isActual());
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("http://www.w3.org/XML/1998/namespace", string0);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(string0);
      
      QName qName0 = dOMNodePointer1.getName();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isActual());
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(qName0);
      
      Node node1 = hTMLParagraphElementImpl0.cloneNode(true);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotSame(hTMLParagraphElementImpl0, node1);
      assertNotSame(node1, hTMLParagraphElementImpl0);
      assertFalse(node1.equals((Object)hTMLParagraphElementImpl0));
      assertNotNull(node1);
      
      boolean boolean1 = dOMNodePointer0.isLeaf();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNotSame(hTMLParagraphElementImpl0, node1);
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(boolean1);
      assertFalse(hTMLParagraphElementImpl0.equals((Object)node1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(boolean1 == boolean0);
      
      org.apache.commons.jxpath.ri.model.NodeIterator nodeIterator0 = dOMNodePointer1.namespaceIterator();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals(0, nodeIterator0.getPosition());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isActual());
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(nodeIterator0);
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)91;
      byteArray1[1] = (byte) (-68);
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(dOMNodePointer0, hTMLParagraphElementImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer2.isActual());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isContainer());
      assertFalse(dOMNodePointer2.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(hTMLParagraphElementImpl0.equals((Object)node1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer2);
      
      String string1 = dOMNodePointer1.asPath();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isActual());
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", string1);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertNotNull(string1);
      
      String string2 = dOMNodePointer0.asPath();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNotSame(hTMLParagraphElementImpl0, node1);
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", string2);
      assertFalse(hTMLParagraphElementImpl0.equals((Object)node1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean2 = dOMNodePointer2.isLanguage("xml");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer2.isActual());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isContainer());
      assertFalse(dOMNodePointer2.isCollection());
      assertNotSame(hTMLParagraphElementImpl0, node1);
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean2);
      assertFalse(hTMLParagraphElementImpl0.equals((Object)node1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertNotNull(variablePointer0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer1.compareChildNodePointers(variablePointer0, dOMNodePointer2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: null
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLAreaElementImpl hTMLAreaElementImpl0 = new HTMLAreaElementImpl(hTMLDocumentImpl0, "_g:pF>>+J^dKE");
      Locale locale0 = Locale.PRC;
      ElementDefinitionImpl elementDefinitionImpl0 = new ElementDefinitionImpl(hTMLDocumentImpl0, (String) null);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(elementDefinitionImpl0, locale0, "htf/j");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Vector<Locale> vector0 = new Vector<Locale>();
      Locale.lookup(linkedList0, vector0);
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(elementDefinitionImpl0, (Locale) null, "&quot;");
      dOMNodePointer1.namespaceIterator();
      dOMNodePointer0.namespaceIterator();
      XMLErrorReporter xMLErrorReporter0 = new XMLErrorReporter();
      xMLErrorReporter0.getLocale();
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(hTMLAreaElementImpl0, (Locale) null, "<<unknown namespace>>");
      dOMNodePointer2.getDefaultNamespaceURI();
      dOMNodePointer1.getValue();
      String string0 = dOMNodePointer1.getDefaultNamespaceURI();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      hTMLDocumentImpl0.normalize();
      hTMLDocumentImpl0.setErrorChecking(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Locale locale0 = Locale.ITALIAN;
      HTMLButtonElementImpl hTMLButtonElementImpl0 = new HTMLButtonElementImpl(hTMLDocumentImpl0, "Cannot remove root DOM node");
      hTMLButtonElementImpl0.getForm();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, "");
      // Undeclared exception!
      try { 
        dOMNodePointer0.remove();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLFontElementImpl hTMLFontElementImpl0 = new HTMLFontElementImpl(hTMLDocumentImpl0, "summary");
      DOMNodePointer.getPrefix(hTMLFontElementImpl0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLFontElementImpl0, locale0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) hTMLFontElementImpl0);
      JXPathContext jXPathContext1 = jXPathContext0.getRelativeContext(dOMNodePointer0);
      JXPathContext jXPathContext2 = jXPathContext1.getParentContext();
      QName qName0 = new QName("<<unknown namespace>>");
      // Undeclared exception!
      try { 
        dOMNodePointer0.createAttribute(jXPathContext2, qName0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // DOM002 Illegal character
         //
         verifyException("org.apache.xerces.dom.CoreDocumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      Locale locale0 = Locale.forLanguageTag("y)Gj*");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLParagraphElementImpl0, locale0);
      Locale locale1 = Locale.forLanguageTag("");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      hTMLParagraphElementImpl0.getPreviousSibling();
      Locale locale2 = Locale.FRANCE;
      locale0.getDisplayScript(locale2);
      dOMNodePointer1.getNamespaceURI("xml");
      HTMLBaseFontElementImpl hTMLBaseFontElementImpl0 = new HTMLBaseFontElementImpl(hTMLDocumentImpl0, "y)Gj*");
      dOMNodePointer1.getName();
      hTMLParagraphElementImpl0.cloneNode(true);
      dOMNodePointer0.isLeaf();
      dOMNodePointer1.namespaceIterator();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)7;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(hTMLParagraphElementImpl0, locale1, "http://www.w3.org/XML/1998/namespace");
      dOMNodePointer2.namespaceIterator();
      dOMNodePointer0.namespaceIterator();
      dOMNodePointer2.getDefaultNamespaceURI();
      dOMNodePointer1.getValue();
      String string0 = dOMNodePointer2.getDefaultNamespaceURI();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLScriptElementImpl hTMLScriptElementImpl0 = new HTMLScriptElementImpl(hTMLDocumentImpl0, "");
      Document document0 = hTMLScriptElementImpl0.getOwnerDocument();
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl(true);
      JXPathContext.newContext((Object) coreDocumentImpl0);
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      hTMLDocumentImpl1.setErrorChecking(false);
      Locale locale0 = Locale.ITALIAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl1, locale0);
      QName qName0 = dOMNodePointer0.getName();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("http://www.w3.org/XML/1998/namespace");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "http://www.w3.org/2000/xmlns/");
      boolean boolean0 = dOMNodePointer0.testNode((NodeTest) nodeNameTest0);
      HTMLImageElementImpl hTMLImageElementImpl0 = new HTMLImageElementImpl(hTMLDocumentImpl0, "xml");
      dOMNodePointer0.setValue(hTMLDocumentImpl1);
      HTMLStyleElementImpl hTMLStyleElementImpl0 = new HTMLStyleElementImpl(hTMLDocumentImpl0, "");
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(coreDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      wMLDocumentImpl0.createElement("<<unknown namespace>>");
      WMLDocumentImpl wMLDocumentImpl1 = new WMLDocumentImpl(documentTypeImpl0);
      WMLCardElementImpl wMLCardElementImpl0 = new WMLCardElementImpl(wMLDocumentImpl1, "<<unknown namespace>>");
      boolean boolean1 = dOMNodePointer0.equals(wMLCardElementImpl0);
      assertTrue(boolean1 == boolean0);
      
      String string0 = DOMNodePointer.getLocalName(document0);
      assertNotNull(string0);
      assertEquals("#document", string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLAreaElementImpl hTMLAreaElementImpl0 = new HTMLAreaElementImpl(hTMLDocumentImpl0, "_g:pF>>+J^dKE");
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      Locale locale0 = Locale.JAPANESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLAreaElementImpl0, locale0);
      QName qName0 = dOMNodePointer0.getName();
      Object object0 = dOMNodePointer0.getNodeValue();
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, object0, locale0);
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(nodePointer0, hTMLAreaElementImpl0);
      dOMNodePointer1.getBaseValue();
      HTMLHRElementImpl hTMLHRElementImpl0 = new HTMLHRElementImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(dOMNodePointer1, hTMLHRElementImpl0);
      dOMNodePointer2.setValue(object0);
      hTMLHRElementImpl0.getForm();
      QName qName1 = new QName("q^9tcOgkY&WT", "<<unknown namespace>>");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLAreaElementImpl0, (NodeTest) nodeNameTest0);
      assertTrue(boolean0);
      
      dOMNodePointer2.isCollection();
      DOMNodePointer.getPrefix(hTMLAreaElementImpl0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "q^9tcOgkY&WT");
      jXPathContext0.getParentContext();
      dOMNodePointer1.getPointerByID((JXPathContext) null, "http://www.w3.org/2000/xmlns/");
      assertEquals("_G:PF>>+J^DKE", qName0.toString());
      assertEquals("PF>>+J^DKE", qName0.getName());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLAreaElementImpl hTMLAreaElementImpl0 = new HTMLAreaElementImpl(hTMLDocumentImpl0, "_g:pF>>+J^dKE");
      Locale locale0 = Locale.PRC;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLAreaElementImpl0, locale0, (String) null);
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLAreaElementImpl0);
      dOMNodePointer1.asPath();
      dOMNodePointer1.asPath();
      dOMNodePointer1.isLanguage("<<unknown namespace>>");
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      WMLImgElementImpl wMLImgElementImpl0 = new WMLImgElementImpl(wMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) wMLImgElementImpl0);
      QName qName0 = new QName("saow", "jH>GgwK{");
      // Undeclared exception!
      try { 
        dOMNodePointer1.createChild(jXPathContext0, qName0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: /PF>>+J^DKE[1]
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      hTMLDocumentImpl0.normalize();
      HTMLDocumentImpl hTMLDocumentImpl1 = (HTMLDocumentImpl)hTMLDocumentImpl0.cloneNode(false);
      hTMLDocumentImpl0.getAnchors();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl1, (Locale) null, "K7N_z2x;7T\ry$q~");
      QName qName0 = dOMNodePointer0.getName();
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      HTMLDocumentImpl hTMLDocumentImpl2 = new HTMLDocumentImpl();
      HTMLOptGroupElementImpl hTMLOptGroupElementImpl0 = new HTMLOptGroupElementImpl(hTMLDocumentImpl1, "K7N_z2x;7T\ry$q~");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLOptGroupElementImpl0);
      HTMLLIElementImpl hTMLLIElementImpl0 = new HTMLLIElementImpl(hTMLDocumentImpl2, "xml");
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) hTMLLIElementImpl0);
      dOMNodePointer1.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) null);
      HTMLStyleElementImpl hTMLStyleElementImpl0 = new HTMLStyleElementImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      boolean boolean0 = dOMNodePointer1.equals(variablePointer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
      pSVIDocumentImpl0.createElementNS("", "", "");
      Locale locale0 = Locale.forLanguageTag("");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(pSVIDocumentImpl0, locale0);
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      hTMLParagraphElementImpl0.getPreviousSibling();
      Locale locale1 = Locale.FRANCE;
      locale1.getDisplayScript(locale0);
      dOMNodePointer0.getNamespaceURI("");
      HTMLBaseFontElementImpl hTMLBaseFontElementImpl0 = null;
      try {
        hTMLBaseFontElementImpl0 = new HTMLBaseFontElementImpl(hTMLDocumentImpl0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.html.dom.HTMLElementImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = null;
      Locale locale0 = Locale.UK;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, "(");
      Locale.getISOLanguages();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-286));
      QName qName0 = new QName("c~_", "<<unknown namespace>>");
      NodePointer.newNodePointer(qName0, (Object) null, locale0);
      locale0.toLanguageTag();
      nodeTypeTest0.toString();
      nodeTypeTest0.toString();
      Locale locale1 = Locale.CHINA;
      locale1.getDisplayLanguage();
      // Undeclared exception!
      try { 
        DOMNodePointer.getPrefix((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DocumentImpl documentImpl0 = new DocumentImpl((DocumentType) null);
      Locale locale0 = Locale.CANADA_FRENCH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(documentImpl0, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Stream<Locale> stream0 = linkedList1.stream();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      Locale.lookup(linkedList0, linkedList1);
      DocumentImpl documentImpl1 = new DocumentImpl();
      documentImpl1.getStrictErrorChecking();
      dOMNodePointer0.asPath();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) documentImpl0);
      documentImpl1.getStandalone();
      jXPathContext0.getParentContext();
      Class<HTMLAreaElementImpl> class0 = HTMLAreaElementImpl.class;
      ClassFunctions classFunctions0 = new ClassFunctions(class0, ">k%Zgr1YV");
      jXPathContext0.setFunctions(classFunctions0);
      JXPathContext jXPathContext1 = JXPathContext.newContext((JXPathContext) null, (Object) stream0);
      jXPathContext1.getRelativeContext(dOMNodePointer0);
      dOMNodePointer0.getPointerByID(jXPathContext0, "xml");
      dOMNodePointer0.getLength();
      dOMNodePointer0.getValue();
      dOMNodePointer0.getValue();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      dOMNodePointer0.testNode((NodeTest) nodeTypeTest0);
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLImageElementImpl hTMLImageElementImpl0 = new HTMLImageElementImpl(hTMLDocumentImpl0, ">k%Zgr1YV");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLDocumentImpl0, (Locale) null, (String) null);
      dOMNodePointer1.setValue(documentImpl1);
      boolean boolean0 = dOMNodePointer1.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLAreaElementImpl hTMLAreaElementImpl0 = new HTMLAreaElementImpl(hTMLDocumentImpl0, "_g:pF>>+J^dKE");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode1);
      Locale locale0 = Locale.JAPANESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLAreaElementImpl0, locale0);
      QName qName0 = dOMNodePointer0.getName();
      Object object0 = dOMNodePointer0.getNodeValue();
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, object0, locale0);
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(nodePointer0, hTMLAreaElementImpl0);
      dOMNodePointer1.getBaseValue();
      HTMLHRElementImpl hTMLHRElementImpl0 = new HTMLHRElementImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(dOMNodePointer1, hTMLHRElementImpl0);
      dOMNodePointer2.setValue(object0);
      hTMLHRElementImpl0.getForm();
      QName qName1 = new QName("q^9tcOgkY&WT", "<<unknown namespace>>");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      DOMNodePointer.testNode((Node) hTMLAreaElementImpl0, (NodeTest) nodeNameTest0);
      dOMNodePointer2.isCollection();
      dOMNodePointer0.getBaseValue();
      // Undeclared exception!
      try { 
        DOMNodePointer.getNamespaceURI((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      Locale locale0 = Locale.forLanguageTag("y)Gj*");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "[x\"HM3uO&)-=n&");
      QName qName0 = dOMNodePointer0.getName();
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      HTMLOptGroupElementImpl hTMLOptGroupElementImpl0 = new HTMLOptGroupElementImpl(hTMLDocumentImpl1, "[x\"HM3uO&)-=n&");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLDocumentImpl1);
      HTMLStyleElementImpl hTMLStyleElementImpl0 = new HTMLStyleElementImpl((HTMLDocumentImpl) null, "<<unknown namespace>>");
      boolean boolean0 = dOMNodePointer1.equals(dOMNodePointer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLScriptElementImpl hTMLScriptElementImpl0 = new HTMLScriptElementImpl(hTMLDocumentImpl0, "xml");
      HTMLDocumentImpl hTMLDocumentImpl1 = (HTMLDocumentImpl)hTMLScriptElementImpl0.getOwnerDocument();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) hTMLScriptElementImpl0);
      BasicVariables basicVariables0 = (BasicVariables)jXPathContextReferenceImpl0.getVariables();
      hTMLDocumentImpl0.setErrorChecking(true);
      Locale locale0 = Locale.ITALIAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLScriptElementImpl0, locale0);
      QName qName0 = dOMNodePointer0.getName();
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("http://www.w3.org/XML/1998/namespace");
      dOMNodePointer0.testNode((NodeTest) processingInstructionTest0);
      HTMLImageElementImpl hTMLImageElementImpl0 = new HTMLImageElementImpl(hTMLDocumentImpl1, "xml");
      dOMNodePointer0.setValue("xml");
      String string0 = DOMNodePointer.XML_NAMESPACE_URI;
      assertEquals("http://www.w3.org/XML/1998/namespace", string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl(2);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool0 = new CachingParserPool.ShadowedGrammarPool(xMLGrammarPoolImpl0);
      DOMBuilderImpl dOMBuilderImpl0 = new DOMBuilderImpl(symbolTable0, cachingParserPool_ShadowedGrammarPool0);
      DOMInputSourceImpl dOMInputSourceImpl0 = new DOMInputSourceImpl();
      dOMBuilderImpl0.parse((DOMInputSource) dOMInputSourceImpl0);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, (Locale) null);
      dOMNodePointer0.getNamespaceResolver();
      Object object0 = dOMNodePointer0.getBaseValue();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = null;
      Locale locale0 = Locale.UK;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, "(");
      Locale.getISOLanguages();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-286));
      QName qName0 = new QName("c~_", "<<unknown namespace>>");
      NodePointer.newNodePointer(qName0, (Object) null, locale0);
      locale0.toLanguageTag();
      nodeTypeTest0.toString();
      nodeTypeTest0.toString();
      Locale locale1 = Locale.CHINA;
      locale1.getDisplayLanguage();
      Locale.forLanguageTag("UNKNOWN()");
      Locale.getISOLanguages();
      locale1.getDisplayVariant();
      // Undeclared exception!
      try { 
        DOMNodePointer.testNode((Node) null, (NodeTest) nodeTypeTest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLScriptElementImpl hTMLScriptElementImpl0 = new HTMLScriptElementImpl(hTMLDocumentImpl0, "");
      HTMLDocumentImpl hTMLDocumentImpl1 = (HTMLDocumentImpl)hTMLScriptElementImpl0.getOwnerDocument();
      JXPathContext.newContext((Object) hTMLScriptElementImpl0);
      hTMLDocumentImpl0.setErrorChecking(true);
      Locale locale0 = Locale.ITALIAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLScriptElementImpl0, locale0);
      QName qName0 = dOMNodePointer0.getName();
      assertEquals("", qName0.toString());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("http://www.w3.org/XML/1998/namespace");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = dOMNodePointer0.testNode((NodeTest) processingInstructionTest0);
      HTMLImageElementImpl hTMLImageElementImpl0 = new HTMLImageElementImpl(hTMLDocumentImpl1, "xml");
      dOMNodePointer0.setValue(hTMLDocumentImpl0);
      HTMLStyleElementImpl hTMLStyleElementImpl0 = new HTMLStyleElementImpl(hTMLDocumentImpl1, "xml");
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      wMLDocumentImpl0.createElement("http://www.w3.org/XML/1998/namespace");
      WMLCardElementImpl wMLCardElementImpl0 = new WMLCardElementImpl(wMLDocumentImpl0, "u1P^");
      boolean boolean1 = dOMNodePointer0.equals(wMLCardElementImpl0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      Locale locale0 = Locale.forLanguageTag("y)Gj*");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLParagraphElementImpl0, locale0);
      hTMLParagraphElementImpl0.getPreviousSibling();
      Locale locale1 = Locale.FRANCE;
      String string0 = locale0.getDisplayScript(locale1);
      dOMNodePointer0.getNamespaceURI("y)Gj*");
      HTMLBaseFontElementImpl hTMLBaseFontElementImpl0 = new HTMLBaseFontElementImpl(hTMLDocumentImpl0, "");
      dOMNodePointer0.getName();
      hTMLParagraphElementImpl0.cloneNode(true);
      dOMNodePointer0.isLeaf();
      dOMNodePointer0.namespaceIterator();
      dOMNodePointer0.namespaceIterator();
      dOMNodePointer0.namespaceIterator();
      dOMNodePointer0.getDefaultNamespaceURI();
      Object object0 = dOMNodePointer0.getValue();
      assertTrue(object0.equals((Object)string0));
      
      String string1 = dOMNodePointer0.getDefaultNamespaceURI();
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      hTMLDocumentImpl0.normalize();
      Node node0 = hTMLDocumentImpl0.cloneNode(false);
      hTMLDocumentImpl0.getAnchors();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(node0, (Locale) null, "K7N_z2x;7T\ry$q~");
      QName qName0 = new QName("K7N_z2x;7T\ry$q~", (String) null);
      EntityImpl entityImpl0 = new EntityImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      NodePointer.newNodePointer(qName0, entityImpl0, (Locale) null);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      locale0.toLanguageTag();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      nodeTypeTest0.toString();
      nodeTypeTest0.toString();
      Locale locale1 = Locale.CHINA;
      locale0.getDisplayLanguage();
      Locale locale2 = Locale.forLanguageTag("zh-CN");
      Locale.getISOLanguages();
      locale0.getDisplayVariant();
      Locale locale3 = Locale.JAPANESE;
      locale3.getDisplayVariant(locale0);
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLDocumentImpl0, locale2);
      boolean boolean0 = dOMNodePointer1.testNode((NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = null;
      Locale locale0 = Locale.UK;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, "(");
      Locale.getISOLanguages();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-286));
      dOMNodePointer0.setNamespaceResolver((NamespaceResolver) null);
      // Undeclared exception!
      try { 
        dOMNodePointer0.getNamespaceURI();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      Locale locale0 = Locale.forLanguageTag("y)Gj*");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLParagraphElementImpl0, locale0);
      JXPathContext jXPathContext0 = null;
      hTMLParagraphElementImpl0.getPreviousSibling();
      QName qName0 = new QName("http://www.w3.org/2000/xmlns/");
      Locale locale1 = Locale.FRANCE;
      locale0.getDisplayScript(locale1);
      dOMNodePointer0.getNamespaceURI("y)Gj*");
      HTMLBaseFontElementImpl hTMLBaseFontElementImpl0 = new HTMLBaseFontElementImpl(hTMLDocumentImpl0, "");
      hTMLBaseFontElementImpl0.getSchemaTypeInfo();
      dOMNodePointer0.getName();
      hTMLParagraphElementImpl0.getTitle();
      hTMLParagraphElementImpl0.cloneNode(true);
      dOMNodePointer0.attributeIterator(qName0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.createChild((JXPathContext) null, qName0, 2115, (Object) hTMLBaseFontElementImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      String string0 = "org.apache.wml.dom.WMLHeadElementImpl";
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, "org.apache.wml.dom.WMLHeadElementImpl");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, (Node) null);
      dOMNodePointer1.getDefaultNamespaceURI();
      JXPathContext jXPathContext0 = null;
      QName qName0 = new QName("<<unknown namespace>>", "5pViLhQj@K:tXxQPk");
      // Undeclared exception!
      try { 
        dOMNodePointer1.createAttribute((JXPathContext) null, qName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      hTMLDocumentImpl0.normalize();
      Node node0 = hTMLDocumentImpl0.cloneNode(false);
      hTMLDocumentImpl0.getAnchors();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(node0, (Locale) null, "K7N_z2x;7T\ry$q~");
      dOMNodePointer0.setNamespaceResolver((NamespaceResolver) null);
      dOMNodePointer0.getNamespaceURI();
      String string0 = DOMNodePointer.getPrefix(node0);
      assertNull(string0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLDocumentImpl0);
      String string1 = dOMNodePointer1.getNamespaceURI("xmlns");
      assertNotNull(string1);
      assertEquals("http://www.w3.org/2000/xmlns/", string1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DocumentType documentType0 = null;
      DocumentImpl documentImpl0 = new DocumentImpl((DocumentType) null);
      Locale locale0 = Locale.CANADA_FRENCH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(documentImpl0, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Stream<Locale> stream0 = linkedList1.stream();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      Locale.lookup(linkedList0, linkedList1);
      DocumentImpl documentImpl1 = new DocumentImpl();
      documentImpl1.getStrictErrorChecking();
      dOMNodePointer0.asPath();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) documentImpl0);
      documentImpl1.getStandalone();
      jXPathContext0.getParentContext();
      Class<HTMLAreaElementImpl> class0 = HTMLAreaElementImpl.class;
      String string0 = ">k%Zgr1YV";
      ClassFunctions classFunctions0 = new ClassFunctions(class0, ">k%Zgr1YV");
      jXPathContext0.setFunctions(classFunctions0);
      JXPathContext jXPathContext1 = JXPathContext.newContext((JXPathContext) null, (Object) stream0);
      jXPathContext1.getRelativeContext(dOMNodePointer0);
      dOMNodePointer0.getPointerByID(jXPathContext0, "xml");
      dOMNodePointer0.getLength();
      dOMNodePointer0.getValue();
      dOMNodePointer0.getValue();
      // Undeclared exception!
      try { 
        dOMNodePointer0.createAttribute((JXPathContext) null, (QName) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot create an attribute for path /@null, operation is not allowed for this type of node
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      String string0 = "Z)sMd96";
      HTMLTableRowElementImpl hTMLTableRowElementImpl0 = new HTMLTableRowElementImpl(hTMLDocumentImpl0, "Z)sMd96");
      hTMLDocumentImpl0.isSupported("Z)sMd96", "");
      hTMLDocumentImpl0.importNode(hTMLTableRowElementImpl0, true);
      String string1 = "<[%K(/o`:/1nd*QJHP";
      HTMLLIElementImpl hTMLLIElementImpl0 = new HTMLLIElementImpl(hTMLDocumentImpl0, "<[%K(/o`:/1nd*QJHP");
      QName qName0 = new QName("<[%K(/o`:/1nd*QJHP");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      variablePointer0.namespacePointer("<<unknown namespace>>");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, hTMLDocumentImpl0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.isLanguage("<[%K(/o`:/1nd*QJHP");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      Locale locale0 = Locale.forLanguageTag("y)Gj*");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "[x\"HM3uO&)-=n&");
      QName qName0 = dOMNodePointer0.getName();
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      HTMLOptGroupElementImpl hTMLOptGroupElementImpl0 = new HTMLOptGroupElementImpl(hTMLDocumentImpl1, "[x\"HM3uO&)-=n&");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLDocumentImpl1);
      String string0 = dOMNodePointer0.getNamespaceURI("C45ORFBR>TL:");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      hTMLDocumentImpl0.normalize();
      Node node0 = hTMLDocumentImpl0.cloneNode(false);
      hTMLDocumentImpl0.getAnchors();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(node0, (Locale) null, "K7N_z2x;7T\ry$q~");
      dOMNodePointer0.setNamespaceResolver((NamespaceResolver) null);
      dOMNodePointer0.getNamespaceURI();
      DOMNodePointer.getPrefix(node0);
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLDocumentImpl0);
      dOMNodePointer1.getNamespaceResolver();
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer((Node) null, (Locale) null);
      dOMNodePointer2.getImmediateNode();
      dOMNodePointer2.hashCode();
      QName qName0 = new QName("K9;nC", "http://www.w3.org/2000/xmlns/");
      org.apache.commons.jxpath.ri.model.NodeIterator nodeIterator0 = dOMNodePointer0.attributeIterator(qName0);
      assertEquals(0, nodeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLScriptElementImpl hTMLScriptElementImpl0 = new HTMLScriptElementImpl(hTMLDocumentImpl0, "");
      HTMLDocumentImpl hTMLDocumentImpl1 = (HTMLDocumentImpl)hTMLScriptElementImpl0.getOwnerDocument();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) hTMLScriptElementImpl0);
      BasicVariables basicVariables0 = (BasicVariables)jXPathContextReferenceImpl0.getVariables();
      hTMLDocumentImpl0.setErrorChecking(true);
      Locale locale0 = Locale.ITALIAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLScriptElementImpl0, locale0);
      QName qName0 = dOMNodePointer0.getName();
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("http://www.w3.org/XML/1998/namespace");
      dOMNodePointer0.testNode((NodeTest) processingInstructionTest0);
      HTMLImageElementImpl hTMLImageElementImpl0 = new HTMLImageElementImpl(hTMLDocumentImpl1, "xml");
      dOMNodePointer0.setValue("");
      HTMLStyleElementImpl hTMLStyleElementImpl0 = null;
      try {
        hTMLStyleElementImpl0 = new HTMLStyleElementImpl(hTMLDocumentImpl0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.html.dom.HTMLElementImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTableRowElementImpl hTMLTableRowElementImpl0 = new HTMLTableRowElementImpl(hTMLDocumentImpl0, "Z)sMd96");
      HTMLAreaElementImpl hTMLAreaElementImpl0 = new HTMLAreaElementImpl(hTMLDocumentImpl0, "xml:lang");
      Locale locale0 = Locale.PRC;
      XMLErrorReporter xMLErrorReporter0 = new XMLErrorReporter();
      xMLErrorReporter0.getLocale();
      hTMLTableRowElementImpl0.getChOff();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, (Locale) null, "xml:lang");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLTableRowElementImpl0);
      dOMNodePointer1.asPath();
      dOMNodePointer1.asPath();
      // Undeclared exception!
      try { 
        dOMNodePointer1.isLanguage("org.apache.html.dom.HTMLTableCellElementImpl");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTableRowElementImpl hTMLTableRowElementImpl0 = new HTMLTableRowElementImpl(hTMLDocumentImpl0, "Z)sMd96");
      hTMLDocumentImpl0.isSupported("xml:lang", "");
      hTMLDocumentImpl0.importNode(hTMLTableRowElementImpl0, true);
      HTMLLIElementImpl hTMLLIElementImpl0 = new HTMLLIElementImpl(hTMLDocumentImpl0, "<[%K(/o`:/1nd*QJHP");
      String string0 = DOMNodePointer.getPrefix(hTMLLIElementImpl0);
      assertEquals("<[%K(/O`", string0);
      assertNotNull(string0);
      
      hTMLLIElementImpl0.getElementsByTagName("prompt");
      Locale locale0 = Locale.KOREA;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLTableRowElementImpl0, locale0, "<[%K(/O`");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLTableRowElementImpl0);
      DOMNodePointer.getNamespaceURI((Node) hTMLDocumentImpl0);
      int int0 = dOMNodePointer0.getLength();
      assertEquals(1, int0);
      
      boolean boolean0 = dOMNodePointer1.equals(locale0);
      assertFalse(boolean0);
      
      dOMNodePointer0.isLanguage("2;j!0sj");
      dOMNodePointer0.namespacePointer("\"node\"");
      assertEquals(1, dOMNodePointer0.getLength());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DocumentType documentType0 = null;
      DocumentImpl documentImpl0 = new DocumentImpl((DocumentType) null);
      Locale locale0 = Locale.CANADA_FRENCH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(documentImpl0, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      linkedList1.stream();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      documentImpl0.getElementsByTagNameNS("<<unknown namespace>>", "http://www.w3.org/2000/xmlns/");
      Locale.lookup(linkedList0, list0);
      documentImpl0.getStrictErrorChecking();
      dOMNodePointer0.asPath();
      JXPathContext.newContext((Object) dOMNodePointer0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.namespaceIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNamespaceIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLAreaElementImpl hTMLAreaElementImpl0 = new HTMLAreaElementImpl(hTMLDocumentImpl0, "_g:pF>>+J^dKE");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode1);
      Locale.lookup(linkedList0, list1);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLAreaElementImpl0, (Locale) null);
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLDocumentImpl0);
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) null);
      wMLDocumentImpl0.getDocumentElement();
      DOMNodePointer.getNamespaceURI((Node) hTMLAreaElementImpl0);
      dOMNodePointer1.namespaceIterator();
      dOMNodePointer0.namespacePointer("<<unknown namespace>>");
      dOMNodePointer0.getName();
      Locale locale0 = Locale.KOREA;
      locale0.clone();
      dOMNodePointer1.compareChildNodePointers(dOMNodePointer0, dOMNodePointer0);
      dOMNodePointer0.getDefaultNamespaceURI();
      DOMNodePointer.testNode((Node) null, (NodeTest) null);
      dOMNodePointer1.asPath();
      String string0 = DOMNodePointer.getPrefix(hTMLDocumentImpl0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
      Element element0 = pSVIDocumentImpl0.createElementNS("", "", "");
      DOMNodePointer.getPrefix(element0);
      pSVIDocumentImpl0.appendChild(element0);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(element0, (Locale) null);
      dOMNodePointer0.getBaseValue();
      HTMLHRElementImpl hTMLHRElementImpl0 = new HTMLHRElementImpl((HTMLDocumentImpl) null, "vs1]wx");
      dOMNodePointer0.setValue(hTMLHRElementImpl0);
      hTMLHRElementImpl0.getForm();
      QName qName0 = new QName("s5e8a:L4VcfJk^", "V#=r*'sS[,Z%");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      // Undeclared exception!
      try { 
        DOMNodePointer.testNode((Node) hTMLHRElementImpl0, (NodeTest) nodeNameTest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      AttrNSImpl attrNSImpl0 = new AttrNSImpl();
      attrNSImpl0.getReadOnly();
      Locale locale0 = Locale.GERMANY;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(attrNSImpl0, locale0, "");
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      Vector<Locale.LanguageRange> vector1 = new Vector<Locale.LanguageRange>(vector0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>(linkedList0);
      linkedList1.add("E=K4bdk)2fZ:M5&");
      Locale.lookupTag(vector1, linkedList1);
      QName qName0 = dOMNodePointer0.getName();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "http://www.w3.org/XML/1998/namespace");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, attrNSImpl0);
      dOMNodePointer1.getValuePointer();
      dOMNodePointer0.childIterator(nodeNameTest0, true, dOMNodePointer1);
      dOMNodePointer0.namespacePointer("<<unknown namespace>>");
      // Undeclared exception!
      try { 
        dOMNodePointer1.getNamespaceURI();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.xerces.dom.AttrNSImpl cannot be cast to org.w3c.dom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      QName qName0 = new QName("", "");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLOptGroupElementImpl hTMLOptGroupElementImpl0 = new HTMLOptGroupElementImpl(hTMLDocumentImpl0, "/S%$?e}Fy2>K2^R)");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, hTMLOptGroupElementImpl0);
      String string0 = dOMNodePointer0.getNamespaceURI("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      hTMLDocumentImpl0.normalize();
      Node node0 = hTMLDocumentImpl0.cloneNode(false);
      hTMLDocumentImpl0.getAnchors();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(node0, (Locale) null, "K7N_z2x;7T\ry$q~");
      dOMNodePointer0.setNamespaceResolver((NamespaceResolver) null);
      dOMNodePointer0.getNamespaceURI();
      String string0 = DOMNodePointer.getPrefix(node0);
      assertNull(string0);
      
      boolean boolean0 = dOMNodePointer0.testNode((NodeTest) null);
      HTMLImageElementImpl hTMLImageElementImpl0 = new HTMLImageElementImpl(hTMLDocumentImpl0, "h:OJ#w|FifWG");
      dOMNodePointer0.setValue(hTMLImageElementImpl0);
      boolean boolean1 = dOMNodePointer0.equals((Object) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      Locale locale0 = Locale.forLanguageTag("y)Gj*");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "[x\"HM3uO&)-=n&");
      dOMNodePointer0.getName();
      NamespaceResolver namespaceResolver0 = dOMNodePointer0.getNamespaceResolver();
      dOMNodePointer0.setNamespaceResolver(namespaceResolver0);
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "Vwj<5a");
      dOMNodePointer1.getNamespaceURI();
      DOMNodePointer.getPrefix(hTMLDocumentImpl0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      dOMNodePointer1.isLanguage("Vwj<5a");
      HTMLImageElementImpl hTMLImageElementImpl0 = new HTMLImageElementImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      DocumentFragmentImpl documentFragmentImpl0 = new DocumentFragmentImpl();
      // Undeclared exception!
      try { 
        dOMNodePointer1.setValue(documentFragmentImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.dom.NodeImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "y)Gj*");
      Locale locale0 = Locale.forLanguageTag("y)Gj*");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLParagraphElementImpl0, locale0);
      JXPathContext jXPathContext0 = null;
      hTMLParagraphElementImpl0.getPreviousSibling();
      QName qName0 = new QName("http://www.w3.org/2000/xmlns/");
      Locale locale1 = Locale.FRANCE;
      locale0.getDisplayScript(locale1);
      dOMNodePointer0.getNamespaceURI("y)Gj*");
      HTMLBaseFontElementImpl hTMLBaseFontElementImpl0 = new HTMLBaseFontElementImpl(hTMLDocumentImpl0, "");
      hTMLBaseFontElementImpl0.getSchemaTypeInfo();
      dOMNodePointer0.getName();
      hTMLParagraphElementImpl0.cloneNode(true);
      // Undeclared exception!
      try { 
        dOMNodePointer0.createChild((JXPathContext) null, qName0, 2115, (Object) hTMLBaseFontElementImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl(true);
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(coreDocumentImpl0, "3<7gD$n`k5");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      WMLPElementImpl wMLPElementImpl0 = new WMLPElementImpl(wMLDocumentImpl0, (String) null);
      Locale locale0 = Locale.ENGLISH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(wMLPElementImpl0, locale0);
      dOMNodePointer0.asPath();
      String string0 = dOMNodePointer0.getDefaultNamespaceURI();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      EntityImpl entityImpl0 = new EntityImpl((CoreDocumentImpl) null, "Yys__&AYO,Yxd");
      Locale locale0 = new Locale("]", "", "");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(entityImpl0, locale0, "]");
      QName qName0 = new QName("http://www.w3.org/2000/xmlns/", "{t6x8XUl_`");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      boolean boolean0 = dOMNodePointer0.testNode((NodeTest) nodeNameTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLScriptElementImpl hTMLScriptElementImpl0 = new HTMLScriptElementImpl(hTMLDocumentImpl0, "");
      hTMLScriptElementImpl0.getOwnerDocument();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) hTMLScriptElementImpl0);
      Variables variables0 = jXPathContext0.getVariables();
      hTMLDocumentImpl0.setErrorChecking(true);
      Locale locale0 = Locale.ITALIAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLScriptElementImpl0, locale0);
      QName qName0 = dOMNodePointer0.getName();
      VariablePointer variablePointer0 = new VariablePointer(variables0, qName0);
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(variablePointer0, hTMLDocumentImpl0);
      NamespaceResolver namespaceResolver0 = dOMNodePointer1.getNamespaceResolver();
      assertNotNull(namespaceResolver0);
      
      dOMNodePointer1.getImmediateNode();
      dOMNodePointer0.hashCode();
      dOMNodePointer1.attributeIterator(qName0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLScriptElementImpl hTMLScriptElementImpl0 = new HTMLScriptElementImpl(hTMLDocumentImpl0, "+S4zw!8aIzKf2^7;(Uz");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLScriptElementImpl0, (Locale) null, "");
      dOMNodePointer0.setNamespaceResolver((NamespaceResolver) null);
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "", "", "Qab&3]U-*11b6S1W");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      wMLDocumentImpl0.setUserData((Object) hTMLDocumentImpl0);
      WMLRefreshElementImpl wMLRefreshElementImpl0 = new WMLRefreshElementImpl(wMLDocumentImpl0, "U@-qn\"V1,3ig!8[");
      wMLRefreshElementImpl0.getPrefix();
      hTMLScriptElementImpl0.isEqualNode(wMLDocumentImpl0);
      dOMNodePointer0.setValue(wMLRefreshElementImpl0);
      dOMNodePointer0.isActual();
      // Undeclared exception!
      try { 
        dOMNodePointer0.remove();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot remove root DOM node
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node node0 = null;
      Locale locale0 = Locale.UK;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, "(");
      Locale.getISOLanguages();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-286));
      String string0 = "c~_";
      QName qName0 = new QName("c~_", "<<unknown namespace>>");
      NodePointer.newNodePointer(qName0, (Object) null, locale0);
      nodeTypeTest0.toString();
      nodeTypeTest0.toString();
      Locale locale1 = Locale.CHINA;
      locale1.getDisplayLanguage();
      Locale.forLanguageTag("UNKNOWN()");
      locale1.getDisplayVariant();
      locale0.getDisplayVariant(locale1);
      // Undeclared exception!
      try { 
        dOMNodePointer0.testNode((NodeTest) nodeTypeTest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      QName qName0 = new QName("noshade");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      variablePointer0.namespacePointer("noshade");
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTableRowElementImpl hTMLTableRowElementImpl0 = new HTMLTableRowElementImpl(hTMLDocumentImpl0, "");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, hTMLTableRowElementImpl0);
      String string0 = dOMNodePointer0.getDefaultNamespaceURI();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl0, ",~}BMG4x19qjK~oC?");
      HTMLElement hTMLElement0 = hTMLTableElementImpl0.insertRow((-883));
      Locale locale0 = Locale.GERMANY;
      locale0.getUnicodeLocaleKeys();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLElement0, locale0);
      Locale locale1 = locale0.stripExtensions();
      Locale.forLanguageTag("<<unknown namespace>>");
      locale0.getDisplayScript(locale1);
      dOMNodePointer0.getLanguage();
      dOMNodePointer0.namespacePointer(",~}BMG4x19qjK~oC?");
      dOMNodePointer0.hashCode();
      String string0 = DOMNodePointer.findEnclosingAttribute(hTMLElement0, "text");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = null;
      Locale locale0 = Locale.ENGLISH;
      String string0 = ":V0dG8F:#]rwp<";
      locale0.getUnicodeLocaleAttributes();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, ":V0dG8F:#]rwp<");
      dOMNodePointer0.asPath();
      dOMNodePointer0.hashCode();
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTableCellElementImpl hTMLTableCellElementImpl0 = new HTMLTableCellElementImpl(hTMLDocumentImpl0, "<<unknown namespace>>");
      dOMNodePointer0.getRootNode();
      JXPathContext.newContext((Object) hTMLTableCellElementImpl0);
      hTMLTableCellElementImpl0.getForm();
      // Undeclared exception!
      try { 
        dOMNodePointer0.getName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLAnchorElementImpl hTMLAnchorElementImpl0 = new HTMLAnchorElementImpl(hTMLDocumentImpl0, "");
      String string0 = "";
      hTMLAnchorElementImpl0.getAttributeNode("");
      // Undeclared exception!
      try { 
        DOMNodePointer.getLocalName((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }
}
