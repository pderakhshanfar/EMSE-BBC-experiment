/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:55:07 GMT 2020
 */

package org.apache.commons.jxpath.ri.model.dom;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Vector;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.apache.commons.jxpath.ri.model.beans.NullPointer;
import org.apache.commons.jxpath.ri.model.dom.DOMAttributePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNamespaceIterator;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.ri.model.dom.NamespacePointer;
import org.apache.html.dom.HTMLAppletElementImpl;
import org.apache.html.dom.HTMLBaseElementImpl;
import org.apache.html.dom.HTMLBaseFontElementImpl;
import org.apache.html.dom.HTMLBodyElementImpl;
import org.apache.html.dom.HTMLButtonElementImpl;
import org.apache.html.dom.HTMLDirectoryElementImpl;
import org.apache.html.dom.HTMLDocumentImpl;
import org.apache.html.dom.HTMLFontElementImpl;
import org.apache.html.dom.HTMLFormElementImpl;
import org.apache.html.dom.HTMLFrameElementImpl;
import org.apache.html.dom.HTMLFrameSetElementImpl;
import org.apache.html.dom.HTMLHRElementImpl;
import org.apache.html.dom.HTMLHeadElementImpl;
import org.apache.html.dom.HTMLHeadingElementImpl;
import org.apache.html.dom.HTMLIFrameElementImpl;
import org.apache.html.dom.HTMLImageElementImpl;
import org.apache.html.dom.HTMLInputElementImpl;
import org.apache.html.dom.HTMLIsIndexElementImpl;
import org.apache.html.dom.HTMLLIElementImpl;
import org.apache.html.dom.HTMLLabelElementImpl;
import org.apache.html.dom.HTMLMapElementImpl;
import org.apache.html.dom.HTMLMenuElementImpl;
import org.apache.html.dom.HTMLOListElementImpl;
import org.apache.html.dom.HTMLObjectElementImpl;
import org.apache.html.dom.HTMLOptionElementImpl;
import org.apache.html.dom.HTMLParamElementImpl;
import org.apache.html.dom.HTMLQuoteElementImpl;
import org.apache.html.dom.HTMLScriptElementImpl;
import org.apache.html.dom.HTMLSelectElementImpl;
import org.apache.html.dom.HTMLStyleElementImpl;
import org.apache.html.dom.HTMLTableCaptionElementImpl;
import org.apache.html.dom.HTMLTableCellElementImpl;
import org.apache.html.dom.HTMLTableColElementImpl;
import org.apache.html.dom.HTMLTableElementImpl;
import org.apache.html.dom.HTMLTableSectionElementImpl;
import org.apache.html.dom.HTMLTextAreaElementImpl;
import org.apache.wml.dom.WMLBigElementImpl;
import org.apache.wml.dom.WMLDocumentImpl;
import org.apache.wml.dom.WMLElementImpl;
import org.apache.wml.dom.WMLGoElementImpl;
import org.apache.wml.dom.WMLIElementImpl;
import org.apache.wml.dom.WMLMetaElementImpl;
import org.apache.wml.dom.WMLNoopElementImpl;
import org.apache.wml.dom.WMLOptionElementImpl;
import org.apache.wml.dom.WMLPostfieldElementImpl;
import org.apache.wml.dom.WMLPrevElementImpl;
import org.apache.wml.dom.WMLSmallElementImpl;
import org.apache.wml.dom.WMLTableElementImpl;
import org.apache.wml.dom.WMLTimerElementImpl;
import org.apache.wml.dom.WMLUElementImpl;
import org.apache.xerces.dom.AttrNSImpl;
import org.apache.xerces.dom.CDATASectionImpl;
import org.apache.xerces.dom.CommentImpl;
import org.apache.xerces.dom.CoreDocumentImpl;
import org.apache.xerces.dom.DeferredDocumentImpl;
import org.apache.xerces.dom.DocumentFragmentImpl;
import org.apache.xerces.dom.DocumentImpl;
import org.apache.xerces.dom.DocumentTypeImpl;
import org.apache.xerces.dom.ElementDefinitionImpl;
import org.apache.xerces.dom.ElementImpl;
import org.apache.xerces.dom.EntityImpl;
import org.apache.xerces.dom.EntityReferenceImpl;
import org.apache.xerces.dom.PSVIAttrNSImpl;
import org.apache.xerces.dom.PSVIDocumentImpl;
import org.apache.xerces.dom.PSVIElementNSImpl;
import org.apache.xerces.dom.ProcessingInstructionImpl;
import org.apache.xerces.dom.TextImpl;
import org.apache.xerces.dom.events.MutationEventImpl;
import org.apache.xerces.dom3.DOMConfiguration;
import org.apache.xerces.impl.XML11EntityScanner;
import org.apache.xerces.impl.XMLErrorReporter;
import org.apache.xerces.parsers.StandardParserConfiguration;
import org.apache.xerces.util.MessageFormatter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.CDATASection;
import org.w3c.dom.Comment;
import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.DocumentType;
import org.w3c.dom.Element;
import org.w3c.dom.EntityReference;
import org.w3c.dom.Node;
import org.w3c.dom.ProcessingInstruction;
import org.w3c.dom.Text;
import org.w3c.dom.html.HTMLCollection;
import org.w3c.dom.html.HTMLElement;
import org.w3c.dom.html.HTMLFormElement;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DOMNodePointer_ESTest extends DOMNodePointer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      
      Locale locale1 = new Locale("THEAD", "THEAD");
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("thead_THEAD", locale1.toString());
      assertEquals("thead", locale1.getLanguage());
      assertEquals("THEAD", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale1, "THEAD");
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("thead_THEAD", locale1.toString());
      assertEquals("thead", locale1.getLanguage());
      assertEquals("THEAD", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = dOMNodePointer0.getNamespaceURI("THEAD");
      assertFalse(locale1.equals((Object)locale0));
      assertNull(string0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("thead_THEAD", locale1.toString());
      assertEquals("thead", locale1.getLanguage());
      assertEquals("THEAD", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(locale1, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = dOMNodePointer0.getName();
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(qName0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("thead_THEAD", locale1.toString());
      assertEquals("thead", locale1.getLanguage());
      assertEquals("THEAD", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNotSame(locale1, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      PSVIElementNSImpl pSVIElementNSImpl0 = new PSVIElementNSImpl(hTMLDocumentImpl0, "DocType", "http://www.w3.org/XML/1998/namespace", (String) null);
      assertNotNull(pSVIElementNSImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      DOMNodePointer dOMNodePointer1 = (DOMNodePointer)NodePointer.newChildNodePointer(dOMNodePointer0, qName0, pSVIElementNSImpl0);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("thead_THEAD", locale1.toString());
      assertEquals("thead", locale1.getLanguage());
      assertEquals("THEAD", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Locale locale2 = Locale.CANADA;
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertEquals("en_CA", locale2.toString());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("en", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("CA", locale2.getCountry());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
      assertNotNull(pSVIDocumentImpl0);
      
      Locale locale3 = Locale.CHINA;
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale0));
      assertNotNull(locale3);
      assertEquals("CN", locale3.getCountry());
      assertEquals("zh", locale3.getLanguage());
      assertEquals("zho", locale3.getISO3Language());
      assertEquals("zh_CN", locale3.toString());
      assertEquals("CHN", locale3.getISO3Country());
      assertEquals("", locale3.getVariant());
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale0);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(pSVIDocumentImpl0, locale3, "G");
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer2);
      assertEquals("CN", locale3.getCountry());
      assertEquals("zh", locale3.getLanguage());
      assertEquals("zho", locale3.getISO3Language());
      assertEquals("zh_CN", locale3.toString());
      assertEquals("CHN", locale3.getISO3Country());
      assertEquals("", locale3.getVariant());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isAttribute());
      assertTrue(dOMNodePointer2.isNode());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName1 = dOMNodePointer1.getName();
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale3));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("thead_THEAD", locale1.toString());
      assertEquals("thead", locale1.getLanguage());
      assertEquals("THEAD", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName1.toString());
      assertEquals("http", qName1.getPrefix());
      assertEquals("//www.w3.org/XML/1998/namespace", qName1.getName());
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale3);
      assertNotSame(locale1, locale2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(qName0, qName1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale3));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(nodeNameTest0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("thead_THEAD", locale1.toString());
      assertEquals("thead", locale1.getLanguage());
      assertEquals("THEAD", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName1.toString());
      assertEquals("http", qName1.getPrefix());
      assertEquals("//www.w3.org/XML/1998/namespace", qName1.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("http://www.w3.org/XML/1998/namespace", nodeNameTest0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean1 = DOMNodePointer.testNode((Node) pSVIElementNSImpl0, (NodeTest) nodeNameTest0);
      assertFalse(boolean1 == boolean0);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale3));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(boolean1);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("thead_THEAD", locale1.toString());
      assertEquals("thead", locale1.getLanguage());
      assertEquals("THEAD", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName1.toString());
      assertEquals("http", qName1.getPrefix());
      assertEquals("//www.w3.org/XML/1998/namespace", qName1.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("http://www.w3.org/XML/1998/namespace", nodeNameTest0.toString());
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale3);
      assertNotSame(locale1, locale2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(qName0, qName1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      int int0 = NodePointer.WHOLE_COLLECTION;
      assertEquals(Integer.MIN_VALUE, int0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.setValue(qName1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(false);
      assertNotNull(deferredDocumentImpl0);
      
      CommentImpl commentImpl0 = new CommentImpl(deferredDocumentImpl0, "H6-|)NqL|4%{");
      assertNotNull(commentImpl0);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = Locale.KOREA;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("KR", locale1.getCountry());
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("ko", locale1.getLanguage());
      assertNotSame(locale1, locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(deferredDocumentImpl0, locale1, "id(");
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(dOMNodePointer0);
      assertEquals("", locale1.getVariant());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("KR", locale1.getCountry());
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("ko", locale1.getLanguage());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean0 = dOMNodePointer0.isRoot();
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(boolean0);
      assertEquals("", locale1.getVariant());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("KR", locale1.getCountry());
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("ko", locale1.getLanguage());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNotSame(locale1, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      int int0 = dOMNodePointer0.getLength();
      assertFalse(locale1.equals((Object)locale0));
      assertEquals(1, int0);
      assertEquals("", locale1.getVariant());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("KR", locale1.getCountry());
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("ko", locale1.getLanguage());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNotSame(locale1, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("<<unknown namespace>>");
      assertNotNull(processingInstructionTest0);
      assertEquals("<<unknown namespace>>", processingInstructionTest0.getTarget());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      assertNotNull(nodeTypeTest0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      
      String string0 = nodeTypeTest0.toString();
      assertNotNull(string0);
      assertEquals("node()", string0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      
      boolean boolean1 = DOMNodePointer.testNode((Node) commentImpl0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, nodeTypeTest0.getNodeType());
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      HTMLDocumentImpl hTMLDocumentImpl1 = (HTMLDocumentImpl)hTMLDocumentImpl0.cloneNode(true);
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      
      DocumentFragmentImpl documentFragmentImpl0 = new DocumentFragmentImpl();
      assertNotNull(documentFragmentImpl0);
      
      String string1 = DOMNodePointer.getLocalName(hTMLDocumentImpl1);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("#document", string1);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      
      DocumentFragmentImpl documentFragmentImpl1 = new DocumentFragmentImpl();
      assertFalse(documentFragmentImpl1.equals((Object)documentFragmentImpl0));
      assertNotNull(documentFragmentImpl1);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLDocumentImpl0, locale1);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(dOMNodePointer1);
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals("", locale1.getVariant());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("KR", locale1.getCountry());
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("ko", locale1.getLanguage());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.getValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      
      HTMLFrameSetElementImpl hTMLFrameSetElementImpl0 = new HTMLFrameSetElementImpl(hTMLDocumentImpl0, "attribute::");
      assertNotNull(hTMLFrameSetElementImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "G:24nuaV=W(IY#=?d");
      assertNotNull(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNotNull(wMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(wMLDocumentImpl0, locale0, "codebase");
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = hTMLFrameSetElementImpl0.getNodeName();
      assertNotNull(string0);
      assertEquals("ATTRIBUTE::", string0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLFrameSetElementImpl0);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(wMLDocumentImpl0, locale0);
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer2);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(1, dOMNodePointer2.getLength());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer3 = new DOMNodePointer(documentTypeImpl0, locale0, "<<unknown namespace>>");
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer3);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertTrue(dOMNodePointer3.isActual());
      assertFalse(dOMNodePointer3.isCollection());
      assertFalse(dOMNodePointer3.isContainer());
      assertTrue(dOMNodePointer3.isRoot());
      assertFalse(dOMNodePointer3.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertEquals(1, dOMNodePointer3.getLength());
      assertTrue(dOMNodePointer3.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer4 = new DOMNodePointer(hTMLFrameSetElementImpl0, locale0, "<<unknown namespace>>");
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer3));
      assertTrue(dOMNodePointer4.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer4);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertFalse(dOMNodePointer4.isContainer());
      assertTrue(dOMNodePointer4.isRoot());
      assertFalse(dOMNodePointer4.isAttribute());
      assertFalse(dOMNodePointer4.isCollection());
      assertEquals(1, dOMNodePointer4.getLength());
      assertTrue(dOMNodePointer4.isNode());
      assertTrue(dOMNodePointer4.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer4.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      int int0 = dOMNodePointer2.compareChildNodePointers(dOMNodePointer3, dOMNodePointer1);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer4));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer4));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer4));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer4));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertEquals((-1), int0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(1, dOMNodePointer2.getLength());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer3.isActual());
      assertFalse(dOMNodePointer3.isCollection());
      assertFalse(dOMNodePointer3.isContainer());
      assertTrue(dOMNodePointer3.isRoot());
      assertFalse(dOMNodePointer3.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertEquals(1, dOMNodePointer3.getLength());
      assertTrue(dOMNodePointer3.isNode());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer4);
      assertNotSame(dOMNodePointer0, dOMNodePointer3);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer3);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer4);
      assertNotSame(dOMNodePointer2, dOMNodePointer4);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer3);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer3, dOMNodePointer2);
      assertNotSame(dOMNodePointer3, dOMNodePointer0);
      assertNotSame(dOMNodePointer3, dOMNodePointer4);
      assertNotSame(dOMNodePointer3, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer5 = new DOMNodePointer(documentTypeImpl0, locale0, "LH])");
      assertFalse(dOMNodePointer5.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer5.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer5.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer5.equals((Object)dOMNodePointer4));
      assertFalse(dOMNodePointer5.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer5);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertTrue(dOMNodePointer5.isActual());
      assertFalse(dOMNodePointer5.isCollection());
      assertTrue(dOMNodePointer5.isNode());
      assertEquals(1, dOMNodePointer5.getLength());
      assertFalse(dOMNodePointer5.isAttribute());
      assertFalse(dOMNodePointer5.isContainer());
      assertTrue(dOMNodePointer5.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer5.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      int int1 = dOMNodePointer4.compareChildNodePointers(dOMNodePointer0, dOMNodePointer3);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer4));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer5));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer5));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer4));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer3));
      assertTrue(dOMNodePointer4.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer5));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer3.isActual());
      assertFalse(dOMNodePointer3.isCollection());
      assertFalse(dOMNodePointer3.isContainer());
      assertTrue(dOMNodePointer3.isRoot());
      assertFalse(dOMNodePointer3.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertEquals(1, dOMNodePointer3.getLength());
      assertTrue(dOMNodePointer3.isNode());
      assertFalse(dOMNodePointer4.isContainer());
      assertTrue(dOMNodePointer4.isRoot());
      assertFalse(dOMNodePointer4.isAttribute());
      assertFalse(dOMNodePointer4.isCollection());
      assertEquals(1, dOMNodePointer4.getLength());
      assertTrue(dOMNodePointer4.isNode());
      assertTrue(dOMNodePointer4.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer4.getIndex());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer4);
      assertNotSame(dOMNodePointer0, dOMNodePointer3);
      assertNotSame(dOMNodePointer0, dOMNodePointer5);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer3, dOMNodePointer2);
      assertNotSame(dOMNodePointer3, dOMNodePointer0);
      assertNotSame(dOMNodePointer3, dOMNodePointer4);
      assertNotSame(dOMNodePointer3, dOMNodePointer5);
      assertNotSame(dOMNodePointer3, dOMNodePointer1);
      assertNotSame(dOMNodePointer4, dOMNodePointer1);
      assertNotSame(dOMNodePointer4, dOMNodePointer2);
      assertNotSame(dOMNodePointer4, dOMNodePointer3);
      assertNotSame(dOMNodePointer4, dOMNodePointer0);
      assertNotSame(dOMNodePointer4, dOMNodePointer5);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      
      Locale locale1 = new Locale("THEAD", "THEAD");
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("thead_THEAD", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("thead", locale1.getLanguage());
      assertEquals("THEAD", locale1.getCountry());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale1, "THEAD");
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("thead_THEAD", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("thead", locale1.getLanguage());
      assertEquals("THEAD", locale1.getCountry());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = dOMNodePointer0.getNamespaceURI("THEAD");
      assertFalse(locale1.equals((Object)locale0));
      assertNull(string0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("thead_THEAD", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("thead", locale1.getLanguage());
      assertEquals("THEAD", locale1.getCountry());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertNotSame(locale1, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = dOMNodePointer0.getName();
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(qName0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("thead_THEAD", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("thead", locale1.getLanguage());
      assertEquals("THEAD", locale1.getCountry());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotSame(locale1, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      PSVIElementNSImpl pSVIElementNSImpl0 = new PSVIElementNSImpl(hTMLDocumentImpl0, "DocType", "http://www.w3.org/XML/1998/namespace", (String) null);
      assertNotNull(pSVIElementNSImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      DOMNodePointer dOMNodePointer1 = (DOMNodePointer)NodePointer.newChildNodePointer(dOMNodePointer0, qName0, pSVIElementNSImpl0);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("thead_THEAD", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("thead", locale1.getLanguage());
      assertEquals("THEAD", locale1.getCountry());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      
      HTMLQuoteElementImpl hTMLQuoteElementImpl0 = new HTMLQuoteElementImpl(hTMLDocumentImpl1, "<");
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLQuoteElementImpl0);
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      
      DOMNodePointer dOMNodePointer2 = (DOMNodePointer)NodePointer.newNodePointer(qName0, hTMLDocumentImpl0, locale1);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer2);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("thead_THEAD", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("thead", locale1.getLanguage());
      assertEquals("THEAD", locale1.getCountry());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(1, dOMNodePointer2.getLength());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      hTMLDocumentImpl0.setActualEncoding("<<unknown namespace>>");
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      
      int int0 = dOMNodePointer0.compareChildNodePointers(dOMNodePointer1, dOMNodePointer0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertEquals(0, int0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("thead_THEAD", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("thead", locale1.getLanguage());
      assertEquals("THEAD", locale1.getCountry());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLFormElementImpl hTMLFormElementImpl0 = new HTMLFormElementImpl(hTMLDocumentImpl1, "http://www.w3.org/XML/1998/namespace");
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLFormElementImpl0);
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      
      String string1 = dOMNodePointer2.asPath();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("thead_THEAD", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("thead", locale1.getLanguage());
      assertEquals("THEAD", locale1.getCountry());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(1, dOMNodePointer2.getLength());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      dOMNodePointer1.createChild((JXPathContext) jXPathContextReferenceImpl0, qName0, Integer.MIN_VALUE);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      MutationEventImpl mutationEventImpl0 = new MutationEventImpl();
      assertNotNull(mutationEventImpl0);
      assertTrue(mutationEventImpl0.bubbles);
      assertFalse(mutationEventImpl0.initialized);
      assertFalse(mutationEventImpl0.stopPropagation);
      assertEquals((short)0, mutationEventImpl0.eventPhase);
      assertFalse(mutationEventImpl0.preventDefault);
      assertEquals((short)0, mutationEventImpl0.attrChange);
      assertFalse(mutationEventImpl0.cancelable);
      
      QName qName0 = new QName("\"text\"");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("\"text\"", qName0.getName());
      assertEquals("\"text\"", qName0.toString());
      
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, (String) null, (String) null);
      assertNotNull(processingInstructionImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, processingInstructionImpl0);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      int int0 = NodePointer.WHOLE_COLLECTION;
      assertEquals(Integer.MIN_VALUE, int0);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      String string0 = dOMNodePointer0.getNamespaceURI("\"attribute::\"");
      assertNull(string0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Object object0 = dOMNodePointer0.getValue();
      assertNotNull(object0);
      assertEquals("", object0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Object object1 = dOMNodePointer0.getValue();
      assertNotNull(object1);
      assertEquals("", object1);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      AttrNSImpl attrNSImpl0 = new AttrNSImpl();
      assertNotNull(attrNSImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Locale locale0 = jXPathContextReferenceImpl0.getLocale();
      assertNotNull(locale0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale1, "THEAD");
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = dOMNodePointer0.getNamespaceURI("THEAD");
      assertNull(string0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNotNull(qName0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      PSVIElementNSImpl pSVIElementNSImpl0 = new PSVIElementNSImpl(hTMLDocumentImpl0, "DocType", "http://www.w3.org/XML/1998/namespace", "Q\"5m%\";KJm?b%YDJ;");
      assertNotNull(pSVIElementNSImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      CDATASectionImpl cDATASectionImpl0 = (CDATASectionImpl)hTMLDocumentImpl0.createCDATASection("H6");
      assertNotNull(cDATASectionImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(cDATASectionImpl0, locale1, "H6");
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(attrNSImpl0, locale0, "colspan");
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer2);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isRoot());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isActual());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      int int0 = dOMNodePointer1.compareChildNodePointers(dOMNodePointer0, dOMNodePointer2);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertEquals(1, int0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isRoot());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isActual());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer3 = new DOMNodePointer(hTMLDocumentImpl0, locale1, "http://www.w3.org/XML/1998/namespace");
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertNotNull(dOMNodePointer3);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertFalse(dOMNodePointer3.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertEquals(1, dOMNodePointer3.getLength());
      assertTrue(dOMNodePointer3.isActual());
      assertFalse(dOMNodePointer3.isAttribute());
      assertTrue(dOMNodePointer3.isNode());
      assertTrue(dOMNodePointer3.isRoot());
      assertFalse(dOMNodePointer3.isCollection());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLSelectElementImpl hTMLSelectElementImpl0 = new HTMLSelectElementImpl(hTMLDocumentImpl0, "ph@xs`-aluqa");
      assertNotNull(hTMLSelectElementImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      DOMNodePointer dOMNodePointer4 = new DOMNodePointer(hTMLSelectElementImpl0, locale1, "<<unknown namespace>>");
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer3));
      assertNotNull(dOMNodePointer4);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertTrue(dOMNodePointer4.isNode());
      assertFalse(dOMNodePointer4.isCollection());
      assertFalse(dOMNodePointer4.isContainer());
      assertTrue(dOMNodePointer4.isRoot());
      assertEquals(1, dOMNodePointer4.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer4.getIndex());
      assertTrue(dOMNodePointer4.isActual());
      assertFalse(dOMNodePointer4.isAttribute());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      int int1 = dOMNodePointer0.compareChildNodePointers(dOMNodePointer1, dOMNodePointer1);
      assertFalse(int1 == int0);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer4));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer4));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer3));
      assertEquals(0, int1);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotSame(dOMNodePointer0, dOMNodePointer3);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer4);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer4);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer3);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, (Locale) null);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl1, "http://www.w3.org/XML/1998/namespace", "http://www.w3.org/XML/1998/namespace");
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(processingInstructionImpl0);
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, processingInstructionImpl0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      int int0 = dOMNodePointer0.getIndex();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, int0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      String string0 = dOMNodePointer0.getNamespaceURI("\"attribute::\"");
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNull(string0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      CDATASection cDATASection0 = hTMLDocumentImpl1.createCDATASection((String) null);
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(cDATASection0);
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("xmlns");
      assertNotNull(processingInstructionTest0);
      assertEquals("xmlns", processingInstructionTest0.getTarget());
      
      boolean boolean0 = DOMNodePointer.testNode((Node) processingInstructionImpl0, (NodeTest) processingInstructionTest0);
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(boolean0);
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertEquals("xmlns", processingInstructionTest0.getTarget());
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) basicVariables0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) "\"attribute::\"");
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace");
      assertNotNull(qName0);
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertEquals("//www.w3.org/XML/1998/namespace", qName0.getName());
      assertEquals("http", qName0.getPrefix());
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.createChild((JXPathContext) jXPathContextReferenceImpl1, qName0, 57);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: 
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      assertNotNull(nodeTypeTest0);
      assertEquals(2, nodeTypeTest0.getNodeType());
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("xmln", "xmln");
      assertNotNull(qName0);
      assertEquals("xmln", qName0.getPrefix());
      assertEquals("xmln:xmln", qName0.toString());
      assertEquals("xmln", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("xmln", qName0.getPrefix());
      assertEquals("xmln:xmln", qName0.toString());
      assertEquals("xmln", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("xmln:xmln", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(nodeNameTest1);
      assertEquals("xmln", qName0.getPrefix());
      assertEquals("xmln:xmln", qName0.toString());
      assertEquals("xmln", qName0.getName());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("xmln:xmln", nodeNameTest1.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      
      Locale locale1 = Locale.CANADA;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("en_CA", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("CA", locale1.getCountry());
      assertNotSame(locale1, locale0);
      
      CDATASection cDATASection0 = hTMLDocumentImpl0.createCDATASection("C8C)_hZdv+5|");
      assertNotNull(cDATASection0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      boolean boolean0 = DOMNodePointer.testNode((Node) cDATASection0, (NodeTest) nodeTypeTest0);
      assertTrue(boolean0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals(2, nodeTypeTest0.getNodeType());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      
      QName qName0 = new QName(")Z<!}K <4f^p[h^j");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals(")Z<!}K <4f^p[h^j", qName0.getName());
      assertEquals(")Z<!}K <4f^p[h^j", qName0.toString());
      
      HTMLHRElementImpl hTMLHRElementImpl0 = new HTMLHRElementImpl(hTMLDocumentImpl1, "6hNg!_qNz INgJlai");
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLHRElementImpl0);
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNotNull(variablePointer0);
      assertNull(qName0.getPrefix());
      assertEquals(")Z<!}K <4f^p[h^j", qName0.getName());
      assertEquals(")Z<!}K <4f^p[h^j", qName0.toString());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
      assertNotNull(beanPointer0);
      assertNull(qName0.getPrefix());
      assertEquals(")Z<!}K <4f^p[h^j", qName0.getName());
      assertEquals(")Z<!}K <4f^p[h^j", qName0.toString());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl1, "~T61L<}?UT#UQ<ES1f]");
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLTableElementImpl0);
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      
      HTMLTableSectionElementImpl hTMLTableSectionElementImpl0 = new HTMLTableSectionElementImpl(hTMLDocumentImpl1, "~T61L<}?UT#UQ<ES1f]");
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLTableSectionElementImpl0);
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLTableSectionElementImpl0, locale0);
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.setValue(beanPointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: ')Z<!}K <4f^p[h^j'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      QName qName0 = new QName("t0t");
      assertNotNull(qName0);
      assertEquals("t0t", qName0.getName());
      assertEquals("t0t", qName0.toString());
      assertNull(qName0.getPrefix());
      
      EntityImpl entityImpl0 = new EntityImpl(hTMLDocumentImpl0, "org.apache.xerces.dom.events.MutationEventImpl@0000000007");
      assertNotNull(entityImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      String string0 = NodePointer.UNKNOWN_NAMESPACE;
      assertNotNull(string0);
      assertEquals("<<unknown namespace>>", string0);
      
      String string1 = DOMNodePointer.getPrefix(entityImpl0);
      assertNull(string1);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("`4+\"#r");
      assertNotNull(processingInstructionTest0);
      assertEquals("`4+\"#r", processingInstructionTest0.getTarget());
      
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLDocumentImpl0, (NodeTest) processingInstructionTest0);
      assertFalse(boolean0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("`4+\"#r", processingInstructionTest0.getTarget());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      assertNotNull(nodeTypeTest0);
      assertEquals(3, nodeTypeTest0.getNodeType());
      
      boolean boolean1 = DOMNodePointer.testNode((Node) hTMLDocumentImpl0, (NodeTest) nodeTypeTest0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals(3, nodeTypeTest0.getNodeType());
      
      CDATASection cDATASection0 = hTMLDocumentImpl0.createCDATASection("/text()");
      assertNotNull(cDATASection0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      String string2 = DOMNodePointer.getLocalName(hTMLDocumentImpl0);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("#document", string2);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      Element element0 = hTMLDocumentImpl0.getDocumentElement();
      assertNotNull(element0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      
      HTMLCollection hTMLCollection0 = hTMLDocumentImpl1.getApplets();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLCollection0);
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl1, locale0);
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.setValue(hTMLDocumentImpl0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // WRONG_DOCUMENT_ERR: A node is used in a different document than the one that created it.
         //
         verifyException("org.apache.xerces.dom.ParentNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MutationEventImpl mutationEventImpl0 = new MutationEventImpl();
      assertNotNull(mutationEventImpl0);
      assertFalse(mutationEventImpl0.preventDefault);
      assertEquals((short)0, mutationEventImpl0.eventPhase);
      assertFalse(mutationEventImpl0.cancelable);
      assertTrue(mutationEventImpl0.bubbles);
      assertFalse(mutationEventImpl0.stopPropagation);
      assertEquals((short)0, mutationEventImpl0.attrChange);
      assertFalse(mutationEventImpl0.initialized);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      Locale locale1 = Locale.CANADA_FRENCH;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertNotSame(locale1, locale0);
      
      Locale locale2 = locale0.stripExtensions();
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale2.getLanguage());
      assertEquals("ita", locale2.getISO3Language());
      assertEquals("it", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertNotSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertNotSame(locale2, locale1);
      assertSame(locale2, locale0);
      
      HTMLIsIndexElementImpl hTMLIsIndexElementImpl0 = new HTMLIsIndexElementImpl(hTMLDocumentImpl0, "xml:lang");
      assertNotNull(hTMLIsIndexElementImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      CDATASection cDATASection0 = hTMLDocumentImpl0.createCDATASection("&apos;");
      assertNotNull(cDATASection0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLIsIndexElementImpl0, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(dOMNodePointer0);
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLIsIndexElementImpl0);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      hTMLIsIndexElementImpl0.setPrompt("http://www.w3.org/2000/xmlns/");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = dOMNodePointer0.getName();
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(qName0);
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals("XML:LANG", qName0.toString());
      assertEquals("LANG", qName0.getName());
      assertEquals("XML", qName0.getPrefix());
      assertNotSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "&apos;");
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(nodeNameTest0);
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals("XML:LANG", qName0.toString());
      assertEquals("LANG", qName0.getName());
      assertEquals("XML", qName0.getPrefix());
      assertEquals("&apos;", nodeNameTest0.getNamespaceURI());
      assertEquals("XML:LANG", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLIsIndexElementImpl0, (NodeTest) nodeNameTest0);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(boolean0);
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals("XML:LANG", qName0.toString());
      assertEquals("LANG", qName0.getName());
      assertEquals("XML", qName0.getPrefix());
      assertEquals("&apos;", nodeNameTest0.getNamespaceURI());
      assertEquals("XML:LANG", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = dOMNodePointer0.getNamespaceURI();
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNull(string0);
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      HTMLOptionElementImpl hTMLOptionElementImpl0 = new HTMLOptionElementImpl(hTMLDocumentImpl0, ")Z<!}K <4f^p[h^j");
      assertNotNull(hTMLOptionElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      
      Node node0 = hTMLDocumentImpl1.adoptNode(hTMLOptionElementImpl0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(node0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertSame(hTMLOptionElementImpl0, node0);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertSame(node0, hTMLOptionElementImpl0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(")Z<!}K <4f^p[h^j");
      assertNotNull(processingInstructionTest0);
      assertEquals(")Z<!}K <4f^p[h^j", processingInstructionTest0.getTarget());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      assertNotNull(nodeTypeTest0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "1?", ")Z<!}K <4f^p[h^j", "1?");
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(wMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      WMLElementImpl wMLElementImpl0 = new WMLElementImpl(wMLDocumentImpl0, "=Wesp-d()#5(dM^sC6");
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(wMLElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      boolean boolean1 = DOMNodePointer.testNode((Node) wMLElementImpl0, (NodeTest) nodeTypeTest0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      
      HTMLDocumentImpl hTMLDocumentImpl2 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertNotNull(hTMLDocumentImpl2);
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getURL());
      
      String string0 = DOMNodePointer.getPrefix(hTMLDocumentImpl2);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertNull(string0);
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      
      String string1 = DOMNodePointer.getPrefix(hTMLOptionElementImpl0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNull(string1);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertSame(hTMLOptionElementImpl0, node0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      boolean boolean0 = hTMLDocumentImpl0.getStrictErrorChecking();
      assertTrue(boolean0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      DOMConfiguration dOMConfiguration0 = hTMLDocumentImpl0.getConfig();
      assertNotNull(dOMConfiguration0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      HTMLMapElementImpl hTMLMapElementImpl0 = new HTMLMapElementImpl(hTMLDocumentImpl0, "xmlns");
      assertNotNull(hTMLMapElementImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      String string0 = DOMNodePointer.getNamespaceURI((Node) hTMLMapElementImpl0);
      assertNull(string0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLMapElementImpl0, (Locale) null);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("http://www.w3.org/XML/1998/namespace");
      assertNotNull(processingInstructionTest0);
      assertEquals("http://www.w3.org/XML/1998/namespace", processingInstructionTest0.getTarget());
      
      String string1 = hTMLDocumentImpl0.getVersion();
      assertNull(string1);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      QName qName0 = dOMNodePointer0.getName();
      assertNotNull(qName0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertNull(qName0.getPrefix());
      assertEquals("XMLNS", qName0.getName());
      assertEquals("XMLNS", qName0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertNull(qName0.getPrefix());
      assertEquals("XMLNS", qName0.getName());
      assertEquals("XMLNS", qName0.toString());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
      assertNotNull(nodePointer0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertNull(qName0.getPrefix());
      assertEquals("XMLNS", qName0.getName());
      assertEquals("XMLNS", qName0.toString());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.childIterator(processingInstructionTest0, false, nodePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: XMLNS
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(false);
      assertNotNull(deferredDocumentImpl0);
      
      CommentImpl commentImpl0 = new CommentImpl(deferredDocumentImpl0, "H6-|)NqL|4%{");
      assertNotNull(commentImpl0);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      Locale locale1 = Locale.KOREA;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("ko_KR", locale1.toString());
      assertEquals("KR", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("KOR", locale1.getISO3Country());
      assertNotSame(locale1, locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(deferredDocumentImpl0, locale1, "id(");
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(dOMNodePointer0);
      assertEquals("ko_KR", locale1.toString());
      assertEquals("KR", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("KOR", locale1.getISO3Country());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean0 = dOMNodePointer0.isRoot();
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(boolean0);
      assertEquals("ko_KR", locale1.toString());
      assertEquals("KR", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("KOR", locale1.getISO3Country());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertNotSame(locale1, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      int int0 = dOMNodePointer0.getLength();
      assertFalse(locale1.equals((Object)locale0));
      assertEquals(1, int0);
      assertEquals("ko_KR", locale1.toString());
      assertEquals("KR", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("KOR", locale1.getISO3Country());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertNotSame(locale1, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("attribute");
      assertNotNull(processingInstructionTest0);
      assertEquals("attribute", processingInstructionTest0.getTarget());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      assertNotNull(nodeTypeTest0);
      assertEquals(2, nodeTypeTest0.getNodeType());
      
      boolean boolean1 = DOMNodePointer.testNode((Node) commentImpl0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, nodeTypeTest0.getNodeType());
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      HTMLDocumentImpl hTMLDocumentImpl1 = (HTMLDocumentImpl)hTMLDocumentImpl0.cloneNode(true);
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      
      DocumentFragmentImpl documentFragmentImpl0 = new DocumentFragmentImpl();
      assertNotNull(documentFragmentImpl0);
      
      String string0 = DOMNodePointer.getLocalName(hTMLDocumentImpl1);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(string0);
      assertEquals("#document", string0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      
      DocumentFragmentImpl documentFragmentImpl1 = new DocumentFragmentImpl();
      assertFalse(documentFragmentImpl1.equals((Object)documentFragmentImpl0));
      assertNotNull(documentFragmentImpl1);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLDocumentImpl0, locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertEquals("ko_KR", locale1.toString());
      assertEquals("KR", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("KOR", locale1.getISO3Country());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.getValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      MutationEventImpl mutationEventImpl0 = new MutationEventImpl();
      assertNotNull(mutationEventImpl0);
      assertFalse(mutationEventImpl0.initialized);
      assertFalse(mutationEventImpl0.stopPropagation);
      assertFalse(mutationEventImpl0.preventDefault);
      assertEquals((short)0, mutationEventImpl0.attrChange);
      assertEquals((short)0, mutationEventImpl0.eventPhase);
      assertTrue(mutationEventImpl0.bubbles);
      assertFalse(mutationEventImpl0.cancelable);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      
      boolean boolean0 = locale0.hasExtensions();
      assertFalse(boolean0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "a_+");
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Locale locale1 = Locale.CANADA_FRENCH;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertEquals("CAN", locale1.getISO3Country());
      assertNotSame(locale1, locale0);
      
      Locale locale2 = locale1.stripExtensions();
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr_CA", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("CA", locale2.getCountry());
      assertSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertNotSame(locale2, locale0);
      assertSame(locale2, locale1);
      
      Node node0 = hTMLDocumentImpl0.getParentNode();
      assertNull(node0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      String string0 = DOMNodePointer.XMLNS_NAMESPACE_URI;
      assertNotNull(string0);
      assertEquals("http://www.w3.org/2000/xmlns/", string0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CDATASection cDATASection0 = hTMLDocumentImpl0.createCDATASection((String) null);
      assertNotNull(cDATASection0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, cDATASection0);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string1 = DOMNodePointer.XMLNS_NAMESPACE_URI;
      assertNotNull(string1);
      assertEquals("http://www.w3.org/2000/xmlns/", string1);
      
      Object object0 = dOMNodePointer1.getValue();
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(object0.equals((Object)string0));
      assertFalse(object0.equals((Object)string1));
      assertNotNull(object0);
      assertEquals("", object0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      EntityReference entityReference0 = hTMLDocumentImpl0.createEntityReference("hVJFK1yDuL");
      assertNotNull(entityReference0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(entityReference0, locale0, "hVJFK1yDuL");
      assertNotNull(dOMNodePointer0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean0 = dOMNodePointer0.isActual();
      assertTrue(boolean0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean1 = dOMNodePointer0.isRoot();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      int int0 = dOMNodePointer0.getLength();
      assertEquals(1, int0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("NJ6%b2ZAW|mO1+u?\"");
      assertNotNull(processingInstructionTest0);
      assertEquals("NJ6%b2ZAW|mO1+u?\"", processingInstructionTest0.getTarget());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      assertNotNull(nodeTypeTest0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      
      boolean boolean2 = DOMNodePointer.testNode((Node) hTMLDocumentImpl0, (NodeTest) nodeTypeTest0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals(1, nodeTypeTest0.getNodeType());
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      
      HTMLDocumentImpl hTMLDocumentImpl2 = (HTMLDocumentImpl)hTMLDocumentImpl1.cloneNode(true);
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl2);
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl2);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      
      DocumentFragmentImpl documentFragmentImpl0 = new DocumentFragmentImpl();
      assertNotNull(documentFragmentImpl0);
      
      String string0 = DOMNodePointer.getLocalName(documentFragmentImpl0);
      assertNotNull(string0);
      assertEquals("#document-fragment", string0);
      
      DocumentFragmentImpl documentFragmentImpl1 = new DocumentFragmentImpl();
      assertFalse(documentFragmentImpl1.equals((Object)documentFragmentImpl0));
      assertNotNull(documentFragmentImpl1);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(documentFragmentImpl0, locale0);
      assertFalse(documentFragmentImpl0.equals((Object)documentFragmentImpl1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string1 = (String)dOMNodePointer1.getValue();
      assertFalse(string1.equals((Object)string0));
      assertFalse(documentFragmentImpl0.equals((Object)documentFragmentImpl1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertNotSame(documentFragmentImpl0, documentFragmentImpl1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      PSVIAttrNSImpl pSVIAttrNSImpl0 = new PSVIAttrNSImpl(hTMLDocumentImpl0, "<<unknown namespace>>", "#document-fragment", "U` j_='f9[`JF-V");
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(pSVIAttrNSImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      // Undeclared exception!
      try { 
        DOMNodePointer.getNamespaceURI((Node) pSVIAttrNSImpl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.xerces.dom.PSVIAttrNSImpl cannot be cast to org.w3c.dom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      MutationEventImpl mutationEventImpl0 = new MutationEventImpl();
      assertNotNull(mutationEventImpl0);
      assertTrue(mutationEventImpl0.bubbles);
      assertFalse(mutationEventImpl0.initialized);
      assertFalse(mutationEventImpl0.stopPropagation);
      assertEquals((short)0, mutationEventImpl0.eventPhase);
      assertFalse(mutationEventImpl0.preventDefault);
      assertEquals((short)0, mutationEventImpl0.attrChange);
      assertFalse(mutationEventImpl0.cancelable);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      boolean boolean0 = locale0.hasExtensions();
      assertFalse(boolean0);
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "a_+");
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Locale locale1 = Locale.CANADA_FRENCH;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("fr_CA", locale1.toString());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("CA", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("fr", locale1.getLanguage());
      assertNotSame(locale1, locale0);
      
      Locale locale2 = locale1.stripExtensions();
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertEquals("fr_CA", locale1.toString());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("CA", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("fr_CA", locale2.toString());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("CA", locale2.getCountry());
      assertSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      
      Node node0 = hTMLDocumentImpl0.getParentNode();
      assertNull(node0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      String string0 = DOMNodePointer.XMLNS_NAMESPACE_URI;
      assertNotNull(string0);
      assertEquals("http://www.w3.org/2000/xmlns/", string0);
      
      CDATASection cDATASection0 = hTMLDocumentImpl0.createCDATASection((String) null);
      assertNotNull(cDATASection0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(cDATASection0, locale2);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("CA", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("fr_CA", locale2.toString());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("CA", locale2.getCountry());
      assertTrue(dOMNodePointer1.isNode());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      dOMNodePointer1.setValue("a_+");
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("CA", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("fr_CA", locale2.toString());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("CA", locale2.getCountry());
      assertTrue(dOMNodePointer1.isNode());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Locale locale3 = Locale.ROOT;
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale1));
      assertNotNull(locale3);
      assertEquals("", locale3.getVariant());
      assertEquals("", locale3.getCountry());
      assertEquals("", locale3.toString());
      assertEquals("", locale3.getLanguage());
      assertEquals("", locale3.getISO3Language());
      assertEquals("", locale3.getISO3Country());
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale1);
      
      Locale locale4 = Locale.GERMANY;
      assertFalse(locale4.equals((Object)locale0));
      assertFalse(locale4.equals((Object)locale3));
      assertFalse(locale4.equals((Object)locale2));
      assertFalse(locale4.equals((Object)locale1));
      assertNotNull(locale4);
      assertEquals("DEU", locale4.getISO3Country());
      assertEquals("de", locale4.getLanguage());
      assertEquals("DE", locale4.getCountry());
      assertEquals("deu", locale4.getISO3Language());
      assertEquals("", locale4.getVariant());
      assertEquals("de_DE", locale4.toString());
      assertNotSame(locale4, locale0);
      assertNotSame(locale4, locale3);
      assertNotSame(locale4, locale2);
      assertNotSame(locale4, locale1);
      
      Set<String> set0 = locale4.getUnicodeLocaleAttributes();
      assertFalse(locale4.equals((Object)locale0));
      assertFalse(locale4.equals((Object)locale3));
      assertFalse(locale4.equals((Object)locale2));
      assertFalse(locale4.equals((Object)locale1));
      assertNotNull(set0);
      assertEquals("DEU", locale4.getISO3Country());
      assertEquals("de", locale4.getLanguage());
      assertEquals("DE", locale4.getCountry());
      assertEquals("deu", locale4.getISO3Language());
      assertEquals("", locale4.getVariant());
      assertEquals("de_DE", locale4.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotSame(locale4, locale0);
      assertNotSame(locale4, locale3);
      assertNotSame(locale4, locale2);
      assertNotSame(locale4, locale1);
      assertFalse(set0.contains(string0));
      
      XMLErrorReporter xMLErrorReporter0 = new XMLErrorReporter();
      assertNotNull(xMLErrorReporter0);
      
      Locale locale5 = xMLErrorReporter0.getLocale();
      assertNull(locale5);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(cDATASection0, (Locale) null, "r[MFbEf+,rO4");
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer2);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(1, dOMNodePointer2.getLength());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean1 = dOMNodePointer2.isLeaf();
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(1, dOMNodePointer2.getLength());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isActual());
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Object object0 = dOMNodePointer2.getValue();
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(object0.equals((Object)string0));
      assertNotNull(object0);
      assertEquals("a_+", object0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(1, dOMNodePointer2.getLength());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isActual());
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      Attr attr0 = hTMLDocumentImpl0.createAttributeNS("THEAD", "THEAD");
      assertNotNull(attr0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.toString());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale1, "THEAD");
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.toString());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      int int0 = NodePointer.WHOLE_COLLECTION;
      assertEquals(Integer.MIN_VALUE, int0);
      
      String string0 = DOMNodePointer.XML_NAMESPACE_URI;
      assertNotNull(string0);
      assertEquals("http://www.w3.org/XML/1998/namespace", string0);
      
      DocumentType documentType0 = hTMLDocumentImpl0.getDoctype();
      assertNull(documentType0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) null);
      assertNotNull(wMLDocumentImpl0);
      
      WMLBigElementImpl wMLBigElementImpl0 = new WMLBigElementImpl(wMLDocumentImpl0, "THEAD");
      assertNotNull(wMLBigElementImpl0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, wMLDocumentImpl0);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.toString());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = dOMNodePointer1.getName();
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(qName0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.toString());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      PSVIElementNSImpl pSVIElementNSImpl0 = new PSVIElementNSImpl(hTMLDocumentImpl0, "DocType", "http://www.w3.org/XML/1998/namespace", "Q\"5m%\";KJm?b%YDJ;");
      assertNotNull(pSVIElementNSImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      DOMNodePointer dOMNodePointer2 = (DOMNodePointer)NodePointer.newChildNodePointer(dOMNodePointer0, qName0, pSVIElementNSImpl0);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer2);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.toString());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertFalse(dOMNodePointer2.isContainer());
      assertFalse(dOMNodePointer2.isRoot());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isCollection());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "Q\"5m%\";KJm?b%YDJ;");
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      // Undeclared exception!
      dOMNodePointer2.createChild((JXPathContext) jXPathContextReferenceImpl1, qName0, Integer.MIN_VALUE, (Object) hTMLDocumentImpl0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      CommentImpl commentImpl0 = new CommentImpl(hTMLDocumentImpl0, "Unknown namespace prefix: ");
      assertNotNull(commentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      Locale locale0 = new Locale("Unknown namespace prefix: ");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("unknown namespace prefix: ", locale0.getLanguage());
      assertEquals("unknown namespace prefix: ", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(commentImpl0, locale0, "Unknown namespace prefix: ");
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("unknown namespace prefix: ", locale0.getLanguage());
      assertEquals("unknown namespace prefix: ", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("unknown namespace prefix: ", locale0.getLanguage());
      assertEquals("unknown namespace prefix: ", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("unknown namespace prefix: ", locale1.toString());
      assertEquals("unknown namespace prefix: ", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, commentImpl0);
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("unknown namespace prefix: ", locale0.getLanguage());
      assertEquals("unknown namespace prefix: ", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean1 = dOMNodePointer1.isRoot();
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("unknown namespace prefix: ", locale0.getLanguage());
      assertEquals("unknown namespace prefix: ", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(hTMLDocumentImpl0, locale1, "http://www.w3.org/2000/xmlns/");
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer2);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("unknown namespace prefix: ", locale0.getLanguage());
      assertEquals("unknown namespace prefix: ", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("unknown namespace prefix: ", locale1.toString());
      assertEquals("unknown namespace prefix: ", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isRoot());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      int int0 = dOMNodePointer2.getLength();
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertEquals(1, int0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("unknown namespace prefix: ", locale0.getLanguage());
      assertEquals("unknown namespace prefix: ", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("unknown namespace prefix: ", locale1.toString());
      assertEquals("unknown namespace prefix: ", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isRoot());
      assertTrue(dOMNodePointer2.isActual());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = dOMNodePointer1.getNamespaceURI("dg5Ta3");
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertNull(string0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("unknown namespace prefix: ", locale0.getLanguage());
      assertEquals("unknown namespace prefix: ", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Locale locale2 = Locale.GERMAN;
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertEquals("de", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("de", locale2.getLanguage());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("", locale2.getCountry());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      
      Set<String> set0 = locale2.getUnicodeLocaleAttributes();
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(set0);
      assertEquals("de", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("de", locale2.getLanguage());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("", locale2.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertFalse(set0.contains("http://www.w3.org/2000/xmlns/"));
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/", (String) null, "sum");
      assertNotNull(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNotNull(wMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      Element element0 = wMLDocumentImpl0.createElementNS((String) null, (String) null, "-.{%e#$<<EgF");
      assertNotNull(element0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      DOMNodePointer dOMNodePointer3 = new DOMNodePointer(dOMNodePointer1, element0);
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertNotNull(dOMNodePointer3);
      assertTrue(dOMNodePointer3.isActual());
      assertFalse(dOMNodePointer3.isContainer());
      assertFalse(dOMNodePointer3.isCollection());
      assertFalse(dOMNodePointer3.isAttribute());
      assertTrue(dOMNodePointer3.isNode());
      assertEquals(1, dOMNodePointer3.getLength());
      assertFalse(dOMNodePointer3.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("unknown namespace prefix: ", locale0.getLanguage());
      assertEquals("unknown namespace prefix: ", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer4 = new DOMNodePointer(documentTypeImpl0, locale2);
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer2));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(dOMNodePointer4);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals(1, dOMNodePointer4.getLength());
      assertTrue(dOMNodePointer4.isNode());
      assertFalse(dOMNodePointer4.isAttribute());
      assertTrue(dOMNodePointer4.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer4.getIndex());
      assertFalse(dOMNodePointer4.isCollection());
      assertFalse(dOMNodePointer4.isContainer());
      assertTrue(dOMNodePointer4.isRoot());
      assertEquals("de", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("de", locale2.getLanguage());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("", locale2.getCountry());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string1 = dOMNodePointer4.asPath();
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer2));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals(1, dOMNodePointer4.getLength());
      assertTrue(dOMNodePointer4.isNode());
      assertFalse(dOMNodePointer4.isAttribute());
      assertTrue(dOMNodePointer4.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer4.getIndex());
      assertFalse(dOMNodePointer4.isCollection());
      assertFalse(dOMNodePointer4.isContainer());
      assertTrue(dOMNodePointer4.isRoot());
      assertEquals("de", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("de", locale2.getLanguage());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("", locale2.getCountry());
      assertNotSame(dOMNodePointer4, dOMNodePointer1);
      assertNotSame(dOMNodePointer4, dOMNodePointer0);
      assertNotSame(dOMNodePointer4, dOMNodePointer3);
      assertNotSame(dOMNodePointer4, dOMNodePointer2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer5 = new DOMNodePointer(dOMNodePointer1, commentImpl0);
      assertFalse(locale0.equals((Object)locale2));
      assertTrue(dOMNodePointer5.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer5.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer5.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer5.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer5.equals((Object)dOMNodePointer4));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer4));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer4));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertNotNull(dOMNodePointer5);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("unknown namespace prefix: ", locale0.getLanguage());
      assertEquals("unknown namespace prefix: ", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, dOMNodePointer5.getLength());
      assertTrue(dOMNodePointer5.isNode());
      assertFalse(dOMNodePointer5.isRoot());
      assertFalse(dOMNodePointer5.isAttribute());
      assertTrue(dOMNodePointer5.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer5.getIndex());
      assertFalse(dOMNodePointer5.isCollection());
      assertFalse(dOMNodePointer5.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      Locale locale1 = Locale.ITALIAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.toString());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      assertNotSame(locale1, locale0);
      
      boolean boolean0 = locale1.hasExtensions();
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(boolean0);
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.toString());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      assertNotSame(locale1, locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "c{il1X/l{5}t2>");
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(dOMNodePointer0);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Locale locale2 = Locale.CANADA_FRENCH;
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("CA", locale2.getCountry());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("fr_CA", locale2.toString());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Locale locale3 = locale0.stripExtensions();
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale1));
      assertNotNull(locale3);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("", locale3.getVariant());
      assertEquals("USA", locale3.getISO3Country());
      assertEquals("en_US", locale3.toString());
      assertEquals("eng", locale3.getISO3Language());
      assertEquals("en", locale3.getLanguage());
      assertEquals("US", locale3.getCountry());
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertSame(locale0, locale3);
      assertSame(locale3, locale0);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale1);
      
      Node node0 = hTMLDocumentImpl0.getParentNode();
      assertNull(node0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      String string0 = DOMNodePointer.XMLNS_NAMESPACE_URI;
      assertNotNull(string0);
      assertEquals("http://www.w3.org/2000/xmlns/", string0);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      
      CDATASection cDATASection0 = hTMLDocumentImpl1.createCDATASection("LQnyJyfh");
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(cDATASection0);
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      
      HTMLTableCaptionElementImpl hTMLTableCaptionElementImpl0 = new HTMLTableCaptionElementImpl(hTMLDocumentImpl1, "http://www.w3.org/2000/xmlns/");
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLTableCaptionElementImpl0);
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLTableCaptionElementImpl0, locale3);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("", locale3.getVariant());
      assertEquals("USA", locale3.getISO3Country());
      assertEquals("en_US", locale3.toString());
      assertEquals("eng", locale3.getISO3Language());
      assertEquals("en", locale3.getLanguage());
      assertEquals("US", locale3.getCountry());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = dOMNodePointer0.getName();
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(qName0);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertSame(locale0, locale3);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl0, "a_+");
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(hTMLTableElementImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(dOMNodePointer1, qName0, hTMLTableElementImpl0);
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(nodePointer0);
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isNode());
      assertTrue(nodePointer0.isActual());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isAttribute());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals("", locale3.getVariant());
      assertEquals("USA", locale3.getISO3Country());
      assertEquals("en_US", locale3.toString());
      assertEquals("eng", locale3.getISO3Language());
      assertEquals("en", locale3.getLanguage());
      assertEquals("US", locale3.getCountry());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertNotSame(nodePointer0, dOMNodePointer1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertSame(locale0, locale3);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, nodePointer0);
      assertSame(locale3, locale0);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale1);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(nodePointer0, cDATASection0);
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer2.equals((Object)nodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)nodePointer0));
      assertNotNull(dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isNode());
      assertTrue(nodePointer0.isActual());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isAttribute());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isCollection());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isRoot());
      assertTrue(dOMNodePointer2.isActual());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals("", locale3.getVariant());
      assertEquals("USA", locale3.getISO3Country());
      assertEquals("en_US", locale3.toString());
      assertEquals("eng", locale3.getISO3Language());
      assertEquals("en", locale3.getLanguage());
      assertEquals("US", locale3.getCountry());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer2.setValue(nodePointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      Attr attr0 = hTMLDocumentImpl0.createAttributeNS("THEAD", "THEAD");
      assertNotNull(attr0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Locale locale0 = jXPathContextReferenceImpl0.getLocale();
      assertNotNull(locale0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale1, "THEAD");
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      int int0 = dOMNodePointer0.getLength();
      assertEquals(1, int0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = DOMNodePointer.XML_NAMESPACE_URI;
      assertNotNull(string0);
      assertEquals("http://www.w3.org/XML/1998/namespace", string0);
      
      DocumentType documentType0 = hTMLDocumentImpl0.getDoctype();
      assertNull(documentType0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) null);
      assertNotNull(wMLDocumentImpl0);
      
      WMLBigElementImpl wMLBigElementImpl0 = new WMLBigElementImpl(wMLDocumentImpl0, "THEAD");
      assertNotNull(wMLBigElementImpl0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, wMLDocumentImpl0);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = dOMNodePointer1.getName();
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(qName0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      PSVIElementNSImpl pSVIElementNSImpl0 = new PSVIElementNSImpl(hTMLDocumentImpl0, "DocType", "http://www.w3.org/XML/1998/namespace", "Q\"5m%\";KJm?b%YDJ;");
      assertNotNull(pSVIElementNSImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      DOMNodePointer dOMNodePointer2 = (DOMNodePointer)NodePointer.newChildNodePointer(dOMNodePointer0, qName0, pSVIElementNSImpl0);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer2);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertTrue(dOMNodePointer2.isNode());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      
      String string1 = dOMNodePointer2.getNamespaceURI();
      assertFalse(string1.equals((Object)string0));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNotNull(string1);
      assertEquals("DocType", string1);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertTrue(dOMNodePointer2.isNode());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLQuoteElementImpl hTMLQuoteElementImpl0 = new HTMLQuoteElementImpl(hTMLDocumentImpl0, "org.apache.commons.jxpath.ri.model.dom.DOMNodePointer");
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(hTMLQuoteElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) locale0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertSame(locale0, locale1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      HTMLBaseElementImpl hTMLBaseElementImpl0 = new HTMLBaseElementImpl(hTMLDocumentImpl0, "%B0");
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(hTMLBaseElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      String string2 = DOMNodePointer.getPrefix(wMLDocumentImpl0);
      assertNull(string2);
      
      int int1 = NodePointer.WHOLE_COLLECTION;
      assertFalse(int1 == int0);
      assertEquals(Integer.MIN_VALUE, int1);
      
      boolean boolean0 = dOMNodePointer0.equals("THEAD");
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(boolean0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      Attr attr0 = hTMLDocumentImpl0.createAttributeNS("THEAD", "THEAD");
      assertNotNull(attr0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Locale locale0 = jXPathContextReferenceImpl0.getLocale();
      assertNotNull(locale0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale1, "THEAD");
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      int int0 = dOMNodePointer0.getLength();
      assertEquals(1, int0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = DOMNodePointer.XML_NAMESPACE_URI;
      assertNotNull(string0);
      assertEquals("http://www.w3.org/XML/1998/namespace", string0);
      
      DocumentType documentType0 = hTMLDocumentImpl0.getDoctype();
      assertNull(documentType0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) null);
      assertNotNull(wMLDocumentImpl0);
      
      WMLBigElementImpl wMLBigElementImpl0 = new WMLBigElementImpl(wMLDocumentImpl0, "THEAD");
      assertNotNull(wMLBigElementImpl0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, wMLDocumentImpl0);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = dOMNodePointer1.getName();
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(qName0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      PSVIElementNSImpl pSVIElementNSImpl0 = new PSVIElementNSImpl(hTMLDocumentImpl0, "DocType", "http://www.w3.org/XML/1998/namespace", "Q\"5m%\";KJm?b%YDJ;");
      assertNotNull(pSVIElementNSImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      DOMNodePointer dOMNodePointer2 = (DOMNodePointer)NodePointer.newChildNodePointer(dOMNodePointer0, qName0, pSVIElementNSImpl0);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer2);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isRoot());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      
      HTMLQuoteElementImpl hTMLQuoteElementImpl0 = new HTMLQuoteElementImpl(hTMLDocumentImpl1, "<");
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLQuoteElementImpl0);
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      
      HTMLDocumentImpl hTMLDocumentImpl2 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl2);
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getReferrer());
      
      boolean boolean0 = dOMNodePointer1.isLeaf();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertTrue(boolean0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl3 = (HTMLDocumentImpl)dOMNodePointer0.getNode();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(hTMLDocumentImpl3);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(hTMLDocumentImpl3.getURL());
      assertNull(hTMLDocumentImpl3.getDomain());
      assertNull(hTMLDocumentImpl3.getReferrer());
      assertNull(hTMLDocumentImpl3.getCookie());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertSame(hTMLDocumentImpl0, hTMLDocumentImpl3);
      assertNotSame(hTMLDocumentImpl3, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl3, hTMLDocumentImpl2);
      assertSame(hTMLDocumentImpl3, hTMLDocumentImpl0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string1 = (String)dOMNodePointer0.getValue();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertSame(hTMLDocumentImpl0, hTMLDocumentImpl3);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string2 = DOMNodePointer.getNamespaceURI((Node) pSVIElementNSImpl0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("DocType", string2);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertSame(hTMLDocumentImpl0, hTMLDocumentImpl3);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      assertNotNull(nodeTypeTest0);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      
      String string3 = nodeTypeTest0.toString();
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("UNKNOWN()", string3);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      
      boolean boolean1 = DOMNodePointer.testNode((Node) hTMLQuoteElementImpl0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean1 == boolean0);
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl3));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(boolean1);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl3);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl2);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      
      // Undeclared exception!
      try { 
        DOMNodePointer.testNode((Node) null, (NodeTest) nodeTypeTest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer(variablePointer0, qName0, qName0);
      assertNotNull(beanPointer0);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl0, "<<unknown namespace>>");
      assertNotNull(hTMLTableElementImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      HTMLTableSectionElementImpl hTMLTableSectionElementImpl0 = (HTMLTableSectionElementImpl)hTMLTableElementImpl0.createTHead();
      assertNotNull(hTMLTableSectionElementImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, hTMLTableElementImpl0);
      assertNotNull(dOMNodePointer0);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(beanPointer0, hTMLTableElementImpl0);
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isRoot());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.setValue(variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: :
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      CommentImpl commentImpl0 = new CommentImpl(hTMLDocumentImpl0, "space");
      assertNotNull(commentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "");
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, "xml:lang", "\"div\"");
      assertNotNull(processingInstructionImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, commentImpl0);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = dOMNodePointer1.getName();
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(qName0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      
      boolean boolean0 = dOMNodePointer0.isRoot();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(boolean0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(hTMLDocumentImpl1, locale0, "http://www.w3.org/2000/xmlns/");
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer2);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertEquals(1, dOMNodePointer2.getLength());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      int int0 = dOMNodePointer0.getLength();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertEquals(1, int0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = dOMNodePointer1.getNamespaceURI("");
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNull(string0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains("space"));
      
      boolean boolean1 = dOMNodePointer1.isNode();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer3 = new DOMNodePointer(dOMNodePointer0, hTMLDocumentImpl0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertNotNull(dOMNodePointer3);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer3.isActual());
      assertFalse(dOMNodePointer3.isCollection());
      assertFalse(dOMNodePointer3.isAttribute());
      assertEquals(1, dOMNodePointer3.getLength());
      assertTrue(dOMNodePointer3.isNode());
      assertFalse(dOMNodePointer3.isRoot());
      assertFalse(dOMNodePointer3.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string1 = dOMNodePointer1.asPath();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer3));
      assertNotNull(string1);
      assertEquals("id('')", string1);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer3);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer3);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer4 = new DOMNodePointer(dOMNodePointer2, hTMLDocumentImpl0);
      assertTrue(dOMNodePointer4.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer4.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer4);
      assertFalse(dOMNodePointer4.isCollection());
      assertFalse(dOMNodePointer4.isContainer());
      assertEquals(1, dOMNodePointer4.getLength());
      assertFalse(dOMNodePointer4.isRoot());
      assertTrue(dOMNodePointer4.isNode());
      assertFalse(dOMNodePointer4.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer4.getIndex());
      assertTrue(dOMNodePointer4.isActual());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertEquals(1, dOMNodePointer2.getLength());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer5 = new DOMNodePointer(commentImpl0, locale0, "<<unknown namespace>>");
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertTrue(dOMNodePointer5.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer5.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer5.equals((Object)dOMNodePointer4));
      assertFalse(dOMNodePointer5.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer5.equals((Object)dOMNodePointer2));
      assertNotNull(dOMNodePointer5);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertFalse(dOMNodePointer5.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer5.getIndex());
      assertTrue(dOMNodePointer5.isRoot());
      assertEquals(1, dOMNodePointer5.getLength());
      assertTrue(dOMNodePointer5.isActual());
      assertTrue(dOMNodePointer5.isNode());
      assertFalse(dOMNodePointer5.isContainer());
      assertFalse(dOMNodePointer5.isCollection());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean2 = dOMNodePointer1.equals(dOMNodePointer5);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertTrue(dOMNodePointer5.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer5.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer5.equals((Object)dOMNodePointer4));
      assertFalse(dOMNodePointer5.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer5.equals((Object)dOMNodePointer2));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer5));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer4));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer5));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer4));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer3));
      assertTrue(boolean2);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertFalse(dOMNodePointer5.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer5.getIndex());
      assertTrue(dOMNodePointer5.isRoot());
      assertEquals(1, dOMNodePointer5.getLength());
      assertTrue(dOMNodePointer5.isActual());
      assertTrue(dOMNodePointer5.isNode());
      assertFalse(dOMNodePointer5.isContainer());
      assertFalse(dOMNodePointer5.isCollection());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(dOMNodePointer5, dOMNodePointer3);
      assertNotSame(dOMNodePointer5, dOMNodePointer4);
      assertNotSame(dOMNodePointer5, dOMNodePointer0);
      assertNotSame(dOMNodePointer5, dOMNodePointer1);
      assertNotSame(dOMNodePointer5, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer4);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer5);
      assertNotSame(dOMNodePointer0, dOMNodePointer3);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer5);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer4);
      assertNotSame(dOMNodePointer1, dOMNodePointer3);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      MutationEventImpl mutationEventImpl0 = new MutationEventImpl();
      assertNotNull(mutationEventImpl0);
      assertFalse(mutationEventImpl0.cancelable);
      assertEquals((short)0, mutationEventImpl0.attrChange);
      assertEquals((short)0, mutationEventImpl0.eventPhase);
      assertFalse(mutationEventImpl0.initialized);
      assertFalse(mutationEventImpl0.stopPropagation);
      assertTrue(mutationEventImpl0.bubbles);
      assertFalse(mutationEventImpl0.preventDefault);
      
      QName qName0 = new QName("\"text\"", "\"text\"");
      assertNotNull(qName0);
      assertEquals("\"text\"", qName0.getName());
      assertEquals("\"text\"", qName0.getPrefix());
      assertEquals("\"text\":\"text\"", qName0.toString());
      
      QName qName1 = new QName("\"text\"", (String) null);
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals("\"text\":null", qName1.toString());
      assertEquals("\"text\"", qName1.getPrefix());
      assertNull(qName1.getName());
      
      HTMLHRElementImpl hTMLHRElementImpl0 = new HTMLHRElementImpl(hTMLDocumentImpl0, "COKK");
      assertNotNull(hTMLHRElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, (String) null);
      assertNotNull(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNotNull(wMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      WMLBigElementImpl wMLBigElementImpl0 = new WMLBigElementImpl(wMLDocumentImpl0, "Factory is not set on the JXPathContext - cannot create path: ");
      assertNotNull(wMLBigElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      TextImpl textImpl0 = new TextImpl(hTMLDocumentImpl0, "\"text\"");
      assertNotNull(textImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, textImpl0);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName2 = dOMNodePointer0.getName();
      assertNotNull(qName2);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertNull(qName2.getPrefix());
      assertNull(qName2.toString());
      assertNull(qName2.getName());
      assertNotSame(qName2, qName0);
      assertNotSame(qName2, qName1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      PSVIElementNSImpl pSVIElementNSImpl0 = new PSVIElementNSImpl(wMLDocumentImpl0, "JXPath: loaded from services: ", "bbN|", (String) null);
      assertNotNull(pSVIElementNSImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      QName qName3 = new QName("preserve", "COKK");
      assertFalse(qName3.equals((Object)qName2));
      assertFalse(qName3.equals((Object)qName1));
      assertFalse(qName3.equals((Object)qName0));
      assertNotNull(qName3);
      assertEquals("preserve", qName3.getPrefix());
      assertEquals("preserve:COKK", qName3.toString());
      assertEquals("COKK", qName3.getName());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer((NodePointer) null, qName3, qName0);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(qName0.equals((Object)qName3));
      assertFalse(qName0.equals((Object)qName2));
      assertFalse(qName3.equals((Object)qName2));
      assertFalse(qName3.equals((Object)qName1));
      assertFalse(qName3.equals((Object)qName0));
      assertNotNull(beanPointer0);
      assertEquals("\"text\"", qName0.getName());
      assertEquals("\"text\"", qName0.getPrefix());
      assertEquals("\"text\":\"text\"", qName0.toString());
      assertEquals("preserve", qName3.getPrefix());
      assertEquals("preserve:COKK", qName3.toString());
      assertEquals("COKK", qName3.getName());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertNotSame(qName0, qName1);
      assertNotSame(qName0, qName3);
      assertNotSame(qName0, qName2);
      assertNotSame(qName3, qName2);
      assertNotSame(qName3, qName1);
      assertNotSame(qName3, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      
      HTMLQuoteElementImpl hTMLQuoteElementImpl0 = new HTMLQuoteElementImpl(hTMLDocumentImpl0, "COKK");
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(hTMLQuoteElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      HTMLDocumentImpl hTMLDocumentImpl2 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertNotNull(hTMLDocumentImpl2);
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getCookie());
      
      boolean boolean0 = dOMNodePointer0.isLeaf();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertTrue(boolean0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer((NodePointer) null, hTMLHRElementImpl0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = dOMNodePointer0.asPath();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(string0);
      assertEquals("/text()[1]", string0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string1 = DOMNodePointer.getPrefix(hTMLDocumentImpl1);
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNull(string1);
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl2);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "DocType");
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)jXPathContextReferenceImpl0.getRelativeContext(dOMNodePointer0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(jXPathContextReferenceImpl1);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl1, (Object) "bbN|");
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(jXPathContextReferenceImpl2);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl3 = (JXPathContextReferenceImpl)jXPathContextReferenceImpl2.getParentContext();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(jXPathContextReferenceImpl3);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertFalse(jXPathContextReferenceImpl3.isLenient());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl3);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl3);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl3);
      assertNotSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl2);
      assertSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl0);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer1.createAttribute(jXPathContextReferenceImpl3, qName3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown namespace prefix: preserve
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      CommentImpl commentImpl0 = new CommentImpl(hTMLDocumentImpl0, (String) null);
      assertNotNull(commentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      Locale locale0 = new Locale("Unknown namespace prefix: ");
      assertNotNull(locale0);
      assertEquals("unknown namespace prefix: ", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("unknown namespace prefix: ", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(commentImpl0, locale0, (String) null);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("unknown namespace prefix: ", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("unknown namespace prefix: ", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertEquals("unknown namespace prefix: ", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("unknown namespace prefix: ", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("unknown namespace prefix: ", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("unknown namespace prefix: ", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      Object object0 = dOMNodePointer0.getValue();
      assertNotNull(object0);
      assertEquals("", object0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("unknown namespace prefix: ", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("unknown namespace prefix: ", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      MutationEventImpl mutationEventImpl0 = new MutationEventImpl();
      assertNotNull(mutationEventImpl0);
      assertFalse(mutationEventImpl0.cancelable);
      assertEquals((short)0, mutationEventImpl0.attrChange);
      assertEquals((short)0, mutationEventImpl0.eventPhase);
      assertTrue(mutationEventImpl0.bubbles);
      assertFalse(mutationEventImpl0.preventDefault);
      assertFalse(mutationEventImpl0.initialized);
      assertFalse(mutationEventImpl0.stopPropagation);
      
      CommentImpl commentImpl0 = new CommentImpl(hTMLDocumentImpl0, "");
      assertNotNull(commentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "Jup/M^$M:kc)='_");
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, "r)V", "http://www.w3.org/2000/xmlns/");
      assertNotNull(processingInstructionImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, commentImpl0);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = dOMNodePointer0.getName();
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(qName0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      
      boolean boolean0 = dOMNodePointer1.isRoot();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(boolean0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isActual());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(processingInstructionImpl0, locale0, "OjjV*7'LJA<v");
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer2);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer2.isNode());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(1, dOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isAttribute());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer3 = new DOMNodePointer(dOMNodePointer2, processingInstructionImpl0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertNotNull(dOMNodePointer3);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer2.isNode());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(1, dOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isAttribute());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertEquals(1, dOMNodePointer3.getLength());
      assertFalse(dOMNodePointer3.isContainer());
      assertFalse(dOMNodePointer3.isCollection());
      assertTrue(dOMNodePointer3.isActual());
      assertTrue(dOMNodePointer3.isNode());
      assertFalse(dOMNodePointer3.isAttribute());
      assertFalse(dOMNodePointer3.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      int int0 = dOMNodePointer3.getLength();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertEquals(1, int0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer2.isNode());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(1, dOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isAttribute());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertEquals(1, dOMNodePointer3.getLength());
      assertFalse(dOMNodePointer3.isContainer());
      assertFalse(dOMNodePointer3.isCollection());
      assertTrue(dOMNodePointer3.isActual());
      assertTrue(dOMNodePointer3.isNode());
      assertFalse(dOMNodePointer3.isAttribute());
      assertFalse(dOMNodePointer3.isRoot());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer3);
      assertNotSame(dOMNodePointer3, dOMNodePointer2);
      assertNotSame(dOMNodePointer3, dOMNodePointer1);
      assertNotSame(dOMNodePointer3, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = dOMNodePointer1.getNamespaceURI("http://www.w3.org/XML/1998/namespace");
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer3));
      assertNull(string0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isActual());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(dOMNodePointer0, dOMNodePointer3);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer3);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains("Jup/M^$M:kc)='_"));
      
      DOMNodePointer dOMNodePointer4 = new DOMNodePointer(hTMLDocumentImpl1, locale0);
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer3));
      assertNotNull(dOMNodePointer4);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertFalse(dOMNodePointer4.isCollection());
      assertFalse(dOMNodePointer4.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer4.getIndex());
      assertFalse(dOMNodePointer4.isContainer());
      assertTrue(dOMNodePointer4.isRoot());
      assertEquals(1, dOMNodePointer4.getLength());
      assertTrue(dOMNodePointer4.isNode());
      assertTrue(dOMNodePointer4.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean1 = dOMNodePointer4.isLeaf();
      assertFalse(boolean1 == boolean0);
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer3));
      assertTrue(boolean1);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertFalse(dOMNodePointer4.isCollection());
      assertFalse(dOMNodePointer4.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer4.getIndex());
      assertFalse(dOMNodePointer4.isContainer());
      assertTrue(dOMNodePointer4.isRoot());
      assertEquals(1, dOMNodePointer4.getLength());
      assertTrue(dOMNodePointer4.isNode());
      assertTrue(dOMNodePointer4.isActual());
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(dOMNodePointer4, dOMNodePointer2);
      assertNotSame(dOMNodePointer4, dOMNodePointer0);
      assertNotSame(dOMNodePointer4, dOMNodePointer1);
      assertNotSame(dOMNodePointer4, dOMNodePointer3);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Locale locale1 = Locale.FRENCH;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("", locale1.getCountry());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertNotSame(locale1, locale0);
      
      Object object0 = dOMNodePointer3.getValue();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer4));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer4));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertNotNull(object0);
      assertEquals("http://www.w3.org/2000/xmlns/", object0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer2.isNode());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(1, dOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isAttribute());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertEquals(1, dOMNodePointer3.getLength());
      assertFalse(dOMNodePointer3.isContainer());
      assertFalse(dOMNodePointer3.isCollection());
      assertTrue(dOMNodePointer3.isActual());
      assertTrue(dOMNodePointer3.isNode());
      assertFalse(dOMNodePointer3.isAttribute());
      assertFalse(dOMNodePointer3.isRoot());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer3);
      assertNotSame(dOMNodePointer2, dOMNodePointer4);
      assertNotSame(dOMNodePointer3, dOMNodePointer2);
      assertNotSame(dOMNodePointer3, dOMNodePointer1);
      assertNotSame(dOMNodePointer3, dOMNodePointer4);
      assertNotSame(dOMNodePointer3, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      MutationEventImpl mutationEventImpl0 = new MutationEventImpl();
      assertNotNull(mutationEventImpl0);
      assertFalse(mutationEventImpl0.stopPropagation);
      assertFalse(mutationEventImpl0.cancelable);
      assertEquals((short)0, mutationEventImpl0.attrChange);
      assertEquals((short)0, mutationEventImpl0.eventPhase);
      assertFalse(mutationEventImpl0.preventDefault);
      assertFalse(mutationEventImpl0.initialized);
      assertTrue(mutationEventImpl0.bubbles);
      
      QName qName0 = new QName("\"text\"", "\"text\"");
      assertNotNull(qName0);
      assertEquals("\"text\"", qName0.getName());
      assertEquals("\"text\":\"text\"", qName0.toString());
      assertEquals("\"text\"", qName0.getPrefix());
      
      QName qName1 = new QName("\"text\"");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertNull(qName1.getPrefix());
      assertEquals("\"text\"", qName1.getName());
      assertEquals("\"text\"", qName1.toString());
      
      HTMLHRElementImpl hTMLHRElementImpl0 = new HTMLHRElementImpl(hTMLDocumentImpl0, "COKK");
      assertNotNull(hTMLHRElementImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      NodePointer nodePointer0 = NodePointer.newChildNodePointer((NodePointer) null, qName1, hTMLHRElementImpl0);
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(nodePointer0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(qName1.getPrefix());
      assertEquals("\"text\"", qName1.getName());
      assertEquals("\"text\"", qName1.toString());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isNode());
      assertTrue(nodePointer0.isActual());
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      
      HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl1, "COKK");
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLTableElementImpl0);
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      
      HTMLElement hTMLElement0 = hTMLTableElementImpl0.createTHead();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLElement0);
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(nodePointer0, hTMLElement0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(qName1.getPrefix());
      assertEquals("\"text\"", qName1.getName());
      assertEquals("\"text\"", qName1.toString());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isNode());
      assertTrue(nodePointer0.isActual());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      dOMNodePointer0.setValue(mutationEventImpl0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(qName1.getPrefix());
      assertEquals("\"text\"", qName1.getName());
      assertEquals("\"text\"", qName1.toString());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isNode());
      assertTrue(nodePointer0.isActual());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(qName1, qName0);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(dOMNodePointer0, nodePointer0);
      assertFalse(mutationEventImpl0.stopPropagation);
      assertFalse(mutationEventImpl0.cancelable);
      assertEquals((short)0, mutationEventImpl0.attrChange);
      assertEquals((short)0, mutationEventImpl0.eventPhase);
      assertFalse(mutationEventImpl0.preventDefault);
      assertFalse(mutationEventImpl0.initialized);
      assertTrue(mutationEventImpl0.bubbles);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertFalse(qName0.equals((Object)qName1));
      assertNotNull(variablePointer0);
      assertEquals("\"text\"", qName0.getName());
      assertEquals("\"text\":\"text\"", qName0.toString());
      assertEquals("\"text\"", qName0.getPrefix());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      BasicVariables basicVariables1 = new BasicVariables();
      assertFalse(basicVariables1.equals((Object)basicVariables0));
      assertNotNull(basicVariables1);
      
      Object object0 = dOMNodePointer0.getValue();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertNotNull(object0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(qName1.getPrefix());
      assertEquals("\"text\"", qName1.getName());
      assertEquals("\"text\"", qName1.toString());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isNode());
      assertTrue(nodePointer0.isActual());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(qName1, qName0);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(dOMNodePointer0, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(false, false);
      assertNotNull(deferredDocumentImpl0);
      
      CommentImpl commentImpl0 = new CommentImpl(deferredDocumentImpl0, "");
      assertNotNull(commentImpl0);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(commentImpl0, locale0, "");
      assertNotNull(dOMNodePointer0);
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(deferredDocumentImpl0, "R;T", "<<unknown namespace>>");
      assertNotNull(processingInstructionImpl0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, processingInstructionImpl0);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = dOMNodePointer1.getName();
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(qName0);
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals("R;T", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("R;T", qName0.getName());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      boolean boolean0 = dOMNodePointer0.isRoot();
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(boolean0);
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(processingInstructionImpl0, locale0, (String) null);
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer2);
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isAttribute());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean1 = dOMNodePointer2.isLanguage("http://www.w3.org/2000/xmlns/");
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isAttribute());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isCollection());
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Object object0 = dOMNodePointer2.getValue();
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNotNull(object0);
      assertEquals("<<unknown namespace>>", object0);
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isAttribute());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isCollection());
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Locale locale1 = Locale.GERMANY;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("de_DE", locale1.toString());
      assertEquals("DE", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.getLanguage());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("deu", locale1.getISO3Language());
      assertNotSame(locale1, locale0);
      
      DOMNodePointer dOMNodePointer3 = new DOMNodePointer(commentImpl0, locale1, (String) null);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer3);
      assertEquals("de_DE", locale1.toString());
      assertEquals("DE", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.getLanguage());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals(1, dOMNodePointer3.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertFalse(dOMNodePointer3.isContainer());
      assertTrue(dOMNodePointer3.isRoot());
      assertFalse(dOMNodePointer3.isCollection());
      assertTrue(dOMNodePointer3.isActual());
      assertTrue(dOMNodePointer3.isNode());
      assertFalse(dOMNodePointer3.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer4 = new DOMNodePointer(hTMLDocumentImpl0, locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer4);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("de_DE", locale1.toString());
      assertEquals("DE", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.getLanguage());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals(1, dOMNodePointer4.getLength());
      assertFalse(dOMNodePointer4.isCollection());
      assertTrue(dOMNodePointer4.isRoot());
      assertFalse(dOMNodePointer4.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer4.getIndex());
      assertTrue(dOMNodePointer4.isActual());
      assertTrue(dOMNodePointer4.isNode());
      assertFalse(dOMNodePointer4.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean2 = dOMNodePointer2.equals(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer4));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer3));
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isAttribute());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isCollection());
      assertEquals("de_DE", locale1.toString());
      assertEquals("DE", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.getLanguage());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("deu", locale1.getISO3Language());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer4);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer3);
      assertNotSame(locale1, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      MutationEventImpl mutationEventImpl0 = new MutationEventImpl();
      assertNotNull(mutationEventImpl0);
      assertFalse(mutationEventImpl0.stopPropagation);
      assertFalse(mutationEventImpl0.cancelable);
      assertEquals((short)0, mutationEventImpl0.attrChange);
      assertEquals((short)0, mutationEventImpl0.eventPhase);
      assertFalse(mutationEventImpl0.preventDefault);
      assertFalse(mutationEventImpl0.initialized);
      assertTrue(mutationEventImpl0.bubbles);
      
      QName qName0 = new QName((String) null, (String) null);
      assertNotNull(qName0);
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      
      boolean boolean0 = locale0.hasExtensions();
      assertFalse(boolean0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      
      Locale locale1 = Locale.US;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_US", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("US", locale1.getCountry());
      assertNotSame(locale1, locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "a_+");
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Locale locale2 = Locale.CANADA_FRENCH;
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertEquals("CA", locale2.getCountry());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("fr_CA", locale2.toString());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("fr", locale2.getLanguage());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      
      Locale locale3 = locale2.stripExtensions();
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale1));
      assertNotNull(locale3);
      assertEquals("CA", locale2.getCountry());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("fr_CA", locale2.toString());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("CA", locale3.getCountry());
      assertEquals("fra", locale3.getISO3Language());
      assertEquals("CAN", locale3.getISO3Country());
      assertEquals("fr_CA", locale3.toString());
      assertEquals("fr", locale3.getLanguage());
      assertEquals("", locale3.getVariant());
      assertNotSame(locale2, locale1);
      assertSame(locale2, locale3);
      assertNotSame(locale2, locale0);
      assertSame(locale3, locale2);
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale1);
      
      Node node0 = hTMLDocumentImpl0.getParentNode();
      assertNull(node0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      String string0 = DOMNodePointer.XMLNS_NAMESPACE_URI;
      assertNotNull(string0);
      assertEquals("http://www.w3.org/2000/xmlns/", string0);
      
      CDATASection cDATASection0 = hTMLDocumentImpl0.createCDATASection("<<unknown namespace>>");
      assertNotNull(cDATASection0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      CDATASection cDATASection1 = hTMLDocumentImpl0.createCDATASection((String) null);
      assertFalse(cDATASection1.equals((Object)cDATASection0));
      assertNotNull(cDATASection1);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotSame(cDATASection1, cDATASection0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(cDATASection1, locale3);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(cDATASection1.equals((Object)cDATASection0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("CA", locale2.getCountry());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("fr_CA", locale2.toString());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("CA", locale3.getCountry());
      assertEquals("fra", locale3.getISO3Language());
      assertEquals("CAN", locale3.getISO3Country());
      assertEquals("fr_CA", locale3.toString());
      assertEquals("fr", locale3.getLanguage());
      assertEquals("", locale3.getVariant());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      dOMNodePointer1.setValue("a_+");
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(cDATASection1.equals((Object)cDATASection0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("CA", locale2.getCountry());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("fr_CA", locale2.toString());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("CA", locale3.getCountry());
      assertEquals("fra", locale3.getISO3Language());
      assertEquals("CAN", locale3.getISO3Country());
      assertEquals("fr_CA", locale3.toString());
      assertEquals("fr", locale3.getLanguage());
      assertEquals("", locale3.getVariant());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isAttribute());
      assertNotSame(locale2, locale1);
      assertSame(locale2, locale3);
      assertNotSame(locale2, locale0);
      assertSame(locale3, locale2);
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale1);
      assertNotSame(cDATASection1, cDATASection0);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Locale locale4 = Locale.ROOT;
      assertFalse(locale4.equals((Object)locale0));
      assertFalse(locale4.equals((Object)locale1));
      assertFalse(locale4.equals((Object)locale2));
      assertFalse(locale4.equals((Object)locale3));
      assertNotNull(locale4);
      assertEquals("", locale4.toString());
      assertEquals("", locale4.getCountry());
      assertEquals("", locale4.getISO3Language());
      assertEquals("", locale4.getLanguage());
      assertEquals("", locale4.getISO3Country());
      assertEquals("", locale4.getVariant());
      assertNotSame(locale4, locale0);
      assertNotSame(locale4, locale1);
      assertNotSame(locale4, locale2);
      assertNotSame(locale4, locale3);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer1 = new VariablePointer(qName0);
      assertTrue(variablePointer1.equals((Object)variablePointer0));
      assertNotNull(variablePointer1);
      assertFalse(variablePointer1.isNode());
      assertFalse(variablePointer1.isActual());
      assertFalse(variablePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
      assertTrue(variablePointer1.isRoot());
      assertTrue(variablePointer1.isContainer());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(dOMNodePointer0, cDATASection0);
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(locale0.equals((Object)locale3));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale4));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(cDATASection0.equals((Object)cDATASection1));
      assertNotNull(dOMNodePointer2);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertFalse(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(1, dOMNodePointer2.getLength());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string1 = dOMNodePointer1.asPath();
      assertFalse(string1.equals((Object)string0));
      assertFalse(locale2.equals((Object)locale4));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale4));
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(cDATASection1.equals((Object)cDATASection0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertNotNull(string1);
      assertEquals("/text()[1]", string1);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("CA", locale2.getCountry());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("fr_CA", locale2.toString());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("CA", locale3.getCountry());
      assertEquals("fra", locale3.getISO3Language());
      assertEquals("CAN", locale3.getISO3Country());
      assertEquals("fr_CA", locale3.toString());
      assertEquals("fr", locale3.getLanguage());
      assertEquals("", locale3.getVariant());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isAttribute());
      assertNotSame(locale2, locale4);
      assertNotSame(locale2, locale1);
      assertSame(locale2, locale3);
      assertNotSame(locale2, locale0);
      assertNotSame(locale3, locale4);
      assertSame(locale3, locale2);
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale1);
      assertNotSame(cDATASection1, cDATASection0);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      HTMLParamElementImpl hTMLParamElementImpl0 = new HTMLParamElementImpl(hTMLDocumentImpl0, "ZUH!u<?+Z56^uqrkU");
      assertNotNull(hTMLParamElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      QName qName0 = new QName("xml");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("xml", qName0.getName());
      assertEquals("xml", qName0.toString());
      
      Attr attr0 = hTMLDocumentImpl0.createAttributeNS("ZUH!u<?+Z56^uqrkU", "org.apache.commons.jxpath.JXPathIntrospector");
      assertNotNull(attr0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
      assertNotNull(variablePointer0);
      assertNull(qName0.getPrefix());
      assertEquals("xml", qName0.getName());
      assertEquals("xml", qName0.toString());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, attr0);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(qName0.getPrefix());
      assertEquals("xml", qName0.getName());
      assertEquals("xml", qName0.toString());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = dOMNodePointer0.asPath();
      assertNotNull(string0);
      assertEquals("$xml", string0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(qName0.getPrefix());
      assertEquals("xml", qName0.getName());
      assertEquals("xml", qName0.toString());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean0 = dOMNodePointer0.isActual();
      assertTrue(boolean0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(qName0.getPrefix());
      assertEquals("xml", qName0.getName());
      assertEquals("xml", qName0.toString());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("xml", qName0.getName());
      assertEquals("xml", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("xml", nodeNameTest0.toString());
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.childIterator(nodeNameTest0, true, variablePointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      MutationEventImpl mutationEventImpl0 = new MutationEventImpl();
      assertNotNull(mutationEventImpl0);
      assertFalse(mutationEventImpl0.stopPropagation);
      assertTrue(mutationEventImpl0.bubbles);
      assertFalse(mutationEventImpl0.preventDefault);
      assertEquals((short)0, mutationEventImpl0.eventPhase);
      assertFalse(mutationEventImpl0.initialized);
      assertFalse(mutationEventImpl0.cancelable);
      assertEquals((short)0, mutationEventImpl0.attrChange);
      
      QName qName0 = new QName((String) null, (String) null);
      assertNotNull(qName0);
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      boolean boolean0 = locale0.hasExtensions();
      assertFalse(boolean0);
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = Locale.US;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("US", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en_US", locale1.toString());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertNotSame(locale1, locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, (String) null);
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Locale locale2 = Locale.CANADA_FRENCH;
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      assertEquals("fr", locale2.getLanguage());
      assertEquals("CA", locale2.getCountry());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("fr_CA", locale2.toString());
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      
      Locale locale3 = locale2.stripExtensions();
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale0));
      assertNotNull(locale3);
      assertEquals("fr", locale2.getLanguage());
      assertEquals("CA", locale2.getCountry());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("fr_CA", locale2.toString());
      assertEquals("CA", locale3.getCountry());
      assertEquals("fra", locale3.getISO3Language());
      assertEquals("", locale3.getVariant());
      assertEquals("fr_CA", locale3.toString());
      assertEquals("fr", locale3.getLanguage());
      assertEquals("CAN", locale3.getISO3Country());
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertSame(locale2, locale3);
      assertSame(locale3, locale2);
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale0);
      
      Node node0 = hTMLDocumentImpl0.getParentNode();
      assertNull(node0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      String string0 = DOMNodePointer.XMLNS_NAMESPACE_URI;
      assertNotNull(string0);
      assertEquals("http://www.w3.org/2000/xmlns/", string0);
      
      CDATASection cDATASection0 = hTMLDocumentImpl0.createCDATASection("<<unknown namespace>>");
      assertNotNull(cDATASection0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      CDATASection cDATASection1 = hTMLDocumentImpl0.createCDATASection((String) null);
      assertFalse(cDATASection1.equals((Object)cDATASection0));
      assertNotNull(cDATASection1);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotSame(cDATASection1, cDATASection0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(cDATASection1, locale3);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(cDATASection1.equals((Object)cDATASection0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("CA", locale2.getCountry());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("fr_CA", locale2.toString());
      assertEquals("CA", locale3.getCountry());
      assertEquals("fra", locale3.getISO3Language());
      assertEquals("", locale3.getVariant());
      assertEquals("fr_CA", locale3.toString());
      assertEquals("fr", locale3.getLanguage());
      assertEquals("CAN", locale3.getISO3Country());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer1.setValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      MutationEventImpl mutationEventImpl0 = new MutationEventImpl();
      assertNotNull(mutationEventImpl0);
      assertFalse(mutationEventImpl0.cancelable);
      assertEquals((short)0, mutationEventImpl0.attrChange);
      assertEquals((short)0, mutationEventImpl0.eventPhase);
      assertFalse(mutationEventImpl0.stopPropagation);
      assertFalse(mutationEventImpl0.initialized);
      assertTrue(mutationEventImpl0.bubbles);
      assertFalse(mutationEventImpl0.preventDefault);
      
      HTMLParamElementImpl hTMLParamElementImpl0 = new HTMLParamElementImpl(hTMLDocumentImpl0, "Factory is not set on the JXPathContext - cannot create path: ");
      assertNotNull(hTMLParamElementImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.getLanguage());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      QName qName0 = new QName("V\"l?Uy", "J\"kw*|u$pGaB");
      assertNotNull(qName0);
      assertEquals("J\"kw*|u$pGaB", qName0.getName());
      assertEquals("V\"l?Uy", qName0.getPrefix());
      assertEquals("V\"l?Uy:J\"kw*|u$pGaB", qName0.toString());
      
      QName qName1 = new QName("vx!;A5", "V\"l?Uy");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals("vx!;A5", qName1.getPrefix());
      assertEquals("V\"l?Uy", qName1.getName());
      assertEquals("vx!;A5:V\"l?Uy", qName1.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "m9{Bq^em");
      assertFalse(qName0.equals((Object)qName1));
      assertNotNull(nodeNameTest0);
      assertEquals("J\"kw*|u$pGaB", qName0.getName());
      assertEquals("V\"l?Uy", qName0.getPrefix());
      assertEquals("V\"l?Uy:J\"kw*|u$pGaB", qName0.toString());
      assertEquals("V\"l?Uy:J\"kw*|u$pGaB", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("m9{Bq^em", nodeNameTest0.getNamespaceURI());
      
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "charset");
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(nodeNameTest1);
      assertEquals("J\"kw*|u$pGaB", qName0.getName());
      assertEquals("V\"l?Uy", qName0.getPrefix());
      assertEquals("V\"l?Uy:J\"kw*|u$pGaB", qName0.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("charset", nodeNameTest1.getNamespaceURI());
      assertEquals("V\"l?Uy:J\"kw*|u$pGaB", nodeNameTest1.toString());
      
      Locale locale2 = Locale.FRENCH;
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("", locale2.getCountry());
      assertEquals("fr", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("fr", locale2.getLanguage());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale2);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("", locale2.getCountry());
      assertEquals("fr", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("fr", locale2.getLanguage());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("UNKNOWN NAMESPACE PREFIX");
      assertNotNull(processingInstructionTest0);
      assertEquals("UNKNOWN NAMESPACE PREFIX", processingInstructionTest0.getTarget());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      assertNotNull(nodeTypeTest0);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLParamElementImpl0, (NodeTest) nodeNameTest1);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(boolean0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("J\"kw*|u$pGaB", qName0.getName());
      assertEquals("V\"l?Uy", qName0.getPrefix());
      assertEquals("V\"l?Uy:J\"kw*|u$pGaB", qName0.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("charset", nodeNameTest1.getNamespaceURI());
      assertEquals("V\"l?Uy:J\"kw*|u$pGaB", nodeNameTest1.toString());
      assertNotSame(qName0, qName1);
      assertNotSame(nodeNameTest1, nodeNameTest0);
      
      int int0 = dOMNodePointer0.getLength();
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertEquals(1, int0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("", locale2.getCountry());
      assertEquals("fr", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("fr", locale2.getLanguage());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = dOMNodePointer0.getNamespaceURI("+fbWO{;zgyroE{;=3D ");
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNull(string0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("", locale2.getCountry());
      assertEquals("fr", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("fr", locale2.getLanguage());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Set<String> set0 = locale1.getUnicodeLocaleAttributes();
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale2));
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.getLanguage());
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertFalse(set0.contains("Factory is not set on the JXPathContext - cannot create path: "));
      
      boolean boolean1 = dOMNodePointer0.isLeaf();
      assertTrue(boolean1 == boolean0);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(boolean1);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("", locale2.getCountry());
      assertEquals("fr", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("fr", locale2.getLanguage());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLDocumentImpl0);
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("", locale2.getCountry());
      assertEquals("fr", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("fr", locale2.getLanguage());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(hTMLParamElementImpl0, locale1);
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale2));
      assertNotNull(dOMNodePointer2);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isAttribute());
      assertTrue(dOMNodePointer2.isNode());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.getLanguage());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string1 = dOMNodePointer2.asPath();
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale2));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isAttribute());
      assertTrue(dOMNodePointer2.isNode());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.getLanguage());
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer3 = new DOMNodePointer(dOMNodePointer2, hTMLParamElementImpl0);
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer3);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isAttribute());
      assertTrue(dOMNodePointer2.isNode());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.getLanguage());
      assertTrue(dOMNodePointer3.isActual());
      assertTrue(dOMNodePointer3.isNode());
      assertFalse(dOMNodePointer3.isRoot());
      assertFalse(dOMNodePointer3.isAttribute());
      assertEquals(1, dOMNodePointer3.getLength());
      assertFalse(dOMNodePointer3.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertFalse(dOMNodePointer3.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string2 = DOMNodePointer.getPrefix(hTMLParamElementImpl0);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("FACTORY IS NOT SET ON THE JXPATHCONTEXT - CANNOT CREATE PATH", string2);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      dOMNodePointer1.printPointerChain();
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("", locale2.getCountry());
      assertEquals("fr", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("fr", locale2.getLanguage());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer3);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertNotSame(dOMNodePointer0, dOMNodePointer3);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        DOMNodePointer.findEnclosingAttribute(hTMLParamElementImpl0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.html.dom.HTMLElementImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DocumentImpl documentImpl0 = new DocumentImpl(true);
      assertNotNull(documentImpl0);
      
      Locale locale0 = new Locale("bxkC7lp", "U5<s,cuc");
      assertNotNull(locale0);
      assertEquals("bxkc7lp_U5<S,CUC", locale0.toString());
      assertEquals("U5<S,CUC", locale0.getCountry());
      assertEquals("bxkc7lp", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(documentImpl0, locale0);
      assertNotNull(dOMNodePointer0);
      assertEquals("bxkc7lp_U5<S,CUC", locale0.toString());
      assertEquals("U5<S,CUC", locale0.getCountry());
      assertEquals("bxkc7lp", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("U5<s,cuc");
      assertNotNull(qName0);
      assertEquals("U5<s,cuc", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("U5<s,cuc", qName0.getName());
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNotNull(variablePointer0);
      assertEquals("U5<s,cuc", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("U5<s,cuc", qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.childIterator((NodeTest) null, true, variablePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'U5<s,cuc'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(false, false);
      assertNotNull(deferredDocumentImpl0);
      
      CommentImpl commentImpl0 = new CommentImpl(deferredDocumentImpl0, "");
      assertNotNull(commentImpl0);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(commentImpl0, locale0, "");
      assertNotNull(dOMNodePointer0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(deferredDocumentImpl0, "R;T", "<<unknown namespace>>");
      assertNotNull(processingInstructionImpl0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, processingInstructionImpl0);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = dOMNodePointer1.getName();
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(qName0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals("R;T", qName0.toString());
      assertEquals("R;T", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      boolean boolean0 = dOMNodePointer0.isRoot();
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(boolean0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(commentImpl0, locale0, "<<unknown namespace>>");
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer2);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(1, dOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertFalse(dOMNodePointer2.isAttribute());
      assertTrue(dOMNodePointer2.isRoot());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      int int0 = dOMNodePointer2.getLength();
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertEquals(1, int0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(1, dOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertFalse(dOMNodePointer2.isAttribute());
      assertTrue(dOMNodePointer2.isRoot());
      assertTrue(dOMNodePointer2.isActual());
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = dOMNodePointer0.getNamespaceURI("<<unknown namespace>>");
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNull(string0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains(""));
      
      boolean boolean1 = dOMNodePointer1.isLeaf();
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertTrue(dOMNodePointer1.isActual());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer3 = new DOMNodePointer(dOMNodePointer1, commentImpl0);
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer3);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer3.isRoot());
      assertTrue(dOMNodePointer3.isActual());
      assertFalse(dOMNodePointer3.isContainer());
      assertFalse(dOMNodePointer3.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertFalse(dOMNodePointer3.isCollection());
      assertTrue(dOMNodePointer3.isNode());
      assertEquals(1, dOMNodePointer3.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string1 = dOMNodePointer1.asPath();
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer3));
      assertNotNull(string1);
      assertEquals("id('')/processing-instruction('R;T')[1]", string1);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertTrue(dOMNodePointer1.isActual());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer3);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer3);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer4 = new DOMNodePointer(dOMNodePointer3, processingInstructionImpl0);
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer4.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer3));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer3));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer4);
      assertFalse(dOMNodePointer4.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer4.getIndex());
      assertEquals(1, dOMNodePointer4.getLength());
      assertFalse(dOMNodePointer4.isContainer());
      assertFalse(dOMNodePointer4.isCollection());
      assertTrue(dOMNodePointer4.isNode());
      assertFalse(dOMNodePointer4.isRoot());
      assertTrue(dOMNodePointer4.isActual());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer3.isRoot());
      assertTrue(dOMNodePointer3.isActual());
      assertFalse(dOMNodePointer3.isContainer());
      assertFalse(dOMNodePointer3.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertFalse(dOMNodePointer3.isCollection());
      assertTrue(dOMNodePointer3.isNode());
      assertEquals(1, dOMNodePointer3.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string2 = DOMNodePointer.getPrefix(processingInstructionImpl0);
      assertNull(string2);
      
      String string3 = DOMNodePointer.findEnclosingAttribute(commentImpl0, "<<unknown namespace>>");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      MutationEventImpl mutationEventImpl0 = new MutationEventImpl();
      assertNotNull(mutationEventImpl0);
      assertTrue(mutationEventImpl0.bubbles);
      assertFalse(mutationEventImpl0.cancelable);
      assertEquals((short)0, mutationEventImpl0.eventPhase);
      assertFalse(mutationEventImpl0.preventDefault);
      assertEquals((short)0, mutationEventImpl0.attrChange);
      assertFalse(mutationEventImpl0.initialized);
      assertFalse(mutationEventImpl0.stopPropagation);
      
      HTMLParamElementImpl hTMLParamElementImpl0 = new HTMLParamElementImpl(hTMLDocumentImpl0, "Factory is not set on the JXPathContext - cannot create path: ");
      assertNotNull(hTMLParamElementImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      QName qName0 = new QName("xml");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("xml", qName0.toString());
      assertEquals("xml", qName0.getName());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLParamElementImpl0, locale0);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName1 = new QName("e),:w.{vV7|3|z=v");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals("w.{vV7|3|z=v", qName1.getName());
      assertEquals("e),:w.{vV7|3|z=v", qName1.toString());
      assertEquals("e),", qName1.getPrefix());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) dOMNodePointer0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContext jXPathContext0 = jXPathContextReferenceImpl0.getParentContext();
      assertNull(jXPathContext0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      DOMAttributePointer dOMAttributePointer0 = (DOMAttributePointer)dOMNodePointer0.createAttribute((JXPathContext) null, qName0);
      assertFalse(qName0.equals((Object)qName1));
      assertNotNull(dOMAttributePointer0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(qName0.getPrefix());
      assertEquals("xml", qName0.toString());
      assertEquals("xml", qName0.getName());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMAttributePointer0.isRoot());
      assertTrue(dOMAttributePointer0.isNode());
      assertFalse(dOMAttributePointer0.isCollection());
      assertTrue(dOMAttributePointer0.isActual());
      assertFalse(dOMAttributePointer0.isAttribute());
      assertEquals(1, dOMAttributePointer0.getLength());
      assertFalse(dOMAttributePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMAttributePointer0.getIndex());
      assertTrue(dOMAttributePointer0.isLeaf());
      assertNotSame(qName0, qName1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLParamElementImpl0, locale0);
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isNode());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMAttributePointer dOMAttributePointer1 = (DOMAttributePointer)dOMNodePointer0.createAttribute(jXPathContextReferenceImpl0, qName0);
      assertFalse(qName0.equals((Object)qName1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMAttributePointer1.equals((Object)dOMAttributePointer0));
      assertNotNull(dOMAttributePointer1);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(qName0.getPrefix());
      assertEquals("xml", qName0.toString());
      assertEquals("xml", qName0.getName());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(dOMAttributePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMAttributePointer1.getIndex());
      assertTrue(dOMAttributePointer1.isLeaf());
      assertFalse(dOMAttributePointer1.isContainer());
      assertEquals(1, dOMAttributePointer1.getLength());
      assertFalse(dOMAttributePointer1.isCollection());
      assertTrue(dOMAttributePointer1.isNode());
      assertTrue(dOMAttributePointer1.isActual());
      assertFalse(dOMAttributePointer1.isAttribute());
      assertNotSame(qName0, qName1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMAttributePointer1, dOMAttributePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Locale locale1 = Locale.CHINA;
      assertNotNull(locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertSame(locale1, locale0);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "http://www.w3.org/XML/1998/namespace");
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer2);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(1, dOMNodePointer2.getLength());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isAttribute());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLParamElementImpl0, (NodeTest) null);
      assertTrue(boolean0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      boolean boolean1 = DOMNodePointer.testNode((Node) hTMLDocumentImpl0, (NodeTest) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      QName qName2 = dOMNodePointer0.getName();
      assertFalse(qName2.equals((Object)qName1));
      assertFalse(qName2.equals((Object)qName0));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertNotNull(qName2);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals(" ", qName2.getName());
      assertEquals("FACTORY IS NOT SET ON THE JXPATHCONTEXT - CANNOT CREATE PATH: ", qName2.toString());
      assertEquals("FACTORY IS NOT SET ON THE JXPATHCONTEXT - CANNOT CREATE PATH", qName2.getPrefix());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertNotSame(qName2, qName1);
      assertNotSame(qName2, qName0);
      assertSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      CommentImpl commentImpl0 = new CommentImpl(hTMLDocumentImpl0, "Unknown namespace prefix: ");
      assertNotNull(commentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      Locale locale1 = Locale.ROOT;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertNotSame(locale1, locale0);
      
      QName qName0 = new QName("Unknown namespace prefix: ");
      assertNotNull(qName0);
      assertEquals(" ", qName0.getName());
      assertEquals("Unknown namespace prefix", qName0.getPrefix());
      assertEquals("Unknown namespace prefix: ", qName0.toString());
      
      HTMLHRElementImpl hTMLHRElementImpl0 = new HTMLHRElementImpl(hTMLDocumentImpl0, "http");
      assertNotNull(hTMLHRElementImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, hTMLHRElementImpl0, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(nodePointer0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(" ", qName0.getName());
      assertEquals("Unknown namespace prefix", qName0.getPrefix());
      assertEquals("Unknown namespace prefix: ", qName0.toString());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertTrue(nodePointer0.isActual());
      assertTrue(nodePointer0.isNode());
      assertEquals(1, nodePointer0.getLength());
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NullPointer nullPointer0 = (NullPointer)NodePointer.newChildNodePointer(nodePointer0, qName0, (Object) null);
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(nullPointer0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(" ", qName0.getName());
      assertEquals("Unknown namespace prefix", qName0.getPrefix());
      assertEquals("Unknown namespace prefix: ", qName0.toString());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertTrue(nodePointer0.isActual());
      assertTrue(nodePointer0.isNode());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nullPointer0.isActual());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isRoot());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isAttribute());
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      
      HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl1, "1<QVx ;");
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLTableElementImpl0);
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      
      HTMLTableSectionElementImpl hTMLTableSectionElementImpl0 = (HTMLTableSectionElementImpl)hTMLTableElementImpl0.createTHead();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLTableSectionElementImpl0);
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      
      TextImpl textImpl0 = (TextImpl)hTMLDocumentImpl1.createTextNode("1<QVx ;");
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(textImpl0);
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(nodePointer0, textImpl0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(" ", qName0.getName());
      assertEquals("Unknown namespace prefix", qName0.getPrefix());
      assertEquals("Unknown namespace prefix: ", qName0.toString());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertTrue(nodePointer0.isActual());
      assertTrue(nodePointer0.isNode());
      assertEquals(1, nodePointer0.getLength());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLMapElementImpl hTMLMapElementImpl0 = new HTMLMapElementImpl(hTMLDocumentImpl0, "/");
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(hTMLMapElementImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      dOMNodePointer0.setValue(hTMLMapElementImpl0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(" ", qName0.getName());
      assertEquals("Unknown namespace prefix", qName0.getPrefix());
      assertEquals("Unknown namespace prefix: ", qName0.toString());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertTrue(nodePointer0.isActual());
      assertTrue(nodePointer0.isNode());
      assertEquals(1, nodePointer0.getLength());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(locale0, locale1);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(dOMNodePointer0, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Locale locale2 = Locale.ROOT;
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertEquals("", locale2.getISO3Language());
      assertEquals("", locale2.getLanguage());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      
      ElementDefinitionImpl elementDefinitionImpl0 = new ElementDefinitionImpl(hTMLDocumentImpl1, "format");
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(elementDefinitionImpl0);
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) dOMNodePointer0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertNotNull(jXPathContextReferenceImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(" ", qName0.getName());
      assertEquals("Unknown namespace prefix", qName0.getPrefix());
      assertEquals("Unknown namespace prefix: ", qName0.toString());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertTrue(nodePointer0.isActual());
      assertTrue(nodePointer0.isNode());
      assertEquals(1, nodePointer0.getLength());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(dOMNodePointer0, nodePointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      short short0 = elementDefinitionImpl0.getNodeType();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertEquals((short)21, short0);
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      
      HTMLFormElementImpl hTMLFormElementImpl0 = new HTMLFormElementImpl(hTMLDocumentImpl0, "1<QVx ;");
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(hTMLFormElementImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      JXPathContext jXPathContext0 = jXPathContextReferenceImpl0.getParentContext();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertNull(jXPathContext0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(" ", qName0.getName());
      assertEquals("Unknown namespace prefix", qName0.getPrefix());
      assertEquals("Unknown namespace prefix: ", qName0.toString());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertTrue(nodePointer0.isActual());
      assertTrue(nodePointer0.isNode());
      assertEquals(1, nodePointer0.getLength());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(dOMNodePointer0, nodePointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName1 = new QName("Unknown namespace prefix: ", "<5\\x+lsp`D$Nbg");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals("Unknown namespace prefix: :<5\\x+lsp`D$Nbg", qName1.toString());
      assertEquals("<5\\x+lsp`D$Nbg", qName1.getName());
      assertEquals("Unknown namespace prefix: ", qName1.getPrefix());
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.createChild((JXPathContext) null, qName1, Integer.MIN_VALUE, (Object) elementDefinitionImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      Attr attr0 = hTMLDocumentImpl0.createAttributeNS("THEAD", "THEAD");
      assertNotNull(attr0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Locale locale0 = jXPathContextReferenceImpl0.getLocale();
      assertNotNull(locale0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale1, "THEAD");
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      int int0 = dOMNodePointer0.getLength();
      assertEquals(1, int0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = dOMNodePointer0.getNamespaceURI("THEAD");
      assertNull(string0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DocumentType documentType0 = hTMLDocumentImpl0.getDoctype();
      assertNull(documentType0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) null);
      assertNotNull(wMLDocumentImpl0);
      
      WMLBigElementImpl wMLBigElementImpl0 = new WMLBigElementImpl(wMLDocumentImpl0, "THEAD");
      assertNotNull(wMLBigElementImpl0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, wMLDocumentImpl0);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = dOMNodePointer1.getName();
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(qName0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      PSVIElementNSImpl pSVIElementNSImpl0 = new PSVIElementNSImpl(hTMLDocumentImpl0, "DocType", "http://www.w3.org/XML/1998/namespace", "Q\"5m%\";KJm?b%YDJ;");
      assertNotNull(pSVIElementNSImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      DOMNodePointer dOMNodePointer2 = (DOMNodePointer)NodePointer.newChildNodePointer(dOMNodePointer0, qName0, pSVIElementNSImpl0);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer2);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isAttribute());
      assertFalse(dOMNodePointer2.isRoot());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(1, dOMNodePointer2.getLength());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      
      HTMLQuoteElementImpl hTMLQuoteElementImpl0 = new HTMLQuoteElementImpl(hTMLDocumentImpl1, "<");
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLQuoteElementImpl0);
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      
      HTMLDocumentImpl hTMLDocumentImpl2 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertNotNull(hTMLDocumentImpl2);
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getReferrer());
      
      boolean boolean0 = dOMNodePointer1.isLeaf();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertTrue(boolean0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer3 = new DOMNodePointer(dOMNodePointer1, hTMLDocumentImpl1);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl2));
      assertNotNull(dOMNodePointer3);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(1, dOMNodePointer3.getLength());
      assertTrue(dOMNodePointer3.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertFalse(dOMNodePointer3.isAttribute());
      assertFalse(dOMNodePointer3.isRoot());
      assertTrue(dOMNodePointer3.isActual());
      assertFalse(dOMNodePointer3.isContainer());
      assertFalse(dOMNodePointer3.isCollection());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      dOMNodePointer2.asPath();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      CommentImpl commentImpl0 = new CommentImpl(hTMLDocumentImpl0, "Unknown namespace prefix: ");
      assertNotNull(commentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = Locale.ROOT;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertNotSame(locale1, locale0);
      
      boolean boolean0 = locale0.hasExtensions();
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(boolean0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotSame(locale0, locale1);
      
      Locale locale2 = Locale.US;
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertEquals("US", locale2.getCountry());
      assertEquals("en_US", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("en", locale2.getLanguage());
      assertEquals("USA", locale2.getISO3Country());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(commentImpl0, locale1, "a_+");
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Locale locale3 = locale2.stripExtensions();
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale0));
      assertNotNull(locale3);
      assertEquals("US", locale2.getCountry());
      assertEquals("en_US", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("en", locale2.getLanguage());
      assertEquals("USA", locale2.getISO3Country());
      assertEquals("eng", locale3.getISO3Language());
      assertEquals("en", locale3.getLanguage());
      assertEquals("US", locale3.getCountry());
      assertEquals("", locale3.getVariant());
      assertEquals("USA", locale3.getISO3Country());
      assertEquals("en_US", locale3.toString());
      assertSame(locale2, locale3);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale0);
      assertSame(locale3, locale2);
      
      Locale locale4 = Locale.JAPANESE;
      assertFalse(locale4.equals((Object)locale1));
      assertFalse(locale4.equals((Object)locale3));
      assertFalse(locale4.equals((Object)locale2));
      assertNotNull(locale4);
      assertEquals("ja", locale4.getLanguage());
      assertEquals("", locale4.getISO3Country());
      assertEquals("", locale4.getVariant());
      assertEquals("ja", locale4.toString());
      assertEquals("", locale4.getCountry());
      assertEquals("jpn", locale4.getISO3Language());
      assertNotSame(locale4, locale1);
      assertSame(locale4, locale0);
      assertNotSame(locale4, locale3);
      assertNotSame(locale4, locale2);
      
      Node node0 = hTMLDocumentImpl0.getParentNode();
      assertNull(node0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      String string0 = DOMNodePointer.XMLNS_NAMESPACE_URI;
      assertNotNull(string0);
      assertEquals("http://www.w3.org/2000/xmlns/", string0);
      
      CDATASection cDATASection0 = hTMLDocumentImpl0.createCDATASection("http://www.w3.org/XML/1998/namespace");
      assertNotNull(cDATASection0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(cDATASection0, locale0);
      assertFalse(locale0.equals((Object)locale3));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      dOMNodePointer1.setValue(locale1);
      assertFalse(locale0.equals((Object)locale3));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale3));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale4));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertNotSame(locale0, locale3);
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale4);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale3);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale4);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLStyleElementImpl hTMLStyleElementImpl0 = new HTMLStyleElementImpl(hTMLDocumentImpl0, "|{CUC");
      assertNotNull(hTMLStyleElementImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      boolean boolean1 = dOMNodePointer0.equals(hTMLStyleElementImpl0);
      assertFalse(locale1.equals((Object)locale3));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale4));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertNotSame(locale1, locale3);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale4);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = null;
      String string0 = ";BS*X/";
      String string1 = DOMNodePointer.findEnclosingAttribute((Node) null, ";BS*X/");
      assertNull(string1);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = Locale.FRENCH;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("fr", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertNotSame(locale1, locale0);
      
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(set0);
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("fr", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotSame(locale1, locale0);
      assertFalse(set0.contains(";BS*X/"));
      
      String string2 = locale0.getDisplayScript(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("fr", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, (String) null);
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(dOMNodePointer0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Object object0 = dOMNodePointer0.getImmediateNode();
      assertFalse(locale0.equals((Object)locale1));
      assertNull(object0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean0 = dOMNodePointer0.isCollection();
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(boolean0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, (Node) null);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer1.getName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(false, false);
      assertNotNull(deferredDocumentImpl0);
      
      CommentImpl commentImpl0 = new CommentImpl(deferredDocumentImpl0, "");
      assertNotNull(commentImpl0);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(commentImpl0, locale0, "");
      assertNotNull(dOMNodePointer0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(deferredDocumentImpl0, "R;T", "<<unknown namespace>>");
      assertNotNull(processingInstructionImpl0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, processingInstructionImpl0);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = dOMNodePointer1.getName();
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(qName0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals("R;T", qName0.getName());
      assertEquals("R;T", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      HTMLTableCaptionElementImpl hTMLTableCaptionElementImpl0 = new HTMLTableCaptionElementImpl(hTMLDocumentImpl0, "org.apache.commons.jxpath.ri.parser.SimpleCharStream");
      assertNotNull(hTMLTableCaptionElementImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, hTMLTableCaptionElementImpl0, locale0);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(nodePointer0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals("R;T", qName0.getName());
      assertEquals("R;T", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isActual());
      assertTrue(nodePointer0.isNode());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isRoot());
      assertNotSame(dOMNodePointer0, nodePointer0);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, nodePointer0);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertNotSame(nodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(deferredDocumentImpl0, (String) null);
      assertNotNull(documentTypeImpl0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNotNull(wMLDocumentImpl0);
      
      WMLIElementImpl wMLIElementImpl0 = new WMLIElementImpl(wMLDocumentImpl0, "attribute::");
      assertNotNull(wMLIElementImpl0);
      
      NodePointer nodePointer1 = NodePointer.newChildNodePointer(nodePointer0, qName0, wMLIElementImpl0);
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(nodePointer1.equals((Object)nodePointer0));
      assertFalse(nodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(nodePointer1.equals((Object)dOMNodePointer1));
      assertNotNull(nodePointer1);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals("R;T", qName0.getName());
      assertEquals("R;T", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isActual());
      assertTrue(nodePointer0.isNode());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isRoot());
      assertFalse(nodePointer1.isCollection());
      assertFalse(nodePointer1.isContainer());
      assertTrue(nodePointer1.isActual());
      assertEquals(1, nodePointer1.getLength());
      assertFalse(nodePointer1.isAttribute());
      assertTrue(nodePointer1.isNode());
      assertFalse(nodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, nodePointer1.getIndex());
      assertNotSame(dOMNodePointer0, nodePointer0);
      assertNotSame(dOMNodePointer0, nodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, nodePointer1);
      assertNotSame(dOMNodePointer1, nodePointer0);
      assertNotSame(nodePointer0, nodePointer1);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertNotSame(nodePointer0, dOMNodePointer1);
      assertNotSame(nodePointer1, nodePointer0);
      assertNotSame(nodePointer1, dOMNodePointer0);
      assertNotSame(nodePointer1, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      
      HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl0, "<<unknown namespace>>");
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(hTMLTableElementImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      HTMLElement hTMLElement0 = hTMLTableElementImpl0.createTHead();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(hTMLElement0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(dOMNodePointer0, hTMLTableCaptionElementImpl0);
      assertTrue(dOMNodePointer2.equals((Object)nodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)nodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(dOMNodePointer0.equals((Object)nodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(dOMNodePointer2);
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      WMLTableElementImpl wMLTableElementImpl0 = new WMLTableElementImpl(wMLDocumentImpl0, " ");
      assertNotNull(wMLTableElementImpl0);
      
      dOMNodePointer1.setValue(wMLTableElementImpl0);
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)nodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)nodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)nodePointer0));
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertNotSame(dOMNodePointer0, nodePointer0);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, nodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, nodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Locale locale1 = Locale.ROOT;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertNotSame(locale1, locale0);
      
      ElementDefinitionImpl elementDefinitionImpl0 = new ElementDefinitionImpl(deferredDocumentImpl0, "9YxX{DU}d'%K");
      assertNotNull(elementDefinitionImpl0);
      
      HTMLOptionElementImpl hTMLOptionElementImpl0 = new HTMLOptionElementImpl(hTMLDocumentImpl1, "d{mATc=.A/");
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLOptionElementImpl0);
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) hTMLOptionElementImpl0);
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      HTMLFormElementImpl hTMLFormElementImpl0 = new HTMLFormElementImpl((HTMLDocumentImpl) null, "UNKNOWN NAMESPACE PREFIX");
      assertNotNull(hTMLFormElementImpl0);
      
      WMLTimerElementImpl wMLTimerElementImpl0 = new WMLTimerElementImpl(wMLDocumentImpl0, "u4`GX");
      assertNotNull(wMLTimerElementImpl0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer1.createChild((JXPathContext) jXPathContextReferenceImpl0, qName0, Integer.MIN_VALUE, (Object) wMLTimerElementImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: id('')/processing-instruction('R;T')[1]
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      Attr attr0 = hTMLDocumentImpl0.createAttributeNS("THEAD", "THEAD");
      assertNotNull(attr0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Locale locale0 = jXPathContextReferenceImpl0.getLocale();
      assertNotNull(locale0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale1.toString());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale1, "THEAD");
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale1.toString());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      int int0 = dOMNodePointer0.getLength();
      assertEquals(1, int0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale1.toString());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = dOMNodePointer0.getNamespaceURI("THEAD");
      assertNull(string0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale1.toString());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DocumentType documentType0 = hTMLDocumentImpl0.getDoctype();
      assertNull(documentType0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) null);
      assertNotNull(wMLDocumentImpl0);
      
      WMLBigElementImpl wMLBigElementImpl0 = new WMLBigElementImpl(wMLDocumentImpl0, "THEAD");
      assertNotNull(wMLBigElementImpl0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, wMLDocumentImpl0);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale1.toString());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = dOMNodePointer1.getName();
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(qName0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale1.toString());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string1 = "DocType";
      PSVIElementNSImpl pSVIElementNSImpl0 = new PSVIElementNSImpl(hTMLDocumentImpl0, "DocType", "http://www.w3.org/XML/1998/namespace", "Q\"5m%\";KJm?b%YDJ;");
      assertNotNull(pSVIElementNSImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      DOMNodePointer dOMNodePointer2 = (DOMNodePointer)NodePointer.newChildNodePointer(dOMNodePointer0, qName0, pSVIElementNSImpl0);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer2);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale1.toString());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isRoot());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isAttribute());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      
      HTMLQuoteElementImpl hTMLQuoteElementImpl0 = new HTMLQuoteElementImpl(hTMLDocumentImpl1, "<");
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLQuoteElementImpl0);
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      
      HTMLDocumentImpl hTMLDocumentImpl2 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertNotNull(hTMLDocumentImpl2);
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getURL());
      
      Locale locale2 = Locale.TRADITIONAL_CHINESE;
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertEquals("TW", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("zh_TW", locale2.toString());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("TWN", locale2.getISO3Country());
      assertEquals("zh", locale2.getLanguage());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      
      DOMNodePointer dOMNodePointer3 = (DOMNodePointer)NodePointer.newNodePointer(qName0, hTMLDocumentImpl2, locale2);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer3);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getURL());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("TW", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("zh_TW", locale2.toString());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("TWN", locale2.getISO3Country());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertTrue(dOMNodePointer3.isNode());
      assertFalse(dOMNodePointer3.isAttribute());
      assertFalse(dOMNodePointer3.isCollection());
      assertEquals(1, dOMNodePointer3.getLength());
      assertTrue(dOMNodePointer3.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertFalse(dOMNodePointer3.isContainer());
      assertTrue(dOMNodePointer3.isRoot());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale1.toString());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(dOMNodePointer3, dOMNodePointer0);
      assertNotSame(dOMNodePointer3, dOMNodePointer2);
      assertNotSame(dOMNodePointer3, dOMNodePointer1);
      assertSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(dOMNodePointer0, dOMNodePointer3);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer3);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      int int1 = dOMNodePointer0.compareChildNodePointers(dOMNodePointer2, dOMNodePointer1);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(int1 == int0);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertEquals(0, int1);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale1.toString());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isRoot());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isAttribute());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(dOMNodePointer0, dOMNodePointer3);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer3);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer3);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer1.getNamespaceURI();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      HTMLOptionElementImpl hTMLOptionElementImpl0 = new HTMLOptionElementImpl(hTMLDocumentImpl0, ")Z<!}K <4f^p[h^j");
      assertNotNull(hTMLOptionElementImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      
      Node node0 = hTMLDocumentImpl1.adoptNode(hTMLOptionElementImpl0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(node0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertSame(hTMLOptionElementImpl0, node0);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertSame(node0, hTMLOptionElementImpl0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(node0, locale0, "xmlns");
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      HTMLParamElementImpl hTMLParamElementImpl0 = new HTMLParamElementImpl(hTMLDocumentImpl1, ")Z<!}K <4f^p[h^j");
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLParamElementImpl0);
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      
      String string0 = dOMNodePointer0.getNamespaceURI("bxkC7lp");
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNull(string0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertSame(hTMLOptionElementImpl0, node0);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertSame(node0, hTMLOptionElementImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("bxkC7lp"));
      
      boolean boolean2 = dOMNodePointer0.isLeaf();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertSame(hTMLOptionElementImpl0, node0);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertSame(node0, hTMLOptionElementImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Document document0 = hTMLDocumentImpl1.getOwnerDocument();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNull(document0);
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      
      Element element0 = hTMLDocumentImpl1.getDocumentElement();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(element0);
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, (Node) null);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string1 = dOMNodePointer0.asPath();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(string1);
      assertEquals("id('xmlns')", string1);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertSame(hTMLOptionElementImpl0, node0);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertSame(node0, hTMLOptionElementImpl0);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = new QName("6J8Iz[|=&");
      assertNotNull(qName0);
      assertEquals("6J8Iz[|=&", qName0.getName());
      assertEquals("6J8Iz[|=&", qName0.toString());
      assertNull(qName0.getPrefix());
      
      NodeIterator nodeIterator0 = dOMNodePointer0.attributeIterator(qName0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(nodeIterator0);
      assertEquals("6J8Iz[|=&", qName0.getName());
      assertEquals("6J8Iz[|=&", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals(0, nodeIterator0.getPosition());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertSame(hTMLOptionElementImpl0, node0);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertSame(node0, hTMLOptionElementImpl0);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NamespaceResolver namespaceResolver0 = dOMNodePointer0.getNamespaceResolver();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(namespaceResolver0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertFalse(namespaceResolver0.isSealed());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertSame(hTMLOptionElementImpl0, node0);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertSame(node0, hTMLOptionElementImpl0);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(dOMNodePointer0, node0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer2);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertFalse(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(1, dOMNodePointer2.getLength());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string2 = dOMNodePointer2.asPath();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertNotNull(string2);
      assertEquals("id('xmlns')/)Z<!}K <4F^P[H^J[1]", string2);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertFalse(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(1, dOMNodePointer2.getLength());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertSame(hTMLOptionElementImpl0, node0);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertSame(node0, hTMLOptionElementImpl0);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer3 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer3);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer3.isNode());
      assertTrue(dOMNodePointer3.isActual());
      assertEquals(1, dOMNodePointer3.getLength());
      assertFalse(dOMNodePointer3.isAttribute());
      assertTrue(dOMNodePointer3.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertFalse(dOMNodePointer3.isCollection());
      assertFalse(dOMNodePointer3.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NodeIterator nodeIterator1 = dOMNodePointer3.namespaceIterator();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertNotNull(nodeIterator1);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer3.isNode());
      assertTrue(dOMNodePointer3.isActual());
      assertEquals(1, dOMNodePointer3.getLength());
      assertFalse(dOMNodePointer3.isAttribute());
      assertTrue(dOMNodePointer3.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertFalse(dOMNodePointer3.isCollection());
      assertFalse(dOMNodePointer3.isContainer());
      assertEquals(0, nodeIterator1.getPosition());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(dOMNodePointer3, dOMNodePointer0);
      assertNotSame(dOMNodePointer3, dOMNodePointer2);
      assertNotSame(dOMNodePointer3, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      
      Locale locale1 = Locale.GERMAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.getLanguage());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale1, locale0);
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      EntityReference entityReference0 = hTMLDocumentImpl0.createEntityReference("hVJFK1yDuH");
      assertNotNull(entityReference0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      String string0 = locale1.getDisplayLanguage();
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string0);
      assertEquals("German", string0);
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.getLanguage());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale1, locale0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      PSVIElementNSImpl pSVIElementNSImpl0 = new PSVIElementNSImpl(hTMLDocumentImpl0, "org.apache.commons.jxpath.ri.JXPathContextReferenceImpl@0000000007", (String) null, (String) null);
      assertNotNull(pSVIElementNSImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(pSVIElementNSImpl0, locale1, "German");
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(dOMNodePointer0);
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.getLanguage());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean1 = dOMNodePointer0.isAttribute();
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.getLanguage());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertNotSame(locale1, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(pSVIElementNSImpl0, locale1, "German");
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.getLanguage());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string1 = dOMNodePointer0.getDefaultNamespaceURI();
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNull(string1);
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.getLanguage());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Object object0 = dOMNodePointer1.getValue();
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(object0.equals((Object)string0));
      assertNotNull(object0);
      assertEquals("", object0);
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.getLanguage());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Locale locale2 = Locale.ENGLISH;
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      assertEquals("en", locale2.toString());
      assertEquals("en", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getCountry());
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      
      String string2 = dOMNodePointer1.getDefaultNamespaceURI();
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNull(string2);
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.getLanguage());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLOptionElementImpl hTMLOptionElementImpl0 = new HTMLOptionElementImpl(hTMLDocumentImpl0, "]PlN:~3gsX;f1");
      assertNotNull(hTMLOptionElementImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      assertNotNull(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNotNull(wMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      WMLTimerElementImpl wMLTimerElementImpl0 = new WMLTimerElementImpl(wMLDocumentImpl0, "/s8<j?blE");
      assertNotNull(wMLTimerElementImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl(documentTypeImpl0);
      assertNotNull(pSVIDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.setValue(pSVIDocumentImpl0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // WRONG_DOCUMENT_ERR: A node is used in a different document than the one that created it.
         //
         verifyException("org.apache.xerces.dom.ParentNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      
      Locale locale1 = Locale.GERMAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertNotSame(locale1, locale0);
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      EntityReference entityReference0 = hTMLDocumentImpl0.createEntityReference("hVJFK1yDuH");
      assertNotNull(entityReference0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      String string0 = locale1.getDisplayLanguage();
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string0);
      assertEquals("German", string0);
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertNotSame(locale1, locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(entityReference0, locale1, "hVJFK1yDuH");
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(dOMNodePointer0);
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(entityReference0, locale1, "MIHDJJ");
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(entityReference0, locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer2);
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(1, dOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string1 = dOMNodePointer2.getDefaultNamespaceURI();
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertNull(string1);
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(1, dOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isNode());
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Object object0 = dOMNodePointer1.getValue();
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(object0.equals((Object)string0));
      assertNotNull(object0);
      assertEquals("", object0);
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isCollection());
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean0 = dOMNodePointer2.isCollection();
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(boolean0);
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(1, dOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isNode());
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      int int0 = dOMNodePointer2.getLength();
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertEquals(1, int0);
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(1, dOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isNode());
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string2 = dOMNodePointer0.getNamespaceURI("xml");
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)object0));
      assertNotNull(string2);
      assertEquals("http://www.w3.org/XML/1998/namespace", string2);
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Set<String> set0 = locale1.getUnicodeLocaleAttributes();
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(set0);
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotSame(locale1, locale0);
      assertFalse(set0.contains(object0));
      
      boolean boolean1 = dOMNodePointer1.isLeaf();
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isCollection());
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer3 = new DOMNodePointer(dOMNodePointer1, hTMLDocumentImpl0);
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer3);
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer3.isAttribute());
      assertFalse(dOMNodePointer3.isRoot());
      assertTrue(dOMNodePointer3.isNode());
      assertEquals(1, dOMNodePointer3.getLength());
      assertTrue(dOMNodePointer3.isActual());
      assertFalse(dOMNodePointer3.isCollection());
      assertFalse(dOMNodePointer3.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string3 = dOMNodePointer1.asPath();
      assertFalse(string3.equals((Object)object0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer3));
      assertNotNull(string3);
      assertEquals("id('MIHDJJ')", string3);
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isCollection());
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer3);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = new QName("hVJFK1yDuH");
      assertNotNull(qName0);
      assertEquals("hVJFK1yDuH", qName0.getName());
      assertEquals("hVJFK1yDuH", qName0.toString());
      assertNull(qName0.getPrefix());
      
      NodeIterator nodeIterator0 = dOMNodePointer3.attributeIterator(qName0);
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertNotNull(nodeIterator0);
      assertEquals("hVJFK1yDuH", qName0.getName());
      assertEquals("hVJFK1yDuH", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals(0, nodeIterator0.getPosition());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer3.isAttribute());
      assertFalse(dOMNodePointer3.isRoot());
      assertTrue(dOMNodePointer3.isNode());
      assertEquals(1, dOMNodePointer3.getLength());
      assertTrue(dOMNodePointer3.isActual());
      assertFalse(dOMNodePointer3.isCollection());
      assertFalse(dOMNodePointer3.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer3);
      assertNotSame(dOMNodePointer3, dOMNodePointer1);
      assertNotSame(dOMNodePointer3, dOMNodePointer2);
      assertNotSame(dOMNodePointer3, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NamespaceResolver namespaceResolver0 = dOMNodePointer2.getNamespaceResolver();
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer3));
      assertNotNull(namespaceResolver0);
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertFalse(namespaceResolver0.isSealed());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(1, dOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isNode());
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer3);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer4 = new DOMNodePointer(dOMNodePointer2, hTMLDocumentImpl0);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer4.equals((Object)dOMNodePointer3));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer3));
      assertNotNull(dOMNodePointer4);
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertFalse(dOMNodePointer4.isCollection());
      assertFalse(dOMNodePointer4.isContainer());
      assertTrue(dOMNodePointer4.isActual());
      assertEquals(1, dOMNodePointer4.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer4.getIndex());
      assertFalse(dOMNodePointer4.isRoot());
      assertTrue(dOMNodePointer4.isNode());
      assertFalse(dOMNodePointer4.isAttribute());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(1, dOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string4 = dOMNodePointer0.asPath();
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)object0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer4));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertNotNull(string4);
      assertEquals("id('hVJFK1yDuH')", string4);
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer0, dOMNodePointer4);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer3);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NodeIterator nodeIterator1 = dOMNodePointer1.namespaceIterator();
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer4));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer3));
      assertNotNull(nodeIterator1);
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals(0, nodeIterator1.getPosition());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isCollection());
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer1, dOMNodePointer4);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer3);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(false, false);
      assertNotNull(deferredDocumentImpl0);
      
      CommentImpl commentImpl0 = new CommentImpl(deferredDocumentImpl0, "");
      assertNotNull(commentImpl0);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(commentImpl0, locale0);
      assertNotNull(dOMNodePointer0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "");
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, deferredDocumentImpl0);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = dOMNodePointer1.getName();
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(qName0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      int int0 = dOMNodePointer1.getLength();
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertEquals(1, int0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = dOMNodePointer0.getNamespaceURI("I");
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNull(string0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains(""));
      
      boolean boolean0 = dOMNodePointer0.isNode();
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(boolean0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(dOMNodePointer1, deferredDocumentImpl0);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer2);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isContainer());
      assertFalse(dOMNodePointer2.isRoot());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertNotNull(variablePointer0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertNotNull(nodePointer0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer3 = new DOMNodePointer(nodePointer0, deferredDocumentImpl0);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer3);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(dOMNodePointer3.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertEquals(1, dOMNodePointer3.getLength());
      assertFalse(dOMNodePointer3.isCollection());
      assertTrue(dOMNodePointer3.isNode());
      assertTrue(dOMNodePointer3.isActual());
      assertFalse(dOMNodePointer3.isAttribute());
      assertFalse(dOMNodePointer3.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName1 = dOMNodePointer3.getName();
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertNotNull(qName1);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(dOMNodePointer3.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertEquals(1, dOMNodePointer3.getLength());
      assertFalse(dOMNodePointer3.isCollection());
      assertTrue(dOMNodePointer3.isNode());
      assertTrue(dOMNodePointer3.isActual());
      assertFalse(dOMNodePointer3.isAttribute());
      assertFalse(dOMNodePointer3.isRoot());
      assertNull(qName1.getPrefix());
      assertNull(qName1.toString());
      assertNull(qName1.getName());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer3);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer3);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(qName0, qName1);
      assertNotSame(dOMNodePointer3, dOMNodePointer1);
      assertNotSame(dOMNodePointer3, dOMNodePointer2);
      assertNotSame(dOMNodePointer3, dOMNodePointer0);
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertNotNull(nodeNameTest0);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean1 = DOMNodePointer.testNode((Node) deferredDocumentImpl0, (NodeTest) nodeNameTest0);
      assertFalse(boolean1 == boolean0);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(boolean1);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer3);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer3);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(qName0, qName1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer3.namespaceIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      
      Locale locale1 = Locale.GERMAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertNotSame(locale1, locale0);
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      EntityReference entityReference0 = hTMLDocumentImpl0.createEntityReference("hVJFK1yDuH");
      assertNotNull(entityReference0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(entityReference0, locale1, "hVJFK1yDuH");
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(dOMNodePointer0);
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean0 = dOMNodePointer0.isActual();
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(boolean0);
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNotSame(locale1, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(entityReference0, locale1, " ");
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = dOMNodePointer0.getDefaultNamespaceURI();
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNull(string0);
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Object object0 = dOMNodePointer0.getValue();
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(object0);
      assertEquals("", object0);
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean1 = dOMNodePointer1.isCollection();
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Locale locale2 = Locale.ENGLISH;
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      assertEquals("", locale2.getVariant());
      assertEquals("en", locale2.toString());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertEquals("en", locale2.getLanguage());
      assertEquals("", locale2.getCountry());
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(hTMLDocumentImpl0, locale2);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer2);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale2.getVariant());
      assertEquals("en", locale2.toString());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertEquals("en", locale2.getLanguage());
      assertEquals("", locale2.getCountry());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isRoot());
      assertEquals(1, dOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLTextAreaElementImpl hTMLTextAreaElementImpl0 = new HTMLTextAreaElementImpl(hTMLDocumentImpl0, ":");
      assertNotNull(hTMLTextAreaElementImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      DOMNodePointer dOMNodePointer3 = new DOMNodePointer(entityReference0, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer3);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertTrue(dOMNodePointer3.isNode());
      assertTrue(dOMNodePointer3.isActual());
      assertEquals(1, dOMNodePointer3.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertFalse(dOMNodePointer3.isAttribute());
      assertFalse(dOMNodePointer3.isContainer());
      assertTrue(dOMNodePointer3.isRoot());
      assertFalse(dOMNodePointer3.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer4 = new DOMNodePointer(entityReference0, locale2);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer4.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer4.equals((Object)dOMNodePointer3));
      assertTrue(dOMNodePointer4.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer4);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale2.getVariant());
      assertEquals("en", locale2.toString());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertEquals("en", locale2.getLanguage());
      assertEquals("", locale2.getCountry());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer4.getIndex());
      assertEquals(1, dOMNodePointer4.getLength());
      assertTrue(dOMNodePointer4.isNode());
      assertFalse(dOMNodePointer4.isAttribute());
      assertTrue(dOMNodePointer4.isActual());
      assertFalse(dOMNodePointer4.isContainer());
      assertTrue(dOMNodePointer4.isRoot());
      assertFalse(dOMNodePointer4.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      assertNotNull(nodeTypeTest0);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      
      boolean boolean2 = dOMNodePointer4.testNode(nodeTypeTest0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(dOMNodePointer4.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer4.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer4.equals((Object)dOMNodePointer3));
      assertTrue(dOMNodePointer4.equals((Object)dOMNodePointer1));
      assertFalse(boolean2);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale2.getVariant());
      assertEquals("en", locale2.toString());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertEquals("en", locale2.getLanguage());
      assertEquals("", locale2.getCountry());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer4.getIndex());
      assertEquals(1, dOMNodePointer4.getLength());
      assertTrue(dOMNodePointer4.isNode());
      assertFalse(dOMNodePointer4.isAttribute());
      assertTrue(dOMNodePointer4.isActual());
      assertFalse(dOMNodePointer4.isContainer());
      assertTrue(dOMNodePointer4.isRoot());
      assertFalse(dOMNodePointer4.isCollection());
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertNotSame(dOMNodePointer4, dOMNodePointer3);
      assertNotSame(dOMNodePointer4, dOMNodePointer2);
      assertNotSame(dOMNodePointer4, dOMNodePointer1);
      assertNotSame(dOMNodePointer4, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("qHp8d`-OQ_'\"$e|6");
      assertNotNull(processingInstructionTest0);
      assertEquals("qHp8d`-OQ_'\"$e|6", processingInstructionTest0.getTarget());
      
      boolean boolean3 = DOMNodePointer.testNode((Node) entityReference0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      
      String string1 = DOMNodePointer.getLocalName(hTMLTextAreaElementImpl0);
      assertTrue(string1.equals((Object)object0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      String string2 = NodePointer.UNKNOWN_NAMESPACE;
      assertFalse(string2.equals((Object)object0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("<<unknown namespace>>", string2);
      
      DocumentFragmentImpl documentFragmentImpl0 = new DocumentFragmentImpl();
      assertNotNull(documentFragmentImpl0);
      
      CommentImpl commentImpl0 = new CommentImpl(hTMLDocumentImpl0, "&=`eq20");
      assertNotNull(commentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      DOMNodePointer dOMNodePointer5 = new DOMNodePointer(commentImpl0, locale2, "nl=cra\"");
      assertFalse(dOMNodePointer5.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer5.equals((Object)dOMNodePointer4));
      assertFalse(dOMNodePointer5.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer5.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer5.equals((Object)dOMNodePointer3));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(dOMNodePointer5);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertTrue(dOMNodePointer5.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer5.getIndex());
      assertTrue(dOMNodePointer5.isActual());
      assertFalse(dOMNodePointer5.isCollection());
      assertFalse(dOMNodePointer5.isContainer());
      assertFalse(dOMNodePointer5.isAttribute());
      assertTrue(dOMNodePointer5.isRoot());
      assertEquals(1, dOMNodePointer5.getLength());
      assertEquals("", locale2.getVariant());
      assertEquals("en", locale2.toString());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertEquals("en", locale2.getLanguage());
      assertEquals("", locale2.getCountry());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Locale locale3 = new Locale(":", "hVJFK1yDuH");
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale1));
      assertNotNull(locale3);
      assertEquals("HVJFK1YDUH", locale3.getCountry());
      assertEquals("", locale3.getVariant());
      assertEquals(":_HVJFK1YDUH", locale3.toString());
      assertEquals(":", locale3.getLanguage());
      
      DOMNodePointer dOMNodePointer6 = new DOMNodePointer(documentFragmentImpl0, locale3);
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(dOMNodePointer6.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer6.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer6.equals((Object)dOMNodePointer5));
      assertFalse(dOMNodePointer6.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer6.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer6.equals((Object)dOMNodePointer4));
      assertNotNull(dOMNodePointer6);
      assertEquals("HVJFK1YDUH", locale3.getCountry());
      assertEquals("", locale3.getVariant());
      assertEquals(":_HVJFK1YDUH", locale3.toString());
      assertEquals(":", locale3.getLanguage());
      assertFalse(dOMNodePointer6.isCollection());
      assertFalse(dOMNodePointer6.isContainer());
      assertTrue(dOMNodePointer6.isRoot());
      assertEquals(1, dOMNodePointer6.getLength());
      assertTrue(dOMNodePointer6.isNode());
      assertFalse(dOMNodePointer6.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer6.getIndex());
      assertTrue(dOMNodePointer6.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer6.getNamespaceURI();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.xerces.dom.DocumentFragmentImpl cannot be cast to org.w3c.dom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      
      Locale locale1 = Locale.GERMAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.toString());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertNotSame(locale1, locale0);
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      EntityReference entityReference0 = hTMLDocumentImpl0.createEntityReference("hVJFK1yDuL");
      assertNotNull(entityReference0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(entityReference0, locale1, "hVJFK1yDuL");
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(dOMNodePointer0);
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.toString());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean0 = dOMNodePointer0.isActual();
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(boolean0);
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.toString());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(locale1, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(entityReference0, locale1, " ");
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.toString());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = dOMNodePointer0.getDefaultNamespaceURI();
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNull(string0);
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.toString());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Object object0 = dOMNodePointer0.getValue();
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(object0);
      assertEquals("", object0);
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.toString());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean1 = dOMNodePointer1.isCollection();
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.toString());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      int int0 = dOMNodePointer0.getLength();
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertEquals(1, int0);
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.toString());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string1 = dOMNodePointer1.getNamespaceURI("rel");
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNull(string1);
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.toString());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(set0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotSame(locale0, locale1);
      assertFalse(set0.contains("hVJFK1yDuL"));
      
      boolean boolean2 = dOMNodePointer0.isLeaf();
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.toString());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(dOMNodePointer1, entityReference0);
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer2);
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.toString());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isRoot());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string2 = dOMNodePointer2.asPath();
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(string2.equals((Object)object0));
      assertNotNull(string2);
      assertEquals("id(' ')", string2);
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.toString());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isRoot());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      NodeIterator nodeIterator0 = dOMNodePointer0.attributeIterator(qName0);
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(nodeIterator0);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(0, nodeIterator0.getPosition());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.toString());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NamespaceResolver namespaceResolver0 = dOMNodePointer0.getNamespaceResolver();
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(namespaceResolver0);
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.toString());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertFalse(namespaceResolver0.isSealed());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer3 = new DOMNodePointer(dOMNodePointer1, entityReference0);
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertNotNull(dOMNodePointer3);
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.toString());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertTrue(dOMNodePointer3.isActual());
      assertFalse(dOMNodePointer3.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertFalse(dOMNodePointer3.isCollection());
      assertTrue(dOMNodePointer3.isNode());
      assertEquals(1, dOMNodePointer3.getLength());
      assertFalse(dOMNodePointer3.isAttribute());
      assertFalse(dOMNodePointer3.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string3 = dOMNodePointer3.asPath();
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertFalse(string3.equals((Object)object0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer3));
      assertNotNull(string3);
      assertEquals("id(' ')", string3);
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.toString());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertTrue(dOMNodePointer3.isActual());
      assertFalse(dOMNodePointer3.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertFalse(dOMNodePointer3.isCollection());
      assertTrue(dOMNodePointer3.isNode());
      assertEquals(1, dOMNodePointer3.getLength());
      assertFalse(dOMNodePointer3.isAttribute());
      assertFalse(dOMNodePointer3.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer3, dOMNodePointer0);
      assertNotSame(dOMNodePointer3, dOMNodePointer1);
      assertNotSame(dOMNodePointer3, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer3);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NodeIterator nodeIterator1 = dOMNodePointer1.namespaceIterator();
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer3));
      assertNotNull(nodeIterator1);
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.toString());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals(0, nodeIterator1.getPosition());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer1, dOMNodePointer3);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      Attr attr0 = hTMLDocumentImpl0.createAttributeNS("THEAD", "THEAD");
      assertNotNull(attr0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, attr0);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = dOMNodePointer0.asPath();
      assertNotNull(string0);
      assertEquals("", string0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(false, false);
      assertNotNull(deferredDocumentImpl0);
      
      CommentImpl commentImpl0 = new CommentImpl(deferredDocumentImpl0, "");
      assertNotNull(commentImpl0);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(commentImpl0, locale0);
      assertNotNull(dOMNodePointer0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "");
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, deferredDocumentImpl0);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = dOMNodePointer1.getName();
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(qName0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isActual());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      int int0 = dOMNodePointer1.getLength();
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertEquals(1, int0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isActual());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = dOMNodePointer0.getNamespaceURI("I");
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNull(string0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains(""));
      
      // Undeclared exception!
      try { 
        dOMNodePointer1.isLeaf();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.dom.DeferredDocumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "\" could not be added as the root of the document: ");
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      QName qName0 = dOMNodePointer0.getName();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(qName0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      int int0 = dOMNodePointer0.getLength();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertEquals(1, int0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = dOMNodePointer0.getNamespaceURI("7: d^");
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNull(string0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean2 = dOMNodePointer0.isLeaf();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string1 = dOMNodePointer0.asPath();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(string1);
      assertEquals("id('&quot; could not be added as the root of the document: ')", string1);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NodeIterator nodeIterator0 = dOMNodePointer0.attributeIterator(qName0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(nodeIterator0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertEquals(0, nodeIterator0.getPosition());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      HTMLFrameElementImpl hTMLFrameElementImpl0 = new HTMLFrameElementImpl(hTMLDocumentImpl0, "68*:7MwD:ey%_&es3");
      assertNotNull(hTMLFrameElementImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) hTMLFrameElementImpl0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Locale locale0 = jXPathContextReferenceImpl0.getLocale();
      assertNotNull(locale0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLFrameElementImpl0, locale0);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte) (-43);
      byteArray0[6] = (byte)15;
      byteArray0[7] = (byte)0;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)64, (byte) (-51), (byte)24, (byte) (-91), (byte)87, (byte) (-43), (byte)15, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean0);
      
      QName qName0 = null;
      // Undeclared exception!
      try { 
        dOMNodePointer0.createAttribute(jXPathContextReferenceImpl0, (QName) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(true);
      assertNotNull(deferredDocumentImpl0);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      
      Locale locale1 = Locale.US;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("US", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_US", locale1.toString());
      assertNotSame(locale1, locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(deferredDocumentImpl0, locale1, (String) null);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(dOMNodePointer0);
      assertEquals("US", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_US", locale1.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Locale locale2 = locale1.stripExtensions();
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertEquals("US", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_US", locale1.toString());
      assertEquals("en", locale2.getLanguage());
      assertEquals("USA", locale2.getISO3Country());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("US", locale2.getCountry());
      assertEquals("en_US", locale2.toString());
      assertSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertNotSame(locale2, locale0);
      assertSame(locale2, locale1);
      
      QName qName0 = new QName("+^:^7v=Q_S=1crNkH6", "m9{Bq^em");
      assertNotNull(qName0);
      assertEquals("+^:^7v=Q_S=1crNkH6:m9{Bq^em", qName0.toString());
      assertEquals("+^:^7v=Q_S=1crNkH6", qName0.getPrefix());
      assertEquals("m9{Bq^em", qName0.getName());
      
      QName qName1 = new QName("m)Hxn6y'yS'#?.546=", (String) null);
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertNull(qName1.getName());
      assertEquals("m)Hxn6y'yS'#?.546=", qName1.getPrefix());
      assertEquals("m)Hxn6y'yS'#?.546=:null", qName1.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1, "m)Hxn6y'yS'#?.546=");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(nodeNameTest0);
      assertNull(qName1.getName());
      assertEquals("m)Hxn6y'yS'#?.546=", qName1.getPrefix());
      assertEquals("m)Hxn6y'yS'#?.546=:null", qName1.toString());
      assertEquals("m)Hxn6y'yS'#?.546=:null", nodeNameTest0.toString());
      assertEquals("m)Hxn6y'yS'#?.546=", nodeNameTest0.getNamespaceURI());
      
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName1, "http");
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(nodeNameTest1);
      assertNull(qName1.getName());
      assertEquals("m)Hxn6y'yS'#?.546=", qName1.getPrefix());
      assertEquals("m)Hxn6y'yS'#?.546=:null", qName1.toString());
      assertEquals("m)Hxn6y'yS'#?.546=:null", nodeNameTest1.toString());
      assertEquals("http", nodeNameTest1.getNamespaceURI());
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(deferredDocumentImpl0, locale2);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale0));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertEquals("US", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_US", locale1.toString());
      assertEquals("en", locale2.getLanguage());
      assertEquals("USA", locale2.getISO3Country());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("US", locale2.getCountry());
      assertEquals("en_US", locale2.toString());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("WU\"m~=tNb`6Fc");
      assertNotNull(processingInstructionTest0);
      assertEquals("WU\"m~=tNb`6Fc", processingInstructionTest0.getTarget());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
      assertNotNull(nodeTypeTest0);
      assertEquals(4, nodeTypeTest0.getNodeType());
      
      boolean boolean0 = DOMNodePointer.testNode((Node) deferredDocumentImpl0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
      assertEquals(4, nodeTypeTest0.getNodeType());
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      HTMLDocumentImpl hTMLDocumentImpl1 = (HTMLDocumentImpl)hTMLDocumentImpl0.cloneNode(true);
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      
      String string0 = DOMNodePointer.getLocalName(hTMLDocumentImpl0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(string0);
      assertEquals("#document", string0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      
      String string1 = NodePointer.UNKNOWN_NAMESPACE;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<<unknown namespace>>", string1);
      
      DocumentFragmentImpl documentFragmentImpl0 = new DocumentFragmentImpl();
      assertNotNull(documentFragmentImpl0);
      
      Locale locale3 = Locale.FRENCH;
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale0));
      assertNotNull(locale3);
      assertEquals("", locale3.getISO3Country());
      assertEquals("fr", locale3.getLanguage());
      assertEquals("fr", locale3.toString());
      assertEquals("", locale3.getCountry());
      assertEquals("fra", locale3.getISO3Language());
      assertEquals("", locale3.getVariant());
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale0);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(hTMLDocumentImpl1, locale3, (String) null);
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(dOMNodePointer2);
      assertEquals("", locale3.getISO3Country());
      assertEquals("fr", locale3.getLanguage());
      assertEquals("fr", locale3.toString());
      assertEquals("", locale3.getCountry());
      assertEquals("fra", locale3.getISO3Language());
      assertEquals("", locale3.getVariant());
      assertFalse(dOMNodePointer2.isAttribute());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isCollection());
      assertEquals(1, dOMNodePointer2.getLength());
      assertTrue(dOMNodePointer2.isNode());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.getNamespaceURI();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.dom.DeferredDocumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      
      HTMLFrameSetElementImpl hTMLFrameSetElementImpl0 = new HTMLFrameSetElementImpl(hTMLDocumentImpl0, "");
      assertNotNull(hTMLFrameSetElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, hTMLFrameSetElementImpl0, locale0);
      assertNotNull(nodePointer0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertTrue(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isActual());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      
      HTMLScriptElementImpl hTMLScriptElementImpl0 = new HTMLScriptElementImpl(hTMLDocumentImpl1, "");
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLScriptElementImpl0);
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(nodePointer0, hTMLScriptElementImpl0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertTrue(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isActual());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isAttribute());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Vector<Locale> vector0 = new Vector<Locale>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(locale0));
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) vector0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(vector0.contains(locale0));
      assertFalse(list0.contains(locale0));
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(locale0));
      
      Vector<Locale.LanguageRange> vector1 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector1);
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.size());
      assertEquals("[]", vector1.toString());
      assertEquals(10, vector1.capacity());
      
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) vector1, (Collection<Locale>) list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.size());
      assertEquals("[]", vector1.toString());
      assertEquals(10, vector1.capacity());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertFalse(vector0.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "m)Hxn6y'yS'#?.546=");
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals(":", nodeNameTest0.toString());
      assertEquals("m)Hxn6y'yS'#?.546=", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "node()");
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(nodeNameTest1);
      assertEquals("node()", nodeNameTest1.getNamespaceURI());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals(":", nodeNameTest1.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLDocumentImpl1, locale0);
      assertFalse(dOMNodePointer1.equals((Object)nodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(dOMNodePointer1);
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean1 = dOMNodePointer1.testNode(nodeNameTest0);
      assertFalse(dOMNodePointer1.equals((Object)nodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertTrue(boolean1 == boolean0);
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertFalse(boolean1);
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertEquals(":", nodeNameTest0.toString());
      assertEquals("m)Hxn6y'yS'#?.546=", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotSame(dOMNodePointer1, nodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(nodeNameTest0, nodeNameTest1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("<<unknown namespace>>");
      assertNotNull(processingInstructionTest0);
      assertEquals("<<unknown namespace>>", processingInstructionTest0.getTarget());
      
      boolean boolean2 = DOMNodePointer.testNode((Node) hTMLFrameSetElementImpl0, (NodeTest) nodeNameTest1);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals("node()", nodeNameTest1.getNamespaceURI());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals(":", nodeNameTest1.toString());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertNotSame(nodeNameTest1, nodeNameTest0);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      
      String string0 = DOMNodePointer.getLocalName(hTMLDocumentImpl1);
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(string0);
      assertEquals("#document", string0);
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      
      String string1 = NodePointer.UNKNOWN_NAMESPACE;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<<unknown namespace>>", string1);
      
      DocumentFragmentImpl documentFragmentImpl0 = new DocumentFragmentImpl();
      assertNotNull(documentFragmentImpl0);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(documentFragmentImpl0, locale0, "<<unknown namespace>>");
      assertFalse(dOMNodePointer2.equals((Object)nodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer2);
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isRoot());
      assertEquals(1, dOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string2 = nodePointer0.getNamespaceURI();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer2));
      assertNull(string2);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertTrue(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isActual());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isAttribute());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(nodePointer0, dOMNodePointer1);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertNotSame(nodePointer0, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "";
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      
      QName qName1 = new QName("", "xml");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals(":xml", qName1.toString());
      assertEquals("xml", qName1.getName());
      assertEquals("", qName1.getPrefix());
      
      VariablePointer variablePointer0 = new VariablePointer(qName1);
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(variablePointer0);
      assertEquals(":xml", qName1.toString());
      assertEquals("xml", qName1.getName());
      assertEquals("", qName1.getPrefix());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer(variablePointer0, qName1, qName1);
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(beanPointer0);
      assertEquals(":xml", qName1.toString());
      assertEquals("xml", qName1.getName());
      assertEquals("", qName1.getPrefix());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isRoot());
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl0, "l+=1hF}kZ");
      assertNotNull(hTMLTableElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      HTMLTableSectionElementImpl hTMLTableSectionElementImpl0 = (HTMLTableSectionElementImpl)hTMLTableElementImpl0.createTHead();
      assertNotNull(hTMLTableSectionElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, hTMLTableElementImpl0);
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(dOMNodePointer0);
      assertEquals(":xml", qName1.toString());
      assertEquals("xml", qName1.getName());
      assertEquals("", qName1.getPrefix());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      dOMNodePointer0.setValue(hTMLTableSectionElementImpl0);
      assertFalse(qName1.equals((Object)qName0));
      assertEquals(":xml", qName1.toString());
      assertEquals("xml", qName1.getName());
      assertEquals("", qName1.getPrefix());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) hTMLDocumentImpl0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      HTMLSelectElementImpl hTMLSelectElementImpl0 = new HTMLSelectElementImpl(hTMLDocumentImpl0, "xml");
      assertNotNull(hTMLSelectElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) hTMLSelectElementImpl0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = (JXPathContextReferenceImpl)jXPathContextReferenceImpl1.getParentContext();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(jXPathContextReferenceImpl2);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      String string1 = dOMNodePointer0.getNamespaceURI("java.util.Locale@0000000010");
      assertFalse(qName1.equals((Object)qName0));
      assertNull(string1);
      assertEquals(":xml", qName1.toString());
      assertEquals("xml", qName1.getName());
      assertEquals("", qName1.getPrefix());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLOListElementImpl hTMLOListElementImpl0 = new HTMLOListElementImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      assertNotNull(hTMLOListElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      String string2 = DOMNodePointer.getPrefix(hTMLOListElementImpl0);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("HTTP", string2);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      NamespacePointer namespacePointer0 = (NamespacePointer)dOMNodePointer0.namespacePointer("e9R$+IqRm1&");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(namespacePointer0);
      assertTrue(namespacePointer0.isLeaf());
      assertTrue(namespacePointer0.isNode());
      assertEquals(1, namespacePointer0.getLength());
      assertFalse(namespacePointer0.isRoot());
      assertFalse(namespacePointer0.isAttribute());
      assertFalse(namespacePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, namespacePointer0.getIndex());
      assertFalse(namespacePointer0.isCollection());
      assertEquals(":xml", qName1.toString());
      assertEquals("xml", qName1.getName());
      assertEquals("", qName1.getPrefix());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      int int0 = NodePointer.WHOLE_COLLECTION;
      assertEquals(Integer.MIN_VALUE, int0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLTableSectionElementImpl0);
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertEquals(":xml", qName1.toString());
      assertEquals("xml", qName1.getName());
      assertEquals("", qName1.getPrefix());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string3 = dOMNodePointer1.getNamespaceURI("~kH\"i9rh=^[");
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNull(string3);
      assertEquals(":xml", qName1.toString());
      assertEquals("xml", qName1.getName());
      assertEquals("", qName1.getPrefix());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNotSame(qName1, qName0);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        jXPathContextReferenceImpl1.getRelativeContext(dOMNodePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: :xml
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<<unknown namespace>>");
      assertFalse(boolean0);
      
      QName qName0 = new QName("xml", (String) null);
      assertNotNull(qName0);
      assertEquals("xml:null", qName0.toString());
      assertEquals("xml", qName0.getPrefix());
      assertNull(qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("xml:null", qName0.toString());
      assertEquals("xml", qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("xml:null", nodeNameTest0.toString());
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        DOMNodePointer.testNode((Node) null, (NodeTest) nodeNameTest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) null);
      assertNotNull(wMLDocumentImpl0);
      
      boolean boolean0 = wMLDocumentImpl0.hasChildNodes();
      assertFalse(boolean0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(wMLDocumentImpl0, (Locale) null, "&quot;");
      assertNotNull(dOMNodePointer0);
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Vector<Locale> vector0 = new Vector<Locale>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace");
      assertNotNull(qName0);
      assertEquals("//www.w3.org/XML/1998/namespace", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertEquals("http", qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "<<unknown namespace>>");
      assertNotNull(nodeNameTest0);
      assertEquals("//www.w3.org/XML/1998/namespace", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertEquals("http", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("http://www.w3.org/XML/1998/namespace", nodeNameTest0.toString());
      assertEquals("<<unknown namespace>>", nodeNameTest0.getNamespaceURI());
      
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) vector0, locale_FilteringMode0);
      assertNotNull(list0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Vector<Locale> vector1 = new Vector<Locale>();
      assertTrue(vector1.equals((Object)vector0));
      assertNotNull(vector1);
      assertEquals(0, vector1.size());
      assertTrue(vector1.isEmpty());
      assertEquals(10, vector1.capacity());
      assertEquals("[]", vector1.toString());
      
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) vector1);
      assertTrue(vector1.equals((Object)vector0));
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertEquals(0, linkedList1.size());
      assertEquals(0, vector1.size());
      assertTrue(vector1.isEmpty());
      assertEquals(10, vector1.capacity());
      assertEquals("[]", vector1.toString());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotSame(vector1, vector0);
      assertNotSame(list1, list0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      String string0 = locale0.getScript();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      String string1 = DOMNodePointer.getPrefix(wMLDocumentImpl0);
      assertNull(string1);
      
      int int0 = NodePointer.WHOLE_COLLECTION;
      assertEquals(Integer.MIN_VALUE, int0);
      
      // Undeclared exception!
      try { 
        DOMNodePointer.getPrefix((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer(variablePointer0, qName0, "K");
      assertNotNull(beanPointer0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "K");
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = Locale.GERMAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale1, locale0);
      
      Locale locale2 = locale0.stripExtensions();
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale2.getLanguage());
      assertEquals("DEU", locale2.getISO3Country());
      assertEquals("DE", locale2.getCountry());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("de_DE", locale2.toString());
      assertNotSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      
      XMLErrorReporter xMLErrorReporter0 = new XMLErrorReporter();
      assertNotNull(xMLErrorReporter0);
      
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl();
      assertNotNull(coreDocumentImpl0);
      
      EntityImpl entityImpl0 = new EntityImpl(coreDocumentImpl0, "Was expecting one of:");
      assertNotNull(entityImpl0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(beanPointer0, entityImpl0);
      assertNotNull(dOMNodePointer0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = (String)dOMNodePointer0.getValue();
      assertNotNull(string0);
      assertEquals("", string0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string1 = dOMNodePointer0.asPath();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("$", string1);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.createChild((JXPathContext) jXPathContextReferenceImpl0, qName0, Integer.MIN_VALUE);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: $
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      
      QName qName1 = new QName("", "xml");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals(":xml", qName1.toString());
      assertEquals("xml", qName1.getName());
      assertEquals("", qName1.getPrefix());
      
      VariablePointer variablePointer0 = new VariablePointer(qName1);
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(variablePointer0);
      assertEquals(":xml", qName1.toString());
      assertEquals("xml", qName1.getName());
      assertEquals("", qName1.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer(variablePointer0, qName1, qName1);
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(beanPointer0);
      assertEquals(":xml", qName1.toString());
      assertEquals("xml", qName1.getName());
      assertEquals("", qName1.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      
      HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl0, "l+=1hF}kZ");
      assertNotNull(hTMLTableElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      
      HTMLTableSectionElementImpl hTMLTableSectionElementImpl0 = (HTMLTableSectionElementImpl)hTMLTableElementImpl0.createTHead();
      assertNotNull(hTMLTableSectionElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, hTMLTableElementImpl0);
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(dOMNodePointer0);
      assertEquals(":xml", qName1.toString());
      assertEquals("xml", qName1.getName());
      assertEquals("", qName1.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      dOMNodePointer0.setValue(hTMLTableSectionElementImpl0);
      assertFalse(qName1.equals((Object)qName0));
      assertEquals(":xml", qName1.toString());
      assertEquals("xml", qName1.getName());
      assertEquals("", qName1.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isRoot());
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) hTMLDocumentImpl0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      HTMLSelectElementImpl hTMLSelectElementImpl0 = new HTMLSelectElementImpl(hTMLDocumentImpl0, "xml");
      assertNotNull(hTMLSelectElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) hTMLSelectElementImpl0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = (JXPathContextReferenceImpl)jXPathContextReferenceImpl1.getParentContext();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(jXPathContextReferenceImpl2);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLTableSectionElementImpl0, locale0, (String) null);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer1.createChild((JXPathContext) jXPathContextReferenceImpl2, qName1, Integer.MIN_VALUE, (Object) jXPathContextReferenceImpl2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: 
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      CommentImpl commentImpl0 = new CommentImpl(hTMLDocumentImpl0, "org.jdom.Document");
      assertNotNull(commentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-262));
      assertNotNull(nodeTypeTest0);
      assertEquals((-262), nodeTypeTest0.getNodeType());
      
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLDocumentImpl1, (NodeTest) nodeTypeTest0);
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(boolean0);
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertEquals((-262), nodeTypeTest0.getNodeType());
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      
      HTMLTextAreaElementImpl hTMLTextAreaElementImpl0 = new HTMLTextAreaElementImpl(hTMLDocumentImpl1, "_y[D6p");
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLTextAreaElementImpl0);
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      
      HTMLFormElement hTMLFormElement0 = hTMLTextAreaElementImpl0.getForm();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNull(hTMLFormElement0);
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, (Node) null);
      assertNotNull(dOMNodePointer0);
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.getPointerByID((JXPathContext) null, "), ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      
      Locale locale1 = (Locale)locale0.clone();
      assertTrue(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it_IT", locale1.toString());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("IT", locale1.getCountry());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, "", locale0);
      assertTrue(locale0.equals((Object)locale1));
      assertNotNull(beanPointer0);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      HTMLScriptElementImpl hTMLScriptElementImpl0 = new HTMLScriptElementImpl(hTMLDocumentImpl0, "");
      assertNotNull(hTMLScriptElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(beanPointer0, hTMLScriptElementImpl0);
      assertTrue(locale0.equals((Object)locale1));
      assertNotNull(dOMNodePointer0);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      dOMNodePointer0.printPointerChain();
      assertTrue(locale0.equals((Object)locale1));
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Vector<Locale.LanguageRange> vector1 = new Vector<Locale.LanguageRange>();
      assertTrue(vector1.equals((Object)vector0));
      assertNotNull(vector1);
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      assertEquals(10, vector1.capacity());
      assertEquals(0, vector1.size());
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) vector1, (Collection<Locale>) null);
      assertTrue(vector1.equals((Object)vector0));
      assertNotNull(list0);
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      assertEquals(10, vector1.capacity());
      assertEquals(0, vector1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotSame(vector1, vector0);
      assertFalse(list0.contains(locale0));
      
      Locale locale2 = Locale.KOREA;
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      assertEquals("", locale2.getVariant());
      assertEquals("ko", locale2.getLanguage());
      assertEquals("ko_KR", locale2.toString());
      assertEquals("KR", locale2.getCountry());
      assertEquals("kor", locale2.getISO3Language());
      assertEquals("KOR", locale2.getISO3Country());
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLScriptElementImpl0, locale0, "http://www.w3.org/XML/1998/namespace");
      assertFalse(locale0.equals((Object)locale2));
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName1 = new QName((String) null, "xiHS|jg]\"%");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals("xiHS|jg]\"%", qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals("xiHS|jg]\"%", qName1.toString());
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(hTMLDocumentImpl0, locale2);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer2);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale2.getVariant());
      assertEquals("ko", locale2.getLanguage());
      assertEquals("ko_KR", locale2.toString());
      assertEquals("KR", locale2.getCountry());
      assertEquals("kor", locale2.getISO3Language());
      assertEquals("KOR", locale2.getISO3Country());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "");
      assertNotNull(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNotNull(wMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      WMLOptionElementImpl wMLOptionElementImpl0 = new WMLOptionElementImpl(wMLDocumentImpl0, "<<unknown namespace>>");
      assertNotNull(wMLOptionElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      DOMNodePointer dOMNodePointer3 = (DOMNodePointer)NodePointer.newChildNodePointer(beanPointer0, qName0, wMLOptionElementImpl0);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(locale0.equals((Object)locale2));
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer3);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertFalse(dOMNodePointer3.isRoot());
      assertTrue(dOMNodePointer3.isActual());
      assertFalse(dOMNodePointer3.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertFalse(dOMNodePointer3.isAttribute());
      assertFalse(dOMNodePointer3.isCollection());
      assertEquals(1, dOMNodePointer3.getLength());
      assertTrue(dOMNodePointer3.isNode());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotSame(qName0, qName1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(dOMNodePointer3, dOMNodePointer2);
      assertNotSame(dOMNodePointer3, dOMNodePointer1);
      assertNotSame(dOMNodePointer3, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName1);
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(variablePointer0);
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals("xiHS|jg]\"%", qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals("xiHS|jg]\"%", qName1.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.compareChildNodePointers(dOMNodePointer2, variablePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'xiHS|jg]\"%'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      QName qName0 = new QName("cOKK", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertEquals("cOKK:", qName0.toString());
      assertEquals("cOKK", qName0.getPrefix());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      
      HTMLFrameSetElementImpl hTMLFrameSetElementImpl0 = new HTMLFrameSetElementImpl(hTMLDocumentImpl0, "");
      assertNotNull(hTMLFrameSetElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, hTMLFrameSetElementImpl0, locale0);
      assertNotNull(nodePointer0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", qName0.getName());
      assertEquals("cOKK:", qName0.toString());
      assertEquals("cOKK", qName0.getPrefix());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(nodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertTrue(nodePointer0.isActual());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isRoot());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      
      HTMLScriptElementImpl hTMLScriptElementImpl0 = new HTMLScriptElementImpl(hTMLDocumentImpl1, "cOKK");
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLScriptElementImpl0);
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(nodePointer0, hTMLScriptElementImpl0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", qName0.getName());
      assertEquals("cOKK:", qName0.toString());
      assertEquals("cOKK", qName0.getPrefix());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(nodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertTrue(nodePointer0.isActual());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isRoot());
      assertEquals(1, nodePointer0.getLength());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Vector<Locale> vector0 = new Vector<Locale>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(locale0));
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) vector0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(vector0.contains(locale0));
      assertFalse(list0.contains(locale0));
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(locale0));
      
      Vector<Locale.LanguageRange> vector1 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector1);
      assertTrue(vector1.isEmpty());
      assertEquals(10, vector1.capacity());
      assertEquals(0, vector1.size());
      assertEquals("[]", vector1.toString());
      
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) vector1, (Collection<Locale>) list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(vector1.isEmpty());
      assertEquals(10, vector1.capacity());
      assertEquals(0, vector1.size());
      assertEquals("[]", vector1.toString());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertFalse(vector0.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "m)Hxn6y'yS'#?.546=");
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.getName());
      assertEquals("cOKK:", qName0.toString());
      assertEquals("cOKK", qName0.getPrefix());
      assertEquals("m)Hxn6y'yS'#?.546=", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("cOKK:", nodeNameTest0.toString());
      
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "node()");
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(nodeNameTest1);
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("cOKK:", nodeNameTest1.toString());
      assertEquals("node()", nodeNameTest1.getNamespaceURI());
      assertEquals("", qName0.getName());
      assertEquals("cOKK:", qName0.toString());
      assertEquals("cOKK", qName0.getPrefix());
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLDocumentImpl1, locale0);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)nodePointer0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(dOMNodePointer1);
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean1 = dOMNodePointer1.testNode(nodeNameTest0);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)nodePointer0));
      assertTrue(boolean1 == boolean0);
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertFalse(boolean1);
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals("", qName0.getName());
      assertEquals("cOKK:", qName0.toString());
      assertEquals("cOKK", qName0.getPrefix());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertEquals("m)Hxn6y'yS'#?.546=", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("cOKK:", nodeNameTest0.toString());
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, nodePointer0);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(nodeNameTest0, nodeNameTest1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("<<unknown namespace>>");
      assertNotNull(processingInstructionTest0);
      assertEquals("<<unknown namespace>>", processingInstructionTest0.getTarget());
      
      boolean boolean2 = DOMNodePointer.testNode((Node) hTMLFrameSetElementImpl0, (NodeTest) nodeNameTest1);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("cOKK:", nodeNameTest1.toString());
      assertEquals("node()", nodeNameTest1.getNamespaceURI());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", qName0.getName());
      assertEquals("cOKK:", qName0.toString());
      assertEquals("cOKK", qName0.getPrefix());
      assertNotSame(nodeNameTest1, nodeNameTest0);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      
      String string0 = DOMNodePointer.getLocalName(hTMLDocumentImpl1);
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(string0);
      assertEquals("#document", string0);
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      
      String string1 = NodePointer.UNKNOWN_NAMESPACE;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<<unknown namespace>>", string1);
      
      DocumentFragmentImpl documentFragmentImpl0 = new DocumentFragmentImpl();
      assertNotNull(documentFragmentImpl0);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(documentFragmentImpl0, locale0, "<<unknown namespace>>");
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)nodePointer0));
      assertNotNull(dOMNodePointer2);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isActual());
      assertTrue(dOMNodePointer2.isNode());
      assertTrue(dOMNodePointer2.isRoot());
      assertEquals(1, dOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string2 = nodePointer0.getNamespaceURI();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertNull(string2);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", qName0.getName());
      assertEquals("cOKK:", qName0.toString());
      assertEquals("cOKK", qName0.getPrefix());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(nodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertTrue(nodePointer0.isActual());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isRoot());
      assertEquals(1, nodePointer0.getLength());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(nodePointer0, dOMNodePointer2);
      assertNotSame(nodePointer0, dOMNodePointer1);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer(variablePointer0, qName0, "");
      assertNotNull(beanPointer0);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "");
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      
      Locale locale1 = Locale.GERMAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale1, locale0);
      
      Locale locale2 = locale0.stripExtensions();
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("DE", locale2.getCountry());
      assertEquals("de_DE", locale2.toString());
      assertEquals("DEU", locale2.getISO3Country());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("de", locale2.getLanguage());
      assertSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale2, locale1);
      assertSame(locale2, locale0);
      
      XMLErrorReporter xMLErrorReporter0 = new XMLErrorReporter();
      assertNotNull(xMLErrorReporter0);
      
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl();
      assertNotNull(coreDocumentImpl0);
      
      EntityImpl entityImpl0 = new EntityImpl(coreDocumentImpl0, "Was expecting one of:");
      assertNotNull(entityImpl0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(beanPointer0, entityImpl0);
      assertNotNull(dOMNodePointer0);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isRoot());
      assertFalse(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = (String)dOMNodePointer0.getValue();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isRoot());
      assertFalse(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string1 = dOMNodePointer0.asPath();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("$:", string1);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isRoot());
      assertFalse(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string2 = DOMNodePointer.getLocalName(coreDocumentImpl0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("#document", string2);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(false);
      assertNotNull(deferredDocumentImpl0);
      
      Locale locale0 = new Locale("Factory could not create a child node for path: ");
      assertNotNull(locale0);
      assertEquals("factory could not create a child node for path: ", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("factory could not create a child node for path: ", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertEquals("factory could not create a child node for path: ", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("factory could not create a child node for path: ", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("factory could not create a child node for path: ", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("factory could not create a child node for path: ", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      Locale locale2 = Locale.JAPANESE;
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      assertEquals("", locale2.getISO3Country());
      assertEquals("ja", locale2.getLanguage());
      assertEquals("jpn", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getCountry());
      assertEquals("ja", locale2.toString());
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      
      String string0 = locale1.getScript();
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale2));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("factory could not create a child node for path: ", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("factory could not create a child node for path: ", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("factory could not create a child node for path: ", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("factory could not create a child node for path: ", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(deferredDocumentImpl0, locale2);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(dOMNodePointer0);
      assertEquals("", locale2.getISO3Country());
      assertEquals("ja", locale2.getLanguage());
      assertEquals("jpn", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getCountry());
      assertEquals("ja", locale2.toString());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.getDefaultNamespaceURI();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.dom.DeferredDocumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, "java.util.Locale@0000000004");
      assertNotNull(dOMNodePointer0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer((Node) null, locale0);
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean0 = dOMNodePointer1.isLanguage("http://www.w3.org/XML/1998/namespace");
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(boolean0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer((Node) null, locale0);
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer2);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertEquals(1, dOMNodePointer2.getLength());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer3 = new DOMNodePointer((Node) null, locale0, "http://www.w3.org/XML/1998/namespace");
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer3);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertFalse(dOMNodePointer3.isCollection());
      assertTrue(dOMNodePointer3.isActual());
      assertFalse(dOMNodePointer3.isContainer());
      assertEquals(1, dOMNodePointer3.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertFalse(dOMNodePointer3.isAttribute());
      assertTrue(dOMNodePointer3.isRoot());
      assertTrue(dOMNodePointer3.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = null;
      QName qName1 = new QName("&quot;", "http://www.w3.org/2000/xmlns/");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals("&quot;", qName1.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", qName1.getName());
      assertEquals("&quot;:http://www.w3.org/2000/xmlns/", qName1.toString());
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      HTMLFontElementImpl hTMLFontElementImpl0 = new HTMLFontElementImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      assertNotNull(hTMLFontElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(dOMNodePointer0, qName0, hTMLFontElementImpl0);
      assertFalse(qName0.equals((Object)qName1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer3));
      assertNotNull(nodePointer0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertFalse(nodePointer0.isCollection());
      assertTrue(nodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isRoot());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isAttribute());
      assertNotSame(qName0, qName1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, nodePointer0);
      assertNotSame(dOMNodePointer0, dOMNodePointer3);
      assertNotSame(nodePointer0, dOMNodePointer1);
      assertNotSame(nodePointer0, dOMNodePointer2);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertNotSame(nodePointer0, dOMNodePointer3);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer1.compareChildNodePointers(variablePointer0, dOMNodePointer2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: :
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      WMLPostfieldElementImpl wMLPostfieldElementImpl0 = new WMLPostfieldElementImpl((WMLDocumentImpl) null, (String) null);
      assertNotNull(wMLPostfieldElementImpl0);
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(wMLPostfieldElementImpl0, locale0);
      assertNotNull(dOMNodePointer0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.getNamespaceURI((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      QName qName0 = new QName("cOKK", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertEquals("cOKK", qName0.getPrefix());
      assertEquals("cOKK:", qName0.toString());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      HTMLFrameSetElementImpl hTMLFrameSetElementImpl0 = new HTMLFrameSetElementImpl(hTMLDocumentImpl0, "");
      assertNotNull(hTMLFrameSetElementImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, hTMLFrameSetElementImpl0, locale0);
      assertNotNull(nodePointer0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", qName0.getName());
      assertEquals("cOKK", qName0.getPrefix());
      assertEquals("cOKK:", qName0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isRoot());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertTrue(nodePointer0.isActual());
      assertTrue(nodePointer0.isNode());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      
      HTMLScriptElementImpl hTMLScriptElementImpl0 = new HTMLScriptElementImpl(hTMLDocumentImpl1, "cOKK");
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLScriptElementImpl0);
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(nodePointer0, hTMLScriptElementImpl0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", qName0.getName());
      assertEquals("cOKK", qName0.getPrefix());
      assertEquals("cOKK:", qName0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isRoot());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertTrue(nodePointer0.isActual());
      assertTrue(nodePointer0.isNode());
      assertEquals(1, nodePointer0.getLength());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) null);
      assertNotNull(list0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(list0.contains(locale0));
      
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "cOKK");
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.getName());
      assertEquals("cOKK", qName0.getPrefix());
      assertEquals("cOKK:", qName0.toString());
      assertEquals("cOKK:", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("cOKK", nodeNameTest0.getNamespaceURI());
      
      boolean boolean0 = dOMNodePointer0.testNode(nodeNameTest0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(boolean0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", qName0.getName());
      assertEquals("cOKK", qName0.getPrefix());
      assertEquals("cOKK:", qName0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isRoot());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertTrue(nodePointer0.isActual());
      assertTrue(nodePointer0.isNode());
      assertEquals(1, nodePointer0.getLength());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals("cOKK:", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("cOKK", nodeNameTest0.getNamespaceURI());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(dOMNodePointer0, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list1, locale_FilteringMode0);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertNotNull(list2);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotSame(list0, list2);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertNotSame(list1, list2);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      assertFalse(list2.contains(locale0));
      
      List<Locale> list3 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list2);
      assertTrue(list0.equals((Object)list2));
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list1.equals((Object)list2));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list1));
      assertTrue(list3.equals((Object)list0));
      assertNotNull(list3);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertNotSame(list0, list3);
      assertNotSame(list0, list2);
      assertNotSame(list0, list1);
      assertNotSame(list1, list3);
      assertNotSame(list1, list0);
      assertNotSame(list1, list2);
      assertNotSame(list2, list1);
      assertNotSame(list2, list3);
      assertNotSame(list2, list0);
      assertNotSame(list3, list1);
      assertNotSame(list3, list2);
      assertNotSame(list3, list0);
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      assertFalse(list2.contains(locale0));
      assertFalse(list3.contains(locale0));
      
      String string0 = locale0.getScript();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      boolean boolean1 = dOMNodePointer0.isActual();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(boolean1 == boolean0);
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertTrue(boolean1);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", qName0.getName());
      assertEquals("cOKK", qName0.getPrefix());
      assertEquals("cOKK:", qName0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isRoot());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertTrue(nodePointer0.isActual());
      assertTrue(nodePointer0.isNode());
      assertEquals(1, nodePointer0.getLength());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(dOMNodePointer0, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string1 = NodePointer.UNKNOWN_NAMESPACE;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<<unknown namespace>>", string1);
      
      HTMLAppletElementImpl hTMLAppletElementImpl0 = new HTMLAppletElementImpl(hTMLDocumentImpl0, "");
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(hTMLAppletElementImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      HTMLLIElementImpl hTMLLIElementImpl0 = new HTMLLIElementImpl(hTMLDocumentImpl1, "M1\" ");
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLLIElementImpl0);
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      
      boolean boolean2 = ((DOMNodePointer) nodePointer0).equals(hTMLLIElementImpl0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(boolean2);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", qName0.getName());
      assertEquals("cOKK", qName0.getPrefix());
      assertEquals("cOKK:", qName0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isRoot());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertTrue(nodePointer0.isActual());
      assertTrue(nodePointer0.isNode());
      assertEquals(1, nodePointer0.getLength());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      AttrNSImpl attrNSImpl0 = new AttrNSImpl(hTMLDocumentImpl1, "8479uGBL~HP9(", "MK:ss6obsUq", "0'e[Q");
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(attrNSImpl0);
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      
      String string2 = DOMNodePointer.getLocalName(hTMLScriptElementImpl0);
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("COKK", string2);
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      
      String string3 = DOMNodePointer.getPrefix(attrNSImpl0);
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("MK", string3);
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      
      NodePointer nodePointer1 = nodePointer0.namespacePointer("");
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertNotNull(nodePointer1);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", qName0.getName());
      assertEquals("cOKK", qName0.getPrefix());
      assertEquals("cOKK:", qName0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isRoot());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertTrue(nodePointer0.isActual());
      assertTrue(nodePointer0.isNode());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer1.isCollection());
      assertTrue(nodePointer1.isNode());
      assertEquals(1, nodePointer1.getLength());
      assertFalse(nodePointer1.isRoot());
      assertTrue(nodePointer1.isLeaf());
      assertFalse(nodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, nodePointer1.getIndex());
      assertFalse(nodePointer1.isContainer());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      
      Locale locale1 = (Locale)locale0.clone();
      assertTrue(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it_IT", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("IT", locale1.getCountry());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertEquals("ita", locale1.getISO3Language());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, "", locale0);
      assertTrue(locale0.equals((Object)locale1));
      assertNotNull(beanPointer0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      HTMLScriptElementImpl hTMLScriptElementImpl0 = new HTMLScriptElementImpl(hTMLDocumentImpl0, "");
      assertNotNull(hTMLScriptElementImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(beanPointer0, hTMLScriptElementImpl0);
      assertTrue(locale0.equals((Object)locale1));
      assertNotNull(dOMNodePointer0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      Vector<Locale> vector1 = new Vector<Locale>();
      assertNotNull(vector1);
      assertEquals("[]", vector1.toString());
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      assertTrue(vector1.isEmpty());
      assertFalse(vector1.contains(locale0));
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) vector1);
      assertNotNull(list0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals("[]", vector1.toString());
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      assertTrue(vector1.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(vector1.contains(locale0));
      assertFalse(list0.contains(locale0));
      
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals("[]", vector1.toString());
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      assertTrue(vector1.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertFalse(vector1.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      
      boolean boolean0 = beanPointer0.testNode(nodeNameTest0);
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(boolean0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list1, locale_FilteringMode0);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertNotNull(list2);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals("[]", vector1.toString());
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      assertTrue(vector1.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertNotSame(list0, list1);
      assertNotSame(list0, list2);
      assertNotSame(list1, list0);
      assertNotSame(list1, list2);
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertFalse(vector1.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      assertFalse(list2.contains(locale0));
      
      String string0 = locale1.getDisplayVariant(locale0);
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(locale1.equals((Object)locale0));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it_IT", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("IT", locale1.getCountry());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertEquals("ita", locale1.getISO3Language());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      QName qName1 = new QName("<<unknown namespace>>", "4w$)jhL&b,30NkZW");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals("4w$)jhL&b,30NkZW", qName1.getName());
      assertEquals("<<unknown namespace>>", qName1.getPrefix());
      assertEquals("<<unknown namespace>>:4w$)jhL&b,30NkZW", qName1.toString());
      
      HTMLButtonElementImpl hTMLButtonElementImpl0 = new HTMLButtonElementImpl(hTMLDocumentImpl0, "");
      assertNotNull(hTMLButtonElementImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "}{U(c;oV!CybDR");
      assertNotNull(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNotNull(wMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      WMLBigElementImpl wMLBigElementImpl0 = new WMLBigElementImpl(wMLDocumentImpl0, "<<unknown namespace>>");
      assertNotNull(wMLBigElementImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      DOMNodePointer dOMNodePointer1 = (DOMNodePointer)NodePointer.newChildNodePointer(dOMNodePointer0, qName1, wMLBigElementImpl0);
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(qName0.equals((Object)qName1));
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertEquals("4w$)jhL&b,30NkZW", qName1.getName());
      assertEquals("<<unknown namespace>>", qName1.getPrefix());
      assertEquals("<<unknown namespace>>:4w$)jhL&b,30NkZW", qName1.toString());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertNotSame(qName1, qName0);
      assertNotSame(qName0, qName1);
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLQuoteElementImpl hTMLQuoteElementImpl0 = new HTMLQuoteElementImpl(hTMLDocumentImpl0, "xml:lang");
      assertNotNull(hTMLQuoteElementImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      DOMNodePointer dOMNodePointer2 = (DOMNodePointer)NodePointer.newNodePointer(qName1, hTMLQuoteElementImpl0, locale1);
      assertFalse(qName1.equals((Object)qName0));
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(locale1.equals((Object)locale0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer2);
      assertEquals("4w$)jhL&b,30NkZW", qName1.getName());
      assertEquals("<<unknown namespace>>", qName1.getPrefix());
      assertEquals("<<unknown namespace>>:4w$)jhL&b,30NkZW", qName1.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it_IT", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("IT", locale1.getCountry());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertEquals("ita", locale1.getISO3Language());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(1, dOMNodePointer2.getLength());
      assertTrue(dOMNodePointer2.isNode());
      assertNotSame(qName1, qName0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      int int0 = dOMNodePointer0.compareChildNodePointers(dOMNodePointer2, dOMNodePointer1);
      assertFalse(qName0.equals((Object)qName1));
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(locale1.equals((Object)locale0));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertEquals(0, int0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it_IT", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("IT", locale1.getCountry());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals("4w$)jhL&b,30NkZW", qName1.getName());
      assertEquals("<<unknown namespace>>", qName1.getPrefix());
      assertEquals("<<unknown namespace>>:4w$)jhL&b,30NkZW", qName1.toString());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(1, dOMNodePointer2.getLength());
      assertTrue(dOMNodePointer2.isNode());
      assertNotSame(qName0, qName1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(qName1, qName0);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string1 = dOMNodePointer0.getNamespaceURI();
      assertFalse(qName0.equals((Object)qName1));
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNull(string1);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertNotSame(qName0, qName1);
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) list0);
      assertTrue(list0.equals((Object)list2));
      assertTrue(list0.equals((Object)list1));
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals("[]", vector1.toString());
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      assertTrue(vector1.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotSame(list0, list1);
      assertNotSame(list0, list2);
      assertFalse(vector1.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) qName1);
      assertFalse(qName1.equals((Object)qName0));
      assertTrue(list0.equals((Object)list2));
      assertTrue(list0.equals((Object)list1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals("4w$)jhL&b,30NkZW", qName1.getName());
      assertEquals("<<unknown namespace>>", qName1.getPrefix());
      assertEquals("<<unknown namespace>>:4w$)jhL&b,30NkZW", qName1.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals("[]", vector1.toString());
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      assertTrue(vector1.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotSame(qName1, qName0);
      assertNotSame(list0, list1);
      assertNotSame(list0, list2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(vector1.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      boolean boolean1 = dOMNodePointer0.isCollection();
      assertFalse(qName0.equals((Object)qName1));
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertNotSame(qName0, qName1);
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean2 = dOMNodePointer1.equals(dOMNodePointer2);
      assertFalse(qName0.equals((Object)qName1));
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(locale1.equals((Object)locale0));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it_IT", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("IT", locale1.getCountry());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals("4w$)jhL&b,30NkZW", qName1.getName());
      assertEquals("<<unknown namespace>>", qName1.getPrefix());
      assertEquals("<<unknown namespace>>:4w$)jhL&b,30NkZW", qName1.toString());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(1, dOMNodePointer2.getLength());
      assertTrue(dOMNodePointer2.isNode());
      assertNotSame(qName0, qName1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(qName1, qName0);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      QName qName0 = new QName("cOKK", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertEquals("cOKK:", qName0.toString());
      assertEquals("cOKK", qName0.getPrefix());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      
      HTMLFrameSetElementImpl hTMLFrameSetElementImpl0 = new HTMLFrameSetElementImpl(hTMLDocumentImpl0, "");
      assertNotNull(hTMLFrameSetElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, hTMLFrameSetElementImpl0, locale0);
      assertNotNull(nodePointer0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", qName0.getName());
      assertEquals("cOKK:", qName0.toString());
      assertEquals("cOKK", qName0.getPrefix());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isActual());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      
      HTMLScriptElementImpl hTMLScriptElementImpl0 = new HTMLScriptElementImpl(hTMLDocumentImpl1, "cOKK");
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLScriptElementImpl0);
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(nodePointer0, hTMLScriptElementImpl0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", qName0.getName());
      assertEquals("cOKK:", qName0.toString());
      assertEquals("cOKK", qName0.getPrefix());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isActual());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      dOMNodePointer0.printPointerChain();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", qName0.getName());
      assertEquals("cOKK:", qName0.toString());
      assertEquals("cOKK", qName0.getPrefix());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isActual());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(dOMNodePointer0, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) null);
      assertNotNull(list0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(locale0));
      
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "cOKK");
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.getName());
      assertEquals("cOKK:", qName0.toString());
      assertEquals("cOKK", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("cOKK", nodeNameTest0.getNamespaceURI());
      assertEquals("cOKK:", nodeNameTest0.toString());
      
      boolean boolean0 = dOMNodePointer0.testNode(nodeNameTest0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(boolean0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", qName0.getName());
      assertEquals("cOKK:", qName0.toString());
      assertEquals("cOKK", qName0.getPrefix());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isActual());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("cOKK", nodeNameTest0.getNamespaceURI());
      assertEquals("cOKK:", nodeNameTest0.toString());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(dOMNodePointer0, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list1, locale_FilteringMode0);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertNotNull(list2);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertNotSame(list0, list1);
      assertNotSame(list0, list2);
      assertNotSame(list1, list0);
      assertNotSame(list1, list2);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      assertFalse(list2.contains(locale0));
      
      List<Locale> list3 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list2);
      assertTrue(list3.equals((Object)list1));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list0));
      assertTrue(list0.equals((Object)list1));
      assertTrue(list0.equals((Object)list2));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list1.equals((Object)list2));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertNotNull(list3);
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertNotSame(list3, list0);
      assertNotSame(list3, list1);
      assertNotSame(list3, list2);
      assertNotSame(list0, list3);
      assertNotSame(list0, list1);
      assertNotSame(list0, list2);
      assertNotSame(list1, list0);
      assertNotSame(list1, list2);
      assertNotSame(list1, list3);
      assertNotSame(list2, list1);
      assertNotSame(list2, list3);
      assertNotSame(list2, list0);
      assertFalse(list3.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      assertFalse(list2.contains(locale0));
      
      String string0 = locale0.getScript();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      
      boolean boolean1 = dOMNodePointer0.isActual();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(boolean1 == boolean0);
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertTrue(boolean1);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", qName0.getName());
      assertEquals("cOKK:", qName0.toString());
      assertEquals("cOKK", qName0.getPrefix());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isActual());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(dOMNodePointer0, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string1 = NodePointer.UNKNOWN_NAMESPACE;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<<unknown namespace>>", string1);
      
      NamespaceResolver namespaceResolver0 = dOMNodePointer0.getNamespaceResolver();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertNotNull(namespaceResolver0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", qName0.getName());
      assertEquals("cOKK:", qName0.toString());
      assertEquals("cOKK", qName0.getPrefix());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertFalse(namespaceResolver0.isSealed());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isActual());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(dOMNodePointer0, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      dOMNodePointer0.setNamespaceResolver(namespaceResolver0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", qName0.getName());
      assertEquals("cOKK:", qName0.toString());
      assertEquals("cOKK", qName0.getPrefix());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertFalse(namespaceResolver0.isSealed());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isActual());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(dOMNodePointer0, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLAppletElementImpl hTMLAppletElementImpl0 = new HTMLAppletElementImpl(hTMLDocumentImpl0, "");
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(hTMLAppletElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      boolean boolean2 = dOMNodePointer0.equals(hTMLAppletElementImpl0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(boolean2);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", qName0.getName());
      assertEquals("cOKK:", qName0.toString());
      assertEquals("cOKK", qName0.getPrefix());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isActual());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(dOMNodePointer0, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      AttrNSImpl attrNSImpl0 = new AttrNSImpl(hTMLDocumentImpl1, "", "N ", "M'[Pl57");
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(attrNSImpl0);
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      
      String string2 = DOMNodePointer.getLocalName(attrNSImpl0);
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("M'[Pl57", string2);
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      
      String string3 = DOMNodePointer.getPrefix(hTMLDocumentImpl1);
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNull(string3);
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      
      NodePointer nodePointer1 = dOMNodePointer0.namespacePointer("");
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertNotNull(nodePointer1);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", qName0.getName());
      assertEquals("cOKK:", qName0.toString());
      assertEquals("cOKK", qName0.getPrefix());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isActual());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, nodePointer1.getIndex());
      assertFalse(nodePointer1.isAttribute());
      assertTrue(nodePointer1.isLeaf());
      assertFalse(nodePointer1.isCollection());
      assertFalse(nodePointer1.isRoot());
      assertEquals(1, nodePointer1.getLength());
      assertFalse(nodePointer1.isContainer());
      assertTrue(nodePointer1.isNode());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(dOMNodePointer0, nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      Text text0 = hTMLDocumentImpl0.createTextNode("cK>4I 04(GUs");
      assertNotNull(text0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      Node node0 = hTMLDocumentImpl0.getNextSibling();
      assertNull(node0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(text0, locale0);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) text0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)jXPathContextReferenceImpl0.getRelativeContext(dOMNodePointer0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = (JXPathContextReferenceImpl)jXPathContextReferenceImpl1.getParentContext();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(jXPathContextReferenceImpl2);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      DOMNodePointer dOMNodePointer1 = (DOMNodePointer)jXPathContextReferenceImpl2.getNamespaceContextPointer();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl3 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl2, (Object) null);
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl3);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertFalse(jXPathContextReferenceImpl3.isLenient());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl3);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl3);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl3);
      assertSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      QName qName0 = dOMNodePointer0.getName();
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(qName0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean0 = dOMNodePointer0.isLeaf();
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(boolean0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl0, "6P:kThj&Aa&huNI5\"W");
      assertNotNull(hTMLTableElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      HTMLElement hTMLElement0 = hTMLTableElementImpl0.createCaption();
      assertNotNull(hTMLElement0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, hTMLElement0);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      dOMNodePointer0.remove();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      
      HTMLDocumentImpl hTMLDocumentImpl2 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertNotNull(hTMLDocumentImpl2);
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getCookie());
      
      HTMLTableElementImpl hTMLTableElementImpl1 = new HTMLTableElementImpl(hTMLDocumentImpl2, "<<unknown namespace>>");
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLTableElementImpl1.equals((Object)hTMLTableElementImpl0));
      assertNotNull(hTMLTableElementImpl1);
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getCookie());
      
      HTMLElement hTMLElement1 = hTMLTableElementImpl0.createTHead();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLTableElementImpl0.equals((Object)hTMLTableElementImpl1));
      assertNotNull(hTMLElement1);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(hTMLTableElementImpl0, hTMLTableElementImpl1);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer((NodePointer) null, hTMLDocumentImpl0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Locale locale0 = new Locale("83?}6`*A");
      assertNotNull(locale0);
      assertEquals("83?}6`*a", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("83?}6`*a", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertEquals("83?}6`*a", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("83?}6`*a", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("83?}6`*a", locale1.toString());
      assertEquals("83?}6`*a", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(hTMLElement1, locale1, "<<unknown namespace>>");
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLTableElementImpl0.equals((Object)hTMLTableElementImpl1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer2);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("83?}6`*a", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("83?}6`*a", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("83?}6`*a", locale1.toString());
      assertEquals("83?}6`*a", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertFalse(dOMNodePointer2.isAttribute());
      assertTrue(dOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      dOMNodePointer2.setValue(hTMLDocumentImpl2);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLTableElementImpl0.equals((Object)hTMLTableElementImpl1));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertEquals("83?}6`*a", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("83?}6`*a", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("83?}6`*a", locale1.toString());
      assertEquals("83?}6`*a", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertFalse(dOMNodePointer2.isAttribute());
      assertTrue(dOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isActual());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(hTMLTableElementImpl0, hTMLTableElementImpl1);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLTableColElementImpl hTMLTableColElementImpl0 = new HTMLTableColElementImpl(hTMLDocumentImpl1, "http://www.w3.org/2000/xmlns/");
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl2));
      assertNotNull(hTMLTableColElementImpl0);
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) hTMLTableColElementImpl0);
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl2));
      assertNotNull(jXPathContextReferenceImpl0);
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl2);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      HTMLDocumentImpl hTMLDocumentImpl3 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl2));
      assertNotNull(hTMLDocumentImpl3);
      assertNull(hTMLDocumentImpl3.getDomain());
      assertNull(hTMLDocumentImpl3.getURL());
      assertNull(hTMLDocumentImpl3.getReferrer());
      assertNull(hTMLDocumentImpl3.getCookie());
      
      Locale locale2 = Locale.JAPANESE;
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getCountry());
      assertEquals("ja", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("ja", locale2.getLanguage());
      assertEquals("jpn", locale2.getISO3Language());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      
      String string0 = locale1.getScript();
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale2));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("83?}6`*a", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("83?}6`*a", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("83?}6`*a", locale1.toString());
      assertEquals("83?}6`*a", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale1, locale2);
      assertSame(locale1, locale0);
      
      boolean boolean0 = dOMNodePointer0.isActual();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl3));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLTableElementImpl0.equals((Object)hTMLTableElementImpl1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertTrue(boolean0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl3);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(hTMLTableElementImpl0, hTMLTableElementImpl1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string1 = dOMNodePointer1.getDefaultNamespaceURI();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl3));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertNull(string1);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl3);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DocumentFragmentImpl documentFragmentImpl0 = new DocumentFragmentImpl();
      assertNotNull(documentFragmentImpl0);
      
      String string2 = dOMNodePointer2.getDefaultNamespaceURI();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl3));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLTableElementImpl0.equals((Object)hTMLTableElementImpl1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertNull(string2);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("83?}6`*a", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("83?}6`*a", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("83?}6`*a", locale1.toString());
      assertEquals("83?}6`*a", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertFalse(dOMNodePointer2.isAttribute());
      assertTrue(dOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isActual());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl3);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(hTMLTableElementImpl0, hTMLTableElementImpl1);
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale1, locale2);
      assertSame(locale1, locale0);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean1 = dOMNodePointer2.equals(locale0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl3));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLTableElementImpl0.equals((Object)hTMLTableElementImpl1));
      assertFalse(boolean1 == boolean0);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(boolean1);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("83?}6`*a", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("83?}6`*a", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("83?}6`*a", locale1.toString());
      assertEquals("83?}6`*a", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertFalse(dOMNodePointer2.isAttribute());
      assertTrue(dOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isActual());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl3);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(hTMLTableElementImpl0, hTMLTableElementImpl1);
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale1, locale2);
      assertSame(locale1, locale0);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string3 = DOMNodePointer.getLocalName(hTMLElement1);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl3));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLTableElementImpl0.equals((Object)hTMLTableElementImpl1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("THEAD", string3);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl3);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(hTMLTableElementImpl0, hTMLTableElementImpl1);
      
      String string4 = (String)dOMNodePointer1.getValue();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl3));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertNotNull(string4);
      assertEquals("", string4);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl3);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string5 = DOMNodePointer.getNamespaceURI((Node) hTMLTableElementImpl0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl3));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLTableElementImpl0.equals((Object)hTMLTableElementImpl1));
      assertNull(string5);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl3);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(hTMLTableElementImpl0, hTMLTableElementImpl1);
      
      boolean boolean2 = dOMNodePointer1.isCollection();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl3));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl3);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      
      Locale locale1 = (Locale)locale0.clone();
      assertTrue(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale1.getCountry());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("it_IT", locale1.toString());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, "", locale0);
      assertTrue(locale0.equals((Object)locale1));
      assertNotNull(beanPointer0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      HTMLScriptElementImpl hTMLScriptElementImpl0 = new HTMLScriptElementImpl(hTMLDocumentImpl0, "");
      assertNotNull(hTMLScriptElementImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(beanPointer0, hTMLScriptElementImpl0);
      assertTrue(locale0.equals((Object)locale1));
      assertNotNull(dOMNodePointer0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      Vector<Locale> vector1 = new Vector<Locale>();
      assertNotNull(vector1);
      assertEquals(0, vector1.size());
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      assertEquals(10, vector1.capacity());
      assertFalse(vector1.contains(locale0));
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) vector1);
      assertNotNull(list0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, vector1.size());
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      assertEquals(10, vector1.capacity());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(vector1.contains(locale0));
      assertFalse(list0.contains(locale0));
      
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, vector1.size());
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      assertEquals(10, vector1.capacity());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertFalse(vector1.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      boolean boolean0 = beanPointer0.testNode(nodeNameTest0);
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(boolean0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertEquals(":", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list0);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertNotNull(list2);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, vector1.size());
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      assertEquals(10, vector1.capacity());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotSame(list0, list2);
      assertNotSame(list0, list1);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertFalse(vector1.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertFalse(list2.contains(locale0));
      
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "68*:7MwD:ey%_&es3");
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(nodeNameTest1);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals(":", nodeNameTest1.toString());
      assertEquals("68*:7MwD:ey%_&es3", nodeNameTest1.getNamespaceURI());
      
      boolean boolean1 = dOMNodePointer0.testNode(nodeNameTest1);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals(":", nodeNameTest1.toString());
      assertEquals("68*:7MwD:ey%_&es3", nodeNameTest1.getNamespaceURI());
      assertNotSame(locale0, locale1);
      assertNotSame(nodeNameTest1, nodeNameTest0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list3 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) null, locale_FilteringMode0);
      assertTrue(list3.equals((Object)list0));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list1));
      assertNotNull(list3);
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotSame(list3, list2);
      assertNotSame(list3, list1);
      assertNotSame(list3, list0);
      assertFalse(list3.contains(locale0));
      
      List<Locale> list4 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list0);
      assertTrue(list4.equals((Object)list0));
      assertTrue(list4.equals((Object)list1));
      assertTrue(list4.equals((Object)list3));
      assertTrue(list4.equals((Object)list2));
      assertTrue(list0.equals((Object)list1));
      assertTrue(list0.equals((Object)list3));
      assertTrue(list0.equals((Object)list2));
      assertNotNull(list4);
      assertEquals(0, list4.size());
      assertTrue(list4.isEmpty());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, vector1.size());
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      assertEquals(10, vector1.capacity());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotSame(list4, list2);
      assertNotSame(list4, list0);
      assertNotSame(list4, list1);
      assertNotSame(list4, list3);
      assertNotSame(list0, list2);
      assertNotSame(list0, list1);
      assertNotSame(list0, list4);
      assertNotSame(list0, list3);
      assertFalse(list4.contains(locale0));
      assertFalse(vector1.contains(locale0));
      assertFalse(list0.contains(locale0));
      
      String string0 = locale1.getScript();
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(locale1.equals((Object)locale0));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale1.getCountry());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("it_IT", locale1.toString());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      boolean boolean2 = dOMNodePointer0.isActual();
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string1 = NodePointer.UNKNOWN_NAMESPACE;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<<unknown namespace>>", string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte) (-37);
      byteArray0[6] = (byte) (-3);
      boolean boolean3 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)36, (byte)12, (byte) (-71), (byte)5, (byte)19, (byte) (-37), (byte) (-3)}, byteArray0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertEquals(7, byteArray0.length);
      assertFalse(boolean3);
      
      HTMLIFrameElementImpl hTMLIFrameElementImpl0 = new HTMLIFrameElementImpl(hTMLDocumentImpl0, "S]=Z");
      assertNotNull(hTMLIFrameElementImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      boolean boolean4 = dOMNodePointer0.equals(hTMLIFrameElementImpl0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(boolean4);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string2 = DOMNodePointer.getLocalName(hTMLScriptElementImpl0);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      String string3 = DOMNodePointer.getPrefix(hTMLScriptElementImpl0);
      assertNull(string3);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      NamespacePointer namespacePointer0 = (NamespacePointer)dOMNodePointer0.namespacePointer("");
      assertTrue(locale0.equals((Object)locale1));
      assertNotNull(namespacePointer0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertFalse(namespacePointer0.isCollection());
      assertTrue(namespacePointer0.isLeaf());
      assertEquals(1, namespacePointer0.getLength());
      assertFalse(namespacePointer0.isContainer());
      assertFalse(namespacePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, namespacePointer0.getIndex());
      assertFalse(namespacePointer0.isAttribute());
      assertTrue(namespacePointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      QName qName0 = new QName("cOKK", "");
      assertNotNull(qName0);
      assertEquals("cOKK", qName0.getPrefix());
      assertEquals("cOKK:", qName0.toString());
      assertEquals("", qName0.getName());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      
      Locale locale1 = (Locale)locale0.clone();
      assertTrue(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("IT", locale1.getCountry());
      assertEquals("it", locale1.getLanguage());
      assertEquals("it_IT", locale1.toString());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      HTMLFrameSetElementImpl hTMLFrameSetElementImpl0 = new HTMLFrameSetElementImpl(hTMLDocumentImpl0, "");
      assertNotNull(hTMLFrameSetElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      DOMNodePointer dOMNodePointer0 = (DOMNodePointer)NodePointer.newNodePointer(qName0, hTMLFrameSetElementImpl0, locale0);
      assertTrue(locale0.equals((Object)locale1));
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("cOKK", qName0.getPrefix());
      assertEquals("cOKK:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      
      HTMLScriptElementImpl hTMLScriptElementImpl0 = new HTMLScriptElementImpl(hTMLDocumentImpl1, "cOKK");
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLScriptElementImpl0);
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLScriptElementImpl0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("cOKK", qName0.getPrefix());
      assertEquals("cOKK:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) null);
      assertNotNull(list0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(locale0));
      
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "cOKK");
      assertNotNull(nodeNameTest0);
      assertEquals("cOKK", qName0.getPrefix());
      assertEquals("cOKK:", qName0.toString());
      assertEquals("", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("cOKK", nodeNameTest0.getNamespaceURI());
      assertEquals("cOKK:", nodeNameTest0.toString());
      
      boolean boolean0 = dOMNodePointer1.testNode(nodeNameTest0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(boolean0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("cOKK", qName0.getPrefix());
      assertEquals("cOKK:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("cOKK", nodeNameTest0.getNamespaceURI());
      assertEquals("cOKK:", nodeNameTest0.toString());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list1, locale_FilteringMode0);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertNotNull(list2);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotSame(list0, list2);
      assertNotSame(list0, list1);
      assertNotSame(list1, list2);
      assertNotSame(list1, list0);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      assertFalse(list2.contains(locale0));
      
      List<Locale> list3 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list2);
      assertTrue(list3.equals((Object)list0));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list1));
      assertTrue(list0.equals((Object)list1));
      assertTrue(list0.equals((Object)list2));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list1.equals((Object)list2));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertNotNull(list3);
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotSame(list3, list1);
      assertNotSame(list3, list0);
      assertNotSame(list3, list2);
      assertNotSame(list0, list2);
      assertNotSame(list0, list3);
      assertNotSame(list0, list1);
      assertNotSame(list1, list2);
      assertNotSame(list1, list0);
      assertNotSame(list1, list3);
      assertNotSame(list2, list1);
      assertNotSame(list2, list3);
      assertNotSame(list2, list0);
      assertFalse(list3.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      assertFalse(list2.contains(locale0));
      
      String string0 = locale0.getScript();
      assertTrue(locale0.equals((Object)locale1));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertNotSame(locale0, locale1);
      
      boolean boolean1 = dOMNodePointer1.isActual();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(boolean1 == boolean0);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertTrue(boolean1);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("cOKK", qName0.getPrefix());
      assertEquals("cOKK:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string1 = NodePointer.UNKNOWN_NAMESPACE;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<<unknown namespace>>", string1);
      
      HTMLAppletElementImpl hTMLAppletElementImpl0 = new HTMLAppletElementImpl(hTMLDocumentImpl0, "");
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(hTMLAppletElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      boolean boolean2 = dOMNodePointer1.equals(hTMLAppletElementImpl0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(boolean2);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("cOKK", qName0.getPrefix());
      assertEquals("cOKK:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      AttrNSImpl attrNSImpl0 = new AttrNSImpl(hTMLDocumentImpl1, "", "N ", "M'[Pl57");
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(attrNSImpl0);
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      
      String string2 = DOMNodePointer.getLocalName(attrNSImpl0);
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("M'[Pl57", string2);
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      
      String string3 = DOMNodePointer.getPrefix(hTMLDocumentImpl1);
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNull(string3);
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      
      NamespacePointer namespacePointer0 = (NamespacePointer)dOMNodePointer1.namespacePointer("");
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(namespacePointer0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("cOKK", qName0.getPrefix());
      assertEquals("cOKK:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(namespacePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, namespacePointer0.getIndex());
      assertFalse(namespacePointer0.isCollection());
      assertEquals(1, namespacePointer0.getLength());
      assertTrue(namespacePointer0.isLeaf());
      assertFalse(namespacePointer0.isRoot());
      assertFalse(namespacePointer0.isAttribute());
      assertTrue(namespacePointer0.isNode());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      MutationEventImpl mutationEventImpl0 = new MutationEventImpl();
      assertNotNull(mutationEventImpl0);
      assertFalse(mutationEventImpl0.preventDefault);
      assertFalse(mutationEventImpl0.cancelable);
      assertTrue(mutationEventImpl0.bubbles);
      assertEquals((short)0, mutationEventImpl0.attrChange);
      assertEquals((short)0, mutationEventImpl0.eventPhase);
      assertFalse(mutationEventImpl0.stopPropagation);
      assertFalse(mutationEventImpl0.initialized);
      
      HTMLParamElementImpl hTMLParamElementImpl0 = new HTMLParamElementImpl(hTMLDocumentImpl0, "Factory is not set on the JXPathContext - cannot create path: ");
      assertNotNull(hTMLParamElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      QName qName0 = new QName("xml");
      assertNotNull(qName0);
      assertEquals("xml", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("xml", qName0.toString());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLParamElementImpl0, locale0);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName1 = new QName("e),:w.{vV7|3|z=v");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals("w.{vV7|3|z=v", qName1.getName());
      assertEquals("e),", qName1.getPrefix());
      assertEquals("e),:w.{vV7|3|z=v", qName1.toString());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) dOMNodePointer0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContext jXPathContext0 = jXPathContextReferenceImpl0.getParentContext();
      assertNull(jXPathContext0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      DOMAttributePointer dOMAttributePointer0 = (DOMAttributePointer)dOMNodePointer0.createAttribute((JXPathContext) null, qName0);
      assertFalse(qName0.equals((Object)qName1));
      assertNotNull(dOMAttributePointer0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("xml", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("xml", qName0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMAttributePointer0.isRoot());
      assertTrue(dOMAttributePointer0.isNode());
      assertFalse(dOMAttributePointer0.isCollection());
      assertFalse(dOMAttributePointer0.isAttribute());
      assertTrue(dOMAttributePointer0.isActual());
      assertEquals(1, dOMAttributePointer0.getLength());
      assertTrue(dOMAttributePointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, dOMAttributePointer0.getIndex());
      assertFalse(dOMAttributePointer0.isContainer());
      assertNotSame(qName0, qName1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = dOMNodePointer0.getNamespaceURI("<<unknown namespace>>");
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNull(string0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLOListElementImpl hTMLOListElementImpl0 = new HTMLOListElementImpl(hTMLDocumentImpl0, "//WWW.W3.ORG/2000/XMLNS/");
      assertNotNull(hTMLOListElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      CDATASectionImpl cDATASectionImpl0 = new CDATASectionImpl(hTMLDocumentImpl0, (String) null);
      assertNotNull(cDATASectionImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      dOMNodePointer1.setAttribute(true);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        cDATASectionImpl0.splitText(2565);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.dom.TextImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl0, "6P:kThj&Aa&huNI5\"W");
      assertNotNull(hTMLTableElementImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      HTMLElement hTMLElement0 = hTMLTableElementImpl0.createCaption();
      assertNotNull(hTMLElement0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, hTMLElement0);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      dOMNodePointer0.remove();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      
      HTMLDocumentImpl hTMLDocumentImpl2 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertNotNull(hTMLDocumentImpl2);
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getURL());
      
      HTMLTableElementImpl hTMLTableElementImpl1 = new HTMLTableElementImpl(hTMLDocumentImpl2, "<<unknown namespace>>");
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLTableElementImpl1.equals((Object)hTMLTableElementImpl0));
      assertNotNull(hTMLTableElementImpl1);
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getURL());
      
      HTMLElement hTMLElement1 = hTMLTableElementImpl0.createTHead();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLTableElementImpl0.equals((Object)hTMLTableElementImpl1));
      assertNotNull(hTMLElement1);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(hTMLTableElementImpl0, hTMLTableElementImpl1);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer((NodePointer) null, hTMLDocumentImpl0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertTrue(dOMNodePointer1.isNode());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Locale locale0 = new Locale("83?}6`*A");
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("83?}6`*a", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("83?}6`*a", locale0.toString());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("83?}6`*a", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("83?}6`*a", locale0.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("83?}6`*a", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("83?}6`*a", locale1.getLanguage());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(hTMLElement1, locale1, "<<unknown namespace>>");
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLTableElementImpl0.equals((Object)hTMLTableElementImpl1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer2);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("83?}6`*a", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("83?}6`*a", locale0.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("83?}6`*a", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("83?}6`*a", locale1.getLanguage());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isAttribute());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      dOMNodePointer2.setValue(hTMLDocumentImpl2);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLTableElementImpl0.equals((Object)hTMLTableElementImpl1));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getURL());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("83?}6`*a", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("83?}6`*a", locale0.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("83?}6`*a", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("83?}6`*a", locale1.getLanguage());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isAttribute());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isContainer());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(hTMLTableElementImpl0, hTMLTableElementImpl1);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLTableColElementImpl hTMLTableColElementImpl0 = new HTMLTableColElementImpl(hTMLDocumentImpl1, "http://www.w3.org/2000/xmlns/");
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl2));
      assertNotNull(hTMLTableColElementImpl0);
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) hTMLTableColElementImpl0);
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl2));
      assertNotNull(jXPathContextReferenceImpl0);
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl2);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      HTMLDocumentImpl hTMLDocumentImpl3 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl2));
      assertNotNull(hTMLDocumentImpl3);
      assertNull(hTMLDocumentImpl3.getDomain());
      assertNull(hTMLDocumentImpl3.getURL());
      assertNull(hTMLDocumentImpl3.getCookie());
      assertNull(hTMLDocumentImpl3.getReferrer());
      
      HTMLParamElementImpl hTMLParamElementImpl0 = new HTMLParamElementImpl(hTMLDocumentImpl3, "Cannot add a second doctype, only one is allowed");
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl2));
      assertNotNull(hTMLParamElementImpl0);
      assertNull(hTMLDocumentImpl3.getDomain());
      assertNull(hTMLDocumentImpl3.getURL());
      assertNull(hTMLDocumentImpl3.getCookie());
      assertNull(hTMLDocumentImpl3.getReferrer());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1b@{#4<Sp&XXYZ*{STU");
      assertFalse(boolean0);
      
      QName qName0 = new QName("]oK]i");
      assertNotNull(qName0);
      assertEquals("]oK]i", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("]oK]i", qName0.getName());
      
      boolean boolean1 = DOMNodePointer.testNode((Node) hTMLDocumentImpl2, (NodeTest) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl3));
      assertTrue(boolean1);
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl3);
      
      DOMNamespaceIterator dOMNamespaceIterator0 = (DOMNamespaceIterator)dOMNodePointer1.namespaceIterator();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl3));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertNotNull(dOMNamespaceIterator0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals(0, dOMNamespaceIterator0.getPosition());
      assertTrue(dOMNodePointer1.isNode());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl3);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      
      HTMLOptionElementImpl hTMLOptionElementImpl0 = new HTMLOptionElementImpl(hTMLDocumentImpl0, ")Z<!}K <4f^p[h^j");
      assertNotNull(hTMLOptionElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      
      HTMLOptionElementImpl hTMLOptionElementImpl1 = new HTMLOptionElementImpl(hTMLDocumentImpl0, ")Z<!}K <4f^p[h^j");
      assertFalse(hTMLOptionElementImpl1.equals((Object)hTMLOptionElementImpl0));
      assertNotNull(hTMLOptionElementImpl1);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      
      Node node0 = hTMLDocumentImpl1.adoptNode(hTMLOptionElementImpl1);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLOptionElementImpl1.equals((Object)hTMLOptionElementImpl0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(node0.equals((Object)hTMLOptionElementImpl0));
      assertNotNull(node0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertSame(hTMLOptionElementImpl1, node0);
      assertNotSame(hTMLOptionElementImpl1, hTMLOptionElementImpl0);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(node0, hTMLOptionElementImpl0);
      assertSame(node0, hTMLOptionElementImpl1);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(node0, locale0, "xmlns");
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLOptionElementImpl1.equals((Object)hTMLOptionElementImpl0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(node0.equals((Object)hTMLOptionElementImpl0));
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      HTMLParamElementImpl hTMLParamElementImpl0 = new HTMLParamElementImpl(hTMLDocumentImpl1, ")Z<!}K <4f^p[h^j");
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLParamElementImpl0);
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace");
      assertNotNull(qName0);
      assertEquals("http", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertEquals("//www.w3.org/XML/1998/namespace", qName0.getName());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) qName0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals("http", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertEquals("//www.w3.org/XML/1998/namespace", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TW", locale1.getCountry());
      assertNotSame(locale1, locale0);
      
      Locale locale2 = locale1.stripExtensions();
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TW", locale1.getCountry());
      assertEquals("TW", locale2.getCountry());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("zh_TW", locale2.toString());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("TWN", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertNotSame(locale1, locale0);
      assertSame(locale1, locale2);
      assertNotSame(locale2, locale0);
      assertSame(locale2, locale1);
      
      XMLErrorReporter xMLErrorReporter0 = new XMLErrorReporter();
      assertNotNull(xMLErrorReporter0);
      
      Locale locale3 = xMLErrorReporter0.getLocale();
      assertNull(locale3);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLDocumentImpl1, (Locale) null, "@M8{22+<S");
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(dOMNodePointer1);
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean2 = dOMNodePointer1.isActual();
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertTrue(boolean2);
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = dOMNodePointer1.getDefaultNamespaceURI();
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNull(string0);
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl2 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertNotNull(hTMLDocumentImpl2);
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      
      HTMLIsIndexElementImpl hTMLIsIndexElementImpl0 = new HTMLIsIndexElementImpl(hTMLDocumentImpl2, "xmlns");
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertNotNull(hTMLIsIndexElementImpl0);
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      
      boolean boolean3 = dOMNodePointer0.equals(hTMLIsIndexElementImpl0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLOptionElementImpl1.equals((Object)hTMLOptionElementImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(node0.equals((Object)hTMLOptionElementImpl0));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(boolean3);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertSame(hTMLOptionElementImpl1, node0);
      assertNotSame(hTMLOptionElementImpl1, hTMLOptionElementImpl0);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl2);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(node0, hTMLOptionElementImpl0);
      assertSame(node0, hTMLOptionElementImpl1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string1 = DOMNodePointer.getLocalName(hTMLDocumentImpl2);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertNotNull(string1);
      assertEquals("#document", string1);
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      
      String string2 = (String)dOMNodePointer0.getValue();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLOptionElementImpl1.equals((Object)hTMLOptionElementImpl0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(node0.equals((Object)hTMLOptionElementImpl0));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(string2);
      assertEquals("", string2);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertSame(hTMLOptionElementImpl1, node0);
      assertNotSame(hTMLOptionElementImpl1, hTMLOptionElementImpl0);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl2);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(node0, hTMLOptionElementImpl0);
      assertSame(node0, hTMLOptionElementImpl1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string3 = DOMNodePointer.getNamespaceURI((Node) hTMLDocumentImpl2);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertNull(string3);
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      
      boolean boolean4 = dOMNodePointer1.isCollection();
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl2);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string4 = dOMNodePointer0.getDefaultNamespaceURI();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLOptionElementImpl1.equals((Object)hTMLOptionElementImpl0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(node0.equals((Object)hTMLOptionElementImpl0));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNull(string4);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertSame(hTMLOptionElementImpl1, node0);
      assertNotSame(hTMLOptionElementImpl1, hTMLOptionElementImpl0);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl2);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(node0, hTMLOptionElementImpl0);
      assertSame(node0, hTMLOptionElementImpl1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLObjectElementImpl hTMLObjectElementImpl0 = new HTMLObjectElementImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(hTMLObjectElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      
      dOMNodePointer1.setValue(hTMLObjectElementImpl0);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl2);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl0, "6P:kThj&Aa&huNI5\"W");
      assertNotNull(hTMLTableElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      HTMLElement hTMLElement0 = hTMLTableElementImpl0.createCaption();
      assertNotNull(hTMLElement0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, hTMLElement0);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      dOMNodePointer0.remove();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      
      HTMLDocumentImpl hTMLDocumentImpl2 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertNotNull(hTMLDocumentImpl2);
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getDomain());
      
      HTMLDocumentImpl hTMLDocumentImpl3 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl1));
      assertNotNull(hTMLDocumentImpl3);
      assertNull(hTMLDocumentImpl3.getCookie());
      assertNull(hTMLDocumentImpl3.getReferrer());
      assertNull(hTMLDocumentImpl3.getDomain());
      assertNull(hTMLDocumentImpl3.getURL());
      
      HTMLTableElementImpl hTMLTableElementImpl1 = new HTMLTableElementImpl(hTMLDocumentImpl2, "cBo3");
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl3));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLTableElementImpl1.equals((Object)hTMLTableElementImpl0));
      assertNotNull(hTMLTableElementImpl1);
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getDomain());
      
      HTMLElement hTMLElement1 = hTMLTableElementImpl0.createTHead();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl3));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLTableElementImpl0.equals((Object)hTMLTableElementImpl1));
      assertNotNull(hTMLElement1);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl3);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLTableElementImpl0, hTMLTableElementImpl1);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLDocumentImpl2);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl3));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLTableElementImpl0.equals((Object)hTMLTableElementImpl1));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl3));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Locale locale0 = new Locale("<<unknown namespace>>");
      assertNotNull(locale0);
      assertEquals("<<unknown namespace>>", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("<<unknown namespace>>", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertEquals("<<unknown namespace>>", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("<<unknown namespace>>", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale1.getISO3Country());
      assertEquals("<<unknown namespace>>", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("<<unknown namespace>>", locale1.getLanguage());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(hTMLDocumentImpl0, locale1, "<<unknown namespace>>");
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl3));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer2);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("<<unknown namespace>>", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("<<unknown namespace>>", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale1.getISO3Country());
      assertEquals("<<unknown namespace>>", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("<<unknown namespace>>", locale1.getLanguage());
      assertFalse(dOMNodePointer2.isAttribute());
      assertTrue(dOMNodePointer2.isRoot());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isNode());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLHeadingElementImpl hTMLHeadingElementImpl0 = new HTMLHeadingElementImpl(hTMLDocumentImpl1, "<<unknown namespace>>");
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl3));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl2));
      assertNotNull(hTMLHeadingElementImpl0);
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      
      dOMNodePointer0.setValue(hTMLHeadingElementImpl0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl3));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLTableElementImpl0.equals((Object)hTMLTableElementImpl1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl3));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl2));
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl3);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLTableElementImpl0, hTMLTableElementImpl1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl3);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLTableColElementImpl hTMLTableColElementImpl0 = new HTMLTableColElementImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl3));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(hTMLTableColElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      HTMLBodyElementImpl hTMLBodyElementImpl0 = new HTMLBodyElementImpl(hTMLDocumentImpl0, "<<unknown namespace>>");
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl3));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(hTMLBodyElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) hTMLBodyElementImpl0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl3));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(jXPathContextReferenceImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl3);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      HTMLDocumentImpl hTMLDocumentImpl4 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl4.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl4.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl4.equals((Object)hTMLDocumentImpl3));
      assertFalse(hTMLDocumentImpl4.equals((Object)hTMLDocumentImpl1));
      assertNotNull(hTMLDocumentImpl4);
      assertNull(hTMLDocumentImpl4.getDomain());
      assertNull(hTMLDocumentImpl4.getCookie());
      assertNull(hTMLDocumentImpl4.getReferrer());
      assertNull(hTMLDocumentImpl4.getURL());
      
      HTMLParamElementImpl hTMLParamElementImpl0 = new HTMLParamElementImpl(hTMLDocumentImpl4, "sU1p'(C O");
      assertFalse(hTMLDocumentImpl4.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl4.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl4.equals((Object)hTMLDocumentImpl3));
      assertFalse(hTMLDocumentImpl4.equals((Object)hTMLDocumentImpl1));
      assertNotNull(hTMLParamElementImpl0);
      assertNull(hTMLDocumentImpl4.getDomain());
      assertNull(hTMLDocumentImpl4.getCookie());
      assertNull(hTMLDocumentImpl4.getReferrer());
      assertNull(hTMLDocumentImpl4.getURL());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) "sU1p'(C O");
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl3));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl4));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl3);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl4);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = (JXPathContextReferenceImpl)jXPathContextReferenceImpl1.getParentContext();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl3));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl4));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(jXPathContextReferenceImpl2);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl3);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl4);
      assertSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      NullPointer nullPointer0 = (NullPointer)dOMNodePointer2.getPointerByID(jXPathContextReferenceImpl1, "83?}6`*A");
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl3));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl4));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertNotNull(nullPointer0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isNode());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer0.isContainer());
      assertEquals("<<unknown namespace>>", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("<<unknown namespace>>", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale1.getISO3Country());
      assertEquals("<<unknown namespace>>", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("<<unknown namespace>>", locale1.getLanguage());
      assertFalse(dOMNodePointer2.isAttribute());
      assertTrue(dOMNodePointer2.isRoot());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isNode());
      assertTrue(dOMNodePointer2.isActual());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl3);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl4);
      assertSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      boolean boolean0 = hTMLDocumentImpl0.isDefaultNamespace("Qd-/5zrP6Z'");
      assertFalse(boolean0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      Comment comment0 = hTMLDocumentImpl0.createComment("");
      assertNotNull(comment0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains("Qd-/5zrP6Z'"));
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "marginwidth");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(comment0, locale0);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NamespaceResolver namespaceResolver0 = dOMNodePointer0.getNamespaceResolver();
      assertNotNull(namespaceResolver0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(namespaceResolver0.isSealed());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      boolean boolean2 = dOMNodePointer0.testNode((NodeTest) nodeNameTest0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLMenuElementImpl hTMLMenuElementImpl0 = new HTMLMenuElementImpl((HTMLDocumentImpl) null, "");
      assertNotNull(hTMLMenuElementImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) hTMLMenuElementImpl0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContext jXPathContext0 = jXPathContextReferenceImpl0.getParentContext();
      assertNull(jXPathContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3132);
      assertNotNull(nodeTypeTest0);
      assertEquals(3132, nodeTypeTest0.getNodeType());
      
      boolean boolean3 = DOMNodePointer.testNode((Node) comment0, (NodeTest) nodeTypeTest0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals(3132, nodeTypeTest0.getNodeType());
      
      String string0 = dOMNodePointer0.asPath();
      assertNotNull(string0);
      assertEquals("", string0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "Qd-/5zrP6Z'");
      assertNotNull(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNotNull(wMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      WMLPrevElementImpl wMLPrevElementImpl0 = new WMLPrevElementImpl(wMLDocumentImpl0, "/G");
      assertNotNull(wMLPrevElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.createChild((JXPathContext) null, qName0, 3132, (Object) wMLPrevElementImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      
      HTMLOptionElementImpl hTMLOptionElementImpl0 = new HTMLOptionElementImpl(hTMLDocumentImpl0, ")Z<!}K <4f^yp[h^j");
      assertNotNull(hTMLOptionElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      
      Node node0 = hTMLDocumentImpl0.adoptNode(hTMLOptionElementImpl0);
      assertNotNull(node0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertSame(hTMLOptionElementImpl0, node0);
      assertSame(node0, hTMLOptionElementImpl0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(node0, locale0, ")Z<!}K <4f^yp[h^j");
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNotNull(qName0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(")Z<!}K <4F^YP[H^J", qName0.getName());
      assertEquals(")Z<!}K <4F^YP[H^J", qName0.toString());
      assertNull(qName0.getPrefix());
      assertSame(hTMLOptionElementImpl0, node0);
      assertSame(node0, hTMLOptionElementImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Object object0 = hTMLOptionElementImpl0.getUserData();
      assertNull(object0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertSame(hTMLOptionElementImpl0, node0);
      
      int int0 = dOMNodePointer0.getLength();
      assertEquals(1, int0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertSame(hTMLOptionElementImpl0, node0);
      assertSame(node0, hTMLOptionElementImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = dOMNodePointer0.getNamespaceURI("");
      assertNull(string0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertSame(hTMLOptionElementImpl0, node0);
      assertSame(node0, hTMLOptionElementImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean2 = dOMNodePointer0.isLeaf();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertSame(hTMLOptionElementImpl0, node0);
      assertSame(node0, hTMLOptionElementImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string1 = dOMNodePointer0.asPath();
      assertNotNull(string1);
      assertEquals("id(')Z<!}K <4f^yp[h^j')", string1);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertSame(hTMLOptionElementImpl0, node0);
      assertSame(node0, hTMLOptionElementImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(")Z<!}K <4F^YP[H^J", qName0.getName());
      assertEquals(")Z<!}K <4F^YP[H^J", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(")Z<!}K <4F^YP[H^J", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean3 = dOMNodePointer0.testNode((NodeTest) nodeNameTest0);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(")Z<!}K <4F^YP[H^J", qName0.getName());
      assertEquals(")Z<!}K <4F^YP[H^J", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(")Z<!}K <4F^YP[H^J", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertSame(hTMLOptionElementImpl0, node0);
      assertSame(node0, hTMLOptionElementImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean4 = DOMNodePointer.testNode((Node) hTMLDocumentImpl0, (NodeTest) nodeNameTest0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(")Z<!}K <4F^YP[H^J", qName0.getName());
      assertEquals(")Z<!}K <4F^YP[H^J", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(")Z<!}K <4F^YP[H^J", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertSame(hTMLOptionElementImpl0, node0);
      assertSame(node0, hTMLOptionElementImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-3761));
      assertNotNull(nodeTypeTest0);
      assertEquals((-3761), nodeTypeTest0.getNodeType());
      
      dOMNodePointer0.setValue(nodeTypeTest0);
      assertEquals((-3761), nodeTypeTest0.getNodeType());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertSame(hTMLOptionElementImpl0, node0);
      assertSame(node0, hTMLOptionElementImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      
      Locale locale1 = (Locale)locale0.clone();
      assertTrue(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale1.getLanguage());
      assertEquals("IT", locale1.getCountry());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("it_IT", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, "", locale0);
      assertTrue(locale0.equals((Object)locale1));
      assertNotNull(beanPointer0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      Locale locale2 = Locale.SIMPLIFIED_CHINESE;
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertEquals("CN", locale2.getCountry());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("CHN", locale2.getISO3Country());
      assertEquals("zh_CN", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "");
      assertFalse(locale0.equals((Object)locale2));
      assertTrue(locale0.equals((Object)locale1));
      assertNotNull(dOMNodePointer0);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      QName qName1 = dOMNodePointer0.getName();
      assertFalse(locale0.equals((Object)locale2));
      assertTrue(locale0.equals((Object)locale1));
      assertNotNull(qName1);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNull(qName1.toString());
      assertNull(qName1.getName());
      assertNull(qName1.getPrefix());
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLOptionElementImpl hTMLOptionElementImpl0 = new HTMLOptionElementImpl(hTMLDocumentImpl0, "<<unknown namespace>>");
      assertNotNull(hTMLOptionElementImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      Object object0 = hTMLOptionElementImpl0.getUserData();
      assertNull(object0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      int int0 = dOMNodePointer0.getLength();
      assertFalse(locale0.equals((Object)locale2));
      assertTrue(locale0.equals((Object)locale1));
      assertEquals(1, int0);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = dOMNodePointer0.getNamespaceURI("");
      assertFalse(locale0.equals((Object)locale2));
      assertTrue(locale0.equals((Object)locale1));
      assertNull(string0);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean2 = dOMNodePointer0.isLeaf();
      assertFalse(locale0.equals((Object)locale2));
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string1 = dOMNodePointer0.asPath();
      assertFalse(locale0.equals((Object)locale2));
      assertTrue(locale0.equals((Object)locale1));
      assertNotNull(string1);
      assertEquals("id('')", string1);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertFalse(qName0.equals((Object)qName1));
      assertNotNull(nodeNameTest0);
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      boolean boolean3 = dOMNodePointer0.testNode((NodeTest) nodeNameTest0);
      assertFalse(qName0.equals((Object)qName1));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(locale0.equals((Object)locale2));
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(boolean3);
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(qName0, qName1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string2 = dOMNodePointer0.getDefaultNamespaceURI();
      assertFalse(locale0.equals((Object)locale2));
      assertTrue(locale0.equals((Object)locale1));
      assertNull(string2);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      DocumentType documentType0 = hTMLDocumentImpl0.getDoctype();
      assertNull(documentType0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      Locale locale1 = Locale.GERMANY;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("DE", locale1.getCountry());
      assertEquals("de_DE", locale1.toString());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale1, locale0);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "", "U\"~]pY4k[", "(kqUTV4-P])h");
      assertNotNull(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNotNull(wMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      WMLMetaElementImpl wMLMetaElementImpl0 = new WMLMetaElementImpl(wMLDocumentImpl0, "");
      assertNotNull(wMLMetaElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(wMLMetaElementImpl0, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(dOMNodePointer0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = dOMNodePointer0.asPath();
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer((Node) null, locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertEquals("DE", locale1.getCountry());
      assertEquals("de_DE", locale1.toString());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string1 = dOMNodePointer1.getDefaultNamespaceURI();
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNull(string1);
      assertEquals("DE", locale1.getCountry());
      assertEquals("de_DE", locale1.toString());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertNotSame(locale1, locale0);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Object object0 = dOMNodePointer0.getImmediateNode();
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(object0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNotSame(locale0, locale1);
      assertSame(wMLMetaElementImpl0, object0);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertSame(object0, wMLMetaElementImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotSame(locale0, locale1);
      assertSame(wMLMetaElementImpl0, object0);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertSame(object0, wMLMetaElementImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContext jXPathContext0 = jXPathContextReferenceImpl0.getParentContext();
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNull(jXPathContext0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotSame(locale0, locale1);
      assertSame(wMLMetaElementImpl0, object0);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertSame(object0, wMLMetaElementImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      HTMLOListElementImpl hTMLOListElementImpl0 = new HTMLOListElementImpl(hTMLDocumentImpl0, "<<unknown namespace>>");
      assertNotNull(hTMLOListElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      
      HTMLDocumentImpl hTMLDocumentImpl2 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertNotNull(hTMLDocumentImpl2);
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getURL());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2058148460));
      assertNotNull(nodeTypeTest0);
      assertEquals((-2058148460), nodeTypeTest0.getNodeType());
      
      CommentImpl commentImpl0 = new CommentImpl(hTMLDocumentImpl2, "java.util.Locale@0000000004");
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertNotNull(commentImpl0);
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getURL());
      
      boolean boolean0 = DOMNodePointer.testNode((Node) commentImpl0, (NodeTest) nodeTypeTest0);
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(boolean0);
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getURL());
      assertEquals((-2058148460), nodeTypeTest0.getNodeType());
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      MutationEventImpl mutationEventImpl0 = new MutationEventImpl();
      assertNotNull(mutationEventImpl0);
      assertFalse(mutationEventImpl0.initialized);
      assertEquals((short)0, mutationEventImpl0.attrChange);
      assertEquals((short)0, mutationEventImpl0.eventPhase);
      assertTrue(mutationEventImpl0.bubbles);
      assertFalse(mutationEventImpl0.stopPropagation);
      assertFalse(mutationEventImpl0.cancelable);
      assertFalse(mutationEventImpl0.preventDefault);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale1.toString());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "xml:lang");
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.setValue(locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = (Locale)locale0.clone();
      assertTrue(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("it_IT", locale1.toString());
      assertEquals("IT", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("ITA", locale1.getISO3Country());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, "", locale0);
      assertTrue(locale0.equals((Object)locale1));
      assertNotNull(beanPointer0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      HTMLScriptElementImpl hTMLScriptElementImpl0 = new HTMLScriptElementImpl(hTMLDocumentImpl0, "");
      assertNotNull(hTMLScriptElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLScriptElementImpl0, locale0, "");
      assertTrue(locale0.equals((Object)locale1));
      assertNotNull(dOMNodePointer0);
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      QName qName1 = dOMNodePointer0.getName();
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertNull(qName1.getPrefix());
      assertEquals("", qName1.getName());
      assertEquals("", qName1.toString());
      assertNotSame(locale0, locale1);
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      
      HTMLOptionElementImpl hTMLOptionElementImpl0 = new HTMLOptionElementImpl(hTMLDocumentImpl1, "<<unknown namespace>>");
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLOptionElementImpl0);
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      
      Object object0 = hTMLOptionElementImpl0.getUserData();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNull(object0);
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      
      int int0 = dOMNodePointer0.getLength();
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertEquals(1, int0);
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertNotSame(locale0, locale1);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLDocumentImpl1, locale0);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = dOMNodePointer1.getNamespaceURI("");
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNull(string0);
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertNotSame(locale0, locale1);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean2 = dOMNodePointer1.isLeaf();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(boolean2);
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertNotSame(locale0, locale1);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string1 = dOMNodePointer0.asPath();
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(string1);
      assertEquals("id('')", string1);
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertNotSame(locale0, locale1);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName2 = dOMNodePointer1.getName();
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(qName2);
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNull(qName2.getName());
      assertNull(qName2.getPrefix());
      assertNull(qName2.toString());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertNotSame(locale0, locale1);
      assertNotSame(qName2, qName0);
      assertNotSame(qName2, qName1);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName2);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(nodeNameTest0);
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNull(qName2.getName());
      assertNull(qName2.getPrefix());
      assertNull(qName2.toString());
      assertNull(nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.testNode((NodeTest) nodeNameTest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.NodeNameTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      
      Locale locale1 = (Locale)locale0.clone();
      assertTrue(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("it_IT", locale1.toString());
      assertEquals("IT", locale1.getCountry());
      assertEquals("it", locale1.getLanguage());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, "", locale0);
      assertTrue(locale0.equals((Object)locale1));
      assertNotNull(beanPointer0);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      HTMLScriptElementImpl hTMLScriptElementImpl0 = new HTMLScriptElementImpl(hTMLDocumentImpl0, "");
      assertNotNull(hTMLScriptElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(beanPointer0, hTMLScriptElementImpl0);
      assertTrue(locale0.equals((Object)locale1));
      assertNotNull(dOMNodePointer0);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) null);
      assertNotNull(list0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(list0.contains(locale0));
      
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list1);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertNotNull(list2);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertNotSame(list0, list2);
      assertNotSame(list0, list1);
      assertNotSame(list1, list2);
      assertNotSame(list1, list0);
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      assertFalse(list2.contains(locale0));
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Locale locale2 = variablePointer0.getLocale();
      assertNull(locale2);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean0 = dOMNodePointer0.isLeaf();
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(boolean0);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "");
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertTrue(dOMNodePointer1.isNode());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(hTMLScriptElementImpl0, (Locale) null, "http://www.w3.org/XML/1998/namespace");
      assertTrue(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer2);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(1, dOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName1 = dOMNodePointer1.getName();
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(qName1);
      assertNull(qName1.toString());
      assertNull(qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertTrue(dOMNodePointer1.isNode());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isCollection());
      assertNotSame(qName1, qName0);
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      
      HTMLOptionElementImpl hTMLOptionElementImpl0 = new HTMLOptionElementImpl(hTMLDocumentImpl1, ")Z<!}K <4f^yp[h^j");
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLOptionElementImpl0);
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      
      Object object0 = hTMLOptionElementImpl0.getUserData();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNull(object0);
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      
      DocumentFragmentImpl documentFragmentImpl0 = (DocumentFragmentImpl)hTMLDocumentImpl0.createDocumentFragment();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertNotNull(documentFragmentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      
      DOMNodePointer dOMNodePointer3 = new DOMNodePointer(documentFragmentImpl0, (Locale) null);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer3);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer3.isCollection());
      assertFalse(dOMNodePointer3.isContainer());
      assertTrue(dOMNodePointer3.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertFalse(dOMNodePointer3.isAttribute());
      assertTrue(dOMNodePointer3.isRoot());
      assertTrue(dOMNodePointer3.isNode());
      assertEquals(1, dOMNodePointer3.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      int int0 = dOMNodePointer3.getLength();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer3.equals((Object)dOMNodePointer1));
      assertEquals(1, int0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer3.isCollection());
      assertFalse(dOMNodePointer3.isContainer());
      assertTrue(dOMNodePointer3.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer3.getIndex());
      assertFalse(dOMNodePointer3.isAttribute());
      assertTrue(dOMNodePointer3.isRoot());
      assertTrue(dOMNodePointer3.isNode());
      assertEquals(1, dOMNodePointer3.getLength());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(dOMNodePointer3, dOMNodePointer2);
      assertNotSame(dOMNodePointer3, dOMNodePointer0);
      assertNotSame(dOMNodePointer3, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = dOMNodePointer0.getNamespaceURI(">:oFmU3n@/YnG`5J");
      assertFalse(qName0.equals((Object)qName1));
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNull(string0);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNotSame(qName0, qName1);
      assertNotSame(locale0, locale1);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer3);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean1 = dOMNodePointer0.isLeaf();
      assertFalse(qName0.equals((Object)qName1));
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer3));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNotSame(qName0, qName1);
      assertNotSame(locale0, locale1);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer3);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MutationEventImpl mutationEventImpl0 = new MutationEventImpl();
      assertNotNull(mutationEventImpl0);
      assertFalse(mutationEventImpl0.cancelable);
      assertTrue(mutationEventImpl0.bubbles);
      assertEquals((short)0, mutationEventImpl0.attrChange);
      assertEquals((short)0, mutationEventImpl0.eventPhase);
      assertFalse(mutationEventImpl0.initialized);
      assertFalse(mutationEventImpl0.stopPropagation);
      assertFalse(mutationEventImpl0.preventDefault);
      
      String string0 = mutationEventImpl0.getPrevValue();
      assertNull(string0);
      assertFalse(mutationEventImpl0.cancelable);
      assertTrue(mutationEventImpl0.bubbles);
      assertEquals((short)0, mutationEventImpl0.attrChange);
      assertEquals((short)0, mutationEventImpl0.eventPhase);
      assertFalse(mutationEventImpl0.initialized);
      assertFalse(mutationEventImpl0.stopPropagation);
      assertFalse(mutationEventImpl0.preventDefault);
      
      QName qName0 = new QName("A+Vw", "/processing-instruction('");
      assertNotNull(qName0);
      assertEquals("A+Vw:/processing-instruction('", qName0.toString());
      assertEquals("/processing-instruction('", qName0.getName());
      assertEquals("A+Vw", qName0.getPrefix());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      
      Locale locale1 = (Locale)locale0.clone();
      assertTrue(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale1.getCountry());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("it_IT", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("ITA", locale1.getISO3Country());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      Locale locale2 = Locale.forLanguageTag("/processing-instruction('");
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertEquals("", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.toString());
      assertEquals("", locale2.getLanguage());
      assertEquals("", locale2.getCountry());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, mutationEventImpl0, locale2);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(beanPointer0);
      assertEquals("A+Vw:/processing-instruction('", qName0.toString());
      assertEquals("/processing-instruction('", qName0.getName());
      assertEquals("A+Vw", qName0.getPrefix());
      assertEquals("", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.toString());
      assertEquals("", locale2.getLanguage());
      assertEquals("", locale2.getCountry());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertFalse(mutationEventImpl0.cancelable);
      assertTrue(mutationEventImpl0.bubbles);
      assertEquals((short)0, mutationEventImpl0.attrChange);
      assertEquals((short)0, mutationEventImpl0.eventPhase);
      assertFalse(mutationEventImpl0.initialized);
      assertFalse(mutationEventImpl0.stopPropagation);
      assertFalse(mutationEventImpl0.preventDefault);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      HTMLScriptElementImpl hTMLScriptElementImpl0 = new HTMLScriptElementImpl(hTMLDocumentImpl0, "f*b_mo]l:/g");
      assertNotNull(hTMLScriptElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, hTMLDocumentImpl0);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) null);
      assertNotNull(list0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(list0.contains(locale0));
      
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Factory could not create a child node for path: ");
      assertNotNull(nodeNameTest0);
      assertEquals("A+Vw:/processing-instruction('", qName0.toString());
      assertEquals("/processing-instruction('", qName0.getName());
      assertEquals("A+Vw", qName0.getPrefix());
      assertEquals("Factory could not create a child node for path: ", nodeNameTest0.getNamespaceURI());
      assertEquals("A+Vw:/processing-instruction('", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      boolean boolean0 = beanPointer0.testNode(nodeNameTest0);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertTrue(boolean0);
      assertEquals("A+Vw:/processing-instruction('", qName0.toString());
      assertEquals("/processing-instruction('", qName0.getName());
      assertEquals("A+Vw", qName0.getPrefix());
      assertEquals("", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.toString());
      assertEquals("", locale2.getLanguage());
      assertEquals("", locale2.getCountry());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertEquals("Factory could not create a child node for path: ", nodeNameTest0.getNamespaceURI());
      assertEquals("A+Vw:/processing-instruction('", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertFalse(mutationEventImpl0.cancelable);
      assertTrue(mutationEventImpl0.bubbles);
      assertEquals((short)0, mutationEventImpl0.attrChange);
      assertEquals((short)0, mutationEventImpl0.eventPhase);
      assertFalse(mutationEventImpl0.initialized);
      assertFalse(mutationEventImpl0.stopPropagation);
      assertFalse(mutationEventImpl0.preventDefault);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list0, locale_FilteringMode0);
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list0.equals((Object)list1));
      assertNotNull(list2);
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertNotSame(list0, list1);
      assertNotSame(list0, list2);
      assertFalse(list2.contains(locale0));
      assertFalse(list0.contains(locale0));
      
      List<Locale> list3 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list1);
      assertTrue(list3.equals((Object)list0));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list1));
      assertTrue(list0.equals((Object)list1));
      assertTrue(list0.equals((Object)list2));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list1.equals((Object)list2));
      assertNotNull(list3);
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotSame(list3, list1);
      assertNotSame(list3, list0);
      assertNotSame(list3, list2);
      assertNotSame(list0, list1);
      assertNotSame(list0, list3);
      assertNotSame(list0, list2);
      assertNotSame(list1, list3);
      assertNotSame(list1, list0);
      assertNotSame(list1, list2);
      assertFalse(list3.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      
      String string1 = locale0.getScript();
      assertFalse(locale0.equals((Object)locale2));
      assertTrue(locale0.equals((Object)locale1));
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      
      boolean boolean1 = dOMNodePointer0.isActual();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string2 = dOMNodePointer0.getDefaultNamespaceURI();
      assertNull(string2);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLTableCellElementImpl hTMLTableCellElementImpl0 = new HTMLTableCellElementImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
      assertNotNull(hTMLTableCellElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      boolean boolean2 = dOMNodePointer0.equals(hTMLTableCellElementImpl0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string3 = DOMNodePointer.getLocalName(hTMLTableCellElementImpl0);
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("//WWW.W3.ORG/2000/XMLNS/", string3);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      String string4 = (String)dOMNodePointer0.getValue();
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean3 = DOMNodePointer.testNode((Node) hTMLScriptElementImpl0, (NodeTest) nodeNameTest0);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      assertEquals("A+Vw:/processing-instruction('", qName0.toString());
      assertEquals("/processing-instruction('", qName0.getName());
      assertEquals("A+Vw", qName0.getPrefix());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("Factory could not create a child node for path: ", nodeNameTest0.getNamespaceURI());
      assertEquals("A+Vw:/processing-instruction('", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      HTMLDocumentImpl hTMLDocumentImpl1 = (HTMLDocumentImpl)dOMNodePointer0.getImmediateNode();
      assertNotNull(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      DocumentType documentType0 = hTMLDocumentImpl0.getDoctype();
      assertNull(documentType0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      CommentImpl commentImpl0 = new CommentImpl(hTMLDocumentImpl0, "");
      assertNotNull(commentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Locale locale1 = Locale.US;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_US", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("US", locale1.getCountry());
      assertEquals("USA", locale1.getISO3Country());
      assertNotSame(locale1, locale0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(commentImpl0, locale1, "http://www.w3.org/XML/1998/namespace");
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_US", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("US", locale1.getCountry());
      assertEquals("USA", locale1.getISO3Country());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      QName qName0 = dOMNodePointer0.getName();
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(qName0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLOptionElementImpl hTMLOptionElementImpl0 = new HTMLOptionElementImpl(hTMLDocumentImpl0, "-e>yK:{");
      assertNotNull(hTMLOptionElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      Object object0 = hTMLOptionElementImpl0.getUserData();
      assertNull(object0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      int int0 = dOMNodePointer0.getLength();
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertEquals(1, int0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = dOMNodePointer0.getNamespaceURI("marginwidth");
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNull(string0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean2 = dOMNodePointer0.isLeaf();
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string1 = dOMNodePointer0.asPath();
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(nodeNameTest0);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean3 = dOMNodePointer0.testNode((NodeTest) nodeNameTest0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(boolean3);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNotSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      String string0 = "&apos;";
      ElementImpl elementImpl0 = new ElementImpl(hTMLDocumentImpl0, "&apos;");
      assertNotNull(elementImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh_TW", locale1.toString());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(elementImpl0, locale1);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh_TW", locale1.toString());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      dOMNodePointer0.setAttribute(false);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh_TW", locale1.toString());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      EntityImpl entityImpl0 = new EntityImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      assertNotNull(entityImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.setValue(entityImpl0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // HIERARCHY_REQUEST_ERR: An attempt was made to insert a node where it is not permitted. 
         //
         verifyException("org.apache.xerces.dom.ParentNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      HTMLOptionElementImpl hTMLOptionElementImpl0 = new HTMLOptionElementImpl(hTMLDocumentImpl0, ")Z<!}K <4f^p[h^j");
      assertNotNull(hTMLOptionElementImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      HTMLOptionElementImpl hTMLOptionElementImpl1 = new HTMLOptionElementImpl(hTMLDocumentImpl0, ")Z<!}K <4f^p[h^j");
      assertFalse(hTMLOptionElementImpl1.equals((Object)hTMLOptionElementImpl0));
      assertNotNull(hTMLOptionElementImpl1);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      
      Node node0 = hTMLDocumentImpl1.adoptNode(hTMLOptionElementImpl1);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLOptionElementImpl1.equals((Object)hTMLOptionElementImpl0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(node0.equals((Object)hTMLOptionElementImpl0));
      assertNotNull(node0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertSame(hTMLOptionElementImpl1, node0);
      assertNotSame(hTMLOptionElementImpl1, hTMLOptionElementImpl0);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(node0, hTMLOptionElementImpl0);
      assertSame(node0, hTMLOptionElementImpl1);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(node0, locale0, "xmlns");
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLOptionElementImpl1.equals((Object)hTMLOptionElementImpl0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(node0.equals((Object)hTMLOptionElementImpl0));
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      QName qName0 = dOMNodePointer0.getName();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLOptionElementImpl1.equals((Object)hTMLOptionElementImpl0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(node0.equals((Object)hTMLOptionElementImpl0));
      assertNotNull(qName0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(")Z<!}K <4F^P[H^J", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(")Z<!}K <4F^P[H^J", qName0.toString());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertSame(hTMLOptionElementImpl1, node0);
      assertNotSame(hTMLOptionElementImpl1, hTMLOptionElementImpl0);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(node0, hTMLOptionElementImpl0);
      assertSame(node0, hTMLOptionElementImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Object object0 = hTMLOptionElementImpl1.getUserData();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLOptionElementImpl1.equals((Object)hTMLOptionElementImpl0));
      assertNull(object0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertSame(hTMLOptionElementImpl1, node0);
      assertNotSame(hTMLOptionElementImpl1, hTMLOptionElementImpl0);
      
      int int0 = dOMNodePointer0.getLength();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLOptionElementImpl1.equals((Object)hTMLOptionElementImpl0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(node0.equals((Object)hTMLOptionElementImpl0));
      assertEquals(1, int0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertSame(hTMLOptionElementImpl1, node0);
      assertNotSame(hTMLOptionElementImpl1, hTMLOptionElementImpl0);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(node0, hTMLOptionElementImpl0);
      assertSame(node0, hTMLOptionElementImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = dOMNodePointer0.getNamespaceURI("xmlns");
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLOptionElementImpl1.equals((Object)hTMLOptionElementImpl0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(node0.equals((Object)hTMLOptionElementImpl0));
      assertNotNull(string0);
      assertEquals("http://www.w3.org/2000/xmlns/", string0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertSame(hTMLOptionElementImpl1, node0);
      assertNotSame(hTMLOptionElementImpl1, hTMLOptionElementImpl0);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(node0, hTMLOptionElementImpl0);
      assertSame(node0, hTMLOptionElementImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean2 = dOMNodePointer0.isLeaf();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLOptionElementImpl1.equals((Object)hTMLOptionElementImpl0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(node0.equals((Object)hTMLOptionElementImpl0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertSame(hTMLOptionElementImpl1, node0);
      assertNotSame(hTMLOptionElementImpl1, hTMLOptionElementImpl0);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(node0, hTMLOptionElementImpl0);
      assertSame(node0, hTMLOptionElementImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string1 = dOMNodePointer0.asPath();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLOptionElementImpl1.equals((Object)hTMLOptionElementImpl0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(node0.equals((Object)hTMLOptionElementImpl0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("id('xmlns')", string1);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertSame(hTMLOptionElementImpl1, node0);
      assertNotSame(hTMLOptionElementImpl1, hTMLOptionElementImpl0);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(node0, hTMLOptionElementImpl0);
      assertSame(node0, hTMLOptionElementImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      boolean boolean0 = hTMLDocumentImpl0.isDefaultNamespace("Qd-/5zrP6Z'");
      assertFalse(boolean0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      Comment comment0 = hTMLDocumentImpl0.createComment("");
      assertNotNull(comment0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("Qd-/5zrP6Z'"));
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(comment0, locale0);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NamespaceResolver namespaceResolver0 = dOMNodePointer0.getNamespaceResolver();
      assertNotNull(namespaceResolver0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(namespaceResolver0.isSealed());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      boolean boolean1 = dOMNodePointer0.testNode((NodeTest) nodeNameTest0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLMenuElementImpl hTMLMenuElementImpl0 = new HTMLMenuElementImpl((HTMLDocumentImpl) null, "");
      assertNotNull(hTMLMenuElementImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) hTMLMenuElementImpl0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContext jXPathContext0 = jXPathContextReferenceImpl0.getParentContext();
      assertNull(jXPathContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "<<unknown namespace>>", "sip<T", "");
      assertNotNull(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNotNull(wMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      WMLNoopElementImpl wMLNoopElementImpl0 = new WMLNoopElementImpl(wMLDocumentImpl0, "");
      assertNotNull(wMLNoopElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) wMLNoopElementImpl0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = (JXPathContextReferenceImpl)jXPathContextReferenceImpl1.getRelativeContext(dOMNodePointer0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(jXPathContextReferenceImpl2);
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean2 = dOMNodePointer0.isCollection();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNamespaceIterator dOMNamespaceIterator0 = (DOMNamespaceIterator)dOMNodePointer0.namespaceIterator();
      assertNotNull(dOMNamespaceIterator0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals(0, dOMNamespaceIterator0.getPosition());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NamespaceResolver namespaceResolver1 = dOMNodePointer0.getNamespaceResolver();
      assertNotNull(namespaceResolver1);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertFalse(namespaceResolver1.isSealed());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertSame(namespaceResolver1, namespaceResolver0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl0, "6P:kThj&Aa&huNI5\"W");
      assertNotNull(hTMLTableElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      HTMLElement hTMLElement0 = hTMLTableElementImpl0.createCaption();
      assertNotNull(hTMLElement0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, hTMLElement0);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      dOMNodePointer0.remove();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      
      HTMLDocumentImpl hTMLDocumentImpl2 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl2);
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getURL());
      
      HTMLTableElementImpl hTMLTableElementImpl1 = new HTMLTableElementImpl(hTMLDocumentImpl2, "<<unknown namespace>>");
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLTableElementImpl1.equals((Object)hTMLTableElementImpl0));
      assertNotNull(hTMLTableElementImpl1);
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getURL());
      
      HTMLElement hTMLElement1 = hTMLTableElementImpl0.createTHead();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLTableElementImpl0.equals((Object)hTMLTableElementImpl1));
      assertNotNull(hTMLElement1);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(hTMLTableElementImpl0, hTMLTableElementImpl1);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer((NodePointer) null, hTMLDocumentImpl0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Locale locale0 = new Locale("83?}6`*A");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("83?}6`*a", locale0.toString());
      assertEquals("83?}6`*a", locale0.getLanguage());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("83?}6`*a", locale0.toString());
      assertEquals("83?}6`*a", locale0.getLanguage());
      assertEquals("83?}6`*a", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("83?}6`*a", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(hTMLElement1, locale1, "<<unknown namespace>>");
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLTableElementImpl0.equals((Object)hTMLTableElementImpl1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertNotNull(dOMNodePointer2);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("83?}6`*a", locale0.toString());
      assertEquals("83?}6`*a", locale0.getLanguage());
      assertEquals("83?}6`*a", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("83?}6`*a", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isAttribute());
      assertTrue(dOMNodePointer2.isRoot());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(1, dOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      dOMNodePointer2.setValue(hTMLDocumentImpl2);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLTableElementImpl0.equals((Object)hTMLTableElementImpl1));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getURL());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("83?}6`*a", locale0.toString());
      assertEquals("83?}6`*a", locale0.getLanguage());
      assertEquals("83?}6`*a", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("83?}6`*a", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isCollection());
      assertFalse(dOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertFalse(dOMNodePointer2.isAttribute());
      assertTrue(dOMNodePointer2.isRoot());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(1, dOMNodePointer2.getLength());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(hTMLTableElementImpl0, hTMLTableElementImpl1);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLTableColElementImpl hTMLTableColElementImpl0 = new HTMLTableColElementImpl(hTMLDocumentImpl1, "http://www.w3.org/2000/xmlns/");
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl2));
      assertNotNull(hTMLTableColElementImpl0);
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) hTMLTableColElementImpl0);
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl2));
      assertNotNull(jXPathContextReferenceImpl0);
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl2);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      HTMLDocumentImpl hTMLDocumentImpl3 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl2));
      assertNotNull(hTMLDocumentImpl3);
      assertNull(hTMLDocumentImpl3.getURL());
      assertNull(hTMLDocumentImpl3.getDomain());
      assertNull(hTMLDocumentImpl3.getReferrer());
      assertNull(hTMLDocumentImpl3.getCookie());
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace");
      assertNotNull(qName0);
      assertEquals("//www.w3.org/XML/1998/namespace", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertEquals("http", qName0.getPrefix());
      
      // Undeclared exception!
      try { 
        dOMNodePointer2.createAttribute(jXPathContextReferenceImpl0, qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown namespace prefix: http
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = (Locale)locale0.clone();
      assertTrue(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("IT", locale1.getCountry());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("it_IT", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, "", locale0);
      assertTrue(locale0.equals((Object)locale1));
      assertNotNull(beanPointer0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      HTMLScriptElementImpl hTMLScriptElementImpl0 = new HTMLScriptElementImpl(hTMLDocumentImpl0, "");
      assertNotNull(hTMLScriptElementImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(beanPointer0, hTMLScriptElementImpl0);
      assertTrue(locale0.equals((Object)locale1));
      assertNotNull(dOMNodePointer0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) null);
      assertNotNull(list0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(locale0));
      
      List<Locale> list1 = new LinkedList<Locale>();
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(list1.contains(locale0));
      
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list1);
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertNotNull(list2);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertNotSame(list2, list0);
      assertFalse(list1.contains(locale0));
      assertFalse(list2.contains(locale0));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertNotNull(nodeNameTest0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(":", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "");
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(nodeNameTest1);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals(":", nodeNameTest1.toString());
      assertEquals("", nodeNameTest1.getNamespaceURI());
      
      boolean boolean0 = beanPointer0.testNode(nodeNameTest1);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertTrue(boolean0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals(":", nodeNameTest1.toString());
      assertEquals("", nodeNameTest1.getNamespaceURI());
      assertNotSame(locale0, locale1);
      assertNotSame(nodeNameTest1, nodeNameTest0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      List<Locale> list3 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list2, locale_FilteringMode0);
      assertTrue(list1.equals((Object)list0));
      assertTrue(list1.equals((Object)list2));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list3.equals((Object)list0));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list1));
      assertNotNull(list3);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertNotSame(list2, list3);
      assertNotSame(list2, list0);
      assertNotSame(list3, list2);
      assertNotSame(list3, list0);
      assertFalse(list1.contains(locale0));
      assertFalse(list2.contains(locale0));
      assertFalse(list3.contains(locale0));
      
      List<Locale> list4 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list3);
      assertTrue(list4.equals((Object)list0));
      assertTrue(list4.equals((Object)list1));
      assertTrue(list4.equals((Object)list3));
      assertTrue(list4.equals((Object)list2));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list1.equals((Object)list2));
      assertTrue(list1.equals((Object)list3));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list3));
      assertTrue(list3.equals((Object)list0));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list1));
      assertNotNull(list4);
      assertEquals(0, list4.size());
      assertTrue(list4.isEmpty());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertNotSame(list4, list2);
      assertNotSame(list4, list3);
      assertNotSame(list4, list0);
      assertNotSame(list2, list3);
      assertNotSame(list2, list4);
      assertNotSame(list2, list0);
      assertNotSame(list3, list4);
      assertNotSame(list3, list2);
      assertNotSame(list3, list0);
      assertFalse(list4.contains(locale0));
      assertFalse(list1.contains(locale0));
      assertFalse(list2.contains(locale0));
      assertFalse(list3.contains(locale0));
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(")Z<!}K <4f^p[h^j");
      assertNotNull(processingInstructionTest0);
      assertEquals(")Z<!}K <4f^p[h^j", processingInstructionTest0.getTarget());
      
      boolean boolean1 = DOMNodePointer.testNode((Node) hTMLDocumentImpl0, (NodeTest) processingInstructionTest0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(")Z<!}K <4f^p[h^j", processingInstructionTest0.getTarget());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      String string0 = DOMNodePointer.getLocalName(hTMLScriptElementImpl0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      String string1 = dOMNodePointer0.getDefaultNamespaceURI();
      assertTrue(locale0.equals((Object)locale1));
      assertNull(string1);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DocumentFragmentImpl documentFragmentImpl0 = new DocumentFragmentImpl();
      assertNotNull(documentFragmentImpl0);
      
      String string2 = DOMNodePointer.getLocalName(hTMLDocumentImpl0);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("#document", string2);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      String string3 = (String)dOMNodePointer0.getValue();
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        DOMNodePointer.getNamespaceURI((Node) documentFragmentImpl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.xerces.dom.DocumentFragmentImpl cannot be cast to org.w3c.dom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl();
      assertNotNull(coreDocumentImpl0);
      
      CommentImpl commentImpl0 = new CommentImpl(coreDocumentImpl0, "");
      assertNotNull(commentImpl0);
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(commentImpl0, locale0);
      assertNotNull(dOMNodePointer0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(commentImpl0, locale0, "//WWW.W3.ORG/2000/XMLNS/");
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.html.dom.HTMLTitleElementImpl");
      assertFalse(boolean0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      Vector<Locale> vector0 = new Vector<Locale>(88);
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(88, vector0.capacity());
      assertFalse(vector0.contains(locale0));
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) vector0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(list0);
      assertEquals(0, linkedList1.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(88, vector0.capacity());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotSame(linkedList1, linkedList0);
      assertFalse(vector0.contains(locale0));
      assertFalse(list0.contains(locale0));
      
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(88, vector0.capacity());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertFalse(vector0.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      assertNotNull(linkedList2);
      assertEquals(0, linkedList2.size());
      assertFalse(linkedList2.contains(locale0));
      
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList2);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertNotNull(list2);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList2.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertFalse(linkedList2.contains(locale0));
      assertFalse(list2.contains(locale0));
      
      Locale locale1 = Locale.JAPANESE;
      assertNotNull(locale1);
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertSame(locale1, locale0);
      
      String string0 = locale0.getScript();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertSame(locale0, locale1);
      
      boolean boolean1 = dOMNodePointer1.isActual();
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertSame(locale0, locale1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string1 = dOMNodePointer0.getDefaultNamespaceURI();
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNull(string1);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DocumentFragmentImpl documentFragmentImpl0 = new DocumentFragmentImpl();
      assertNotNull(documentFragmentImpl0);
      
      String string2 = DOMNodePointer.getLocalName(commentImpl0);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("#comment", string2);
      
      Object object0 = dOMNodePointer0.getValue();
      assertTrue(object0.equals((Object)string0));
      assertFalse(object0.equals((Object)string2));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertNotNull(object0);
      assertEquals("", object0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertSame(locale0, locale1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        DOMNodePointer.getNamespaceURI((Node) documentFragmentImpl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.xerces.dom.DocumentFragmentImpl cannot be cast to org.w3c.dom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl0, "6P:kThj&Aa&huNI5\"W");
      assertNotNull(hTMLTableElementImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      HTMLElement hTMLElement0 = hTMLTableElementImpl0.createCaption();
      assertNotNull(hTMLElement0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, hTMLElement0);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      dOMNodePointer0.remove();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNotNull(hTMLDocumentImpl1);
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      
      HTMLDocumentImpl hTMLDocumentImpl2 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertNotNull(hTMLDocumentImpl2);
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getCookie());
      
      HTMLTableElementImpl hTMLTableElementImpl1 = new HTMLTableElementImpl(hTMLDocumentImpl2, "<<unknown namespace>>");
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLTableElementImpl1.equals((Object)hTMLTableElementImpl0));
      assertNotNull(hTMLTableElementImpl1);
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getCookie());
      
      HTMLElement hTMLElement1 = hTMLTableElementImpl0.createTHead();
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLTableElementImpl0.equals((Object)hTMLTableElementImpl1));
      assertNotNull(hTMLElement1);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(hTMLTableElementImpl0, hTMLTableElementImpl1);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer((NodePointer) null, hTMLDocumentImpl0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Locale locale0 = new Locale("83?}6`*A");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("83?}6`*a", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("83?}6`*a", locale0.getLanguage());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertEquals("", locale0.getVariant());
      assertEquals("83?}6`*a", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("83?}6`*a", locale0.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("83?}6`*a", locale1.toString());
      assertEquals("83?}6`*a", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(hTMLElement1, locale1, "<<unknown namespace>>");
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLTableElementImpl0.equals((Object)hTMLTableElementImpl1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer2);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getVariant());
      assertEquals("83?}6`*a", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("83?}6`*a", locale0.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("83?}6`*a", locale1.toString());
      assertEquals("83?}6`*a", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isContainer());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      dOMNodePointer2.setValue(hTMLDocumentImpl2);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl2));
      assertFalse(hTMLTableElementImpl0.equals((Object)hTMLTableElementImpl1));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl2.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl2.getReferrer());
      assertNull(hTMLDocumentImpl2.getDomain());
      assertNull(hTMLDocumentImpl2.getURL());
      assertNull(hTMLDocumentImpl2.getCookie());
      assertEquals("", locale0.getVariant());
      assertEquals("83?}6`*a", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("83?}6`*a", locale0.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("83?}6`*a", locale1.toString());
      assertEquals("83?}6`*a", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertTrue(dOMNodePointer2.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isContainer());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isAttribute());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl2);
      assertNotSame(hTMLTableElementImpl0, hTMLTableElementImpl1);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl2, hTMLDocumentImpl1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLTableColElementImpl hTMLTableColElementImpl0 = new HTMLTableColElementImpl(hTMLDocumentImpl1, "http://www.w3.org/2000/xmlns/");
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl2));
      assertNotNull(hTMLTableColElementImpl0);
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) hTMLTableColElementImpl0);
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl2));
      assertNotNull(jXPathContextReferenceImpl0);
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl2);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      HTMLDocumentImpl hTMLDocumentImpl3 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl2));
      assertNotNull(hTMLDocumentImpl3);
      assertNull(hTMLDocumentImpl3.getDomain());
      assertNull(hTMLDocumentImpl3.getCookie());
      assertNull(hTMLDocumentImpl3.getReferrer());
      assertNull(hTMLDocumentImpl3.getURL());
      
      HTMLParamElementImpl hTMLParamElementImpl0 = new HTMLParamElementImpl(hTMLDocumentImpl3, "Cannot add a second doctype, only one is allowed");
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl0));
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl1));
      assertFalse(hTMLDocumentImpl3.equals((Object)hTMLDocumentImpl2));
      assertNotNull(hTMLParamElementImpl0);
      assertNull(hTMLDocumentImpl3.getDomain());
      assertNull(hTMLDocumentImpl3.getCookie());
      assertNull(hTMLDocumentImpl3.getReferrer());
      assertNull(hTMLDocumentImpl3.getURL());
      
      QName qName0 = new QName("]oK]i");
      assertNotNull(qName0);
      assertEquals("]oK]i", qName0.toString());
      assertEquals("]oK]i", qName0.getName());
      assertNull(qName0.getPrefix());
      
      // Undeclared exception!
      try { 
        dOMNodePointer2.createAttribute(jXPathContextReferenceImpl0, qName0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // DOM002 Illegal character
         //
         verifyException("org.apache.xerces.dom.CoreDocumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      
      Locale locale1 = (Locale)locale0.clone();
      assertTrue(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale1.toString());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("IT", locale1.getCountry());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, "", locale0);
      assertTrue(locale0.equals((Object)locale1));
      assertNotNull(beanPointer0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      HTMLScriptElementImpl hTMLScriptElementImpl0 = new HTMLScriptElementImpl(hTMLDocumentImpl0, "");
      assertNotNull(hTMLScriptElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(beanPointer0, hTMLScriptElementImpl0);
      assertTrue(locale0.equals((Object)locale1));
      assertNotNull(dOMNodePointer0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) null);
      assertNotNull(list0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(list0.contains(locale0));
      
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list1);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertNotNull(list2);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotSame(list0, list1);
      assertNotSame(list0, list2);
      assertNotSame(list1, list2);
      assertNotSame(list1, list0);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      assertFalse(list2.contains(locale0));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertNotNull(nodeNameTest0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      
      boolean boolean0 = beanPointer0.testNode(nodeNameTest0);
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(boolean0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(":", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      List<Locale> list3 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list2, locale_FilteringMode0);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list0.equals((Object)list2));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list1.equals((Object)list2));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list3.equals((Object)list0));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list1));
      assertNotNull(list3);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertNotSame(list0, list2);
      assertNotSame(list0, list1);
      assertNotSame(list0, list3);
      assertNotSame(list1, list2);
      assertNotSame(list1, list3);
      assertNotSame(list1, list0);
      assertNotSame(list2, list3);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertNotSame(list3, list0);
      assertNotSame(list3, list2);
      assertNotSame(list3, list1);
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      assertFalse(list2.contains(locale0));
      assertFalse(list3.contains(locale0));
      
      List<Locale> list4 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list3);
      assertTrue(list0.equals((Object)list3));
      assertTrue(list0.equals((Object)list2));
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list1.equals((Object)list2));
      assertTrue(list1.equals((Object)list3));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list3));
      assertTrue(list3.equals((Object)list0));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list1));
      assertTrue(list4.equals((Object)list0));
      assertTrue(list4.equals((Object)list2));
      assertTrue(list4.equals((Object)list1));
      assertTrue(list4.equals((Object)list3));
      assertNotNull(list4);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertEquals(0, list4.size());
      assertTrue(list4.isEmpty());
      assertNotSame(list0, list2);
      assertNotSame(list0, list1);
      assertNotSame(list0, list4);
      assertNotSame(list0, list3);
      assertNotSame(list1, list2);
      assertNotSame(list1, list4);
      assertNotSame(list1, list3);
      assertNotSame(list1, list0);
      assertNotSame(list2, list3);
      assertNotSame(list2, list1);
      assertNotSame(list2, list4);
      assertNotSame(list2, list0);
      assertNotSame(list3, list0);
      assertNotSame(list3, list2);
      assertNotSame(list3, list1);
      assertNotSame(list3, list4);
      assertNotSame(list4, list2);
      assertNotSame(list4, list1);
      assertNotSame(list4, list3);
      assertNotSame(list4, list0);
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      assertFalse(list2.contains(locale0));
      assertFalse(list3.contains(locale0));
      assertFalse(list4.contains(locale0));
      
      String string0 = locale0.getScript();
      assertTrue(locale0.equals((Object)locale1));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertNotSame(locale0, locale1);
      
      HTMLScriptElementImpl hTMLScriptElementImpl1 = (HTMLScriptElementImpl)dOMNodePointer0.getBaseValue();
      assertTrue(locale0.equals((Object)locale1));
      assertNotNull(hTMLScriptElementImpl1);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertSame(hTMLScriptElementImpl1, hTMLScriptElementImpl0);
      assertNotSame(locale0, locale1);
      assertSame(hTMLScriptElementImpl0, hTMLScriptElementImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      int int0 = dOMNodePointer0.getLength();
      assertTrue(locale0.equals((Object)locale1));
      assertEquals(1, int0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertNotSame(locale0, locale1);
      assertSame(hTMLScriptElementImpl0, hTMLScriptElementImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean1 = dOMNodePointer0.isActual();
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertNotSame(locale0, locale1);
      assertSame(hTMLScriptElementImpl0, hTMLScriptElementImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Locale locale2 = Locale.GERMAN;
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      assertEquals("", locale2.getCountry());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("de", locale2.getLanguage());
      assertEquals("de", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      
      Locale locale3 = locale1.stripExtensions();
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale2));
      assertTrue(locale1.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale2));
      assertTrue(locale3.equals((Object)locale0));
      assertNotNull(locale3);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale1.toString());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("IT", locale1.getCountry());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it_IT", locale3.toString());
      assertEquals("ITA", locale3.getISO3Country());
      assertEquals("ita", locale3.getISO3Language());
      assertEquals("it", locale3.getLanguage());
      assertEquals("", locale3.getVariant());
      assertEquals("IT", locale3.getCountry());
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale3);
      assertNotSame(locale0, locale2);
      assertNotSame(locale1, locale2);
      assertSame(locale1, locale3);
      assertNotSame(locale1, locale0);
      assertSame(locale3, locale1);
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale2);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLDocumentImpl0, locale3, "");
      assertTrue(locale0.equals((Object)locale3));
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale2));
      assertTrue(locale1.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale2));
      assertTrue(locale3.equals((Object)locale0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale1.toString());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("IT", locale1.getCountry());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("it_IT", locale3.toString());
      assertEquals("ITA", locale3.getISO3Country());
      assertEquals("ita", locale3.getISO3Language());
      assertEquals("it", locale3.getLanguage());
      assertEquals("", locale3.getVariant());
      assertEquals("IT", locale3.getCountry());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean2 = dOMNodePointer0.isActual();
      assertTrue(locale0.equals((Object)locale3));
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale3);
      assertNotSame(locale0, locale2);
      assertSame(hTMLScriptElementImpl0, hTMLScriptElementImpl1);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer1.childIterator(nodeNameTest0, false, beanPointer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.w3c.dom.Node
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      
      Locale locale1 = (Locale)locale0.clone();
      assertTrue(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale1.getCountry());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("it_IT", locale1.toString());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, "", locale0);
      assertTrue(locale0.equals((Object)locale1));
      assertNotNull(beanPointer0);
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      HTMLScriptElementImpl hTMLScriptElementImpl0 = new HTMLScriptElementImpl(hTMLDocumentImpl0, "");
      assertNotNull(hTMLScriptElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(beanPointer0, hTMLScriptElementImpl0);
      assertTrue(locale0.equals((Object)locale1));
      assertNotNull(dOMNodePointer0);
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) null);
      assertNotNull(list0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(locale0));
      
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list1);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertNotNull(list2);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertNotSame(list0, list1);
      assertNotSame(list0, list2);
      assertNotSame(list1, list2);
      assertNotSame(list1, list0);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      assertFalse(list2.contains(locale0));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      
      boolean boolean0 = beanPointer0.testNode(nodeNameTest0);
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(boolean0);
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      List<Locale> list3 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list2, locale_FilteringMode0);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list0.equals((Object)list2));
      assertTrue(list1.equals((Object)list2));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list3.equals((Object)list0));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list1));
      assertNotNull(list3);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertNotSame(list0, list1);
      assertNotSame(list0, list2);
      assertNotSame(list0, list3);
      assertNotSame(list1, list3);
      assertNotSame(list1, list2);
      assertNotSame(list1, list0);
      assertNotSame(list2, list3);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertNotSame(list3, list2);
      assertNotSame(list3, list1);
      assertNotSame(list3, list0);
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      assertFalse(list2.contains(locale0));
      assertFalse(list3.contains(locale0));
      
      List<Locale> list4 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list3);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list0.equals((Object)list3));
      assertTrue(list0.equals((Object)list2));
      assertTrue(list1.equals((Object)list2));
      assertTrue(list1.equals((Object)list3));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list3));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list3.equals((Object)list0));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list1));
      assertTrue(list4.equals((Object)list2));
      assertTrue(list4.equals((Object)list1));
      assertTrue(list4.equals((Object)list0));
      assertTrue(list4.equals((Object)list3));
      assertNotNull(list4);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertEquals(0, list4.size());
      assertTrue(list4.isEmpty());
      assertNotSame(list0, list1);
      assertNotSame(list0, list2);
      assertNotSame(list0, list4);
      assertNotSame(list0, list3);
      assertNotSame(list1, list3);
      assertNotSame(list1, list4);
      assertNotSame(list1, list2);
      assertNotSame(list1, list0);
      assertNotSame(list2, list3);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertNotSame(list2, list4);
      assertNotSame(list3, list4);
      assertNotSame(list3, list2);
      assertNotSame(list3, list1);
      assertNotSame(list3, list0);
      assertNotSame(list4, list3);
      assertNotSame(list4, list0);
      assertNotSame(list4, list1);
      assertNotSame(list4, list2);
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      assertFalse(list2.contains(locale0));
      assertFalse(list3.contains(locale0));
      assertFalse(list4.contains(locale0));
      
      String string0 = locale0.getScript();
      assertTrue(locale0.equals((Object)locale1));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertNotSame(locale0, locale1);
      
      boolean boolean1 = dOMNodePointer0.isActual();
      assertTrue(boolean1 == boolean0);
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(boolean1);
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string1 = NodePointer.UNKNOWN_NAMESPACE;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<<unknown namespace>>", string1);
      
      boolean boolean2 = dOMNodePointer0.equals(list4);
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(list0.equals((Object)list1));
      assertTrue(list0.equals((Object)list3));
      assertTrue(list0.equals((Object)list4));
      assertTrue(list0.equals((Object)list2));
      assertTrue(list1.equals((Object)list2));
      assertTrue(list1.equals((Object)list3));
      assertTrue(list1.equals((Object)list4));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list4));
      assertTrue(list2.equals((Object)list3));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list3.equals((Object)list0));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list1));
      assertTrue(list3.equals((Object)list4));
      assertTrue(list4.equals((Object)list2));
      assertTrue(list4.equals((Object)list1));
      assertTrue(list4.equals((Object)list0));
      assertTrue(list4.equals((Object)list3));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertEquals(0, list4.size());
      assertTrue(list4.isEmpty());
      assertNotSame(locale0, locale1);
      assertNotSame(list0, list1);
      assertNotSame(list0, list2);
      assertNotSame(list0, list4);
      assertNotSame(list0, list3);
      assertNotSame(list1, list3);
      assertNotSame(list1, list4);
      assertNotSame(list1, list2);
      assertNotSame(list1, list0);
      assertNotSame(list2, list3);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertNotSame(list2, list4);
      assertNotSame(list3, list4);
      assertNotSame(list3, list2);
      assertNotSame(list3, list1);
      assertNotSame(list3, list0);
      assertNotSame(list4, list3);
      assertNotSame(list4, list0);
      assertNotSame(list4, list1);
      assertNotSame(list4, list2);
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      assertFalse(list2.contains(locale0));
      assertFalse(list3.contains(locale0));
      assertFalse(list4.contains(locale0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string2 = DOMNodePointer.getLocalName(hTMLDocumentImpl0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("#document", string2);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      String string3 = DOMNodePointer.getPrefix(hTMLDocumentImpl0);
      assertNull(string3);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      NamespacePointer namespacePointer0 = (NamespacePointer)dOMNodePointer0.namespacePointer("");
      assertTrue(locale0.equals((Object)locale1));
      assertNotNull(namespacePointer0);
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(namespacePointer0.isContainer());
      assertTrue(namespacePointer0.isNode());
      assertEquals(1, namespacePointer0.getLength());
      assertFalse(namespacePointer0.isRoot());
      assertFalse(namespacePointer0.isAttribute());
      assertTrue(namespacePointer0.isLeaf());
      assertFalse(namespacePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, namespacePointer0.getIndex());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNotSame(locale0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MutationEventImpl mutationEventImpl0 = new MutationEventImpl();
      assertNotNull(mutationEventImpl0);
      assertFalse(mutationEventImpl0.initialized);
      assertFalse(mutationEventImpl0.stopPropagation);
      assertFalse(mutationEventImpl0.preventDefault);
      assertFalse(mutationEventImpl0.cancelable);
      assertTrue(mutationEventImpl0.bubbles);
      assertEquals((short)0, mutationEventImpl0.eventPhase);
      assertEquals((short)0, mutationEventImpl0.attrChange);
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      QName qName0 = new QName("b");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("b", qName0.getName());
      assertEquals("b", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("b", qName0.getName());
      assertEquals("b", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("b", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean0 = dOMNodePointer0.testNode((NodeTest) nodeNameTest0);
      assertFalse(boolean0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(qName0.getPrefix());
      assertEquals("b", qName0.getName());
      assertEquals("b", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("b", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = dOMNodePointer0.getNamespaceURI();
      assertNull(string0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string1 = dOMNodePointer0.getDefaultNamespaceURI();
      assertNull(string1);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContext jXPathContext0 = null;
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "./13UzKK>#<", "Cannot modify DOM trees", "b");
      assertNotNull(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNotNull(wMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      WMLDocumentImpl wMLDocumentImpl1 = new WMLDocumentImpl(documentTypeImpl0);
      assertFalse(wMLDocumentImpl1.equals((Object)wMLDocumentImpl0));
      assertNotNull(wMLDocumentImpl1);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      WMLMetaElementImpl wMLMetaElementImpl0 = new WMLMetaElementImpl(wMLDocumentImpl1, "org.apache.commons.jxpath.ri.model.VariablePointer$1");
      assertFalse(wMLDocumentImpl1.equals((Object)wMLDocumentImpl0));
      assertNotNull(wMLMetaElementImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      EntityReferenceImpl entityReferenceImpl0 = new EntityReferenceImpl(wMLDocumentImpl0, "./13UzKK>#<");
      assertFalse(wMLDocumentImpl0.equals((Object)wMLDocumentImpl1));
      assertNotNull(entityReferenceImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.createChild((JXPathContext) null, qName0, (int) (short)0, (Object) entityReferenceImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MutationEventImpl mutationEventImpl0 = new MutationEventImpl();
      assertNotNull(mutationEventImpl0);
      assertFalse(mutationEventImpl0.preventDefault);
      assertFalse(mutationEventImpl0.initialized);
      assertEquals((short)0, mutationEventImpl0.attrChange);
      assertEquals((short)0, mutationEventImpl0.eventPhase);
      assertFalse(mutationEventImpl0.stopPropagation);
      assertFalse(mutationEventImpl0.cancelable);
      assertTrue(mutationEventImpl0.bubbles);
      
      QName qName0 = new QName("A+Vw", "/processing-instruction('");
      assertNotNull(qName0);
      assertEquals("A+Vw", qName0.getPrefix());
      assertEquals("/processing-instruction('", qName0.getName());
      assertEquals("A+Vw:/processing-instruction('", qName0.toString());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      
      Locale locale1 = (Locale)locale0.clone();
      assertTrue(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it", locale1.getLanguage());
      assertEquals("IT", locale1.getCountry());
      assertEquals("it_IT", locale1.toString());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      Locale locale2 = Locale.forLanguageTag("/processing-instruction('");
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getLanguage());
      assertEquals("", locale2.getISO3Language());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, mutationEventImpl0, locale2);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(beanPointer0);
      assertEquals("A+Vw", qName0.getPrefix());
      assertEquals("/processing-instruction('", qName0.getName());
      assertEquals("A+Vw:/processing-instruction('", qName0.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getLanguage());
      assertEquals("", locale2.getISO3Language());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertFalse(mutationEventImpl0.preventDefault);
      assertFalse(mutationEventImpl0.initialized);
      assertEquals((short)0, mutationEventImpl0.attrChange);
      assertEquals((short)0, mutationEventImpl0.eventPhase);
      assertFalse(mutationEventImpl0.stopPropagation);
      assertFalse(mutationEventImpl0.cancelable);
      assertTrue(mutationEventImpl0.bubbles);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      HTMLScriptElementImpl hTMLScriptElementImpl0 = new HTMLScriptElementImpl(hTMLDocumentImpl0, "f*b_mo]l:/g");
      assertNotNull(hTMLScriptElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, hTMLDocumentImpl0);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) null);
      assertNotNull(list0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(locale1));
      
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) null);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotSame(list1, list0);
      assertFalse(list1.contains(locale1));
      
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list1);
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertNotNull(list2);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertNotSame(list1, list2);
      assertNotSame(list1, list0);
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertFalse(list1.contains(locale1));
      assertFalse(list2.contains(locale1));
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Factory could not create a child node for path: ");
      assertNotNull(nodeNameTest0);
      assertEquals("A+Vw", qName0.getPrefix());
      assertEquals("/processing-instruction('", qName0.getName());
      assertEquals("A+Vw:/processing-instruction('", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Factory could not create a child node for path: ", nodeNameTest0.getNamespaceURI());
      assertEquals("A+Vw:/processing-instruction('", nodeNameTest0.toString());
      
      boolean boolean0 = beanPointer0.testNode(nodeNameTest0);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertTrue(boolean0);
      assertEquals("A+Vw", qName0.getPrefix());
      assertEquals("/processing-instruction('", qName0.getName());
      assertEquals("A+Vw:/processing-instruction('", qName0.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getLanguage());
      assertEquals("", locale2.getISO3Language());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Factory could not create a child node for path: ", nodeNameTest0.getNamespaceURI());
      assertEquals("A+Vw:/processing-instruction('", nodeNameTest0.toString());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertFalse(mutationEventImpl0.preventDefault);
      assertFalse(mutationEventImpl0.initialized);
      assertEquals((short)0, mutationEventImpl0.attrChange);
      assertEquals((short)0, mutationEventImpl0.eventPhase);
      assertFalse(mutationEventImpl0.stopPropagation);
      assertFalse(mutationEventImpl0.cancelable);
      assertTrue(mutationEventImpl0.bubbles);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list3 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list1, locale_FilteringMode0);
      assertTrue(list3.equals((Object)list1));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list0));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list1.equals((Object)list2));
      assertNotNull(list3);
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotSame(list3, list2);
      assertNotSame(list3, list1);
      assertNotSame(list3, list0);
      assertNotSame(list1, list2);
      assertNotSame(list1, list3);
      assertNotSame(list1, list0);
      assertFalse(list3.contains(locale1));
      assertFalse(list1.contains(locale1));
      
      List<Locale> list4 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list2);
      assertTrue(list4.equals((Object)list1));
      assertTrue(list4.equals((Object)list3));
      assertTrue(list4.equals((Object)list0));
      assertTrue(list4.equals((Object)list2));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list1.equals((Object)list2));
      assertTrue(list1.equals((Object)list3));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list3));
      assertNotNull(list4);
      assertEquals(0, list4.size());
      assertTrue(list4.isEmpty());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertNotSame(list4, list3);
      assertNotSame(list4, list0);
      assertNotSame(list4, list2);
      assertNotSame(list4, list1);
      assertNotSame(list1, list2);
      assertNotSame(list1, list4);
      assertNotSame(list1, list3);
      assertNotSame(list1, list0);
      assertNotSame(list2, list0);
      assertNotSame(list2, list3);
      assertNotSame(list2, list4);
      assertNotSame(list2, list1);
      assertFalse(list4.contains(locale1));
      assertFalse(list1.contains(locale1));
      assertFalse(list2.contains(locale1));
      
      String string0 = locale0.getScript();
      assertFalse(locale0.equals((Object)locale2));
      assertTrue(locale0.equals((Object)locale1));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      
      boolean boolean1 = dOMNodePointer0.isActual();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string1 = dOMNodePointer0.getDefaultNamespaceURI();
      assertNull(string1);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLTableCellElementImpl hTMLTableCellElementImpl0 = new HTMLTableCellElementImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
      assertNotNull(hTMLTableCellElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      boolean boolean2 = dOMNodePointer0.equals(hTMLTableCellElementImpl0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string2 = DOMNodePointer.getLocalName(hTMLTableCellElementImpl0);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("//WWW.W3.ORG/2000/XMLNS/", string2);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      String string3 = (String)dOMNodePointer0.getValue();
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string4 = DOMNodePointer.getNamespaceURI((Node) hTMLDocumentImpl0);
      assertNull(string4);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      boolean boolean3 = dOMNodePointer0.isCollection();
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      QName qName0 = new QName("", "");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(variablePointer0, qName0, "");
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl0, "");
      HTMLElement hTMLElement0 = hTMLTableElementImpl0.createTHead();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(nodePointer0, hTMLElement0);
      dOMNodePointer0.setValue(nodePointer0);
      JXPathContext.newContext((Object) "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLTableElementImpl0, (NodeTest) nodeNameTest0);
      DOMNodePointer.getLocalName(hTMLElement0);
      dOMNodePointer0.isLeaf();
      Locale locale0 = Locale.GERMANY;
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "<<unknown namespace>>");
      dOMNodePointer1.getBaseValue();
      int int0 = dOMNodePointer1.getLength();
      assertEquals(1, int0);
      
      dOMNodePointer1.isActual();
      Locale locale1 = Locale.GERMAN;
      locale0.stripExtensions();
      XMLErrorReporter xMLErrorReporter0 = new XMLErrorReporter();
      xMLErrorReporter0.getLocale();
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(hTMLElement0, (Locale) null, "<<unknown namespace>>");
      boolean boolean1 = dOMNodePointer0.isActual();
      assertTrue(boolean1);
      
      dOMNodePointer0.getDefaultNamespaceURI();
      boolean boolean2 = dOMNodePointer0.equals((Object) null);
      assertFalse(boolean2 == boolean0);
      
      DOMNodePointer.getLocalName(hTMLElement0);
      dOMNodePointer0.getValue();
      DOMNodePointer.getNamespaceURI((Node) hTMLElement0);
      boolean boolean3 = dOMNodePointer0.isCollection();
      assertFalse(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(true);
      String string0 = "";
      PSVIAttrNSImpl pSVIAttrNSImpl0 = new PSVIAttrNSImpl(deferredDocumentImpl0, (String) null, (String) null, "");
      Locale locale0 = Locale.CANADA_FRENCH;
      String string1 = "MbGkJE}{A)#q_f<kL";
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(pSVIAttrNSImpl0, locale0, "MbGkJE}{A)#q_f<kL");
      // Undeclared exception!
      try { 
        dOMNodePointer0.getValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      AttrNSImpl attrNSImpl0 = new AttrNSImpl();
      attrNSImpl0.item((-1720613767));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)111;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Locale locale0 = Locale.US;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, "&apos;");
      QName qName0 = new QName("http://www.w3.org/2000/xmlns/");
      // Undeclared exception!
      try { 
        dOMNodePointer0.attributeIterator(qName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "b|", "b|", "m\\X");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      Locale locale0 = Locale.KOREAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(wMLDocumentImpl0, locale0);
      HTMLMapElementImpl hTMLMapElementImpl0 = new HTMLMapElementImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) locale0);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) wMLDocumentImpl0);
      jXPathContext0.getRelativeContext(dOMNodePointer0);
      JXPathContext jXPathContext2 = jXPathContext1.getParentContext();
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(documentTypeImpl0, locale0, "http://www.w3.org/2000/xmlns/");
      NullPointer nullPointer0 = (NullPointer)dOMNodePointer1.getPointerByID(jXPathContext2, "b|");
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("Q(jP5St^Y+BA,");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "Q(jP5St^Y+BA,");
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLFormElementImpl hTMLFormElementImpl0 = new HTMLFormElementImpl(hTMLDocumentImpl0, "<<unknown namespace>>");
      NodePointer nodePointer0 = variablePointer0.createPath(jXPathContext0, (Object) hTMLFormElementImpl0);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(nodePointer0, hTMLDocumentImpl0);
      variablePointer0.getLocale();
      dOMNodePointer0.isLeaf();
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLDocumentImpl0, (Locale) null, "");
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(hTMLFormElementImpl0, (Locale) null, "\"");
      QName qName1 = dOMNodePointer2.getName();
      assertEquals("<<UNKNOWN NAMESPACE>>", qName1.toString());
      
      HTMLOptionElementImpl hTMLOptionElementImpl0 = new HTMLOptionElementImpl(hTMLDocumentImpl0, "<<unknown namespace>>");
      hTMLOptionElementImpl0.getUserData();
      int int0 = dOMNodePointer2.getLength();
      assertEquals(1, int0);
      
      String string0 = dOMNodePointer0.getNamespaceURI("<<unknown namespace>>");
      assertNull(string0);
      
      boolean boolean0 = dOMNodePointer2.isLeaf();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      String string0 = ")Z<!}K <4f\\^yp[h^j";
      HTMLOptionElementImpl hTMLOptionElementImpl0 = new HTMLOptionElementImpl(hTMLDocumentImpl0, ")Z<!}K <4f^yp[h^j");
      Node node0 = hTMLDocumentImpl0.adoptNode(hTMLOptionElementImpl0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      String string1 = "id('";
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "id('");
      NodePointer nodePointer0 = dOMNodePointer0.namespacePointer(")Z<!}K <4f^yp[h^j");
      node0.getAttributes();
      dOMNodePointer0.getName();
      dOMNodePointer0.getLength();
      String string2 = "";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("OV7_d.;YDeSIER =");
      FileSystemHandling.shouldAllThrowIOExceptions();
      processingInstructionTest0.toString();
      NodeIterator nodeIterator0 = dOMNodePointer0.childIterator(processingInstructionTest0, false, nodePointer0);
      dOMNodePointer0.isCollection();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) nodeIterator0);
      // Undeclared exception!
      try { 
        jXPathContext0.getRelativeContext(nodePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot create a relative context for a non-existent node: id('id(&apos;')/namespace::)Z<!}K <4f^yp[h^j
         //
         verifyException("org.apache.commons.jxpath.ri.JXPathContextReferenceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(false);
      CommentImpl commentImpl0 = new CommentImpl(deferredDocumentImpl0, "");
      Locale locale0 = Locale.JAPANESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(commentImpl0, locale0);
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(deferredDocumentImpl0, locale0, "http://www.w3.org/2000/xmlns/");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "");
      JXPathContext.newContext(jXPathContext0, (Object) locale0);
      JXPathContext jXPathContext1 = jXPathContext0.getRelativeContext(dOMNodePointer0);
      jXPathContext1.getParentContext();
      dOMNodePointer1.getPointerByID(jXPathContext1, "http://www.w3.org/XML/1998/namespace");
      // Undeclared exception!
      try { 
        dOMNodePointer1.getNamespaceURI();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.dom.DeferredDocumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      hTMLDocumentImpl0.getDoctype();
      CommentImpl commentImpl0 = new CommentImpl(hTMLDocumentImpl0, "");
      Locale locale0 = Locale.JAPANESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      Locale locale1 = Locale.US;
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(commentImpl0, locale1, "R\u0003G;+krS.`");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Vector<Locale> vector0 = new Vector<Locale>(88);
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) vector0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) list0);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1);
      Locale locale2 = Locale.JAPANESE;
      locale2.getScript();
      dOMNodePointer0.isActual();
      dOMNodePointer1.getDefaultNamespaceURI();
      DocumentFragmentImpl documentFragmentImpl0 = new DocumentFragmentImpl();
      DOMNodePointer.getLocalName(hTMLDocumentImpl0);
      dOMNodePointer1.getValue();
      // Undeclared exception!
      try { 
        DOMNodePointer.getNamespaceURI((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      QName qName0 = new QName("", "");
      Locale locale0 = Locale.ITALY;
      Locale locale1 = (Locale)locale0.clone();
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, "", locale0);
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLScriptElementImpl hTMLScriptElementImpl0 = new HTMLScriptElementImpl(hTMLDocumentImpl0, "");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(beanPointer0, hTMLScriptElementImpl0);
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) null);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list0);
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      beanPointer0.testNode(nodeNameTest0);
      Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list2, locale_FilteringMode0);
      QName qName1 = new QName("<<unknown namespace>>", "4w$)jhL&b,t0NkZW");
      HTMLButtonElementImpl hTMLButtonElementImpl0 = new HTMLButtonElementImpl(hTMLDocumentImpl0, "");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLButtonElementImpl0, locale1);
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "}{U(c;oV!CybDR");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      WMLBigElementImpl wMLBigElementImpl0 = new WMLBigElementImpl(wMLDocumentImpl0, "<<unknown namespace>>");
      DOMNodePointer dOMNodePointer2 = (DOMNodePointer)NodePointer.newChildNodePointer(dOMNodePointer1, qName1, wMLBigElementImpl0);
      HTMLQuoteElementImpl hTMLQuoteElementImpl0 = new HTMLQuoteElementImpl(hTMLDocumentImpl0, "xml:lang");
      DOMNodePointer dOMNodePointer3 = (DOMNodePointer)NodePointer.newNodePointer(qName1, hTMLQuoteElementImpl0, locale1);
      dOMNodePointer0.compareChildNodePointers(dOMNodePointer3, dOMNodePointer2);
      dOMNodePointer0.getNamespaceURI();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) list1);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) qName1);
      // Undeclared exception!
      try { 
        dOMNodePointer0.createChild((JXPathContext) jXPathContextReferenceImpl1, qName1, 7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: ''
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl0, "6P:kThj&Aa&huNI5\"W");
      HTMLElement hTMLElement0 = hTMLTableElementImpl0.createCaption();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, hTMLElement0);
      dOMNodePointer0.remove();
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      HTMLDocumentImpl hTMLDocumentImpl2 = new HTMLDocumentImpl();
      HTMLTableElementImpl hTMLTableElementImpl1 = new HTMLTableElementImpl(hTMLDocumentImpl1, "http://www.w3.org/XML/1998/namespace");
      HTMLElement hTMLElement1 = hTMLTableElementImpl0.createTHead();
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLDocumentImpl2);
      Locale locale0 = new Locale("W@QgKe%tv<c$=IkPv");
      locale0.stripExtensions();
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(hTMLTableElementImpl1, (Locale) null, "6P:kThj&Aa&huNI5\"W");
      dOMNodePointer2.setValue((Object) null);
      HTMLDocumentImpl hTMLDocumentImpl3 = new HTMLDocumentImpl();
      HTMLTableColElementImpl hTMLTableColElementImpl0 = new HTMLTableColElementImpl(hTMLDocumentImpl3, "+>GsS,-=D8*");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      HTMLDocumentImpl hTMLDocumentImpl4 = new HTMLDocumentImpl();
      HTMLDocumentImpl hTMLDocumentImpl5 = new HTMLDocumentImpl();
      HTMLParamElementImpl hTMLParamElementImpl0 = new HTMLParamElementImpl(hTMLDocumentImpl5, "http://www.w3.org/XML/1998/namespace");
      JXPathContext.newContext(jXPathContext0, (Object) hTMLElement1);
      HTMLButtonElementImpl hTMLButtonElementImpl0 = new HTMLButtonElementImpl(hTMLDocumentImpl0, "false");
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) hTMLButtonElementImpl0);
      jXPathContext1.getParentContext();
      NullPointer nullPointer0 = (NullPointer)dOMNodePointer2.getPointerByID(jXPathContext0, "&4,WlTBf3x");
      assertTrue(nullPointer0.isNode());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      hTMLDocumentImpl0.isDefaultNamespace("Qd-/5zrP6Z'");
      Comment comment0 = hTMLDocumentImpl0.createComment("");
      Locale locale0 = Locale.JAPANESE;
      locale0.getUnicodeLocaleKeys();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(comment0, locale0);
      NamespaceResolver namespaceResolver0 = dOMNodePointer0.getNamespaceResolver();
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      dOMNodePointer0.testNode((NodeTest) nodeNameTest0);
      HTMLMenuElementImpl hTMLMenuElementImpl0 = new HTMLMenuElementImpl((HTMLDocumentImpl) null, "");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) hTMLMenuElementImpl0);
      jXPathContext0.getParentContext();
      JXPathContext jXPathContext1 = jXPathContext0.getRelativeContext(dOMNodePointer0);
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) null);
      WMLUElementImpl wMLUElementImpl0 = new WMLUElementImpl(wMLDocumentImpl0, "4FUGs{z@O8");
      JXPathContext.newContext(jXPathContext0, (Object) wMLUElementImpl0);
      JXPathContext.newContext(jXPathContext1, (Object) "4FUGs{z@O8");
      namespaceResolver0.getNamespaceContextPointer();
      NodeIterator nodeIterator0 = dOMNodePointer0.attributeIterator(qName0);
      assertEquals(0, nodeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      QName qName0 = new QName("", "");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(variablePointer0, qName0, "");
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl0, "");
      HTMLElement hTMLElement0 = hTMLTableElementImpl0.createTHead();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(nodePointer0, hTMLElement0);
      dOMNodePointer0.setValue(nodePointer0);
      JXPathContext.newContext((Object) "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      DOMNodePointer.testNode((Node) hTMLTableElementImpl0, (NodeTest) nodeNameTest0);
      DOMNodePointer.getLocalName(hTMLElement0);
      dOMNodePointer0.isLeaf();
      Locale locale0 = Locale.GERMANY;
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "<<unknown namespace>>");
      dOMNodePointer1.getBaseValue();
      dOMNodePointer1.getLength();
      dOMNodePointer1.isActual();
      Locale locale1 = Locale.GERMAN;
      Locale locale2 = locale0.stripExtensions();
      XMLErrorReporter xMLErrorReporter0 = new XMLErrorReporter();
      xMLErrorReporter0.getLocale();
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(hTMLElement0, (Locale) null, "<<unknown namespace>>");
      DOMNodePointer dOMNodePointer3 = new DOMNodePointer(hTMLElement0, locale2);
      xMLErrorReporter0.getMessageFormatter("JXPath: found system property");
      // Undeclared exception!
      try { 
        xMLErrorReporter0.putMessageFormatter("THEAD", (MessageFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("Q(jP5St^Y+BA,");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "Q(jP5St^Y+BA,");
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLFormElementImpl hTMLFormElementImpl0 = new HTMLFormElementImpl(hTMLDocumentImpl0, "<<unknown namespace>>");
      NodePointer nodePointer0 = variablePointer0.createPath(jXPathContext0, (Object) hTMLFormElementImpl0);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(nodePointer0, hTMLDocumentImpl0);
      variablePointer0.getLocale();
      dOMNodePointer0.isLeaf();
      dOMNodePointer0.namespacePointer("Q(jP5St^Y+BA,");
      dOMNodePointer0.getName();
      dOMNodePointer0.getLength();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      processingInstructionTest0.toString();
      dOMNodePointer0.childIterator(processingInstructionTest0, false, variablePointer0);
      dOMNodePointer0.isCollection();
      // Undeclared exception!
      try { 
        dOMNodePointer0.createAttribute(jXPathContext0, qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot create an attribute for path $Q(jP5St^Y+BA,/@Q(jP5St^Y+BA,, operation is not allowed for this type of node
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      QName qName0 = new QName("", "");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      NodePointer.newChildNodePointer(variablePointer0, qName0, "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      DocumentImpl documentImpl0 = new DocumentImpl(true);
      ElementDefinitionImpl elementDefinitionImpl0 = new ElementDefinitionImpl(documentImpl0, "//WWW.W3.ORG/2000/XMLNS/");
      Document document0 = elementDefinitionImpl0.getOwnerDocument();
      StandardParserConfiguration standardParserConfiguration0 = new StandardParserConfiguration();
      Locale locale0 = standardParserConfiguration0.getLocale();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(document0, locale0, "We ?*");
      int int0 = dOMNodePointer0.getLength();
      assertEquals(1, int0);
      
      boolean boolean0 = DOMNodePointer.testNode((Node) documentImpl0, (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
      
      String string0 = dOMNodePointer0.getDefaultNamespaceURI();
      assertNull(string0);
      assertEquals(1, dOMNodePointer0.getLength());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      hTMLDocumentImpl0.getDoctype();
      CommentImpl commentImpl0 = new CommentImpl(hTMLDocumentImpl0, "");
      Locale locale0 = Locale.JAPANESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      Locale locale1 = Locale.US;
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(commentImpl0, locale1, "R\u0003G;+krS.`");
      QName qName0 = new QName("", "?\"<;*Id3[8z&");
      HTMLButtonElementImpl hTMLButtonElementImpl0 = new HTMLButtonElementImpl(hTMLDocumentImpl0, "");
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(dOMNodePointer0, qName0, hTMLButtonElementImpl0);
      dOMNodePointer1.compareChildNodePointers(nodePointer0, dOMNodePointer0);
      // Undeclared exception!
      try { 
        dOMNodePointer1.getNamespaceURI();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.xerces.dom.CommentImpl cannot be cast to org.w3c.dom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      QName qName0 = new QName("", "");
      Locale locale0 = Locale.ITALY;
      locale0.clone();
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, "", locale0);
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLScriptElementImpl hTMLScriptElementImpl0 = new HTMLScriptElementImpl(hTMLDocumentImpl0, "");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(nodePointer0, hTMLScriptElementImpl0);
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) null);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list0);
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      nodePointer0.testNode(nodeNameTest0);
      List<Locale> list3 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list2, locale_FilteringMode0);
      List<Locale> list4 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list3);
      locale0.getScript();
      boolean boolean0 = dOMNodePointer0.isActual();
      String string0 = dOMNodePointer0.getDefaultNamespaceURI();
      assertNull(string0);
      
      boolean boolean1 = dOMNodePointer0.equals(list4);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = DOMNodePointer.getLocalName(hTMLDocumentImpl0);
      assertEquals("#document", string1);
      assertNotNull(string1);
      
      dOMNodePointer0.getValue();
      DOMNodePointer.getNamespaceURI((Node) hTMLDocumentImpl0);
      boolean boolean2 = dOMNodePointer0.isCollection();
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
      String string0 = "&quot;";
      Locale locale0 = new Locale("em", "&quot;");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(deferredDocumentImpl0, locale0, "em");
      HTMLIFrameElementImpl hTMLIFrameElementImpl0 = new HTMLIFrameElementImpl((HTMLDocumentImpl) null, "&quot;");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) hTMLIFrameElementImpl0);
      JXPathContext jXPathContext1 = jXPathContext0.getRelativeContext(dOMNodePointer0);
      dOMNodePointer0.isLanguage("!2&NIM?w2R");
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl((CoreDocumentImpl) null, "http://www.w3.org/2000/xmlns/", "P", "P");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      WMLGoElementImpl wMLGoElementImpl0 = new WMLGoElementImpl(wMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      // Undeclared exception!
      try { 
        dOMNodePointer0.createPath(jXPathContext1, (Object) wMLGoElementImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      QName qName0 = new QName("", "");
      Locale locale0 = Locale.ITALY;
      locale0.clone();
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, "", locale0);
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLScriptElementImpl hTMLScriptElementImpl0 = new HTMLScriptElementImpl(hTMLDocumentImpl0, "");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(nodePointer0, hTMLScriptElementImpl0);
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) null);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list0);
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      nodePointer0.testNode(nodeNameTest0);
      List<Locale> list3 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list2, locale_FilteringMode0);
      List<Locale> list4 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list3);
      locale0.getScript();
      boolean boolean0 = dOMNodePointer0.isActual();
      assertTrue(boolean0);
      
      String string0 = dOMNodePointer0.getDefaultNamespaceURI();
      assertNull(string0);
      
      dOMNodePointer0.equals(list4);
      boolean boolean1 = dOMNodePointer0.isLanguage("");
      boolean boolean2 = dOMNodePointer0.equals((Object) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      hTMLDocumentImpl0.getHead();
      hTMLDocumentImpl0.getDoctype();
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl(true);
      CommentImpl commentImpl0 = new CommentImpl(coreDocumentImpl0, "org.apache.commons.jxpath.ri.model.dom.DOMNodePointer");
      Locale locale0 = Locale.JAPANESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(coreDocumentImpl0, locale0);
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer((Node) null, locale0, "a=QuG&q%}&wH8>5D-");
      QName qName0 = new QName("<<unknown namespace>>", "");
      NodePointer.newChildNodePointer(dOMNodePointer0, qName0, coreDocumentImpl0);
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(commentImpl0, locale0);
      // Undeclared exception!
      try { 
        dOMNodePointer1.compareChildNodePointers(dOMNodePointer2, dOMNodePointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MutationEventImpl mutationEventImpl0 = new MutationEventImpl();
      mutationEventImpl0.getRelatedNode();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, (Node) null);
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLSelectElementImpl hTMLSelectElementImpl0 = new HTMLSelectElementImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
      hTMLSelectElementImpl0.getForm();
      String string0 = "org.apache.commons.jxpath.ri.model.VariablePointer$1";
      mutationEventImpl0.initMutationEvent("vRl,ihFccBJX;p", true, true, (Node) null, "b", "org.apache.commons.jxpath.ri.model.VariablePointer$1", "<<unknown namespace>>", (short)361);
      DOMNodePointer.findEnclosingAttribute((Node) null, (String) null);
      dOMNodePointer0.getBaseValue();
      dOMNodePointer0.getLength();
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      HTMLFrameSetElementImpl hTMLFrameSetElementImpl0 = new HTMLFrameSetElementImpl(hTMLDocumentImpl1, "http://www.w3.org/XML/1998/namespace");
      dOMNodePointer0.equals(hTMLFrameSetElementImpl0);
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      DOMNodePointer.testNode((Node) hTMLSelectElementImpl0, (NodeTest) nodeNameTest0);
      // Undeclared exception!
      try { 
        DOMNodePointer.getLocalName((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      hTMLDocumentImpl0.getHead();
      hTMLDocumentImpl0.getDoctype();
      Locale locale0 = Locale.GERMANY;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      dOMNodePointer0.asPath();
      dOMNodePointer0.getDefaultNamespaceURI();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "");
      jXPathContext0.getParentContext();
      HTMLOListElementImpl hTMLOListElementImpl0 = null;
      try {
        hTMLOListElementImpl0 = new HTMLOListElementImpl(hTMLDocumentImpl0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.html.dom.HTMLElementImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      QName qName0 = new QName("", "");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      NodePointer.newChildNodePointer(variablePointer0, qName0, "");
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      hTMLDocumentImpl0.getDoctype();
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) null);
      wMLDocumentImpl0.createNotation("xml:space");
      Locale locale0 = Locale.GERMANY;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, "<<unknown namespace>>");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "");
      HTMLFrameElementImpl hTMLFrameElementImpl0 = new HTMLFrameElementImpl(hTMLDocumentImpl0, "xml:space");
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) hTMLFrameElementImpl0);
      // Undeclared exception!
      try { 
        jXPathContext1.getRelativeContext(dOMNodePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot create a relative context for a non-existent node: id('<<unknown namespace>>')
         //
         verifyException("org.apache.commons.jxpath.ri.JXPathContextReferenceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      QName qName0 = new QName("", "");
      Locale locale0 = Locale.ITALY;
      locale0.clone();
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, "", locale0);
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLScriptElementImpl hTMLScriptElementImpl0 = new HTMLScriptElementImpl(hTMLDocumentImpl0, "");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(nodePointer0, hTMLScriptElementImpl0);
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) null);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list0);
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      nodePointer0.testNode(nodeNameTest0);
      List<Locale> list3 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list2, locale_FilteringMode0);
      List<Locale> list4 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list3);
      locale0.getScript();
      dOMNodePointer0.isActual();
      dOMNodePointer0.getDefaultNamespaceURI();
      dOMNodePointer0.equals(list4);
      // Undeclared exception!
      try { 
        dOMNodePointer0.isLanguage((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      String string0 = "6P:kThj&Aa&huNI5\"W";
      HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl0, "xml:lang");
      hTMLTableElementImpl0.createCaption();
      NodePointer nodePointer0 = null;
      HTMLMapElementImpl hTMLMapElementImpl0 = new HTMLMapElementImpl(hTMLDocumentImpl0, "6P:kThj&Aa&huNI5\"W");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, hTMLMapElementImpl0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.remove();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot remove root DOM node
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
      Text text0 = deferredDocumentImpl0.createTextNode("em");
      Locale locale0 = Locale.UK;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(text0, locale0);
      dOMNodePointer0.hashCode();
      QName qName0 = new QName("");
      // Undeclared exception!
      try { 
        dOMNodePointer0.createChild((JXPathContext) null, qName0, 3824);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      QName qName0 = new QName("", "");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(variablePointer0, qName0, "");
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl0, "");
      HTMLElement hTMLElement0 = hTMLTableElementImpl0.createTHead();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(nodePointer0, hTMLElement0);
      dOMNodePointer0.setValue(nodePointer0);
      QName qName1 = new QName("accept-charset", "");
      HTMLLabelElementImpl hTMLLabelElementImpl0 = new HTMLLabelElementImpl(hTMLDocumentImpl0, "accept-charset");
      NodePointer.newChildNodePointer(variablePointer0, qName1, hTMLLabelElementImpl0);
      VariablePointer variablePointer1 = new VariablePointer((Variables) null, qName1);
      // Undeclared exception!
      try { 
        dOMNodePointer0.compareChildNodePointers(variablePointer1, variablePointer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(false);
      CommentImpl commentImpl0 = new CommentImpl(deferredDocumentImpl0, "");
      Locale locale0 = Locale.JAPANESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(commentImpl0, locale0);
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(deferredDocumentImpl0, locale0, "http://www.w3.org/2000/xmlns/");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "");
      JXPathContext.newContext(jXPathContext0, (Object) locale0);
      JXPathContext jXPathContext1 = jXPathContext0.getRelativeContext(dOMNodePointer0);
      jXPathContext1.getParentContext();
      NullPointer nullPointer0 = (NullPointer)dOMNodePointer1.getPointerByID(jXPathContext1, "http://www.w3.org/XML/1998/namespace");
      assertFalse(nullPointer0.isCollection());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLOptionElementImpl hTMLOptionElementImpl0 = new HTMLOptionElementImpl(hTMLDocumentImpl0, ")Z<!}K <4f^yp[h^j");
      Node node0 = hTMLDocumentImpl0.adoptNode(hTMLOptionElementImpl0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(node0, locale0, ")Z<!}K <4f^yp[h^j");
      QName qName0 = dOMNodePointer0.getName();
      assertEquals(")Z<!}K <4F^YP[H^J", qName0.toString());
      
      hTMLOptionElementImpl0.getUserData();
      int int0 = dOMNodePointer0.getLength();
      assertEquals(1, int0);
      
      String string0 = dOMNodePointer0.getNamespaceURI("");
      assertNull(string0);
      
      boolean boolean0 = dOMNodePointer0.isLeaf();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl0, "6P:kThj&Aa&huNI5\"W");
      HTMLElement hTMLElement0 = hTMLTableElementImpl0.createCaption();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, hTMLElement0);
      dOMNodePointer0.remove();
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      HTMLDocumentImpl hTMLDocumentImpl2 = new HTMLDocumentImpl();
      HTMLTableElementImpl hTMLTableElementImpl1 = new HTMLTableElementImpl(hTMLDocumentImpl2, "<<unknown namespace>>");
      HTMLElement hTMLElement1 = hTMLTableElementImpl0.createTHead();
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer((NodePointer) null, hTMLDocumentImpl0);
      Locale locale0 = new Locale("83?}6`*A");
      Locale locale1 = locale0.stripExtensions();
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(hTMLElement1, locale1, "<<unknown namespace>>");
      dOMNodePointer2.setValue(hTMLDocumentImpl2);
      HTMLTableColElementImpl hTMLTableColElementImpl0 = new HTMLTableColElementImpl(hTMLDocumentImpl1, "http://www.w3.org/2000/xmlns/");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) hTMLTableColElementImpl0);
      HTMLDocumentImpl hTMLDocumentImpl3 = new HTMLDocumentImpl();
      HTMLParamElementImpl hTMLParamElementImpl0 = new HTMLParamElementImpl(hTMLDocumentImpl3, "Cannot add a second doctype, only one is allowed");
      JXPathContext.newContext(jXPathContext0, (Object) hTMLParamElementImpl0);
      jXPathContext0.getParentContext();
      NullPointer nullPointer0 = (NullPointer)dOMNodePointer2.getPointerByID((JXPathContext) null, "{{:S,1y9e)g");
      assertTrue(nullPointer0.isNode());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
      Text text0 = deferredDocumentImpl0.createTextNode("em");
      Locale locale0 = Locale.UK;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(text0, locale0);
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(text0, locale0, "^'/#GluB");
      QName qName0 = new QName("<<unknown namespace>>", "'&57x``Z");
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(dOMNodePointer0, qName0, locale0);
      // Undeclared exception!
      try { 
        dOMNodePointer1.compareChildNodePointers(dOMNodePointer0, nodePointer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Locale cannot be cast to org.w3c.dom.Node
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      ProcessingInstruction processingInstruction0 = hTMLDocumentImpl0.createProcessingInstruction("background", "");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, processingInstruction0);
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "http://www.w3.org/2000/xmlns/");
      dOMNodePointer0.childIterator(nodeNameTest0, false, (NodePointer) null);
      // Undeclared exception!
      try { 
        dOMNodePointer0.getNamespaceURI();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.xerces.dom.ProcessingInstructionImpl cannot be cast to org.w3c.dom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLOptionElementImpl hTMLOptionElementImpl0 = new HTMLOptionElementImpl(hTMLDocumentImpl0, ")Z<!}K <4f^yp[h^j");
      Node node0 = hTMLDocumentImpl0.adoptNode(hTMLOptionElementImpl0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(node0, locale0, ")Z<!}K <4f^yp[h^j");
      boolean boolean0 = dOMNodePointer0.isLeaf();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      hTMLDocumentImpl0.isDefaultNamespace("Qd-/5zrP6Z'");
      Comment comment0 = hTMLDocumentImpl0.createComment("");
      Locale locale0 = Locale.JAPANESE;
      locale0.getUnicodeLocaleKeys();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(comment0, locale0);
      dOMNodePointer0.getNamespaceResolver();
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      dOMNodePointer0.testNode((NodeTest) nodeNameTest0);
      HTMLMenuElementImpl hTMLMenuElementImpl0 = new HTMLMenuElementImpl((HTMLDocumentImpl) null, "");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) hTMLMenuElementImpl0);
      jXPathContext0.getParentContext();
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "<<unknown namespace>>", "sip<T", "");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      WMLNoopElementImpl wMLNoopElementImpl0 = new WMLNoopElementImpl(wMLDocumentImpl0, "");
      JXPathContext jXPathContext1 = JXPathContext.newContext((JXPathContext) null, (Object) wMLNoopElementImpl0);
      JXPathContext jXPathContext2 = jXPathContext1.getRelativeContext(dOMNodePointer0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.createChild(jXPathContext2, qName0, 1193, (Object) nodeNameTest0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: 
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MutationEventImpl mutationEventImpl0 = new MutationEventImpl();
      mutationEventImpl0.getRelatedNode();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, (Node) null);
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLSelectElementImpl hTMLSelectElementImpl0 = new HTMLSelectElementImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
      hTMLSelectElementImpl0.getForm();
      mutationEventImpl0.initMutationEvent("vRl,ihFccBJX;p", true, true, (Node) null, "b", "org.apache.commons.jxpath.ri.model.VariablePointer$1", "<<unknown namespace>>", (short)361);
      DOMNodePointer.findEnclosingAttribute((Node) null, (String) null);
      dOMNodePointer0.getBaseValue();
      dOMNodePointer0.getLength();
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      HTMLFrameSetElementImpl hTMLFrameSetElementImpl0 = new HTMLFrameSetElementImpl(hTMLDocumentImpl1, "http://www.w3.org/XML/1998/namespace");
      dOMNodePointer0.equals(hTMLFrameSetElementImpl0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(337);
      DOMNodePointer.testNode((Node) hTMLDocumentImpl1, (NodeTest) nodeTypeTest0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.getName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = null;
      // Undeclared exception!
      try { 
        DOMNodePointer.getNamespaceURI((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl0, "6P:kThj&Aa&huNI5\"W");
      HTMLElement hTMLElement0 = hTMLTableElementImpl0.createCaption();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, hTMLElement0);
      dOMNodePointer0.remove();
      HTMLHeadElementImpl hTMLHeadElementImpl0 = new HTMLHeadElementImpl(hTMLDocumentImpl0, "83?}6`*A");
      JXPathContext.newContext((Object) hTMLHeadElementImpl0);
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
      Attr attr0 = pSVIDocumentImpl0.createAttributeNS("", "", "wzGDy0vAJ");
      try { 
        hTMLHeadElementImpl0.setAttributeNodeNS(attr0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // WRONG_DOCUMENT_ERR: A node is used in a different document than the one that created it.
         //
         verifyException("org.apache.xerces.dom.ElementImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl0, "");
      hTMLTableElementImpl0.getTHead();
      XMLErrorReporter xMLErrorReporter0 = new XMLErrorReporter();
      xMLErrorReporter0.getLocale();
      xMLErrorReporter0.getPropertyDefault("");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, (Locale) null);
      hTMLTableElementImpl0.getTBodies();
      XML11EntityScanner xML11EntityScanner0 = new XML11EntityScanner();
      xML11EntityScanner0.getLineNumber();
      xMLErrorReporter0.setDocumentLocator(xML11EntityScanner0);
      dOMNodePointer0.setIndex((-1));
      PSVIAttrNSImpl pSVIAttrNSImpl0 = new PSVIAttrNSImpl(hTMLDocumentImpl0, "<<unknown namespace>>", "!Tsu[ JQ", "");
      pSVIAttrNSImpl0.getPrefix();
      // Undeclared exception!
      try { 
        dOMNodePointer0.setValue(pSVIAttrNSImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BasicVariables basicVariables0 = new BasicVariables();
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLImageElementImpl hTMLImageElementImpl0 = new HTMLImageElementImpl(hTMLDocumentImpl0, "xml:space");
      Locale locale0 = Locale.US;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLImageElementImpl0, locale0, "xml:space");
      dOMNodePointer0.getName();
      String string0 = "HTMLStyleElementImpl";
      PSVIAttrNSImpl pSVIAttrNSImpl0 = null;
      try {
        pSVIAttrNSImpl0 = new PSVIAttrNSImpl(hTMLDocumentImpl0, "HTMLStyleElementImpl", "http://www.w3.org/2000/xmlns/");
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // INVALID_CHARACTER_ERR: An invalid or illegal XML character is specified. 
         //
         verifyException("org.apache.xerces.dom.CoreDocumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      hTMLDocumentImpl0.getDoctype();
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl((DocumentType) null);
      DOMNodePointer.getLocalName(coreDocumentImpl0);
      Locale locale0 = Locale.GERMANY;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.asPath();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = "";
      Locale locale0 = new Locale("", "", "");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, "");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      dOMNodePointer0.getRootNode();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list3 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list2, locale_FilteringMode1);
      List<Locale> list4 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list3);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list4);
      dOMNodePointer0.getLanguage();
      // Undeclared exception!
      try { 
        dOMNodePointer0.remove();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      QName qName0 = new QName("", "");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(variablePointer0, qName0, "");
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl0, "");
      HTMLElement hTMLElement0 = hTMLTableElementImpl0.createTHead();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(nodePointer0, hTMLElement0);
      dOMNodePointer0.setValue(nodePointer0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "");
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) hTMLDocumentImpl0);
      JXPathContext jXPathContext2 = jXPathContext1.getParentContext();
      NullPointer nullPointer0 = (NullPointer)dOMNodePointer0.getPointerByID(jXPathContext2, "onenterforward");
      assertFalse(nullPointer0.isCollection());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      String string0 = "FnN?ArUN[kCoqh#`@#j";
      HTMLIsIndexElementImpl hTMLIsIndexElementImpl0 = new HTMLIsIndexElementImpl(hTMLDocumentImpl0, "FnN?ArUN[kCoqh#`@#j");
      hTMLIsIndexElementImpl0.getForm();
      Locale locale0 = Locale.CANADA;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, " q");
      // Undeclared exception!
      try { 
        dOMNodePointer0.getName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BasicVariables basicVariables0 = new BasicVariables();
      basicVariables0.undeclareVariable("xmlns");
      QName qName0 = new QName("xmlns", "^+");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      jXPathContext0.getParentContext();
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLFormElementImpl hTMLFormElementImpl0 = new HTMLFormElementImpl(hTMLDocumentImpl0, "^+");
      NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) hTMLFormElementImpl0);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(nodePointer0, hTMLDocumentImpl0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.isLanguage("xmlns");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, (Locale) null);
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLInputElementImpl hTMLInputElementImpl0 = new HTMLInputElementImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
      DOMNodePointer.findEnclosingAttribute(hTMLDocumentImpl0, "aLw7|U$8m&'8+l;");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) hTMLInputElementImpl0);
      // Undeclared exception!
      try { 
        jXPathContext0.getRelativeContext(dOMNodePointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      String string0 = "";
      HTMLObjectElementImpl hTMLObjectElementImpl0 = new HTMLObjectElementImpl(hTMLDocumentImpl0, "");
      Locale locale0 = Locale.UK;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLObjectElementImpl0, locale0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "");
      hTMLObjectElementImpl0.getAttributes();
      QName qName0 = new QName("");
      HTMLBaseFontElementImpl hTMLBaseFontElementImpl0 = new HTMLBaseFontElementImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
      // Undeclared exception!
      try { 
        dOMNodePointer0.createChild(jXPathContext0, qName0, 47, (Object) hTMLBaseFontElementImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: 
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
      String string0 = "";
      String string1 = "http://www.w3.org/XML/1998/namespace";
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(pSVIDocumentImpl0, "", "http://www.w3.org/XML/1998/namespace", ",");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      String string2 = "pJ.}";
      WMLSmallElementImpl wMLSmallElementImpl0 = new WMLSmallElementImpl(wMLDocumentImpl0, "pJ.}");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(wMLSmallElementImpl0, (Locale) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "pJ.}");
      JXPathContext jXPathContext1 = jXPathContext0.getRelativeContext(dOMNodePointer0);
      String string3 = "";
      // Undeclared exception!
      try { 
        jXPathContext1.getPointer("http://www.w3.org/2000/xmlns/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid XPath: 'http://www.w3.org/2000/xmlns/'. Syntax error after: 'http:'
         //
         verifyException("org.apache.commons.jxpath.ri.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
      Text text0 = deferredDocumentImpl0.createTextNode("em");
      Locale locale0 = Locale.UK;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(text0, locale0);
      dOMNodePointer0.hashCode();
      dOMNodePointer0.getLanguage();
      dOMNodePointer0.namespacePointer("Q v6No='n%xhn");
      int int0 = dOMNodePointer0.getLength();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "b|", "b|", "m\\X");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      Locale locale0 = Locale.KOREAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(wMLDocumentImpl0, locale0);
      HTMLMapElementImpl hTMLMapElementImpl0 = new HTMLMapElementImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) hTMLMapElementImpl0);
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) pSVIDocumentImpl0);
      QName qName0 = new QName("http://www.w3.org/2000/xmlns/");
      // Undeclared exception!
      try { 
        dOMNodePointer0.createChild(jXPathContext1, qName0, (-1612));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: 
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(false);
      CommentImpl commentImpl0 = new CommentImpl(deferredDocumentImpl0, "");
      Locale locale0 = Locale.JAPANESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(commentImpl0, locale0);
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(deferredDocumentImpl0, locale0, "http://www.w3.org/2000/xmlns/");
      QName qName0 = new QName((String) null, "");
      NodePointer.newChildNodePointer(dOMNodePointer1, qName0, locale0);
      dOMNodePointer0.compareChildNodePointers(dOMNodePointer1, dOMNodePointer1);
      // Undeclared exception!
      try { 
        dOMNodePointer0.getNamespaceURI();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.xerces.dom.CommentImpl cannot be cast to org.w3c.dom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      hTMLDocumentImpl0.getHead();
      hTMLDocumentImpl0.getDoctype();
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl((DocumentType) null, true);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(coreDocumentImpl0, locale0);
      JXPathContext jXPathContext0 = null;
      String string0 = "ISINDEX";
      String string1 = "U1w-?6=5D*n&n1~2yCP";
      QName qName0 = dOMNodePointer0.getName();
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      JXPathContext jXPathContext1 = JXPathContext.newContext((Object) dOMNodePointer0);
      WMLIElementImpl wMLIElementImpl0 = new WMLIElementImpl((WMLDocumentImpl) null, "http://www.w3.org/XML/1998/namespace");
      // Undeclared exception!
      try { 
        variablePointer0.createPath(jXPathContext1, (Object) wMLIElementImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: $null
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLDirectoryElementImpl hTMLDirectoryElementImpl0 = new HTMLDirectoryElementImpl(hTMLDocumentImpl0, "Z_=6tNbw50");
      Locale locale0 = new Locale("Z_=6tNbw50");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDirectoryElementImpl0, locale0);
      dOMNodePointer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node node0 = null;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, (Locale) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      JXPathContext.newContext(jXPathContext0, (Object) null);
      // Undeclared exception!
      try { 
        dOMNodePointer0.getName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }
}
