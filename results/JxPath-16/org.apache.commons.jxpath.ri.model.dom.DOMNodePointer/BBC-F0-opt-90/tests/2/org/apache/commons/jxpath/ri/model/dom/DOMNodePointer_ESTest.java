/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 07:09:06 GMT 2021
 */

package org.apache.commons.jxpath.ri.model.dom;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.NullPointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.html.dom.HTMLAnchorElementImpl;
import org.apache.html.dom.HTMLAppletElementImpl;
import org.apache.html.dom.HTMLBodyElementImpl;
import org.apache.html.dom.HTMLDocumentImpl;
import org.apache.html.dom.HTMLFrameElementImpl;
import org.apache.html.dom.HTMLHeadElementImpl;
import org.apache.html.dom.HTMLIFrameElementImpl;
import org.apache.html.dom.HTMLIsIndexElementImpl;
import org.apache.html.dom.HTMLLabelElementImpl;
import org.apache.html.dom.HTMLLinkElementImpl;
import org.apache.html.dom.HTMLMapElementImpl;
import org.apache.html.dom.HTMLMetaElementImpl;
import org.apache.html.dom.HTMLOListElementImpl;
import org.apache.html.dom.HTMLOptionElementImpl;
import org.apache.html.dom.HTMLParagraphElementImpl;
import org.apache.html.dom.HTMLSelectElementImpl;
import org.apache.html.dom.HTMLStyleElementImpl;
import org.apache.html.dom.HTMLTableColElementImpl;
import org.apache.html.dom.HTMLTableElementImpl;
import org.apache.html.dom.HTMLTableRowElementImpl;
import org.apache.html.dom.HTMLTableSectionElementImpl;
import org.apache.html.dom.HTMLTextAreaElementImpl;
import org.apache.wml.dom.WMLBigElementImpl;
import org.apache.wml.dom.WMLDocumentImpl;
import org.apache.wml.dom.WMLEmElementImpl;
import org.apache.wml.dom.WMLGoElementImpl;
import org.apache.wml.dom.WMLPElementImpl;
import org.apache.wml.dom.WMLTableElementImpl;
import org.apache.wml.dom.WMLTdElementImpl;
import org.apache.wml.dom.WMLTimerElementImpl;
import org.apache.xerces.dom.AttrNSImpl;
import org.apache.xerces.dom.CDATASectionImpl;
import org.apache.xerces.dom.CommentImpl;
import org.apache.xerces.dom.CoreDocumentImpl;
import org.apache.xerces.dom.DeferredDocumentImpl;
import org.apache.xerces.dom.DocumentImpl;
import org.apache.xerces.dom.DocumentTypeImpl;
import org.apache.xerces.dom.ElementDefinitionImpl;
import org.apache.xerces.dom.ElementImpl;
import org.apache.xerces.dom.EntityImpl;
import org.apache.xerces.dom.EntityReferenceImpl;
import org.apache.xerces.dom.PSVIAttrNSImpl;
import org.apache.xerces.dom.PSVIDocumentImpl;
import org.apache.xerces.dom.PSVIElementNSImpl;
import org.apache.xerces.dom.ProcessingInstructionImpl;
import org.apache.xerces.dom.TextImpl;
import org.apache.xerces.impl.XMLErrorReporter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Comment;
import org.w3c.dom.DOMException;
import org.w3c.dom.DocumentType;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.ProcessingInstruction;
import org.w3c.dom.Text;
import org.w3c.dom.html.HTMLElement;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DOMNodePointer_ESTest extends DOMNodePointer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLHeadElementImpl hTMLHeadElementImpl0 = new HTMLHeadElementImpl(hTMLDocumentImpl0, "[");
      Locale locale0 = Locale.JAPANESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLHeadElementImpl0, locale0);
      HTMLMapElementImpl hTMLMapElementImpl0 = new HTMLMapElementImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLMapElementImpl0);
      int int0 = dOMNodePointer0.compareChildNodePointers(dOMNodePointer0, dOMNodePointer1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      AttrNSImpl attrNSImpl0 = new AttrNSImpl();
      Locale locale0 = Locale.KOREA;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(attrNSImpl0, locale0, "2odenU)");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLDocumentImpl0);
      int int0 = dOMNodePointer0.compareChildNodePointers(dOMNodePointer0, dOMNodePointer1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.US;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      QName qName0 = dOMNodePointer0.getName();
      PSVIElementNSImpl pSVIElementNSImpl0 = new PSVIElementNSImpl(hTMLDocumentImpl0, "<<unknown namespace>>", "0GWl", "LPn;\"|");
      NodePointer nodePointer0 = NodePointer.newChildNodePointer((NodePointer) null, qName0, pSVIElementNSImpl0);
      int int0 = dOMNodePointer0.compareChildNodePointers(nodePointer0, dOMNodePointer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl(false);
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(coreDocumentImpl0, "z}:=sAq{Y.}j~gm8");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      WMLTimerElementImpl wMLTimerElementImpl0 = new WMLTimerElementImpl(wMLDocumentImpl0, "eIC`{BDeTtC");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(wMLTimerElementImpl0, locale0, "http://www.w3.org/2000/xmlns/");
      QName qName0 = dOMNodePointer0.getName();
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(wMLTimerElementImpl0, locale0, "Nt5TN'OInk2D b");
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(dOMNodePointer1, coreDocumentImpl0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) wMLTimerElementImpl0);
      // Undeclared exception!
      try { 
        dOMNodePointer2.createAttribute(jXPathContext0, qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot create an attribute for path id('Nt5TN&apos;OInk2D b')/@eIC`{BDeTtC, operation is not allowed for this type of node
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.JAPANESE;
      QName qName0 = new QName("H7", "kJ/G");
      XMLErrorReporter xMLErrorReporter0 = new XMLErrorReporter();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "\"-ky");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) xMLErrorReporter0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.createAttribute(jXPathContext0, qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot create an attribute for path id('&quot;-ky')/@H7:kJ/G, operation is not allowed for this type of node
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLLabelElementImpl hTMLLabelElementImpl0 = new HTMLLabelElementImpl(hTMLDocumentImpl0, "A");
      AttrNSImpl attrNSImpl0 = new AttrNSImpl();
      Locale locale0 = Locale.CANADA_FRENCH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(attrNSImpl0, locale0, "~2Jf06'Qa'");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLLabelElementImpl0);
      String string0 = dOMNodePointer1.asPath();
      assertEquals("id('~2Jf06&apos;Qa&apos;')/A[1]", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLLabelElementImpl hTMLLabelElementImpl0 = new HTMLLabelElementImpl(hTMLDocumentImpl0, "xml");
      Locale locale0 = Locale.CHINA;
      QName qName0 = new QName("xml", "xml");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLLabelElementImpl0, locale0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) hTMLDocumentImpl0);
      NodePointer nodePointer0 = dOMNodePointer0.createAttribute(jXPathContext0, qName0);
      assertEquals(1, nodePointer0.getLength());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.KOREA;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      dOMNodePointer0.getNamespaceURI("*,=e8,bVEb_hJW");
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "~>\"");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.setValue(wMLDocumentImpl0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // WRONG_DOCUMENT_ERR: A node is used in a different document than the one that created it.
         //
         verifyException("org.apache.xerces.dom.ParentNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      hTMLDocumentImpl0.lookupNamespaceURI("ORGAPACHE.COMMONS.JXPATH.RI.MODELCONTAINER.CONTAINERPOINTERFACTORY");
      Comment comment0 = hTMLDocumentImpl0.createComment((String) null);
      Locale locale0 = Locale.ITALY;
      hTMLDocumentImpl0.appendChild(comment0);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(comment0, locale0, (String) null);
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLDocumentImpl0);
      // Undeclared exception!
      try { 
        dOMNodePointer1.setValue("ORGAPACHE.COMMONS.JXPATH.RI.MODELCONTAINER.CONTAINERPOINTERFACTORY");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      AttrNSImpl attrNSImpl0 = new AttrNSImpl();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(attrNSImpl0, (Locale) null);
      QName qName0 = dOMNodePointer0.getName();
      assertNull(qName0.getName());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.ITALY;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      boolean boolean0 = dOMNodePointer0.isLanguage("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLLabelElementImpl hTMLLabelElementImpl0 = new HTMLLabelElementImpl(hTMLDocumentImpl0, "xmlns");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLLabelElementImpl0, locale0);
      String string0 = dOMNodePointer0.getNamespaceURI();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      PSVIElementNSImpl pSVIElementNSImpl0 = new PSVIElementNSImpl(hTMLDocumentImpl0, "\u82F1\u6587", "\u82F1\u6587", "\u82F1\u6587");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(pSVIElementNSImpl0, locale0);
      String string0 = dOMNodePointer0.getNamespaceURI();
      assertNotNull(string0);
      assertEquals("\u82F1\u6587", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl((CoreDocumentImpl) null, "", "", "");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      WMLEmElementImpl wMLEmElementImpl0 = new WMLEmElementImpl(wMLDocumentImpl0, "");
      String string0 = DOMNodePointer.getLocalName(wMLEmElementImpl0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLMetaElementImpl hTMLMetaElementImpl0 = new HTMLMetaElementImpl(hTMLDocumentImpl0, "rev");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, hTMLMetaElementImpl0);
      String string0 = dOMNodePointer0.getLanguage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, (Locale) null);
      Object object0 = dOMNodePointer0.getImmediateNode();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl((CoreDocumentImpl) null, "", "", "");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      WMLEmElementImpl wMLEmElementImpl0 = new WMLEmElementImpl(wMLDocumentImpl0, "");
      Locale locale0 = new Locale("", "");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(wMLEmElementImpl0, locale0, "[");
      Object object0 = dOMNodePointer0.getImmediateNode();
      assertSame(object0, wMLEmElementImpl0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, (String) null);
      HTMLDocumentImpl hTMLDocumentImpl1 = (HTMLDocumentImpl)dOMNodePointer0.getBaseValue();
      assertNull(hTMLDocumentImpl1.getReferrer());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) null);
      String string0 = DOMNodePointer.findEnclosingAttribute(wMLDocumentImpl0, "<<unknown namespace>>");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl((CoreDocumentImpl) null, "", "", "");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      WMLEmElementImpl wMLEmElementImpl0 = new WMLEmElementImpl(wMLDocumentImpl0, "");
      Locale locale0 = new Locale("", ".0P7K<<3");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(wMLEmElementImpl0, locale0, "[");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) wMLDocumentImpl0);
      QName qName0 = dOMNodePointer0.getName();
      BasicVariables basicVariables0 = new BasicVariables();
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLAnchorElementImpl hTMLAnchorElementImpl0 = new HTMLAnchorElementImpl(hTMLDocumentImpl0, "qGi8>(1;");
      NodePointer nodePointer0 = variablePointer0.createPath(jXPathContext0, (Object) hTMLAnchorElementImpl0);
      NodeIterator nodeIterator0 = dOMNodePointer0.childIterator((NodeTest) null, true, nodePointer0);
      assertEquals(0, nodeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      QName qName0 = new QName("[", "A\"T#~jI[Es:gZ>H*F");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "A\"T#~jI[Es:gZ>H*F");
      // Undeclared exception!
      try { 
        DOMNodePointer.testNode((Node) null, (NodeTest) nodeNameTest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      QName qName0 = new QName("");
      Locale locale0 = Locale.KOREA;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, "S3FK RsO");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ")perl,");
      // Undeclared exception!
      try { 
        dOMNodePointer0.testNode((NodeTest) nodeNameTest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      QName qName0 = new QName("1>S-Eav");
      BasicVariables basicVariables0 = new BasicVariables();
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      HTMLTableColElementImpl hTMLTableColElementImpl0 = new HTMLTableColElementImpl(hTMLDocumentImpl0, "org.apache.commons.jxpath.ri.model.do&.DOMNodePointer");
      Locale locale0 = Locale.US;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLTableColElementImpl0, locale0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.setValue(variablePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: '1>S-Eav'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DocumentImpl documentImpl0 = new DocumentImpl();
      ElementDefinitionImpl elementDefinitionImpl0 = new ElementDefinitionImpl(documentImpl0, "count");
      Locale locale0 = Locale.CHINA;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(elementDefinitionImpl0, locale0, "Factory did not assign a collection to variable '");
      // Undeclared exception!
      try { 
        dOMNodePointer0.setValue(locale0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, (Node) null);
      // Undeclared exception!
      try { 
        dOMNodePointer0.remove();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Locale locale0 = new Locale("+5MA;EDvalKv#I'lp$");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, "+5MA;EDvalKv#I'lp$");
      // Undeclared exception!
      try { 
        dOMNodePointer0.namespaceIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNamespaceIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, (Locale) null, "HTMLTitleElementImpl");
      // Undeclared exception!
      try { 
        dOMNodePointer0.isLeaf();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
      ProcessingInstruction processingInstruction0 = deferredDocumentImpl0.createProcessingInstruction("xml", "]");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(processingInstruction0, (Locale) null, "xml");
      // Undeclared exception!
      try { 
        dOMNodePointer0.isLanguage("B+G=LL)ZU*j");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        DOMNodePointer.getPrefix((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl((CoreDocumentImpl) null, "org.apache.html.dom.HTMLParamElementImpl", "id('", "org.apache.html.dom.HTMLParamElementImpl");
      Locale locale0 = Locale.forLanguageTag("rh';JO0");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(documentTypeImpl0, locale0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      // Undeclared exception!
      try { 
        dOMNodePointer0.getPointerByID(jXPathContext0, "rh';JO0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      hTMLDocumentImpl0.setReadOnly(true, true);
      // Undeclared exception!
      try { 
        DOMNodePointer.getNamespaceURI((Node) hTMLDocumentImpl0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // NO_MODIFICATION_ALLOWED_ERR: An attempt is made to modify an object where modifications are not allowed.
         //
         verifyException("org.apache.xerces.dom.ParentNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DocumentImpl documentImpl0 = new DocumentImpl(false);
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(documentImpl0, "org.apache.html.dom.HTMLUListElementImpl");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      // Undeclared exception!
      try { 
        DOMNodePointer.getNamespaceURI((Node) wMLDocumentImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      AttrNSImpl attrNSImpl0 = new AttrNSImpl();
      // Undeclared exception!
      try { 
        DOMNodePointer.getNamespaceURI((Node) attrNSImpl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.xerces.dom.AttrNSImpl cannot be cast to org.w3c.dom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.ITALY;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      hTMLDocumentImpl0.setReadOnly(true, false);
      // Undeclared exception!
      try { 
        dOMNodePointer0.getNamespaceURI("not");
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // NO_MODIFICATION_ALLOWED_ERR: An attempt is made to modify an object where modifications are not allowed.
         //
         verifyException("org.apache.xerces.dom.ParentNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HTMLHeadElementImpl hTMLHeadElementImpl0 = new HTMLHeadElementImpl((HTMLDocumentImpl) null, "JXU>");
      Locale locale0 = Locale.GERMANY;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLHeadElementImpl0, locale0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.getNamespaceURI("org.apache.commons.jxpath.ri.NamespaceResolver@0000000004");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      hTMLDocumentImpl0.setReadOnly(true, true);
      Locale locale0 = Locale.JAPAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.getNamespaceURI();
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // NO_MODIFICATION_ALLOWED_ERR: An attempt is made to modify an object where modifications are not allowed.
         //
         verifyException("org.apache.xerces.dom.ParentNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, "Unknown namespace prefix: ");
      // Undeclared exception!
      try { 
        dOMNodePointer0.getNamespaceURI();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, "http://www.w3.org/XML/1998/namespace");
      TextImpl textImpl0 = new TextImpl();
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, textImpl0);
      // Undeclared exception!
      try { 
        dOMNodePointer1.getNamespaceURI();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.xerces.dom.TextImpl cannot be cast to org.w3c.dom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HTMLMapElementImpl hTMLMapElementImpl0 = new HTMLMapElementImpl((HTMLDocumentImpl) null, "application/java");
      Locale locale0 = Locale.FRANCE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLMapElementImpl0, locale0, "9xZ|nXa5fBf=unaKK");
      // Undeclared exception!
      try { 
        dOMNodePointer0.getName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        DOMNodePointer.getLocalName((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.ITALY;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      hTMLDocumentImpl0.setReadOnly(true, true);
      // Undeclared exception!
      try { 
        dOMNodePointer0.getDefaultNamespaceURI();
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // NO_MODIFICATION_ALLOWED_ERR: An attempt is made to modify an object where modifications are not allowed.
         //
         verifyException("org.apache.xerces.dom.ParentNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(false, false);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(deferredDocumentImpl0, locale0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.getDefaultNamespaceURI();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.dom.DeferredDocumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLAppletElementImpl hTMLAppletElementImpl0 = new HTMLAppletElementImpl(hTMLDocumentImpl0, "domain");
      // Undeclared exception!
      try { 
        DOMNodePointer.findEnclosingAttribute(hTMLAppletElementImpl0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.html.dom.HTMLElementImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DocumentType documentType0 = hTMLDocumentImpl0.createDocumentType("for", "for", "for");
      HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl0, "}");
      HTMLElement hTMLElement0 = hTMLTableElementImpl0.createTHead();
      Locale locale0 = Locale.CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLElement0, locale0, "}");
      QName qName0 = dOMNodePointer0.getName();
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentType0);
      WMLTableElementImpl wMLTableElementImpl0 = new WMLTableElementImpl(wMLDocumentImpl0, "The DocType already is attached to a document");
      // Undeclared exception!
      try { 
        dOMNodePointer0.createChild((JXPathContext) null, qName0, 2931, (Object) wMLTableElementImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.US;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) null);
      Element element0 = wMLDocumentImpl0.createElementNS("<<unknown namespace>>", ",^ZybCj", "S81eR[UE@z*tr1j");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, element0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "<<unknown namespace>>");
      // Undeclared exception!
      dOMNodePointer1.createChild(jXPathContext0, (QName) null, Integer.MIN_VALUE);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLLabelElementImpl hTMLLabelElementImpl0 = new HTMLLabelElementImpl(hTMLDocumentImpl0, "xmlns");
      Locale locale0 = Locale.KOREA;
      QName qName0 = new QName("xmlns", "node()");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLLabelElementImpl0, locale0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) dOMNodePointer0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.createAttribute(jXPathContext0, qName0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // INVALID_CHARACTER_ERR: An invalid or illegal XML character is specified. 
         //
         verifyException("org.apache.xerces.dom.CoreDocumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) locale0);
      QName qName0 = new QName((String) null, "http://www.w3.org/2000/xmlns/");
      // Undeclared exception!
      try { 
        dOMNodePointer0.createAttribute(jXPathContext0, qName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, (Locale) null);
      QName qName0 = dOMNodePointer0.getName();
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.compareChildNodePointers(dOMNodePointer0, variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: null
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl((CoreDocumentImpl) null, "", "", "");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      WMLEmElementImpl wMLEmElementImpl0 = new WMLEmElementImpl(wMLDocumentImpl0, "");
      Locale locale0 = new Locale("", "");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(wMLEmElementImpl0, locale0, "[");
      QName qName0 = dOMNodePointer0.getName();
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.compareChildNodePointers((NodePointer) null, variablePointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      QName qName0 = new QName("1>S-Eav");
      BasicVariables basicVariables0 = new BasicVariables();
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      HTMLTableColElementImpl hTMLTableColElementImpl0 = new HTMLTableColElementImpl(hTMLDocumentImpl0, "org.apache.commons.jxpath.ri.model.dom.DOMNodePointer");
      Locale locale0 = Locale.KOREA;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLTableColElementImpl0, locale0, "o(fdjuiOUr{ kTI^Do");
      // Undeclared exception!
      try { 
        dOMNodePointer0.compareChildNodePointers(variablePointer0, dOMNodePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: '1>S-Eav'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      QName qName0 = new QName("1>S-Eav");
      BasicVariables basicVariables0 = new BasicVariables();
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      Locale locale0 = Locale.KOREAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(variablePointer0, qName0, "G3<Pjw");
      // Undeclared exception!
      try { 
        dOMNodePointer0.compareChildNodePointers(dOMNodePointer0, nodePointer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.w3c.dom.Node
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      AttrNSImpl attrNSImpl0 = new AttrNSImpl();
      Locale locale0 = Locale.KOREA;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(attrNSImpl0, locale0, "xmlns");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("http://www.w3.org/XML/1998/namespace");
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      // Undeclared exception!
      try { 
        dOMNodePointer0.childIterator(processingInstructionTest0, true, variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: null
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLHeadElementImpl hTMLHeadElementImpl0 = new HTMLHeadElementImpl(hTMLDocumentImpl0, "/processing-instruction('");
      Locale locale0 = Locale.JAPANESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLHeadElementImpl0, locale0);
      QName qName0 = new QName("JXPath: found java.home property ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.childIterator(nodeNameTest0, false, variablePointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.KOREA;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "<<unknown namespace>>");
      // Undeclared exception!
      try { 
        dOMNodePointer0.childIterator(nodeNameTest0, true, variablePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: ''
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      QName qName0 = new QName("zjz!l}t_|,}~/EM ");
      Locale locale0 = Locale.ENGLISH;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, "zjz!l}t_|,}~/EM ", locale0);
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLBodyElementImpl hTMLBodyElementImpl0 = new HTMLBodyElementImpl(hTMLDocumentImpl0, "zjz!l}t_|,}~/EM ");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(nodePointer0, hTMLBodyElementImpl0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("http://www.w3.org/XML/1998/namespace");
      // Undeclared exception!
      try { 
        dOMNodePointer0.childIterator(processingInstructionTest0, true, nodePointer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.w3c.dom.Node
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
      QName qName0 = new QName("<<unknown namespace>>", "http://www.w3.org/2000/xmlns/");
      // Undeclared exception!
      try { 
        dOMNodePointer0.attributeIterator(qName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("JD", "/processing-instruction('");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, (Node) null);
      // Undeclared exception!
      try { 
        dOMNodePointer0.asPath();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.JAPANESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      Attr attr0 = hTMLDocumentImpl0.createAttributeNS((String) null, "<<unknown namespace>>", (String) null);
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, attr0);
      // Undeclared exception!
      try { 
        dOMNodePointer1.getValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) null);
      Element element0 = wMLDocumentImpl0.createElementNS("=>;k)E8b*Q", "<<unknown namespace>>", "http://www.w3.org/XML/1998/namespace");
      String string0 = DOMNodePointer.getNamespaceURI((Node) element0);
      assertNotNull(string0);
      assertEquals("=>;k)E8b*Q", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTableColElementImpl hTMLTableColElementImpl0 = new HTMLTableColElementImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      String string0 = DOMNodePointer.getNamespaceURI((Node) hTMLTableColElementImpl0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLAppletElementImpl hTMLAppletElementImpl0 = new HTMLAppletElementImpl(hTMLDocumentImpl0, "T: KPN;D3");
      String string0 = DOMNodePointer.getLocalName(hTMLAppletElementImpl0);
      assertEquals(" KPN;D3", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      AttrNSImpl attrNSImpl0 = new AttrNSImpl(hTMLDocumentImpl0, "&quot;", "&quot;", "&quot;");
      String string0 = DOMNodePointer.getLocalName(attrNSImpl0);
      assertEquals("&quot;", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      String string0 = DOMNodePointer.getPrefix(hTMLDocumentImpl0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLFrameElementImpl hTMLFrameElementImpl0 = new HTMLFrameElementImpl(hTMLDocumentImpl0, ": \"@Uk\"E 1x)+Z{a");
      String string0 = DOMNodePointer.getPrefix(hTMLFrameElementImpl0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.ITALY;
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, "<<unknown namespace>>", "<<unknown namespace>>");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(processingInstructionImpl0, locale0);
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) null);
      Element element0 = wMLDocumentImpl0.createElementNS("xml:lang", (String) null, "OPTGROUP");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, element0);
      // Undeclared exception!
      dOMNodePointer1.asPath();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.CANADA_FRENCH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, "No write method", (String) null);
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, processingInstructionImpl0);
      String string0 = dOMNodePointer1.asPath();
      assertEquals("/processing-instruction('No write method')[1]", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.ITALY;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      String string0 = dOMNodePointer0.asPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      ElementDefinitionImpl elementDefinitionImpl0 = new ElementDefinitionImpl(hTMLDocumentImpl0, "count");
      Locale locale0 = Locale.JAPAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(elementDefinitionImpl0, locale0);
      QName qName0 = new QName("|ACd'Rh%T ");
      // Undeclared exception!
      try { 
        dOMNodePointer0.createChild((JXPathContext) null, qName0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLIsIndexElementImpl hTMLIsIndexElementImpl0 = new HTMLIsIndexElementImpl(hTMLDocumentImpl0, ":*O9a,&p<G#^H");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLIsIndexElementImpl0, (Locale) null);
      QName qName0 = dOMNodePointer0.getName();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) qName0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.createChild(jXPathContext0, qName0, Integer.MIN_VALUE);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: 
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.CANADA_FRENCH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      dOMNodePointer0.setValue((Object) null);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.ITALY;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      String string0 = dOMNodePointer0.getDefaultNamespaceURI();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLLabelElementImpl hTMLLabelElementImpl0 = new HTMLLabelElementImpl(hTMLDocumentImpl0, "xmlns");
      Locale locale0 = Locale.CHINA;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLLabelElementImpl0, locale0);
      String string0 = dOMNodePointer0.getNamespaceURI("xmlns");
      assertNotNull(string0);
      assertEquals("http://www.w3.org/2000/xmlns/", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Locale locale0 = new Locale("", "");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, "");
      String string0 = dOMNodePointer0.getNamespaceURI("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Comment comment0 = hTMLDocumentImpl0.createComment("&quot;");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("&quot;");
      boolean boolean0 = DOMNodePointer.testNode((Node) comment0, (NodeTest) processingInstructionTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLLinkElementImpl hTMLLinkElementImpl0 = new HTMLLinkElementImpl(hTMLDocumentImpl0, "S#h010OwvhOBY2");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLLinkElementImpl0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = DOMNodePointer.testNode((Node) null, (NodeTest) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
      Object object0 = dOMNodePointer0.getBaseValue();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Comment comment0 = hTMLDocumentImpl0.createComment((String) null);
      Locale locale0 = Locale.ITALY;
      hTMLDocumentImpl0.appendChild(comment0);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(comment0, locale0, (String) null);
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLDocumentImpl0);
      int int0 = dOMNodePointer1.compareChildNodePointers(dOMNodePointer1, dOMNodePointer0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.TAIWAN;
      DocumentType documentType0 = hTMLDocumentImpl0.createDocumentType("preserve", "preserve", (String) null);
      DocumentImpl documentImpl0 = new DocumentImpl(documentType0, true);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "ZIPaR:<PzcZ}9m|0T");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, documentType0);
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(dOMNodePointer1, documentImpl0);
      int int0 = dOMNodePointer2.compareChildNodePointers(dOMNodePointer1, dOMNodePointer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.TAIWAN;
      hTMLDocumentImpl0.lookupNamespaceURI("preserve");
      DocumentType documentType0 = hTMLDocumentImpl0.createDocumentType("preserve", "preserve", (String) null);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "ZIPaR:<PzcZ}9m|0T");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, documentType0);
      int int0 = dOMNodePointer0.compareChildNodePointers(dOMNodePointer1, dOMNodePointer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      AttrNSImpl attrNSImpl0 = new AttrNSImpl();
      Locale locale0 = Locale.CANADA_FRENCH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(attrNSImpl0, locale0, "~2Jf06'Qa'");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "http://www.w3.org/XML/1998/namespace");
      int int0 = dOMNodePointer1.compareChildNodePointers(dOMNodePointer1, dOMNodePointer0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      AttrNSImpl attrNSImpl0 = new AttrNSImpl();
      Locale locale0 = Locale.CANADA_FRENCH;
      WMLTdElementImpl wMLTdElementImpl0 = new WMLTdElementImpl((WMLDocumentImpl) null, "]");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(wMLTdElementImpl0, locale0, "0h5;~I3");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, attrNSImpl0);
      int int0 = dOMNodePointer0.compareChildNodePointers(dOMNodePointer1, dOMNodePointer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) variablePointer0);
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.KOREA;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "");
      dOMNodePointer0.namespaceIterator();
      DOMNodePointer dOMNodePointer1 = (DOMNodePointer)dOMNodePointer0.getPointerByID(jXPathContext0, "");
      assertFalse(dOMNodePointer1.isAttribute());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.KOREA;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "~>\"");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      WMLBigElementImpl wMLBigElementImpl0 = new WMLBigElementImpl(wMLDocumentImpl0, "D.xw<M]#UeKnEt");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) wMLBigElementImpl0);
      NullPointer nullPointer0 = (NullPointer)dOMNodePointer0.getPointerByID(jXPathContext0, ":");
      assertFalse(nullPointer0.isContainer());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLHeadElementImpl hTMLHeadElementImpl0 = new HTMLHeadElementImpl(hTMLDocumentImpl0, "A");
      Locale locale0 = Locale.JAPANESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLHeadElementImpl0, locale0);
      NullPointer nullPointer0 = (NullPointer)dOMNodePointer0.getPointerByID((JXPathContext) null, "<<unknown namespace>>");
      assertTrue(nullPointer0.isLeaf());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.KOREA;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      dOMNodePointer0.getNamespaceURI("*,=e8,bVEb_hJW");
      Object object0 = dOMNodePointer0.getValue();
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.US;
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, "^!e qLOpY:~!>P(2N", (String) null);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(processingInstructionImpl0, locale0, "org.apache.wml.dom.WMLTemplateElementImpl");
      Object object0 = dOMNodePointer0.getValue();
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
      CDATASectionImpl cDATASectionImpl0 = new CDATASectionImpl(pSVIDocumentImpl0, "b44ZG`[]BtLH<k");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(cDATASectionImpl0, (Locale) null, "8b`&?@vkeLi]PNAy");
      Object object0 = dOMNodePointer0.getValue();
      assertEquals("b44ZG`[]BtLH<k", object0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      TextImpl textImpl0 = new TextImpl();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(textImpl0, locale0, "{?Ey?");
      Object object0 = dOMNodePointer0.getValue();
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      CommentImpl commentImpl0 = new CommentImpl(hTMLDocumentImpl0, (String) null);
      Locale locale0 = Locale.CANADA;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(commentImpl0, locale0, "j");
      Object object0 = dOMNodePointer0.getValue();
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      CommentImpl commentImpl0 = new CommentImpl(hTMLDocumentImpl0, "b44ZG`[]BtLH<k");
      Locale locale0 = Locale.CANADA;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(commentImpl0, locale0, "zh");
      Object object0 = dOMNodePointer0.getValue();
      assertEquals("b44ZG`[]BtLH<k", object0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLLabelElementImpl hTMLLabelElementImpl0 = new HTMLLabelElementImpl(hTMLDocumentImpl0, "xmlns");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "^Oro!]9BZI,@E`Y)~$");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) hTMLParagraphElementImpl0);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLLabelElementImpl0, locale0);
      QName qName0 = dOMNodePointer0.getName();
      dOMNodePointer0.createAttribute(jXPathContext0, qName0);
      String string0 = dOMNodePointer0.getNamespaceURI();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      String string0 = DOMNodePointer.getNamespaceURI((Node) hTMLDocumentImpl0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(false);
      PSVIAttrNSImpl pSVIAttrNSImpl0 = new PSVIAttrNSImpl(deferredDocumentImpl0, "Unknown namespace prefix: ", "Unknown namespace prefix: ", "Unknown namespace prefix: ");
      String string0 = DOMNodePointer.getPrefix(pSVIAttrNSImpl0);
      assertEquals("Unknown namespace prefix", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLLabelElementImpl hTMLLabelElementImpl0 = new HTMLLabelElementImpl(hTMLDocumentImpl0, "xmlns");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLLabelElementImpl0, locale0);
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLLabelElementImpl0);
      boolean boolean0 = dOMNodePointer0.equals(dOMNodePointer1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLLabelElementImpl hTMLLabelElementImpl0 = new HTMLLabelElementImpl(hTMLDocumentImpl0, "xmlns");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLLabelElementImpl0);
      boolean boolean0 = dOMNodePointer1.equals(dOMNodePointer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      CommentImpl commentImpl0 = new CommentImpl(hTMLDocumentImpl0, "b44ZG`[]BtLH<k");
      Locale locale0 = Locale.CANADA;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(commentImpl0, locale0, "zh");
      boolean boolean0 = dOMNodePointer0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLHeadElementImpl hTMLHeadElementImpl0 = new HTMLHeadElementImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
      Locale locale0 = Locale.FRENCH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLHeadElementImpl0, locale0);
      boolean boolean0 = dOMNodePointer0.equals(dOMNodePointer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      AttrNSImpl attrNSImpl0 = new AttrNSImpl();
      Locale locale0 = Locale.CANADA_FRENCH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(attrNSImpl0, locale0, "~2Jf06'Qa'");
      String string0 = dOMNodePointer0.asPath();
      assertEquals("id('~2Jf06&apos;Qa&apos;')", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TextImpl textImpl0 = new TextImpl();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(textImpl0, locale0);
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLElement hTMLElement0 = hTMLDocumentImpl0.getBody();
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLElement0);
      String string0 = dOMNodePointer1.asPath();
      assertEquals("/text()[1]/BODY[1]", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.GERMAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, (String) null);
      QName qName0 = dOMNodePointer0.getName();
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, locale0, locale0);
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "')", "http://www.w3.org/XML/1998/namespace", "<<unknown namespace>>");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      WMLTdElementImpl wMLTdElementImpl0 = new WMLTdElementImpl(wMLDocumentImpl0, "q5\"*hR.hO");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(nodePointer0, wMLTdElementImpl0);
      WMLPElementImpl wMLPElementImpl0 = new WMLPElementImpl(wMLDocumentImpl0, "q5\"*hR.hO");
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(dOMNodePointer1, wMLPElementImpl0);
      String string0 = dOMNodePointer2.asPath();
      assertEquals("/q5\"*hR.hO[1]", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      ElementDefinitionImpl elementDefinitionImpl0 = new ElementDefinitionImpl(hTMLDocumentImpl0, "count");
      Locale locale0 = Locale.JAPAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(elementDefinitionImpl0, locale0);
      String string0 = dOMNodePointer0.asPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      CommentImpl commentImpl0 = new CommentImpl(hTMLDocumentImpl0, "b44ZG`[]BtLH<k");
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("|]ZSvyIk.pn", "b44ZG`[]BtLH<k");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, commentImpl0);
      String string0 = dOMNodePointer0.asPath();
      assertEquals("$|]ZSvyIk.pn:b44ZG`[]BtLH<k", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(false);
      EntityImpl entityImpl0 = new EntityImpl(deferredDocumentImpl0, (String) null);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, entityImpl0);
      dOMNodePointer0.printPointerChain();
      assertTrue(dOMNodePointer0.isNode());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.CANADA_FRENCH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "not");
      EntityReferenceImpl entityReferenceImpl0 = new EntityReferenceImpl(hTMLDocumentImpl0, "o?k(T");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, entityReferenceImpl0);
      String string0 = dOMNodePointer1.asPath();
      assertEquals("id('not')", string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.JAPANESE;
      CDATASectionImpl cDATASectionImpl0 = new CDATASectionImpl(hTMLDocumentImpl0, "<<unknown namespace>>");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(cDATASectionImpl0, locale0);
      String string0 = dOMNodePointer0.asPath();
      assertEquals("/text()[1]", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TextImpl textImpl0 = new TextImpl();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(textImpl0, locale0);
      String string0 = dOMNodePointer0.asPath();
      assertEquals("/text()[1]", string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      AttrNSImpl attrNSImpl0 = new AttrNSImpl();
      Locale locale0 = Locale.FRENCH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(attrNSImpl0, locale0);
      String string0 = dOMNodePointer0.asPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLHeadElementImpl hTMLHeadElementImpl0 = new HTMLHeadElementImpl(hTMLDocumentImpl0, "A");
      Locale locale0 = Locale.JAPANESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLHeadElementImpl0, locale0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.remove();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot remove root DOM node
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl0, "F-]0*m?");
      HTMLElement hTMLElement0 = hTMLTableElementImpl0.createTHead();
      Locale locale0 = new Locale("F-]0*m?", "F-]0*m?");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLElement0, locale0);
      dOMNodePointer0.remove();
      assertFalse(dOMNodePointer0.isAttribute());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLHeadElementImpl hTMLHeadElementImpl0 = new HTMLHeadElementImpl(hTMLDocumentImpl0, "[");
      Locale locale0 = Locale.JAPANESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLHeadElementImpl0, locale0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "[");
      QName qName0 = new QName("o(fdjuiOUr{ kTI^Do", "http://www.w3.org/XML/1998/namespace");
      // Undeclared exception!
      try { 
        dOMNodePointer0.createAttribute(jXPathContext0, qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown namespace prefix: o(fdjuiOUr{ kTI^Do
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLIsIndexElementImpl hTMLIsIndexElementImpl0 = new HTMLIsIndexElementImpl(hTMLDocumentImpl0, "org.apache.html.dom.HTMLIsIndexElementImpl");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLIsIndexElementImpl0, (Locale) null);
      QName qName0 = dOMNodePointer0.getName();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "org.apache.html.dom.HTMLIsIndexElementImpl");
      dOMNodePointer0.createAttribute(jXPathContext0, qName0);
      dOMNodePointer0.createAttribute(jXPathContext0, qName0);
      assertEquals("ORG.APACHE.HTML.DOM.HTMLISINDEXELEMENTIMPL", qName0.toString());
      assertEquals("ORG.APACHE.HTML.DOM.HTMLISINDEXELEMENTIMPL", qName0.getName());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.CHINESE;
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/", "org.apache.commons.jxpath.ri.model.VariablePointer");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(processingInstructionImpl0, locale0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.setValue(dOMNodePointer0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // HIERARCHY_REQUEST_ERR: An attempt was made to insert a node where it is not permitted. 
         //
         verifyException("org.apache.xerces.dom.NodeImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      dOMNodePointer0.setValue(dOMNodePointer0);
      assertTrue(dOMNodePointer0.isNode());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLIFrameElementImpl hTMLIFrameElementImpl0 = new HTMLIFrameElementImpl(hTMLDocumentImpl0, "<<unknown namespace>>");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLIFrameElementImpl0, locale0, "");
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "", "<<unknown namespace>>", "h?won");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      PSVIAttrNSImpl pSVIAttrNSImpl0 = new PSVIAttrNSImpl(wMLDocumentImpl0, "iname", "WA-qFXy");
      // Undeclared exception!
      try { 
        dOMNodePointer0.setValue(pSVIAttrNSImpl0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // WRONG_DOCUMENT_ERR: A node is used in a different document than the one that created it.
         //
         verifyException("org.apache.xerces.dom.ParentNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.US;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      HTMLStyleElementImpl hTMLStyleElementImpl0 = new HTMLStyleElementImpl(hTMLDocumentImpl0, "Vw.{7O}$I");
      dOMNodePointer0.setValue(hTMLStyleElementImpl0);
      assertEquals(1, dOMNodePointer0.getLength());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      QName qName0 = new QName("ORGAPACHE.COMMONS.JXPATH.RI.MODELCONTAINER.CONTAINERPOINTERFACTORY");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, hTMLDocumentImpl0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.setValue(variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: ORGAPACHE.COMMONS.JXPATH.RI.MODELCONTAINER.CONTAINERPOINTERFACTORY
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.KOREA;
      Text text0 = hTMLDocumentImpl0.createTextNode("{?Ey?");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(text0, locale0);
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      WMLGoElementImpl wMLGoElementImpl0 = new WMLGoElementImpl(wMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      dOMNodePointer0.setValue(wMLGoElementImpl0);
      assertTrue(dOMNodePointer0.isNode());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.JAPANESE;
      CDATASectionImpl cDATASectionImpl0 = new CDATASectionImpl(hTMLDocumentImpl0, "<<unknown namespace>>");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(cDATASectionImpl0, locale0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.setValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Text text0 = hTMLDocumentImpl0.createTextNode("h5djVR");
      Locale locale0 = Locale.US;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(text0, locale0);
      // Undeclared exception!
      try { 
        dOMNodePointer1.setValue(dOMNodePointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.JAPANESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      boolean boolean0 = dOMNodePointer0.isLanguage("<<unknown namespace>>");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLLabelElementImpl hTMLLabelElementImpl0 = new HTMLLabelElementImpl(hTMLDocumentImpl0, "META");
      Locale locale0 = Locale.KOREA;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLLabelElementImpl0, locale0);
      boolean boolean0 = dOMNodePointer0.isLeaf();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, (String) null);
      dOMNodePointer0.namespaceIterator();
      boolean boolean0 = dOMNodePointer0.isLeaf();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl0, "[|#");
      HTMLTableSectionElementImpl hTMLTableSectionElementImpl0 = (HTMLTableSectionElementImpl)hTMLTableElementImpl0.createTFoot();
      HTMLTableRowElementImpl hTMLTableRowElementImpl0 = (HTMLTableRowElementImpl)hTMLTableSectionElementImpl0.insertRow(3);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, hTMLTableRowElementImpl0);
      dOMNodePointer0.getDefaultNamespaceURI();
      String string0 = dOMNodePointer0.getDefaultNamespaceURI();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.ITALY;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      dOMNodePointer0.getNamespaceURI("not");
      String string0 = dOMNodePointer0.getNamespaceURI("not");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.CANADA_FRENCH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      String string0 = dOMNodePointer0.getNamespaceURI((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.ITALY;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "Q?P4Y'Y`GnC0y<6");
      dOMNodePointer0.getNamespaceResolver();
      NamespaceResolver namespaceResolver0 = dOMNodePointer0.getNamespaceResolver();
      assertFalse(namespaceResolver0.isSealed());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      CommentImpl commentImpl0 = new CommentImpl(hTMLDocumentImpl0, "b44ZG`[]BtLH<k");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(commentImpl0, (Locale) null);
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace", "'[%5n;VNM*LH<O82#+", "'[%5n;VNM*LH<O82#+");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(wMLDocumentImpl0, "G", "'[%5n;VNM*LH<O82#+");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, processingInstructionImpl0);
      QName qName0 = dOMNodePointer1.getName();
      ElementImpl elementImpl0 = new ElementImpl(hTMLDocumentImpl0, "STYLE");
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(dOMNodePointer0, elementImpl0);
      // Undeclared exception!
      try { 
        dOMNodePointer2.createAttribute((JXPathContext) null, qName0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.GERMAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, (String) null);
      QName qName0 = dOMNodePointer0.getName();
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, locale0, locale0);
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "')", "http://www.w3.org/XML/1998/namespace", "<<unknown namespace>>");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      WMLTdElementImpl wMLTdElementImpl0 = new WMLTdElementImpl(wMLDocumentImpl0, "q5\"*hR.hO");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(nodePointer0, wMLTdElementImpl0);
      String string0 = dOMNodePointer1.asPath();
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace", "http://www.w3.org/2000/xmlns/");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.JXPathBasicBeanInfo");
      boolean boolean0 = DOMNodePointer.testNode((Node) processingInstructionImpl0, (NodeTest) processingInstructionTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLDocumentImpl0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      Comment comment0 = hTMLDocumentImpl0.createComment("http://www.w3.org/2000/xmlns/");
      boolean boolean0 = DOMNodePointer.testNode((Node) comment0, (NodeTest) nodeTypeTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLDocumentImpl0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      CDATASectionImpl cDATASectionImpl0 = new CDATASectionImpl(hTMLDocumentImpl0, "uh");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      boolean boolean0 = DOMNodePointer.testNode((Node) cDATASectionImpl0, (NodeTest) nodeTypeTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLDocumentImpl0, (NodeTest) nodeTypeTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLHeadElementImpl hTMLHeadElementImpl0 = new HTMLHeadElementImpl(hTMLDocumentImpl0, "org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest@0000000011");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLHeadElementImpl0, (NodeTest) nodeTypeTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLLabelElementImpl hTMLLabelElementImpl0 = new HTMLLabelElementImpl(hTMLDocumentImpl0, "xmlns");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLLabelElementImpl0, locale0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(286);
      boolean boolean0 = dOMNodePointer0.testNode((NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      AttrNSImpl attrNSImpl0 = new AttrNSImpl();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      boolean boolean0 = DOMNodePointer.testNode((Node) attrNSImpl0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      TextImpl textImpl0 = new TextImpl();
      boolean boolean0 = DOMNodePointer.testNode((Node) textImpl0, (NodeTest) nodeTypeTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      AttrNSImpl attrNSImpl0 = new AttrNSImpl();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      boolean boolean0 = DOMNodePointer.testNode((Node) attrNSImpl0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace", "<<unknown namespace>>");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
      boolean boolean0 = DOMNodePointer.testNode((Node) processingInstructionImpl0, (NodeTest) nodeTypeTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLSelectElementImpl hTMLSelectElementImpl0 = new HTMLSelectElementImpl(hTMLDocumentImpl0, "!=");
      QName qName0 = new QName("!=", "!=");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, " (");
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLSelectElementImpl0, (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTextAreaElementImpl hTMLTextAreaElementImpl0 = new HTMLTextAreaElementImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLTextAreaElementImpl0, (Locale) null, "a?c<vV!0");
      QName qName0 = dOMNodePointer0.getName();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "5':J");
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLTextAreaElementImpl0, (NodeTest) nodeNameTest0);
      assertEquals("HTTP://WWW.W3.ORG/XML/1998/NAMESPACE", nodeNameTest0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLSelectElementImpl hTMLSelectElementImpl0 = new HTMLSelectElementImpl(hTMLDocumentImpl0, "!=");
      QName qName0 = new QName("!=", "!=");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLSelectElementImpl0, (NodeTest) nodeNameTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl0, "[|#");
      HTMLTableSectionElementImpl hTMLTableSectionElementImpl0 = (HTMLTableSectionElementImpl)hTMLTableElementImpl0.createTFoot();
      HTMLTableRowElementImpl hTMLTableRowElementImpl0 = (HTMLTableRowElementImpl)hTMLTableSectionElementImpl0.insertRow(3);
      QName qName0 = new QName("RB%dx{f/JziMhAA;.d");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLTableRowElementImpl0, (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      QName qName0 = new QName("xmlns");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLDocumentImpl0, (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace", "http://www.w3.org/2000/xmlns/", "http://www.w3.org/XML/1998/namespace");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      Element element0 = wMLDocumentImpl0.createElementNS("<<unknown namespace>>", "http://www.w3.org/2000/xmlns/", "http://www.w3.or1/2000/xmlns/");
      QName qName0 = new QName("N00,/", "http://www.w3.or1/2000/xmlns/");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      boolean boolean0 = DOMNodePointer.testNode((Node) element0, (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLHeadElementImpl hTMLHeadElementImpl0 = new HTMLHeadElementImpl(hTMLDocumentImpl0, "[");
      Locale locale0 = Locale.JAPANESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLHeadElementImpl0, locale0);
      boolean boolean0 = dOMNodePointer0.testNode((NodeTest) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(pSVIDocumentImpl0, "<<unknown namespace>>", ">Ql~lk,=Pj=(l4d");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) processingInstructionImpl0);
      // Undeclared exception!
      try { 
        jXPathContext0.createPathAndSetValue("xml:space", "72ldb(2p^X=yVf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Exception trying to create xpath xml:space; Factory is not set on the JXPathContext - cannot create path: /processing-instruction('<<unknown namespace>>')[1]
         //
         verifyException("org.apache.commons.jxpath.ri.JXPathContextReferenceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLIsIndexElementImpl hTMLIsIndexElementImpl0 = new HTMLIsIndexElementImpl(hTMLDocumentImpl0, ":*O9a,&p<G#^H");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLIsIndexElementImpl0, (Locale) null);
      QName qName0 = dOMNodePointer0.getName();
      dOMNodePointer0.attributeIterator(qName0);
      assertEquals(":*O9A,&P<G#^H", qName0.toString());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.US;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) null);
      Element element0 = wMLDocumentImpl0.createElementNS("<<unknown namespace>>", "<<unknown namespace>>", "http://www.w3.org/XML/1998/namespace");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, element0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) wMLDocumentImpl0);
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "LVhdFfN\"");
      // Undeclared exception!
      dOMNodePointer1.createChild(jXPathContext0, qName0, (-504), (Object) jXPathContext0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl0, "[|#");
      HTMLTableSectionElementImpl hTMLTableSectionElementImpl0 = (HTMLTableSectionElementImpl)hTMLTableElementImpl0.createTFoot();
      HTMLTableRowElementImpl hTMLTableRowElementImpl0 = (HTMLTableRowElementImpl)hTMLTableSectionElementImpl0.insertRow(3);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, hTMLTableRowElementImpl0);
      boolean boolean0 = dOMNodePointer0.isActual();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLOptionElementImpl hTMLOptionElementImpl0 = new HTMLOptionElementImpl(hTMLDocumentImpl0, "/");
      Locale locale0 = Locale.CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLOptionElementImpl0, locale0, "/");
      dOMNodePointer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      int int0 = dOMNodePointer0.getLength();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.TAIWAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "ZIPaR:<PzcZ}9m|0T");
      NodePointer nodePointer0 = dOMNodePointer0.namespacePointer("http://www.w3.org/XML/1998/namespace");
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.US;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) wMLDocumentImpl0);
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "LVhdFfN\"");
      // Undeclared exception!
      try { 
        dOMNodePointer0.createChild(jXPathContext0, qName0, (-504), (Object) jXPathContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: 
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.GERMAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, (String) null);
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "')", "http://www.w3.org/XML/1998/namespace", "<<unknown namespace>>");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      WMLPElementImpl wMLPElementImpl0 = new WMLPElementImpl(wMLDocumentImpl0, "q5\"*hR.hO");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, wMLPElementImpl0);
      String string0 = dOMNodePointer1.asPath();
      assertEquals("/q5\"*hR.hO[1]", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Locale locale0 = new Locale("", "");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, "");
      boolean boolean0 = dOMNodePointer0.isCollection();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      QName qName0 = new QName("xml");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      HTMLOListElementImpl hTMLOListElementImpl0 = new HTMLOListElementImpl((HTMLDocumentImpl) null, "<<unknown namespace>>");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, hTMLOListElementImpl0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.getLanguage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      WMLTdElementImpl wMLTdElementImpl0 = new WMLTdElementImpl((WMLDocumentImpl) null, "]");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(wMLTdElementImpl0, locale0, "0h5;~I3");
      int int0 = dOMNodePointer0.compareChildNodePointers(dOMNodePointer0, dOMNodePointer0);
      assertEquals(0, int0);
  }
}
