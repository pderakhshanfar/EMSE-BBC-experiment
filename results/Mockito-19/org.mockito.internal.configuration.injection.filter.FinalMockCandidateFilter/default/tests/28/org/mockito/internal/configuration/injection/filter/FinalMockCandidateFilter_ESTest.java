/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 01 13:27:18 GMT 2021
 */

package org.mockito.internal.configuration.injection.filter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Field;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mockito.internal.configuration.injection.filter.FinalMockCandidateFilter;
import org.mockito.internal.configuration.injection.filter.OngoingInjecter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FinalMockCandidateFilter_ESTest extends FinalMockCandidateFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FinalMockCandidateFilter finalMockCandidateFilter0 = new FinalMockCandidateFilter();
      Integer integer0 = new Integer((-1863));
      linkedList0.add((Object) integer0);
      List<Object> list0 = linkedList0.subList(1, 1);
      linkedList0.addLast("OKJL?!}/3X]d8x)1");
      // Undeclared exception!
      try { 
        finalMockCandidateFilter0.filterCandidate(list0, (Field) null, "OKJL?!}/3X]d8x)1");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FinalMockCandidateFilter finalMockCandidateFilter0 = new FinalMockCandidateFilter();
      // Undeclared exception!
      try { 
        finalMockCandidateFilter0.filterCandidate((Collection<Object>) null, (Field) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.internal.configuration.injection.filter.FinalMockCandidateFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FinalMockCandidateFilter finalMockCandidateFilter0 = new FinalMockCandidateFilter();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      OngoingInjecter ongoingInjecter0 = finalMockCandidateFilter0.filterCandidate(linkedList0, (Field) null, linkedList0);
      assertNotNull(ongoingInjecter0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FinalMockCandidateFilter finalMockCandidateFilter0 = new FinalMockCandidateFilter();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) finalMockCandidateFilter0);
      OngoingInjecter ongoingInjecter0 = finalMockCandidateFilter0.filterCandidate(linkedList0, (Field) null, linkedList0);
      assertNotNull(ongoingInjecter0);
  }
}
