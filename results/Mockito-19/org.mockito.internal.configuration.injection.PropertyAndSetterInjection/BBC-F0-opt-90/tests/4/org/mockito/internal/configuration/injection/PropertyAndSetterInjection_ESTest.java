/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 18:07:22 GMT 2021
 */

package org.mockito.internal.configuration.injection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Field;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mockito.internal.configuration.injection.PropertyAndSetterInjection;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PropertyAndSetterInjection_ESTest extends PropertyAndSetterInjection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PropertyAndSetterInjection propertyAndSetterInjection0 = new PropertyAndSetterInjection();
      Object object0 = new Object();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(linkedList0);
      // Undeclared exception!
      try { 
        propertyAndSetterInjection0.processInjection((Field) null, object0, linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.internal.util.reflection.AccessibilityChanger", e);
      }
  }
}
