/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 03:05:59 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Entities;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Attribute_ESTest extends Attribute_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attribute attribute0 = new Attribute("allowfullscreen", "allowfullscreen");
      String string0 = attribute0.html();
      assertEquals("allowfullscreen", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("allowfullscreen", "");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertEquals("", attribute0.getValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attribute attribute0 = new Attribute("^`X7[M`}", (String) null);
      StringWriter stringWriter0 = new StringWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      attribute0.html((Appendable) stringWriter0, document_OutputSettings0);
      assertEquals("^`X7[M`}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Attribute attribute0 = new Attribute("<Mo21", "<Mo21");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = attribute0.shouldCollapseAttribute(document_OutputSettings0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = Attribute.shouldCollapseAttribute("typemustmatch", "typemustmatch", document_OutputSettings0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("mark");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Attribute attribute0 = new Attribute("data-|ROSvF&gZgYJyj$+W%\"", "data-|ROSvF&gZgYJyj$+W%\"");
      boolean boolean0 = attribute0.isDataAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = Attribute.isBooleanAttribute("compact");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = Attribute.isBooleanAttribute("<Mo21");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attribute attribute0 = new Attribute("ZCH`JK4s0dJ", (String) null);
      String string0 = attribute0.getValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("data-", "H %>1OY4W:8&7aJK2");
      String string0 = attribute0.getValue();
      assertEquals("data-", attribute0.getKey());
      assertEquals("H %>1OY4W:8&7aJK2", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attribute attribute0 = new Attribute("readonly", "");
      String string0 = attribute0.getValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Attribute attribute0 = new Attribute("readonly", "");
      attribute0.getKey();
      assertEquals("", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute(" 84B[NBQZk 9)", "ds}A|x9>~Z^Zt^e9qN", attributes0);
      // Undeclared exception!
      try { 
        attribute0.shouldCollapseAttribute((Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.shouldCollapseAttribute(">Ot9?u7',_riKp", "Dbnm/t", (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attribute attribute0 = new Attribute("truespeed", "X");
      // Undeclared exception!
      try { 
        attribute0.setValue("X");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("o", "kUKR.[uC8^m");
      Attribute attribute0 = new Attribute("^j.(.]jd0", "o");
      attributes1.put(attribute0);
      String[] stringArray0 = new String[1];
      attributes0.vals = stringArray0;
      // Undeclared exception!
      try { 
        attribute0.setValue("8bES<H+.E76A@4P");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("[j+_cs^", "Fbf%WH3t");
      Attributes attributes1 = attributes0.put(attribute0);
      attributes1.keys = null;
      // Undeclared exception!
      try { 
        attribute0.setKey("\"WyGaTB");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Attribute attribute0 = new Attribute("j7n0!itWi<b%d:}jzH", "j7n0!itWi<b%d:}jzH");
      // Undeclared exception!
      try { 
        attribute0.setKey((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("track", "d=y9Tx5x&&I");
      Attributes attributes1 = attributes0.put(attribute0);
      Attributes attributes2 = attributes1.put("d=y9Tx5x&&I", true);
      String[] stringArray0 = new String[0];
      attributes2.keys = stringArray0;
      // Undeclared exception!
      try { 
        attribute0.setKey("GHxu+");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.isDataAttribute((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.isBooleanAttribute((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Array must not contain any null objects");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        Attribute.html("Array must not contain any null objects", (String) null, (Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        Attribute.html("org.jsoup.nodes.Entities$CoreCharset", "rQa-)Djor(>m", (Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        Attribute.html("9t0ihz6H/", "{Z+fA4<3b7e", (Appendable) charArrayWriter0, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        Attribute.html("reversed", "daWa-", (Appendable) pipedWriter0, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Attribute attribute0 = new Attribute("ZJ4rOespeed", "ZJ4rOespeed");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "ZJ4rOespeed");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        attribute0.html((Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("7e?vKZ%w8Tr", "");
      // Undeclared exception!
      try { 
        attribute0.html((Appendable) null, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Attribute attribute0 = new Attribute("reversed", (String) null);
      MockFileWriter mockFileWriter0 = new MockFileWriter("reversed", true);
      mockFileWriter0.close();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        attribute0.html((Appendable) mockFileWriter0, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.createFromEncoded("autofocus", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.createFromEncoded((String) null, "width must be > 0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("", "", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Attribute.html("", "", (Appendable) stringBuffer0, document_OutputSettings0);
      assertEquals(3, stringBuffer0.length());
      assertEquals("=\"\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Attribute attribute0 = new Attribute("Z</E8Vh]b'<o)|E", "Oata-");
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        attribute0.html((Appendable) charBuffer0, (Document.OutputSettings) null);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("ScriptDataEscapedEndTagOpen", "ScriptDataEscapedEndTagOpen");
      String string0 = attribute0.html();
      assertEquals("ScriptDataEscapedEndTagOpen=\"ScriptDataEscapedEndTagOpen\"", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("data-", "org.jsoup.nodes.Entities$CoreCharset");
      attribute0.hashCode();
      assertEquals("org.jsoup.nodes.Entities$CoreCharset", attribute0.getValue());
      assertEquals("data-", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("disabled", (String) null, attributes0);
      attribute0.hashCode();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Attribute attribute0 = new Attribute("Z", "vE+e|$>");
      Attributes attributes0 = new Attributes();
      Attribute attribute1 = new Attribute("Z", (String) null, attributes0);
      boolean boolean0 = attribute1.equals(attribute0);
      //  // Unstable assertion: assertTrue(attribute0.equals((Object)attribute1));
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("data-", "org.jsoup.nodes.Entities$CoreCharset");
      Attribute attribute1 = attribute0.clone();
      boolean boolean0 = attribute0.equals(attribute1);
      assertEquals("org.jsoup.nodes.Entities$CoreCharset", attribute1.getValue());
      assertEquals("data-", attribute1.getKey());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded(">Ot9iD?u7',_riKp", "ve");
      Attribute attribute1 = new Attribute("data-:eq(%d)", "nowrap");
      boolean boolean0 = attribute0.equals(attribute1);
      assertEquals(">Ot9iD?u7',_riKp", attribute0.getKey());
      assertEquals("ve", attribute0.getValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("DoctypeName", "BLZ^!7N1eU&N^|b Ju");
      boolean boolean0 = attribute0.equals("");
      assertEquals("DoctypeName", attribute0.getKey());
      assertEquals("BLZ^!7N1eU&N^|b Ju", attribute0.getValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("data-", "H %>1OY4W:8&7aJK2");
      boolean boolean0 = attribute0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals("H %>1OY4W:8&7aJK2", attribute0.getValue());
      assertEquals("data-", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Attribute attribute0 = new Attribute("X", "X");
      boolean boolean0 = attribute0.equals(attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Attribute attribute0 = new Attribute("@O9\"sW]v", (String) null);
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("wc-{GwA#QAc)+@P", "wc-{GwA#QAc)+@P", attributes0);
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("disabled", (String) null, attributes0);
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("GHxu+", "GHxu+", attributes0);
      String string0 = attribute0.toString();
      assertEquals("GHxu+=\"GHxu+\"", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      boolean boolean0 = Attribute.shouldCollapseAttribute("compact", "Iq05", document_OutputSettings1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("data-", "org.jsoup.nodes.Entities$CoreCharset");
      boolean boolean0 = attribute0.isDataAttribute();
      assertFalse(boolean0);
      assertEquals("data-", attribute0.getKey());
      assertEquals("org.jsoup.nodes.Entities$CoreCharset", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("data-P*w");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("w.k^u&b:>9ox ");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Attribute.html("_4(", (String) null, (Appendable) mockPrintStream0, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("data-", "org.jsoup.nodes.Entities$CoreCharset");
      Attributes attributes0 = new Attributes();
      attributes0.put(attribute0);
      attribute0.setValue("E_kNB~y-b6CV");
      assertEquals("E_kNB~y-b6CV", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("wc-{GwA#QAc)+@P", "wc-{GwA#QAc)+@P", attributes0);
      String string0 = attribute0.setValue("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("wc-{GwA#QAc)+@P", "wc-{GwA#QAc)+@P", attributes0);
      attribute0.setKey("wc-{GwA#QAc)+@P");
      assertEquals("wc-{GwA#QAc)+@P", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("track", "d=y9Tx5x&&I");
      attributes0.put(attribute0);
      assertEquals("track", attribute0.getKey());
      
      attribute0.setKey("GHxu+");
      assertEquals("d=y9Tx5x&&I", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded(">Ot9?u7',_riKp", "blockquote");
      assertEquals(">Ot9?u7',_riKp", attribute0.getKey());
      
      attribute0.setKey("Dbnm/t");
      assertEquals("blockquote", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Attribute attribute0 = new Attribute("defer", "");
      boolean boolean0 = attribute0.shouldCollapseAttribute(document_OutputSettings0);
      assertEquals("", attribute0.getValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Attribute attribute0 = new Attribute("ScriptDataDoubleEscapedDash", (String) null, (Attributes) null);
      Attribute attribute1 = attribute0.clone();
      boolean boolean0 = attribute0.equals(attribute1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Attribute attribute0 = new Attribute("^j.(.]jd0", "o");
      String string0 = attribute0.toString();
      assertEquals("^j.(.]jd0=\"o\"", string0);
  }
}
