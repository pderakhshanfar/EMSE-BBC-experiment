/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:56:33 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Attribute_ESTest extends Attribute_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("disabled", "disabled");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attribute attribute0 = new Attribute("WbV1", "WbV1");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(dataOutputStream0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      attribute0.html((Appendable) outputStreamWriter0, document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("disabled", "disabled");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = attribute0.shouldCollapseAttribute(document_OutputSettings0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = Attribute.shouldCollapseAttribute("LsGb", (String) null, document_OutputSettings0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = Attribute.shouldCollapseAttribute("default", "|cJWS@bWMMw]", document_OutputSettings0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("data-h3", "WbV1", attributes0);
      boolean boolean0 = attribute0.isDataAttribute();
      assertTrue(boolean0);
      assertEquals("WbV1", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = Attribute.isBooleanAttribute("allowfullscreen");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = Attribute.isBooleanAttribute("|cJWS@bWMMw]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attribute attribute0 = new Attribute("Z]O#H:.QzC", (String) null);
      String string0 = attribute0.getValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("&lt;", "&lt;");
      String string0 = attribute0.getValue();
      assertEquals("<", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("G.}B}`yaU{", "");
      String string0 = attribute0.getValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("&lt;", "&lt;");
      String string0 = attribute0.getKey();
      assertEquals("&lt;", string0);
      assertEquals("<", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.shouldCollapseAttribute("fqxo", "", (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("5Sn+qKn$0Uw1xG", "A7xHfuOg%.g8Pd&f~TN");
      // Undeclared exception!
      try { 
        attribute0.setValue("A7xHfuOg%.g8Pd&f~TN");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("g", "g");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("5Kq:108N/", true);
      Attributes attributes2 = attributes1.put(attribute0);
      String[] stringArray0 = new String[1];
      attributes2.keys = stringArray0;
      // Undeclared exception!
      try { 
        attribute0.setValue("5Kq:108N/");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("seamless", "=\"");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put(attribute0);
      Attributes attributes2 = attributes1.put("=\"", false);
      attributes2.keys = null;
      // Undeclared exception!
      try { 
        attribute0.setKey("=\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("&lt;", "&lt;");
      // Undeclared exception!
      try { 
        attribute0.setKey("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("Y`WDb7{iePE(J8", "org.jsoup.nodes.Attribute");
      Attributes attributes1 = attributes0.put(attribute0);
      Attributes attributes2 = attributes1.put("^\"u", "org.jsoup.nodes.Attribute");
      String[] stringArray0 = new String[0];
      attributes2.keys = stringArray0;
      // Undeclared exception!
      try { 
        attribute0.setKey("selected");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.isDataAttribute((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.isBooleanAttribute((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "f&$zc4");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        Attribute.html("", "f&$zc4", (Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        Attribute.html("F:N_tYG5", "3evsv=~4kdukh[x)", (Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        Attribute.html("iZ", "ismap", (Appendable) null, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        Attribute.html("hidden", "hidden", (Appendable) pipedWriter0, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Attribute attribute0 = new Attribute("E", "E");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "E");
      // Undeclared exception!
      try { 
        attribute0.html((Appendable) charBuffer0, (Document.OutputSettings) null);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("|cJWS@bWMMw]", "3?}");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      char[] charArray0 = new char[7];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        attribute0.html((Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("&lt;", "&lt;");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        attribute0.html((Appendable) null, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.createFromEncoded((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.createFromEncoded((String) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("", "", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute((String) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("Z]&kV24%HD", "Z]&kV24%HD");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        attribute0.html((Appendable) pipedWriter0, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Attribute attribute0 = new Attribute("novalidate", (String) null);
      attribute0.hashCode();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Attribute attribute0 = new Attribute("i/+'/kDWyM@SL", "cata-");
      attribute0.hashCode();
      assertEquals("cata-", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Attribute attribute0 = new Attribute("&lt;", (String) null);
      Attribute attribute1 = Attribute.createFromEncoded("&lt;", "nohref");
      boolean boolean0 = attribute0.equals(attribute1);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertTrue(attribute1.equals((Object)attribute0));
      //  // Unstable assertion: assertEquals("nohref", attribute1.getValue());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Attribute attribute0 = new Attribute("hidden", "hidden");
      Attribute attribute1 = attribute0.clone();
      boolean boolean0 = attribute0.equals(attribute1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("Unexpected count of entities loaded", "Unexpected count of entities loaded", attributes0);
      Attribute attribute1 = new Attribute(" Unexpected count of entities loaded=\"Unexpected count of entities loaded\" }E(mVx_t-~S=\"}E(mVx_t-~S\"", (String) null);
      boolean boolean0 = attribute0.equals(attribute1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("data-", "@u%jjBt/ta");
      boolean boolean0 = attribute0.equals("quirks");
      assertEquals("@u%jjBt/ta", attribute0.getValue());
      assertEquals("data-", attribute0.getKey());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("'B0/PZeMy", "'B0/PZeMy");
      boolean boolean0 = attribute0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Attribute attribute0 = new Attribute("Z", "den");
      boolean boolean0 = attribute0.equals(attribute0);
      assertTrue(boolean0);
      assertEquals("den", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Attribute attribute0 = new Attribute("20>l", (String) null);
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("&lt;", "&lt;");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertEquals("<", attribute0.getValue());
      assertEquals("&lt;", attribute0.getKey());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Attribute attribute0 = new Attribute("allowfullscreen", "allowfullscreen");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("U.$");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Attribute.html("data-reversed", "data-reversed", (Appendable) mockPrintWriter0, document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Attribute attribute0 = new Attribute("reversed", "");
      String string0 = attribute0.toString();
      assertEquals("", attribute0.getValue());
      assertEquals("reversed", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Attribute attribute0 = new Attribute("WbV1", "WbV1");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      boolean boolean0 = attribute0.shouldCollapseAttribute(document_OutputSettings0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("data-reversed");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("8|m-+8q#jaE7)`n+R");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("G^`J,}>v1");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Attribute.html("&lt;", (String) null, (Appendable) mockFileWriter0, document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("compact", "compact", attributes0);
      attribute0.setValue("hidden");
      assertEquals("hidden", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("data-", "@u%jjBt/ta");
      attributes0.put(attribute0);
      attribute0.setValue("~aY");
      assertEquals("~aY", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("compact", "compact", attributes0);
      attribute0.setKey("typemustmatch");
      assertEquals("typemustmatch", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("Y`WDb7{iePE(J8", "org.jsoup.nodes.Attribute");
      attributes0.put(attribute0);
      assertEquals("Y`WDb7{iePE(J8", attribute0.getKey());
      
      attribute0.setKey("selected");
      assertEquals("org.jsoup.nodes.Attribute", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("&lt;", "&lt;");
      assertEquals("&lt;", attribute0.getKey());
      
      attribute0.setKey("(l2>O'5CR");
      assertEquals("<", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Attribute attribute0 = new Attribute("i/+'/kDWyM@SL", "cata-");
      // Undeclared exception!
      try { 
        attribute0.shouldCollapseAttribute((Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("data-", "@u%jjBt/ta");
      String string0 = attribute0.toString();
      assertEquals("data-=\"@u%jjBt/ta\"", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Attribute attribute0 = new Attribute("&lt;", (String) null);
      Attribute attribute1 = attribute0.clone();
      boolean boolean0 = attribute0.equals(attribute1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("data-", "@u%jjBt/ta");
      boolean boolean0 = attribute0.isDataAttribute();
      assertEquals("@u%jjBt/ta", attribute0.getValue());
      assertFalse(boolean0);
      assertEquals("data-", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("5Sn+qKn$0Uw1xG", "A7xHfuOg%.g8Pd&f~TN");
      attribute0.html();
  }
}
