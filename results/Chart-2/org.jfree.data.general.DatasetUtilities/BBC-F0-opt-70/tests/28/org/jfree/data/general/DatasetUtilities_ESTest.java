/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:03:13 GMT 2021
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.Connection;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeSet;
import java.util.Vector;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.KeyedValues;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.function.Function2D;
import org.jfree.data.function.LineFunction2D;
import org.jfree.data.function.NormalDistributionFunction2D;
import org.jfree.data.function.PolynomialFunction2D;
import org.jfree.data.function.PowerFunction2D;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DatasetUtilities;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.pie.PieDataset;
import org.jfree.data.statistics.BoxAndWhiskerItem;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Second;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatasetUtilities_ESTest extends DatasetUtilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double((-738.0));
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) double0, (Number) double0, (Number) integer0, (Number) double0, (Number) double0, (Number) double0, (Number) integer0, (Number) integer0, (List) stack0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) fixedMillisecond0, (Comparable) integer0);
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double(1.0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) double0, (Number) double0, (Number) double0, (Number) integer0, (Number) double0, (Number) integer0, (Number) double0, (Number) double0, (List) stack0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) fixedMillisecond0, (Comparable) fixedMillisecond0);
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[][] doubleArray0 = new double[8][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-2193.6502);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("jB$u\"", "jB$u\"", doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Double double0 = new Double(2120.278305);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0L, 1586.687918);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(powerFunction2D0, 95.0, (-290.99), (-4415), double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      double[][] doubleArray0 = new double[1][0];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) oHLCDataItemArray0, (Comparable[]) oHLCDataItemArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Integer integer0 = new Integer(717);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      defaultPieDataset0.setValue((Comparable) integer0, (Number) integer0);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) integer0, 1.0);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-970), (-970), 3268);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1.5, 3268, (-1113.546824), (-970), Double.NaN);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockDate mockDate0 = new MockDate(7, 7, (-1));
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 3494.0, (-964.29), 7, (-1), 579.2588559);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals((-964.29), number0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0.0, 0.0);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, 0.0, 7715.389999999999, 711, "Null 'visibleSeriesKeys' argument.");
      assertEquals(7715.389999999999, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Day day0 = new Day();
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-365), 2660.911641);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-365), 97.732867, 365, day0);
      assertEquals(365, xYSeries0.getItemCount());
      assertEquals((-6.08791561476885E131), xYSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(2, (-680.1298));
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-680.1298), 0.0, 2, "Av]^X3`?FQIRd_uY+");
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 2413.456344396875, (-1606.8), (-3278L), (-3278L), (-2009.7527069452));
      LineFunction2D lineFunction2D0 = new LineFunction2D(3522.53555801, (-3278L));
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-2103.4091), (-1606.8), 213, oHLCDataItem0);
      assertEquals(213, xYSeries0.getItemCount());
      assertEquals(5270612.93555801, xYSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultTableXYDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(365, 1, 0, 0, 365);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 97.732867, 365, 1.0, (-1095.01900599335), 183.740424677);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("The 'data' is null.", oHLCDataItemArray0);
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals(183.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 1, 2);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Range range0 = DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 2413.456344396875, (-1606.8), (-3278L), (-3278L), (-2009.7527069452));
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals((-2442.4), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Double double0 = new Double(0.0);
      Stack<Double> stack0 = new Stack<Double>();
      stack0.add(double0);
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, Double.NEGATIVE_INFINITY, (-2049), 11, 0.0, 1365.892);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultOHLCDataset0);
      Range range0 = intervalXYDelegate0.getDomainBounds(true);
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, false);
      assertEquals(1.3924092813195E12, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double(1058.0522);
      stack0.add(double0);
      MockDate mockDate0 = new MockDate(154, 266, 1377);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1120.1361326293, 2077.0, 1377, 1120.1361326293, 1058.0522);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultOHLCDataset0);
      Range range0 = intervalXYDelegate0.getDomainBounds(true);
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, true);
      assertEquals(1727.0, range1.getCentralValue(), 0.01);
      assertEquals(3.4691327999995E12, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double(499.6185552938047);
      stack0.add(double0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      Date date0 = Date.from(instant0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 0L, (-545.591695989455), (-4583.0419854), (-4583.0419854), 1231.214434043);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItemArray0[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(double0, oHLCDataItemArray0);
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, stack0, true);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double(13.0);
      stack0.add(double0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Month month0 = new Month();
      timeTableXYDataset0.add((TimePeriod) month0, (double) (-125), "d4@k?@5W\"d`P,q@OF3n");
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, stack0, false);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double(342.911);
      stack0.add(double0);
      MockDate mockDate0 = new MockDate((-1), (-1), 1377);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1448.4812932697669, 1377, (-6302.14688993), (-1), 1448.4812932697669);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, stack0, true);
      assertEquals((-2.1243168E12), range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-782.0);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-1.0), 1.7976931348623157E308, 2, 1019.0);
      Range range0 = DatasetUtilities.iterateRangeBounds(xYDataset0, false);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-527), 28, 1431655765);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-30000.0), 1.392409281319E12, 1, (-527), 384.7865);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals(6.9620464066E11, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("*ZzD1@xUQ[&,LAOSG", 13, 13);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(6.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.GERMANY;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      MockDate mockDate0 = new MockDate(1417, 5, 2131746901, (-1581), (-2078209981));
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      timeTableXYDataset0.add((TimePeriod) simpleTimePeriod0, (Number) integer0, "", false);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0);
      assertNotNull(range0);
      assertEquals((-30000.0), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Double double0 = new Double(365);
      Double double1 = new Double((-1013.7));
      Number[][] numberArray0 = new Number[1][5];
      Number[] numberArray1 = new Number[3];
      numberArray1[1] = (Number) double1;
      numberArray1[2] = (Number) double0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertEquals((-324.35), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Double double0 = new Double((-1013.7));
      Number[][] numberArray0 = new Number[1][5];
      Number[] numberArray1 = new Number[3];
      numberArray1[1] = (Number) double0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertEquals((-1013.7), range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 522;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = 2470.216957;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(1235.6084785, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[][] doubleArray0 = new double[9][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("TD1/uQ!", "TD1/uQ!", doubleArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][1];
      Number[] numberArray1 = new Number[1];
      Float float0 = new Float((-830.61584F));
      numberArray1[0] = (Number) float0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("!FmITQy,^XV|_Ly", "", numberArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Requires 'samples' > 1", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-970), (-970), 3268);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1.5, 3268, (-1113.546824), (-970), Double.NaN);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, true);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xIntervalSeriesCollection0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("The 'data' is null.", 365, 2);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-970), (-970), (-614));
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1.5, (-970), (-1113.547), (-970), Double.NaN);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 706.27085;
      doubleArray1[1] = 227.3711339;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray0[0];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the data array.", "TimePeriodAnchor.MIDDLE", doubleArray0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertEquals(706.27085, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 706.27085;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the data array.", "TimePeriodAnchor.MIDDLE", doubleArray0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertEquals(706.27085, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (double) 0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultBoxAndWhiskerCategoryDataset0, (-417), 18);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0, 0.0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'visibleSeriesKeys' argument.", "Null 'visibleSeriesKeys' argument.", doubleArray0);
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 2609.39);
      assertNotNull(range0);
      assertEquals(2609.39, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      Month month0 = new Month(mockDate0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) month0, (KeyedValues) defaultPieDataset0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, (-11), (-1));
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultWindDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MockDate mockDate0 = new MockDate(7, 7, 7);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 3494.0, 7, 7, 7, (-1418.9388335664576));
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertEquals(7.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("The 'data' is null.", 365, 2);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, false);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockDate mockDate0 = new MockDate(7, 7, (-1));
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 3494.0, (-964.29), 7, (-1), 579.2588559);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      Vector<Short> vector0 = new Vector<Short>();
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) vector0, (Range) null, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double((-440.552494));
      stack0.add(double0);
      MockDate mockDate0 = new MockDate((-2049), (-2049), (-2049));
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, Double.NEGATIVE_INFINITY, (-440.552494), (-2049), (-440.552494), (-440.552494));
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultOHLCDataset0);
      Range range0 = intervalXYDelegate0.getDomainBounds(true);
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, false);
      assertEquals((-440.552494), range1.getCentralValue(), 0.01);
      assertEquals((-7.24350815999995E13), range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double(221.60242925635157);
      stack0.add(double0);
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 221.60242925635157, 221.60242925635157, (-2049), 221.60242925635157, 221.60242925635157);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultOHLCDataset0);
      Range range0 = intervalXYDelegate0.getDomainBounds(true);
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, true);
      assertEquals((-2049.0), range1.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 2413.456344396875, (-1606.8), (-3278L), (-3278L), (-2009.7527069452));
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals(1671.2, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, false);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Double double0 = new Double((-738.0));
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.setValue((Number) double0, (Comparable) double0, (Comparable) double0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, false);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double(0.5);
      stack0.add(double0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.setValue((Number) double0, (Comparable) double0, (Comparable) double0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) stack0, true);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Double double0 = new Double(Double.NEGATIVE_INFINITY);
      Stack<Double> stack0 = new Stack<Double>();
      stack0.add(double0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.setValue((Number) double0, (Comparable) double0, (Comparable) double0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) stack0, true);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-11);
      double[][] doubleArray1 = new double[3][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("5B_", "5B_", doubleArray0);
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Float float0 = new Float(30.0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((Number) float0, (Number) float0, "", false);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Requires 'samples' > 1", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((-1056.33691607), 1154.5246, "'position' out of bounds.");
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertEquals((-1056.33691607), range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double(1927.7825528112);
      stack0.add(double0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 3678L);
      timeTableXYDataset0.add((TimePeriod) simpleTimePeriod0, 1927.7825528112, "?v");
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) stack0, false);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double((-440.552494));
      stack0.add(double0);
      MockDate mockDate0 = new MockDate((-2049), (-2049), (-2049));
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, Double.NEGATIVE_INFINITY, (-440.552494), (-2049), (-440.552494), (-440.552494));
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) stack0, true);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) yIntervalSeriesCollection0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 2413.456344396875, (-1606.8), (-3278L), (-3278L), (-2009.7527069452));
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-970), (-970), (-614));
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1.5, (-970), (-1113.547), (-970), Double.NaN);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 1202;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      assertEquals(601.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("TD1/uQ!", "", doubleArray0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Day day0 = new Day();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) day0);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Long long0 = new Long((-3014L));
      categoryTableXYDataset0.add((Number) long0, (Number) long0, "E u7+H>A*kf\"]1|z", false);
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals((-3014.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(2170.0, 0L);
      Minute minute0 = new Minute();
      // Undeclared exception!
      DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, 0.0, 97.732867, 4178, minute0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(1.5, 1469.0);
      // Undeclared exception!
      DatasetUtilities.sampleFunction2D(lineFunction2D0, (-956.88), 0.0, 1896, 0.0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockDate mockDate0 = new MockDate(770, 0, (-606), (-606), (-606), (-1513));
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1009.6, (-1505.976111), (-1505.976111), 0, 2241);
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, (OHLCDataItem[]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-663), 2503, 2503, (-535), (-535), 494);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1145.8141795867787), 1507.356, 3640.421842608, (-663), 494);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (3640.421842608) <= upper (1507.356).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LinkedList<DynamicTimeSeriesCollection> linkedList0 = new LinkedList<DynamicTimeSeriesCollection>();
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) linkedList0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      vector0.add(defaultIntervalXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) vector0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultIntervalXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("TD1/uQ!", (String) null, doubleArray0);
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      Stack<Double> stack0 = new Stack<Double>();
      stack0.add((Double) number0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) stack0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Vector<DefaultTableXYDataset> vector0 = new Vector<DefaultTableXYDataset>();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      vector0.add(defaultTableXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultTableXYDataset0, vector0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Date[] dateArray0 = new Date[3];
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[0];
      double[] doubleArray2 = new double[5];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("Av]^X3?FQzI d_uY+", dateArray0, doubleArray0, doubleArray1, doubleArray2, doubleArray2, doubleArray2);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MockDate mockDate0 = new MockDate(7, 7, (-1));
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 3494.0, (-964.29), 7, (-1), 579.2588559);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (7.0) <= upper (-964.29).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[][] doubleArray0 = new double[9][4];
      double[] doubleArray1 = new double[9];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-663), 494, (-663));
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-663), (-663), 494, (-663), 494);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = new String[4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[][] doubleArray0 = new double[9][4];
      double[] doubleArray1 = new double[6];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 1, 169);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(slidingGanttCategoryDataset0, tableOrder0, 169);
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("@b-;S}H", "@b-;S}H", doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 650);
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 650, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 255);
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Millisecond millisecond0 = new Millisecond();
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) millisecond0);
      defaultPieDataset0.insertValue(0, (Comparable) millisecond0, (Number) 0);
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to org.jfree.data.SelectableValue
         //
         verifyException("org.jfree.data.pie.DefaultPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[][] doubleArray0 = new double[6][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("5B_", (String) null, doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-1721));
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Number[][] numberArray0 = new Number[39][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-3065), 2894);
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][6];
      Number[] numberArray1 = new Number[8];
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, (-1254), 1);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0, 2229.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Comparable<DynamicTimeSeriesCollection>[] comparableArray0 = (Comparable<DynamicTimeSeriesCollection>[]) Array.newInstance(Comparable.class, 2);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray0, (Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[][] doubleArray0 = new double[9][0];
      double[] doubleArray1 = new double[3];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      Date[] dateArray0 = new Date[6];
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[4];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray1, doubleArray1);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Double double0 = new Double(1058.57);
      Stack<Double> stack0 = new Stack<Double>();
      stack0.add(double0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Week week0 = new Week(48, 494);
      timeTableXYDataset0.add((TimePeriod) week0, (double) 48, "(:@6xy#7<{[_#");
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(timeTableXYDataset0, true);
      Range range0 = intervalXYDelegate0.getDomainBounds(true);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, (List) stack0, range0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[][] doubleArray0 = new double[9][2];
      double[] doubleArray1 = new double[3];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      vector0.add(defaultIntervalXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) vector0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultIntervalXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Double double0 = new Double((-738.0));
      Stack<Double> stack0 = new Stack<Double>();
      Double double1 = new Double(Double.POSITIVE_INFINITY);
      stack0.add(double1);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.setValue((Number) double0, (Comparable) double0, (Comparable) double1);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) stack0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'visibleSeriesKeys' argument.", "`Z#", doubleArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, (-545), 14);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Number[][] numberArray0 = new Number[4][1];
      Number[] numberArray1 = new Number[3];
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[2] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("The 'data' is null.", 365, 18);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      // Undeclared exception!
      DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Number[][] numberArray0 = new Number[8][9];
      Number[] numberArray1 = new Number[6];
      numberArray0[2] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("The 'data' is null.", 3037, 2);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
      // Undeclared exception!
      DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[4];
      doubleArray0[1] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1, 349, timeZone0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double(344.329294128673);
      stack0.add(double0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.AbstractSeriesDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      LinkedList<DefaultHighLowDataset> linkedList0 = new LinkedList<DefaultHighLowDataset>();
      Week week0 = new Week();
      Date[] dateArray0 = new Date[1];
      double[] doubleArray0 = new double[9];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(week0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      linkedList0.add(defaultHighLowDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) linkedList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultHighLowDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double((-2140.1));
      stack0.add(double0);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) histogramDataset0, (List) stack0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(716, 151, timeZone0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String[] stringArray0 = new String[0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Number[][] numberArray0 = new Number[6][9];
      Number[] numberArray1 = new Number[4];
      numberArray0[2] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[][] doubleArray0 = new double[9][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("TD1/uQ!", "TD1/uQ!", doubleArray0);
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (Comparable) double0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 243);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[][] doubleArray0 = new double[9][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("(i&TfCl7({yb", "", doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (-11));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, (Comparable) 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[][] doubleArray0 = new double[3][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("K =^tGr", "K =^tGr", doubleArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 1442, 1442);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, (Comparable) 1.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1441, Size: 8
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[][] doubleArray0 = new double[4][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) 53.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, 2930);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 3684);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double(1.0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) double0, (Number) double0, (Number) double0, (Number) integer0, (Number) double0, (Number) integer0, (Number) double0, (Number) double0, (List) stack0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) fixedMillisecond0, (Comparable) fixedMillisecond0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (-2619));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double(1.0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.add(stack0, double0, double0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultMultiValueCategoryDataset0, tableOrder0, 1328);
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) double0, 3099.237, 1328);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1328, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Number[][] numberArray0 = new Number[27][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "org.jfree.data.event.DatasetChangeListener", numberArray0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-5659));
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "org.jfree.data.event.DatasetChangeListener", (double) (-5659), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Double double0 = new Double(13.0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, (-2499), 1);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(slidingCategoryDataset0, tableOrder0, 0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) double0, (double) (-125));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double(1058.0522);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.add(stack0, double0, double0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultMultiValueCategoryDataset0, tableOrder0, 281);
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) double0, 2.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 281, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) 2239.253501582, 2239.253501582);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Number[][] numberArray0 = new Number[7][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("|iLHDgFJ$nPIO.*", "|iLHDgFJ$nPIO.*", numberArray0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-3224));
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "|iLHDgFJ$nPIO.*", (double) (-3224));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Comparable<DefaultStatisticalCategoryDataset>[] comparableArray0 = (Comparable<DefaultStatisticalCategoryDataset>[]) Array.newInstance(Comparable.class, 0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("AFr]^X3t?FQIRd_uY+", "AFr]^X3t?FQIRd_uY+", (Number[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((String) null, (String) null, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Second second0 = new Second();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      defaultPieDataset0.insertValue(0, (Comparable) second0, (double) 1392409281819L);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) second0, (KeyedValues) defaultPieDataset0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to org.jfree.data.SelectableValue
         //
         verifyException("org.jfree.data.pie.DefaultPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[][] doubleArray0 = new double[11][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("S*D;HcRo>]J'F<:0&Ga", "S*D;HcRo>]J'F<:0&Ga", doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-700));
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) "S*D;HcRo>]J'F<:0&Ga", (KeyedValues) categoryToPieDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal((TableXYDataset) null, 211);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Float float0 = new Float((-2707.8455159302));
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((Number) float0, (Number) float0, ">", false);
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-2157));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[][] doubleArray0 = new double[7][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("mcyXsg:", "mcyXsg:", doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 237);
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 237, Size: 9
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Double double0 = new Double(2157.5);
      defaultStatisticalCategoryDataset0.add(2157.5, 2157.5, (Comparable) double0, (Comparable) double0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultStatisticalCategoryDataset0, tableOrder0, (-1));
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Double double0 = new Double((-676.9021725007279));
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((Number) double0, (Number) double0, "", false);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-717.15133601));
      assertNotNull(range0);
      assertEquals(676.902172500728, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Float float0 = new Float(30.0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((Number) float0, (Number) float0, "", false);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-717.15133601));
      assertEquals(30.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "WC7", false);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-2054.7038758212));
      assertEquals((-2054.7038758212), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null, (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-746.22880335709);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'visibleSeriesKeys' argument.", "", doubleArray0);
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (-3262.52194));
      assertNotNull(range0);
      assertEquals(746.2288033570899, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[9];
      doubleArray1[1] = 0.5;
      doubleArray0[1] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'visibleSeriesKeys' argument.", "", doubleArray0);
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (-3262.52194));
      assertNotNull(range0);
      assertEquals((-3262.27194), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double(1.0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.add(stack0, double0, double0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultMultiValueCategoryDataset0, (-1663), 5);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0, (double) 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double(499.6185552938047);
      stack0.add(double0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      Date date0 = Date.from(instant0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 0L, (-545.591695989455), (-4583.0419854), (-4583.0419854), 1231.214434043);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(double0, oHLCDataItemArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, stack0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double((-2943.095));
      stack0.add(double0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(double0);
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, stack0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      Stack<Double> stack0 = new Stack<Double>();
      stack0.add(double0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Week week0 = new Week();
      timeTableXYDataset0.add((TimePeriod) week0, 1.0, "Null 'seriesKey' argument.");
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1.39240928132E12) <= upper (1.392409281319E12).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(yIntervalSeriesCollection0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 6, Double.NaN, 4, 1.7976931348623157E308, 2958465);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("Requires 'samples' > 1", oHLCDataItemArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultWindDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(2, 2);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-680.129798177), 1148.7758192335264, 2, "The 'data' is null.");
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(1714218.6809747457, range0.getLength(), 0.01);
      assertEquals((-680.129798177), xYSeries0.getMinX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double(221.60242925635157);
      stack0.add(double0);
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 221.60242925635157, 221.60242925635157, (-2049), 221.60242925635157, 221.60242925635157);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.add(0.0, 221.60242925635157, (Comparable) double0, (Comparable) oHLCDataItem0);
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Double double0 = new Double(1302.5940206690082);
      Number[][] numberArray0 = new Number[1][5];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) double0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("TD1/uQ!", (String) null, doubleArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-3475.7), 634.0259925837, 758, 2413.456344396875);
      Range range0 = DatasetUtilities.findRangeBounds(xYDataset0, true);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries((Function2D) null, 807, Double.NEGATIVE_INFINITY, 807, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Integer integer0 = new Integer((-2146548740));
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      defaultPieDataset0.setValue((Comparable) integer0, (Number) integer0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) fixedMillisecond0, 10.0, (-2146548740));
      assertNotSame(pieDataset0, defaultPieDataset0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Double double0 = new Double(415.617078716019);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      defaultPieDataset0.setValue((Comparable) double0, (Number) double0);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) double0, (-346.598401), 511);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      defaultKeyedValuesDataset0.setValue((Comparable) "Null 'visibleSeriesKeys' argument.", (Number) null);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "Null 'visibleSeriesKeys' argument.", 0.0, 2);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'visibleSeriesKeys' argument.", "Null 'visibleSeriesKeys' argument.", doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 274);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 274, Size: 9
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      Month month0 = new Month(mockDate0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      Integer integer0 = new Integer(159);
      defaultPieDataset0.setValue((Comparable) month0, (Number) integer0);
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
      assertEquals(159.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      jDBCPieDataset0.setValue((Comparable) "*ZzD1@xUQ[&,LAOSG", (Number) null);
      double double0 = DatasetUtilities.calculatePieDatasetTotal(jDBCPieDataset0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Requires 'samples' > 1", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[3] = Double.NaN;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("TD1/uQ!", "", doubleArray0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultMultiValueCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Integer integer1 = new Integer(212);
      categoryTableXYDataset0.add((Number) integer1, (Number) integer1, "", true);
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "S;", false);
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals(200.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Float float0 = new Float((-830.452267368));
      categoryTableXYDataset0.add((Number) float0, (Number) float0, ">", false);
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 370);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 370, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 2);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((-1056.33691607), 1154.5246, "'position' out of bounds.");
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertEquals(1154.5246, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((Number) 1, (Number) 1, "/jId2]9", true);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, Double.NaN);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Double double0 = new Double((-440.552494));
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((Number) double0, (Number) null, "G-g6,Vtuaz@", true);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, Double.POSITIVE_INFINITY);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Float float0 = new Float((-830.452267368));
      categoryTableXYDataset0.add((Number) float0, (Number) float0, ">", false);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertEquals((-415.22613525390625), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double(1.0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) double0, (Number) double0, (Number) double0, (Number) integer0, (Number) double0, (Number) integer0, (Number) double0, (Number) double0, (List) stack0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) fixedMillisecond0, (Comparable) fixedMillisecond0);
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(1.0, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      double[][] doubleArray0 = new double[5][0];
      double[] doubleArray1 = new double[1];
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray0[3] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, ")Y}rF4", doubleArray0);
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Double double0 = new Double((-1013.7));
      Number[][] numberArray0 = new Number[1][5];
      Number[] numberArray1 = new Number[3];
      numberArray1[1] = (Number) double0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals((-1013.7), number0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      double[][] doubleArray0 = new double[10][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The`'year' argument must be in rang] 1@00 to 9999.", "The`'year' argument must be in rang] 1@00 to 9999.", doubleArray0);
      Double double0 = (Double)DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(double0, (OHLCDataItem[]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 482, Integer.MAX_VALUE);
      // Undeclared exception!
      DatasetUtilities.findMinimumStackedRangeValue(slidingGanttCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-3575), (-3575));
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Double double0 = new Double((-1.7976931348623157E308));
      Number[][] numberArray0 = new Number[7][5];
      Number[] numberArray1 = new Number[2];
      numberArray1[1] = (Number) double0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertEquals(1.7976931348623157E308, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Double double0 = new Double(1302.5940206690082);
      Number[][] numberArray0 = new Number[1][5];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) double0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Number[][] numberArray0 = new Number[7][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("LjBi", (String) null, doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap("LjBi");
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, keyToGroupMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) integer0, (KeyedValues) defaultKeyedValuesDataset0);
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 1168.3350054014);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Double double0 = new Double((-738.0));
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.setValue((Number) double0, (Comparable) double0, (Comparable) double0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertEquals((-369.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Double double0 = new Double(0.5);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.setValue((Number) double0, (Comparable) double0, (Comparable) double0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.25, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("&3/15cxs6z", "Av]^X3`?FQIRd_uY+", numberArray0);
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultWindDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      MockDate mockDate0 = new MockDate(7, 7, (-1));
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 3494.0, (-964.29), 7, (-1), 579.2588559);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Week week0 = new Week(494, 518);
      timeTableXYDataset0.add((TimePeriod) week0, (-1.0), "");
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeTableXYDataset0);
      assertEquals((-1.0), number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Double double0 = new Double((-2943.095));
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(double0);
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertFalse(number0.equals((Object)double0));
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 96, 96);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      // Undeclared exception!
      DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Number[][] numberArray0 = new Number[39][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String[] stringArray0 = new String[2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Week week0 = new Week(494, 494);
      timeTableXYDataset0.add((TimePeriod) week0, Double.NaN, "%V<B");
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeTableXYDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) xYSeriesCollection0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("The 'data' is null.", 365, 2);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[6];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      MockDate mockDate0 = new MockDate(7, 7, (-1));
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 3494.0, (-964.29), 7, (-1), 579.2588559);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertEquals((-1.9700064E12), number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      MockDate mockDate0 = new MockDate(7, 7, (-1));
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 3494.0, (-964.29), 7, (-1), 579.2588559);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(263.3, 3640.421842608);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(simpleHistogramBin0, oHLCDataItemArray0);
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1485.2316916, 23);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, 23, 3840.54, 23, " UP<F}7");
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      Number number0 = DatasetUtilities.findMaximumDomainValue(xYSeriesCollection0);
      assertEquals(23, xYSeries0.getItemCount());
      assertEquals(3841.04, number0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Number number0 = DatasetUtilities.findMinimumDomainValue(jDBCXYDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(3, (-1393));
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue(dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("The 'data' is null.", 365, 2);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double((-440.552494));
      stack0.add(double0);
      MockDate mockDate0 = new MockDate(266, (-2049), (-1254), (-1254), 266, 266);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1498.6081), (-440.552494), (-2049), (-440.552494), (-440.552494));
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultOHLCDataset0);
      Range range0 = intervalXYDelegate0.getDomainBounds(true);
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, false);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range1, false);
      assertEquals((-440.552494), range1.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double((-1.7976931348623157E308));
      stack0.add(double0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1270, 678);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) stack0, range0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double((-676.9021725007279));
      stack0.add(double0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Week week0 = new Week(494, 494);
      timeTableXYDataset0.add((TimePeriod) week0, (-1.0), "o,;bj~U6'&t! {<a");
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(timeTableXYDataset0, false);
      Range range0 = intervalXYDelegate0.getDomainBounds(true);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) stack0, range0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double((-676.9021725007279));
      stack0.add(double0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Week week0 = new Week(494, 494);
      timeTableXYDataset0.add((TimePeriod) week0, (-1.0), "o,;bj~U6'&t, {<a");
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) stack0, range0, true);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      Vector<XYBarDataset> vector0 = new Vector<XYBarDataset>();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, 2067.4003409322);
      assertNotNull(range0);
      
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) vectorSeriesCollection0, (List) vector0, range0, true);
      assertEquals(2067.4003409322, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Hour hour0 = new Hour();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(hour0);
      PriorityQueue<DefaultBoxAndWhiskerCategoryDataset> priorityQueue0 = new PriorityQueue<DefaultBoxAndWhiskerCategoryDataset>();
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>(priorityQueue0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      linkedList0.add((DefaultBoxAndWhiskerCategoryDataset) null);
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) linkedList0, range0, true);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      PriorityQueue<DefaultBoxAndWhiskerCategoryDataset> priorityQueue0 = new PriorityQueue<DefaultBoxAndWhiskerCategoryDataset>();
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>(priorityQueue0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      linkedList0.add(defaultBoxAndWhiskerCategoryDataset0);
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) linkedList0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double(342.911);
      stack0.add(double0);
      MockDate mockDate0 = new MockDate(9, 1377, 1377, 9, 2);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1453.06361972, 1377, (-6302.14688993), 9, 1453.06361972);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultOHLCDataset0);
      Range range0 = intervalXYDelegate0.getDomainBounds(true);
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, true);
      assertNotNull(range1);
      
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range1, true);
      assertEquals(1.81503732E12, range0.getCentralValue(), 0.01);
      assertEquals(7679.14688993, range1.getLength(), 0.01);
      assertEquals((-2462.573444965), range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) jDBCXYDataset0, (List) null, range0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      ArrayList<YIntervalSeriesCollection> arrayList0 = new ArrayList<YIntervalSeriesCollection>();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) null, (List) arrayList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double((-676.9021725007279));
      stack0.add(double0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Week week0 = new Week(494, 494);
      timeTableXYDataset0.add((TimePeriod) week0, (-1.0), "o,;bj~U6'&t! {<a");
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) stack0, false);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double((-676.9021725007279));
      stack0.add(double0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) stack0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Double double0 = new Double(934.534494);
      Stack<Double> stack0 = new Stack<Double>();
      stack0.add(double0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Week week0 = new Week(507, 1);
      timeTableXYDataset0.add((TimePeriod) week0, 2242.25617521118, "");
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1.39240928132E12) <= upper (1.392409281319E12).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Double double0 = new Double(0.0);
      Stack<Double> stack0 = new Stack<Double>();
      stack0.add(double0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(3, (-1393));
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, stack0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      stack0.add((Double) null);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(histogramDataset0, stack0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, arrayList0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-1.0), 1.7976931348623157E308, 2, 1019.0);
      Range range0 = DatasetUtilities.iterateRangeBounds(xYDataset0, false);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Double double0 = Double.valueOf((-681.0665624068663));
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1578.828, Double.NaN, (-2324.2952379383), 1578.828, 1578.828);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(double0, oHLCDataItemArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (-2324.2952379383) <= upper (-Infinity).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1.0), 51.0, 54.0, (-808.9543647282277), Double.NaN);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, Double.NaN, (-1.0), Double.NaN, (-1.0), (-1.0));
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      MockDate mockDate0 = new MockDate(7, 7, (-1));
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 3494.0, (-964.29), 7, (-1), 579.2588559);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (7.0) <= upper (-964.29).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2497, 180, (-1));
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, (OHLCDataItem[]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Week week0 = new Week(244, (-369));
      timeTableXYDataset0.add((TimePeriod) week0, (double) 1, "Null 'dataset' argument.");
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Week week0 = new Week(57, (-30));
      timeTableXYDataset0.add((TimePeriod) week0, Double.NaN, "");
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double(Double.NaN);
      stack0.add(double0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.setValue((Number) double0, (Comparable) double0, (Comparable) "org.jfree.data.eneral.Def{utKeyedValueDapast");
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) stack0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Double double0 = new Double((-2.147483648E9));
      Stack<Double> stack0 = new Stack<Double>();
      stack0.add(double0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      LinkedList<DefaultIntervalXYDataset> linkedList0 = new LinkedList<DefaultIntervalXYDataset>();
      defaultMultiValueCategoryDataset0.add(linkedList0, double0, double0);
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Double double0 = new Double((-931.0));
      Stack<Double> stack0 = new Stack<Double>();
      stack0.add(double0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) double0, (Comparable) integer0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) stack0, true);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Double double0 = new Double((-2242.51627916));
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.add((-462.945), Double.NaN, (Comparable) double0, (Comparable) "");
      Stack<Double> stack0 = new Stack<Double>();
      stack0.add(double0);
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertEquals((-462.945), range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Double double0 = new Double(1041.79328571634);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.add(1041.79328571634, 2361.5079532307627, (Comparable) double0, (Comparable) "k%Z3'");
      defaultStatisticalCategoryDataset0.add(1041.79328571634, 2157.5, (Comparable) "k%Z3'", (Comparable) double0);
      Stack<Double> stack0 = new Stack<Double>();
      stack0.add(double0);
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertEquals(4723.015906461525, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double(2157.5);
      defaultStatisticalCategoryDataset0.add((-1961.6430184820629), (-1961.6430184820629), (Comparable) double0, (Comparable) double0);
      stack0.add(double0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-3923.2860369641257).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double(1431655765);
      stack0.add(double0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.add(stack0, double0, double0);
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Double double0 = new Double((-4666.397385597362));
      Stack<Double> stack0 = new Stack<Double>();
      stack0.add(double0);
      Number[][] numberArray0 = new Number[2][0];
      Number[] numberArray1 = new Number[8];
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Double double0 = new Double(0L);
      Stack<Double> stack0 = new Stack<Double>();
      stack0.add(double0);
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double(2660.911641);
      stack0.add(double0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) null, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = Double.NaN;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[2];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the data array.", "TimePeriodAnchor.MIDDLE", doubleArray0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      String[] stringArray0 = new String[5];
      Number[][] numberArray0 = new Number[5][7];
      Number[] numberArray1 = new Number[2];
      numberArray1[1] = number0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Double double0 = new Double((-1.7976931348623157E308));
      Number[][] numberArray0 = new Number[7][5];
      Number[] numberArray1 = new Number[2];
      numberArray1[1] = (Number) double0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals((-1.7976931348623157E308), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Number[][] numberArray0 = new Number[7][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("TD1/uQ!", "TD1/uQ!", doubleArray0);
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, false);
      assertNotNull(range0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) null, (Range) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, (List) stack0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Double double0 = new Double(934.0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(double0);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      LinkedList<XIntervalSeriesCollection> linkedList0 = new LinkedList<XIntervalSeriesCollection>();
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, (List) linkedList0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 717, 717);
      TreeSet<Short> treeSet0 = new TreeSet<Short>();
      Vector<Short> vector0 = new Vector<Short>(treeSet0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0, (List) vector0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultWindDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(2637.037415, 2315.068605831382);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, 2315.068605831382, Double.POSITIVE_INFINITY, 2, "k%x*3]J");
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      LinkedList<DefaultHighLowDataset> linkedList0 = new LinkedList<DefaultHighLowDataset>();
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) linkedList0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      LinkedList<DynamicTimeSeriesCollection> linkedList0 = new LinkedList<DynamicTimeSeriesCollection>();
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, (List) linkedList0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(2, 2);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, 0.0, 2, 2, "");
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertEquals((-0.5), range0.getLowerBound(), 0.01);
      assertEquals(2.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Requires 'samples' > 1", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Year year0 = new Year();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("TD1/uQ!");
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, (OHLCDataItem[]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Double double0 = new Double((-738.0));
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.setValue((Number) double0, (Comparable) double0, (Comparable) double0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("&3/15cxs6z", "Av]^X3`?FQIRd_uY+", numberArray0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      double[][] doubleArray0 = new double[8][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("U-w|_I?J~|J", "&", doubleArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 1, (-341));
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      defaultKeyedValuesDataset0.setValue((Comparable) integer0, (Number) integer0);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) integer0, (KeyedValues) defaultKeyedValuesDataset0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, (-1835), 232);
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      double[][] doubleArray0 = new double[8][3];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 4004.0;
      doubleArray0[2] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("jB$u\"", "jB$u\"", doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("5B_", "5B_", doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      defaultCategoryDataset0.setValue(6.0144, (Comparable) "5B_", (Comparable) "5B_");
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, 0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Hour hour0 = new Hour();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) hour0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-2708.27926739357), (-2708.27926739357));
      Day day0 = new Day();
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-2708.27926739357), 144.376580667, (-365), day0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 9, 9, (-1), "LjBi");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(2364.8965, 2364.8965);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, 2364.8965, 2364.8965, 2, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) integer0, (KeyedValues) defaultKeyedValuesDataset0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, (-1835), 232);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-3029.712105), 0.0, false, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) simpleHistogramBin0, (KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowData' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (-417));
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) pieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Comparable<DefaultIntervalXYDataset>[] comparableArray0 = (Comparable<DefaultIntervalXYDataset>[]) Array.newInstance(Comparable.class, 1);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      comparableArray0[0] = (Comparable<DefaultIntervalXYDataset>) fixedMillisecond0;
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Comparable<Float>[] comparableArray0 = (Comparable<Float>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[2][7];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      double[][] doubleArray0 = new double[7][9];
      Comparable<SpreadsheetDate>[] comparableArray0 = (Comparable<SpreadsheetDate>[]) Array.newInstance(Comparable.class, 1);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(948L);
      Comparable<DefaultStatisticalCategoryDataset>[] comparableArray1 = (Comparable<DefaultStatisticalCategoryDataset>[]) Array.newInstance(Comparable.class, 5);
      comparableArray1[0] = (Comparable<DefaultStatisticalCategoryDataset>) fixedMillisecond0;
      comparableArray1[1] = (Comparable<DefaultStatisticalCategoryDataset>) fixedMillisecond0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'columnKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Day day0 = new Day();
      Comparable<DefaultBoxAndWhiskerCategoryDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerCategoryDataset>[]) Array.newInstance(Comparable.class, 5);
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) day0;
      comparableArray0[1] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) day0;
      double[][] doubleArray0 = new double[1][6];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'rowKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      Comparable<DefaultHighLowDataset>[] comparableArray0 = (Comparable<DefaultHighLowDataset>[]) Array.newInstance(Comparable.class, 1);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of column keys does not match the number of columns in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      double[][] doubleArray0 = new double[3][8];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Comparable<TimeTableXYDataset>[] comparableArray0 = (Comparable<TimeTableXYDataset>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][4];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'columnKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Number[][] numberArray0 = new Number[9][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("k%Z*3'J", "k%Z*3'J", numberArray0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 1090);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) "k%Z*3'J", (KeyedValues) categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1090, Size: 9
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Week week0 = new Week();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(53, 290.0825349);
      defaultKeyedValuesDataset0.setValue((Comparable) simpleHistogramBin0, (-2353.842));
      defaultKeyedValuesDataset0.setValue((Comparable) week0, (Number) 53);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) week0, (double) 53);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Double double0 = new Double(Double.NEGATIVE_INFINITY);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.setValue((Number) double0, (Comparable) double0, (Comparable) double0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, 777);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 777, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 151);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Integer integer0 = new Integer(2297);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      defaultPieDataset0.setValue((Comparable) integer0, (Number) integer0);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) integer0, (double) 2297, 2297);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Double double0 = new Double((-2943.095));
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) double0, 520.985, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("-Du3#H", "-Du3#H", doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) "-Du3#H");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2.147483648E9), Double.POSITIVE_INFINITY, 3, Double.NEGATIVE_INFINITY);
      Range range0 = DatasetUtilities.iterateDomainBounds(xYDataset0);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, (Comparable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }
}
